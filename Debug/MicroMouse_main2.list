
MicroMouse_main2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .backup_flash 00004000  08004000  08004000  00014000  2**0
                  ALLOC
  2 .backup_flash_run 000c0000  08040000  08040000  00040000  2**0
                  ALLOC
  3 .text         0000ecec  08008000  08008000  00018000  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  4 .rodata       000006c0  08016cf0  08016cf0  00026cf0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .ARM.extab    00000000  080173b0  080173b0  000301e8  2**0
                  CONTENTS
  6 .ARM          00000008  080173b0  080173b0  000273b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .preinit_array 00000000  080173b8  080173b8  000301e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  8 .init_array   00000004  080173b8  080173b8  000273b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .fini_array   00000004  080173bc  080173bc  000273bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .data         000001e8  20000000  080173c0  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          00001e60  200001e8  080175a8  000301e8  2**2
                  ALLOC
 12 ._user_heap_stack 00000600  20002048  080175a8  00032048  2**0
                  ALLOC
 13 .ARM.attributes 00000030  00000000  00000000  000301e8  2**0
                  CONTENTS, READONLY
 14 .debug_info   0002f8b0  00000000  00000000  00030218  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_abbrev 00006563  00000000  00000000  0005fac8  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_loc    0001092b  00000000  00000000  0006602b  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_aranges 000013c0  00000000  00000000  00076958  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_ranges 00002758  00000000  00000000  00077d18  2**3
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_macro  000275b3  00000000  00000000  0007a470  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .debug_line   00019035  00000000  00000000  000a1a23  2**0
                  CONTENTS, READONLY, DEBUGGING
 21 .debug_str    000ca912  00000000  00000000  000baa58  2**0
                  CONTENTS, READONLY, DEBUGGING
 22 .comment      0000007b  00000000  00000000  0018536a  2**0
                  CONTENTS, READONLY
 23 .debug_frame  000058f4  00000000  00000000  001853e8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08008000 <__do_global_dtors_aux>:
 8008000:	b510      	push	{r4, lr}
 8008002:	4c05      	ldr	r4, [pc, #20]	; (8008018 <__do_global_dtors_aux+0x18>)
 8008004:	7823      	ldrb	r3, [r4, #0]
 8008006:	b933      	cbnz	r3, 8008016 <__do_global_dtors_aux+0x16>
 8008008:	4b04      	ldr	r3, [pc, #16]	; (800801c <__do_global_dtors_aux+0x1c>)
 800800a:	b113      	cbz	r3, 8008012 <__do_global_dtors_aux+0x12>
 800800c:	4804      	ldr	r0, [pc, #16]	; (8008020 <__do_global_dtors_aux+0x20>)
 800800e:	f3af 8000 	nop.w
 8008012:	2301      	movs	r3, #1
 8008014:	7023      	strb	r3, [r4, #0]
 8008016:	bd10      	pop	{r4, pc}
 8008018:	200001e8 	.word	0x200001e8
 800801c:	00000000 	.word	0x00000000
 8008020:	08016cd4 	.word	0x08016cd4

08008024 <frame_dummy>:
 8008024:	b508      	push	{r3, lr}
 8008026:	4b03      	ldr	r3, [pc, #12]	; (8008034 <frame_dummy+0x10>)
 8008028:	b11b      	cbz	r3, 8008032 <frame_dummy+0xe>
 800802a:	4903      	ldr	r1, [pc, #12]	; (8008038 <frame_dummy+0x14>)
 800802c:	4803      	ldr	r0, [pc, #12]	; (800803c <frame_dummy+0x18>)
 800802e:	f3af 8000 	nop.w
 8008032:	bd08      	pop	{r3, pc}
 8008034:	00000000 	.word	0x00000000
 8008038:	200001ec 	.word	0x200001ec
 800803c:	08016cd4 	.word	0x08016cd4

08008040 <strlen>:
 8008040:	4603      	mov	r3, r0
 8008042:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008046:	2a00      	cmp	r2, #0
 8008048:	d1fb      	bne.n	8008042 <strlen+0x2>
 800804a:	1a18      	subs	r0, r3, r0
 800804c:	3801      	subs	r0, #1
 800804e:	4770      	bx	lr

08008050 <memchr>:
 8008050:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8008054:	2a10      	cmp	r2, #16
 8008056:	db2b      	blt.n	80080b0 <memchr+0x60>
 8008058:	f010 0f07 	tst.w	r0, #7
 800805c:	d008      	beq.n	8008070 <memchr+0x20>
 800805e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8008062:	3a01      	subs	r2, #1
 8008064:	428b      	cmp	r3, r1
 8008066:	d02d      	beq.n	80080c4 <memchr+0x74>
 8008068:	f010 0f07 	tst.w	r0, #7
 800806c:	b342      	cbz	r2, 80080c0 <memchr+0x70>
 800806e:	d1f6      	bne.n	800805e <memchr+0xe>
 8008070:	b4f0      	push	{r4, r5, r6, r7}
 8008072:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8008076:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800807a:	f022 0407 	bic.w	r4, r2, #7
 800807e:	f07f 0700 	mvns.w	r7, #0
 8008082:	2300      	movs	r3, #0
 8008084:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8008088:	3c08      	subs	r4, #8
 800808a:	ea85 0501 	eor.w	r5, r5, r1
 800808e:	ea86 0601 	eor.w	r6, r6, r1
 8008092:	fa85 f547 	uadd8	r5, r5, r7
 8008096:	faa3 f587 	sel	r5, r3, r7
 800809a:	fa86 f647 	uadd8	r6, r6, r7
 800809e:	faa5 f687 	sel	r6, r5, r7
 80080a2:	b98e      	cbnz	r6, 80080c8 <memchr+0x78>
 80080a4:	d1ee      	bne.n	8008084 <memchr+0x34>
 80080a6:	bcf0      	pop	{r4, r5, r6, r7}
 80080a8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80080ac:	f002 0207 	and.w	r2, r2, #7
 80080b0:	b132      	cbz	r2, 80080c0 <memchr+0x70>
 80080b2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80080b6:	3a01      	subs	r2, #1
 80080b8:	ea83 0301 	eor.w	r3, r3, r1
 80080bc:	b113      	cbz	r3, 80080c4 <memchr+0x74>
 80080be:	d1f8      	bne.n	80080b2 <memchr+0x62>
 80080c0:	2000      	movs	r0, #0
 80080c2:	4770      	bx	lr
 80080c4:	3801      	subs	r0, #1
 80080c6:	4770      	bx	lr
 80080c8:	2d00      	cmp	r5, #0
 80080ca:	bf06      	itte	eq
 80080cc:	4635      	moveq	r5, r6
 80080ce:	3803      	subeq	r0, #3
 80080d0:	3807      	subne	r0, #7
 80080d2:	f015 0f01 	tst.w	r5, #1
 80080d6:	d107      	bne.n	80080e8 <memchr+0x98>
 80080d8:	3001      	adds	r0, #1
 80080da:	f415 7f80 	tst.w	r5, #256	; 0x100
 80080de:	bf02      	ittt	eq
 80080e0:	3001      	addeq	r0, #1
 80080e2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80080e6:	3001      	addeq	r0, #1
 80080e8:	bcf0      	pop	{r4, r5, r6, r7}
 80080ea:	3801      	subs	r0, #1
 80080ec:	4770      	bx	lr
 80080ee:	bf00      	nop

080080f0 <__aeabi_drsub>:
 80080f0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80080f4:	e002      	b.n	80080fc <__adddf3>
 80080f6:	bf00      	nop

080080f8 <__aeabi_dsub>:
 80080f8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080080fc <__adddf3>:
 80080fc:	b530      	push	{r4, r5, lr}
 80080fe:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8008102:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8008106:	ea94 0f05 	teq	r4, r5
 800810a:	bf08      	it	eq
 800810c:	ea90 0f02 	teqeq	r0, r2
 8008110:	bf1f      	itttt	ne
 8008112:	ea54 0c00 	orrsne.w	ip, r4, r0
 8008116:	ea55 0c02 	orrsne.w	ip, r5, r2
 800811a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800811e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8008122:	f000 80e2 	beq.w	80082ea <__adddf3+0x1ee>
 8008126:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800812a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800812e:	bfb8      	it	lt
 8008130:	426d      	neglt	r5, r5
 8008132:	dd0c      	ble.n	800814e <__adddf3+0x52>
 8008134:	442c      	add	r4, r5
 8008136:	ea80 0202 	eor.w	r2, r0, r2
 800813a:	ea81 0303 	eor.w	r3, r1, r3
 800813e:	ea82 0000 	eor.w	r0, r2, r0
 8008142:	ea83 0101 	eor.w	r1, r3, r1
 8008146:	ea80 0202 	eor.w	r2, r0, r2
 800814a:	ea81 0303 	eor.w	r3, r1, r3
 800814e:	2d36      	cmp	r5, #54	; 0x36
 8008150:	bf88      	it	hi
 8008152:	bd30      	pophi	{r4, r5, pc}
 8008154:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8008158:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800815c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8008160:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8008164:	d002      	beq.n	800816c <__adddf3+0x70>
 8008166:	4240      	negs	r0, r0
 8008168:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800816c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8008170:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8008174:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8008178:	d002      	beq.n	8008180 <__adddf3+0x84>
 800817a:	4252      	negs	r2, r2
 800817c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8008180:	ea94 0f05 	teq	r4, r5
 8008184:	f000 80a7 	beq.w	80082d6 <__adddf3+0x1da>
 8008188:	f1a4 0401 	sub.w	r4, r4, #1
 800818c:	f1d5 0e20 	rsbs	lr, r5, #32
 8008190:	db0d      	blt.n	80081ae <__adddf3+0xb2>
 8008192:	fa02 fc0e 	lsl.w	ip, r2, lr
 8008196:	fa22 f205 	lsr.w	r2, r2, r5
 800819a:	1880      	adds	r0, r0, r2
 800819c:	f141 0100 	adc.w	r1, r1, #0
 80081a0:	fa03 f20e 	lsl.w	r2, r3, lr
 80081a4:	1880      	adds	r0, r0, r2
 80081a6:	fa43 f305 	asr.w	r3, r3, r5
 80081aa:	4159      	adcs	r1, r3
 80081ac:	e00e      	b.n	80081cc <__adddf3+0xd0>
 80081ae:	f1a5 0520 	sub.w	r5, r5, #32
 80081b2:	f10e 0e20 	add.w	lr, lr, #32
 80081b6:	2a01      	cmp	r2, #1
 80081b8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80081bc:	bf28      	it	cs
 80081be:	f04c 0c02 	orrcs.w	ip, ip, #2
 80081c2:	fa43 f305 	asr.w	r3, r3, r5
 80081c6:	18c0      	adds	r0, r0, r3
 80081c8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80081cc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80081d0:	d507      	bpl.n	80081e2 <__adddf3+0xe6>
 80081d2:	f04f 0e00 	mov.w	lr, #0
 80081d6:	f1dc 0c00 	rsbs	ip, ip, #0
 80081da:	eb7e 0000 	sbcs.w	r0, lr, r0
 80081de:	eb6e 0101 	sbc.w	r1, lr, r1
 80081e2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80081e6:	d31b      	bcc.n	8008220 <__adddf3+0x124>
 80081e8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80081ec:	d30c      	bcc.n	8008208 <__adddf3+0x10c>
 80081ee:	0849      	lsrs	r1, r1, #1
 80081f0:	ea5f 0030 	movs.w	r0, r0, rrx
 80081f4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80081f8:	f104 0401 	add.w	r4, r4, #1
 80081fc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8008200:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8008204:	f080 809a 	bcs.w	800833c <__adddf3+0x240>
 8008208:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800820c:	bf08      	it	eq
 800820e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8008212:	f150 0000 	adcs.w	r0, r0, #0
 8008216:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800821a:	ea41 0105 	orr.w	r1, r1, r5
 800821e:	bd30      	pop	{r4, r5, pc}
 8008220:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8008224:	4140      	adcs	r0, r0
 8008226:	eb41 0101 	adc.w	r1, r1, r1
 800822a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800822e:	f1a4 0401 	sub.w	r4, r4, #1
 8008232:	d1e9      	bne.n	8008208 <__adddf3+0x10c>
 8008234:	f091 0f00 	teq	r1, #0
 8008238:	bf04      	itt	eq
 800823a:	4601      	moveq	r1, r0
 800823c:	2000      	moveq	r0, #0
 800823e:	fab1 f381 	clz	r3, r1
 8008242:	bf08      	it	eq
 8008244:	3320      	addeq	r3, #32
 8008246:	f1a3 030b 	sub.w	r3, r3, #11
 800824a:	f1b3 0220 	subs.w	r2, r3, #32
 800824e:	da0c      	bge.n	800826a <__adddf3+0x16e>
 8008250:	320c      	adds	r2, #12
 8008252:	dd08      	ble.n	8008266 <__adddf3+0x16a>
 8008254:	f102 0c14 	add.w	ip, r2, #20
 8008258:	f1c2 020c 	rsb	r2, r2, #12
 800825c:	fa01 f00c 	lsl.w	r0, r1, ip
 8008260:	fa21 f102 	lsr.w	r1, r1, r2
 8008264:	e00c      	b.n	8008280 <__adddf3+0x184>
 8008266:	f102 0214 	add.w	r2, r2, #20
 800826a:	bfd8      	it	le
 800826c:	f1c2 0c20 	rsble	ip, r2, #32
 8008270:	fa01 f102 	lsl.w	r1, r1, r2
 8008274:	fa20 fc0c 	lsr.w	ip, r0, ip
 8008278:	bfdc      	itt	le
 800827a:	ea41 010c 	orrle.w	r1, r1, ip
 800827e:	4090      	lslle	r0, r2
 8008280:	1ae4      	subs	r4, r4, r3
 8008282:	bfa2      	ittt	ge
 8008284:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8008288:	4329      	orrge	r1, r5
 800828a:	bd30      	popge	{r4, r5, pc}
 800828c:	ea6f 0404 	mvn.w	r4, r4
 8008290:	3c1f      	subs	r4, #31
 8008292:	da1c      	bge.n	80082ce <__adddf3+0x1d2>
 8008294:	340c      	adds	r4, #12
 8008296:	dc0e      	bgt.n	80082b6 <__adddf3+0x1ba>
 8008298:	f104 0414 	add.w	r4, r4, #20
 800829c:	f1c4 0220 	rsb	r2, r4, #32
 80082a0:	fa20 f004 	lsr.w	r0, r0, r4
 80082a4:	fa01 f302 	lsl.w	r3, r1, r2
 80082a8:	ea40 0003 	orr.w	r0, r0, r3
 80082ac:	fa21 f304 	lsr.w	r3, r1, r4
 80082b0:	ea45 0103 	orr.w	r1, r5, r3
 80082b4:	bd30      	pop	{r4, r5, pc}
 80082b6:	f1c4 040c 	rsb	r4, r4, #12
 80082ba:	f1c4 0220 	rsb	r2, r4, #32
 80082be:	fa20 f002 	lsr.w	r0, r0, r2
 80082c2:	fa01 f304 	lsl.w	r3, r1, r4
 80082c6:	ea40 0003 	orr.w	r0, r0, r3
 80082ca:	4629      	mov	r1, r5
 80082cc:	bd30      	pop	{r4, r5, pc}
 80082ce:	fa21 f004 	lsr.w	r0, r1, r4
 80082d2:	4629      	mov	r1, r5
 80082d4:	bd30      	pop	{r4, r5, pc}
 80082d6:	f094 0f00 	teq	r4, #0
 80082da:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80082de:	bf06      	itte	eq
 80082e0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80082e4:	3401      	addeq	r4, #1
 80082e6:	3d01      	subne	r5, #1
 80082e8:	e74e      	b.n	8008188 <__adddf3+0x8c>
 80082ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80082ee:	bf18      	it	ne
 80082f0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80082f4:	d029      	beq.n	800834a <__adddf3+0x24e>
 80082f6:	ea94 0f05 	teq	r4, r5
 80082fa:	bf08      	it	eq
 80082fc:	ea90 0f02 	teqeq	r0, r2
 8008300:	d005      	beq.n	800830e <__adddf3+0x212>
 8008302:	ea54 0c00 	orrs.w	ip, r4, r0
 8008306:	bf04      	itt	eq
 8008308:	4619      	moveq	r1, r3
 800830a:	4610      	moveq	r0, r2
 800830c:	bd30      	pop	{r4, r5, pc}
 800830e:	ea91 0f03 	teq	r1, r3
 8008312:	bf1e      	ittt	ne
 8008314:	2100      	movne	r1, #0
 8008316:	2000      	movne	r0, #0
 8008318:	bd30      	popne	{r4, r5, pc}
 800831a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800831e:	d105      	bne.n	800832c <__adddf3+0x230>
 8008320:	0040      	lsls	r0, r0, #1
 8008322:	4149      	adcs	r1, r1
 8008324:	bf28      	it	cs
 8008326:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800832a:	bd30      	pop	{r4, r5, pc}
 800832c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8008330:	bf3c      	itt	cc
 8008332:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8008336:	bd30      	popcc	{r4, r5, pc}
 8008338:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800833c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8008340:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8008344:	f04f 0000 	mov.w	r0, #0
 8008348:	bd30      	pop	{r4, r5, pc}
 800834a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800834e:	bf1a      	itte	ne
 8008350:	4619      	movne	r1, r3
 8008352:	4610      	movne	r0, r2
 8008354:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8008358:	bf1c      	itt	ne
 800835a:	460b      	movne	r3, r1
 800835c:	4602      	movne	r2, r0
 800835e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8008362:	bf06      	itte	eq
 8008364:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8008368:	ea91 0f03 	teqeq	r1, r3
 800836c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8008370:	bd30      	pop	{r4, r5, pc}
 8008372:	bf00      	nop

08008374 <__aeabi_ui2d>:
 8008374:	f090 0f00 	teq	r0, #0
 8008378:	bf04      	itt	eq
 800837a:	2100      	moveq	r1, #0
 800837c:	4770      	bxeq	lr
 800837e:	b530      	push	{r4, r5, lr}
 8008380:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8008384:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8008388:	f04f 0500 	mov.w	r5, #0
 800838c:	f04f 0100 	mov.w	r1, #0
 8008390:	e750      	b.n	8008234 <__adddf3+0x138>
 8008392:	bf00      	nop

08008394 <__aeabi_i2d>:
 8008394:	f090 0f00 	teq	r0, #0
 8008398:	bf04      	itt	eq
 800839a:	2100      	moveq	r1, #0
 800839c:	4770      	bxeq	lr
 800839e:	b530      	push	{r4, r5, lr}
 80083a0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80083a4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80083a8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80083ac:	bf48      	it	mi
 80083ae:	4240      	negmi	r0, r0
 80083b0:	f04f 0100 	mov.w	r1, #0
 80083b4:	e73e      	b.n	8008234 <__adddf3+0x138>
 80083b6:	bf00      	nop

080083b8 <__aeabi_f2d>:
 80083b8:	0042      	lsls	r2, r0, #1
 80083ba:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80083be:	ea4f 0131 	mov.w	r1, r1, rrx
 80083c2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80083c6:	bf1f      	itttt	ne
 80083c8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80083cc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80083d0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80083d4:	4770      	bxne	lr
 80083d6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80083da:	bf08      	it	eq
 80083dc:	4770      	bxeq	lr
 80083de:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80083e2:	bf04      	itt	eq
 80083e4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80083e8:	4770      	bxeq	lr
 80083ea:	b530      	push	{r4, r5, lr}
 80083ec:	f44f 7460 	mov.w	r4, #896	; 0x380
 80083f0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80083f4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80083f8:	e71c      	b.n	8008234 <__adddf3+0x138>
 80083fa:	bf00      	nop

080083fc <__aeabi_ul2d>:
 80083fc:	ea50 0201 	orrs.w	r2, r0, r1
 8008400:	bf08      	it	eq
 8008402:	4770      	bxeq	lr
 8008404:	b530      	push	{r4, r5, lr}
 8008406:	f04f 0500 	mov.w	r5, #0
 800840a:	e00a      	b.n	8008422 <__aeabi_l2d+0x16>

0800840c <__aeabi_l2d>:
 800840c:	ea50 0201 	orrs.w	r2, r0, r1
 8008410:	bf08      	it	eq
 8008412:	4770      	bxeq	lr
 8008414:	b530      	push	{r4, r5, lr}
 8008416:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800841a:	d502      	bpl.n	8008422 <__aeabi_l2d+0x16>
 800841c:	4240      	negs	r0, r0
 800841e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8008422:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8008426:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800842a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800842e:	f43f aed8 	beq.w	80081e2 <__adddf3+0xe6>
 8008432:	f04f 0203 	mov.w	r2, #3
 8008436:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800843a:	bf18      	it	ne
 800843c:	3203      	addne	r2, #3
 800843e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8008442:	bf18      	it	ne
 8008444:	3203      	addne	r2, #3
 8008446:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800844a:	f1c2 0320 	rsb	r3, r2, #32
 800844e:	fa00 fc03 	lsl.w	ip, r0, r3
 8008452:	fa20 f002 	lsr.w	r0, r0, r2
 8008456:	fa01 fe03 	lsl.w	lr, r1, r3
 800845a:	ea40 000e 	orr.w	r0, r0, lr
 800845e:	fa21 f102 	lsr.w	r1, r1, r2
 8008462:	4414      	add	r4, r2
 8008464:	e6bd      	b.n	80081e2 <__adddf3+0xe6>
 8008466:	bf00      	nop

08008468 <__aeabi_dmul>:
 8008468:	b570      	push	{r4, r5, r6, lr}
 800846a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800846e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8008472:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8008476:	bf1d      	ittte	ne
 8008478:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800847c:	ea94 0f0c 	teqne	r4, ip
 8008480:	ea95 0f0c 	teqne	r5, ip
 8008484:	f000 f8de 	bleq	8008644 <__aeabi_dmul+0x1dc>
 8008488:	442c      	add	r4, r5
 800848a:	ea81 0603 	eor.w	r6, r1, r3
 800848e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8008492:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8008496:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800849a:	bf18      	it	ne
 800849c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80084a0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80084a4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80084a8:	d038      	beq.n	800851c <__aeabi_dmul+0xb4>
 80084aa:	fba0 ce02 	umull	ip, lr, r0, r2
 80084ae:	f04f 0500 	mov.w	r5, #0
 80084b2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80084b6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80084ba:	fbe0 e503 	umlal	lr, r5, r0, r3
 80084be:	f04f 0600 	mov.w	r6, #0
 80084c2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80084c6:	f09c 0f00 	teq	ip, #0
 80084ca:	bf18      	it	ne
 80084cc:	f04e 0e01 	orrne.w	lr, lr, #1
 80084d0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80084d4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80084d8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80084dc:	d204      	bcs.n	80084e8 <__aeabi_dmul+0x80>
 80084de:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80084e2:	416d      	adcs	r5, r5
 80084e4:	eb46 0606 	adc.w	r6, r6, r6
 80084e8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80084ec:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80084f0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80084f4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80084f8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80084fc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8008500:	bf88      	it	hi
 8008502:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8008506:	d81e      	bhi.n	8008546 <__aeabi_dmul+0xde>
 8008508:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800850c:	bf08      	it	eq
 800850e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8008512:	f150 0000 	adcs.w	r0, r0, #0
 8008516:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800851a:	bd70      	pop	{r4, r5, r6, pc}
 800851c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8008520:	ea46 0101 	orr.w	r1, r6, r1
 8008524:	ea40 0002 	orr.w	r0, r0, r2
 8008528:	ea81 0103 	eor.w	r1, r1, r3
 800852c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8008530:	bfc2      	ittt	gt
 8008532:	ebd4 050c 	rsbsgt	r5, r4, ip
 8008536:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800853a:	bd70      	popgt	{r4, r5, r6, pc}
 800853c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8008540:	f04f 0e00 	mov.w	lr, #0
 8008544:	3c01      	subs	r4, #1
 8008546:	f300 80ab 	bgt.w	80086a0 <__aeabi_dmul+0x238>
 800854a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800854e:	bfde      	ittt	le
 8008550:	2000      	movle	r0, #0
 8008552:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8008556:	bd70      	pople	{r4, r5, r6, pc}
 8008558:	f1c4 0400 	rsb	r4, r4, #0
 800855c:	3c20      	subs	r4, #32
 800855e:	da35      	bge.n	80085cc <__aeabi_dmul+0x164>
 8008560:	340c      	adds	r4, #12
 8008562:	dc1b      	bgt.n	800859c <__aeabi_dmul+0x134>
 8008564:	f104 0414 	add.w	r4, r4, #20
 8008568:	f1c4 0520 	rsb	r5, r4, #32
 800856c:	fa00 f305 	lsl.w	r3, r0, r5
 8008570:	fa20 f004 	lsr.w	r0, r0, r4
 8008574:	fa01 f205 	lsl.w	r2, r1, r5
 8008578:	ea40 0002 	orr.w	r0, r0, r2
 800857c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8008580:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8008584:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8008588:	fa21 f604 	lsr.w	r6, r1, r4
 800858c:	eb42 0106 	adc.w	r1, r2, r6
 8008590:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8008594:	bf08      	it	eq
 8008596:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800859a:	bd70      	pop	{r4, r5, r6, pc}
 800859c:	f1c4 040c 	rsb	r4, r4, #12
 80085a0:	f1c4 0520 	rsb	r5, r4, #32
 80085a4:	fa00 f304 	lsl.w	r3, r0, r4
 80085a8:	fa20 f005 	lsr.w	r0, r0, r5
 80085ac:	fa01 f204 	lsl.w	r2, r1, r4
 80085b0:	ea40 0002 	orr.w	r0, r0, r2
 80085b4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80085b8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80085bc:	f141 0100 	adc.w	r1, r1, #0
 80085c0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80085c4:	bf08      	it	eq
 80085c6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80085ca:	bd70      	pop	{r4, r5, r6, pc}
 80085cc:	f1c4 0520 	rsb	r5, r4, #32
 80085d0:	fa00 f205 	lsl.w	r2, r0, r5
 80085d4:	ea4e 0e02 	orr.w	lr, lr, r2
 80085d8:	fa20 f304 	lsr.w	r3, r0, r4
 80085dc:	fa01 f205 	lsl.w	r2, r1, r5
 80085e0:	ea43 0302 	orr.w	r3, r3, r2
 80085e4:	fa21 f004 	lsr.w	r0, r1, r4
 80085e8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80085ec:	fa21 f204 	lsr.w	r2, r1, r4
 80085f0:	ea20 0002 	bic.w	r0, r0, r2
 80085f4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80085f8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80085fc:	bf08      	it	eq
 80085fe:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8008602:	bd70      	pop	{r4, r5, r6, pc}
 8008604:	f094 0f00 	teq	r4, #0
 8008608:	d10f      	bne.n	800862a <__aeabi_dmul+0x1c2>
 800860a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800860e:	0040      	lsls	r0, r0, #1
 8008610:	eb41 0101 	adc.w	r1, r1, r1
 8008614:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8008618:	bf08      	it	eq
 800861a:	3c01      	subeq	r4, #1
 800861c:	d0f7      	beq.n	800860e <__aeabi_dmul+0x1a6>
 800861e:	ea41 0106 	orr.w	r1, r1, r6
 8008622:	f095 0f00 	teq	r5, #0
 8008626:	bf18      	it	ne
 8008628:	4770      	bxne	lr
 800862a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800862e:	0052      	lsls	r2, r2, #1
 8008630:	eb43 0303 	adc.w	r3, r3, r3
 8008634:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8008638:	bf08      	it	eq
 800863a:	3d01      	subeq	r5, #1
 800863c:	d0f7      	beq.n	800862e <__aeabi_dmul+0x1c6>
 800863e:	ea43 0306 	orr.w	r3, r3, r6
 8008642:	4770      	bx	lr
 8008644:	ea94 0f0c 	teq	r4, ip
 8008648:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800864c:	bf18      	it	ne
 800864e:	ea95 0f0c 	teqne	r5, ip
 8008652:	d00c      	beq.n	800866e <__aeabi_dmul+0x206>
 8008654:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8008658:	bf18      	it	ne
 800865a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800865e:	d1d1      	bne.n	8008604 <__aeabi_dmul+0x19c>
 8008660:	ea81 0103 	eor.w	r1, r1, r3
 8008664:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8008668:	f04f 0000 	mov.w	r0, #0
 800866c:	bd70      	pop	{r4, r5, r6, pc}
 800866e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8008672:	bf06      	itte	eq
 8008674:	4610      	moveq	r0, r2
 8008676:	4619      	moveq	r1, r3
 8008678:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800867c:	d019      	beq.n	80086b2 <__aeabi_dmul+0x24a>
 800867e:	ea94 0f0c 	teq	r4, ip
 8008682:	d102      	bne.n	800868a <__aeabi_dmul+0x222>
 8008684:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8008688:	d113      	bne.n	80086b2 <__aeabi_dmul+0x24a>
 800868a:	ea95 0f0c 	teq	r5, ip
 800868e:	d105      	bne.n	800869c <__aeabi_dmul+0x234>
 8008690:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8008694:	bf1c      	itt	ne
 8008696:	4610      	movne	r0, r2
 8008698:	4619      	movne	r1, r3
 800869a:	d10a      	bne.n	80086b2 <__aeabi_dmul+0x24a>
 800869c:	ea81 0103 	eor.w	r1, r1, r3
 80086a0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80086a4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80086a8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80086ac:	f04f 0000 	mov.w	r0, #0
 80086b0:	bd70      	pop	{r4, r5, r6, pc}
 80086b2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80086b6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80086ba:	bd70      	pop	{r4, r5, r6, pc}

080086bc <__aeabi_ddiv>:
 80086bc:	b570      	push	{r4, r5, r6, lr}
 80086be:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80086c2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80086c6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80086ca:	bf1d      	ittte	ne
 80086cc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80086d0:	ea94 0f0c 	teqne	r4, ip
 80086d4:	ea95 0f0c 	teqne	r5, ip
 80086d8:	f000 f8a7 	bleq	800882a <__aeabi_ddiv+0x16e>
 80086dc:	eba4 0405 	sub.w	r4, r4, r5
 80086e0:	ea81 0e03 	eor.w	lr, r1, r3
 80086e4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80086e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80086ec:	f000 8088 	beq.w	8008800 <__aeabi_ddiv+0x144>
 80086f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80086f4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80086f8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80086fc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8008700:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8008704:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8008708:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800870c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8008710:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8008714:	429d      	cmp	r5, r3
 8008716:	bf08      	it	eq
 8008718:	4296      	cmpeq	r6, r2
 800871a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800871e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8008722:	d202      	bcs.n	800872a <__aeabi_ddiv+0x6e>
 8008724:	085b      	lsrs	r3, r3, #1
 8008726:	ea4f 0232 	mov.w	r2, r2, rrx
 800872a:	1ab6      	subs	r6, r6, r2
 800872c:	eb65 0503 	sbc.w	r5, r5, r3
 8008730:	085b      	lsrs	r3, r3, #1
 8008732:	ea4f 0232 	mov.w	r2, r2, rrx
 8008736:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800873a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800873e:	ebb6 0e02 	subs.w	lr, r6, r2
 8008742:	eb75 0e03 	sbcs.w	lr, r5, r3
 8008746:	bf22      	ittt	cs
 8008748:	1ab6      	subcs	r6, r6, r2
 800874a:	4675      	movcs	r5, lr
 800874c:	ea40 000c 	orrcs.w	r0, r0, ip
 8008750:	085b      	lsrs	r3, r3, #1
 8008752:	ea4f 0232 	mov.w	r2, r2, rrx
 8008756:	ebb6 0e02 	subs.w	lr, r6, r2
 800875a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800875e:	bf22      	ittt	cs
 8008760:	1ab6      	subcs	r6, r6, r2
 8008762:	4675      	movcs	r5, lr
 8008764:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8008768:	085b      	lsrs	r3, r3, #1
 800876a:	ea4f 0232 	mov.w	r2, r2, rrx
 800876e:	ebb6 0e02 	subs.w	lr, r6, r2
 8008772:	eb75 0e03 	sbcs.w	lr, r5, r3
 8008776:	bf22      	ittt	cs
 8008778:	1ab6      	subcs	r6, r6, r2
 800877a:	4675      	movcs	r5, lr
 800877c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8008780:	085b      	lsrs	r3, r3, #1
 8008782:	ea4f 0232 	mov.w	r2, r2, rrx
 8008786:	ebb6 0e02 	subs.w	lr, r6, r2
 800878a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800878e:	bf22      	ittt	cs
 8008790:	1ab6      	subcs	r6, r6, r2
 8008792:	4675      	movcs	r5, lr
 8008794:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8008798:	ea55 0e06 	orrs.w	lr, r5, r6
 800879c:	d018      	beq.n	80087d0 <__aeabi_ddiv+0x114>
 800879e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80087a2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80087a6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80087aa:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80087ae:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80087b2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80087b6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80087ba:	d1c0      	bne.n	800873e <__aeabi_ddiv+0x82>
 80087bc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80087c0:	d10b      	bne.n	80087da <__aeabi_ddiv+0x11e>
 80087c2:	ea41 0100 	orr.w	r1, r1, r0
 80087c6:	f04f 0000 	mov.w	r0, #0
 80087ca:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80087ce:	e7b6      	b.n	800873e <__aeabi_ddiv+0x82>
 80087d0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80087d4:	bf04      	itt	eq
 80087d6:	4301      	orreq	r1, r0
 80087d8:	2000      	moveq	r0, #0
 80087da:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80087de:	bf88      	it	hi
 80087e0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80087e4:	f63f aeaf 	bhi.w	8008546 <__aeabi_dmul+0xde>
 80087e8:	ebb5 0c03 	subs.w	ip, r5, r3
 80087ec:	bf04      	itt	eq
 80087ee:	ebb6 0c02 	subseq.w	ip, r6, r2
 80087f2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80087f6:	f150 0000 	adcs.w	r0, r0, #0
 80087fa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80087fe:	bd70      	pop	{r4, r5, r6, pc}
 8008800:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8008804:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8008808:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800880c:	bfc2      	ittt	gt
 800880e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8008812:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8008816:	bd70      	popgt	{r4, r5, r6, pc}
 8008818:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800881c:	f04f 0e00 	mov.w	lr, #0
 8008820:	3c01      	subs	r4, #1
 8008822:	e690      	b.n	8008546 <__aeabi_dmul+0xde>
 8008824:	ea45 0e06 	orr.w	lr, r5, r6
 8008828:	e68d      	b.n	8008546 <__aeabi_dmul+0xde>
 800882a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800882e:	ea94 0f0c 	teq	r4, ip
 8008832:	bf08      	it	eq
 8008834:	ea95 0f0c 	teqeq	r5, ip
 8008838:	f43f af3b 	beq.w	80086b2 <__aeabi_dmul+0x24a>
 800883c:	ea94 0f0c 	teq	r4, ip
 8008840:	d10a      	bne.n	8008858 <__aeabi_ddiv+0x19c>
 8008842:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8008846:	f47f af34 	bne.w	80086b2 <__aeabi_dmul+0x24a>
 800884a:	ea95 0f0c 	teq	r5, ip
 800884e:	f47f af25 	bne.w	800869c <__aeabi_dmul+0x234>
 8008852:	4610      	mov	r0, r2
 8008854:	4619      	mov	r1, r3
 8008856:	e72c      	b.n	80086b2 <__aeabi_dmul+0x24a>
 8008858:	ea95 0f0c 	teq	r5, ip
 800885c:	d106      	bne.n	800886c <__aeabi_ddiv+0x1b0>
 800885e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8008862:	f43f aefd 	beq.w	8008660 <__aeabi_dmul+0x1f8>
 8008866:	4610      	mov	r0, r2
 8008868:	4619      	mov	r1, r3
 800886a:	e722      	b.n	80086b2 <__aeabi_dmul+0x24a>
 800886c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8008870:	bf18      	it	ne
 8008872:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8008876:	f47f aec5 	bne.w	8008604 <__aeabi_dmul+0x19c>
 800887a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800887e:	f47f af0d 	bne.w	800869c <__aeabi_dmul+0x234>
 8008882:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8008886:	f47f aeeb 	bne.w	8008660 <__aeabi_dmul+0x1f8>
 800888a:	e712      	b.n	80086b2 <__aeabi_dmul+0x24a>

0800888c <__gedf2>:
 800888c:	f04f 3cff 	mov.w	ip, #4294967295
 8008890:	e006      	b.n	80088a0 <__cmpdf2+0x4>
 8008892:	bf00      	nop

08008894 <__ledf2>:
 8008894:	f04f 0c01 	mov.w	ip, #1
 8008898:	e002      	b.n	80088a0 <__cmpdf2+0x4>
 800889a:	bf00      	nop

0800889c <__cmpdf2>:
 800889c:	f04f 0c01 	mov.w	ip, #1
 80088a0:	f84d cd04 	str.w	ip, [sp, #-4]!
 80088a4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80088a8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80088ac:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80088b0:	bf18      	it	ne
 80088b2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80088b6:	d01b      	beq.n	80088f0 <__cmpdf2+0x54>
 80088b8:	b001      	add	sp, #4
 80088ba:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80088be:	bf0c      	ite	eq
 80088c0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80088c4:	ea91 0f03 	teqne	r1, r3
 80088c8:	bf02      	ittt	eq
 80088ca:	ea90 0f02 	teqeq	r0, r2
 80088ce:	2000      	moveq	r0, #0
 80088d0:	4770      	bxeq	lr
 80088d2:	f110 0f00 	cmn.w	r0, #0
 80088d6:	ea91 0f03 	teq	r1, r3
 80088da:	bf58      	it	pl
 80088dc:	4299      	cmppl	r1, r3
 80088de:	bf08      	it	eq
 80088e0:	4290      	cmpeq	r0, r2
 80088e2:	bf2c      	ite	cs
 80088e4:	17d8      	asrcs	r0, r3, #31
 80088e6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80088ea:	f040 0001 	orr.w	r0, r0, #1
 80088ee:	4770      	bx	lr
 80088f0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80088f4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80088f8:	d102      	bne.n	8008900 <__cmpdf2+0x64>
 80088fa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80088fe:	d107      	bne.n	8008910 <__cmpdf2+0x74>
 8008900:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8008904:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8008908:	d1d6      	bne.n	80088b8 <__cmpdf2+0x1c>
 800890a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800890e:	d0d3      	beq.n	80088b8 <__cmpdf2+0x1c>
 8008910:	f85d 0b04 	ldr.w	r0, [sp], #4
 8008914:	4770      	bx	lr
 8008916:	bf00      	nop

08008918 <__aeabi_cdrcmple>:
 8008918:	4684      	mov	ip, r0
 800891a:	4610      	mov	r0, r2
 800891c:	4662      	mov	r2, ip
 800891e:	468c      	mov	ip, r1
 8008920:	4619      	mov	r1, r3
 8008922:	4663      	mov	r3, ip
 8008924:	e000      	b.n	8008928 <__aeabi_cdcmpeq>
 8008926:	bf00      	nop

08008928 <__aeabi_cdcmpeq>:
 8008928:	b501      	push	{r0, lr}
 800892a:	f7ff ffb7 	bl	800889c <__cmpdf2>
 800892e:	2800      	cmp	r0, #0
 8008930:	bf48      	it	mi
 8008932:	f110 0f00 	cmnmi.w	r0, #0
 8008936:	bd01      	pop	{r0, pc}

08008938 <__aeabi_dcmpeq>:
 8008938:	f84d ed08 	str.w	lr, [sp, #-8]!
 800893c:	f7ff fff4 	bl	8008928 <__aeabi_cdcmpeq>
 8008940:	bf0c      	ite	eq
 8008942:	2001      	moveq	r0, #1
 8008944:	2000      	movne	r0, #0
 8008946:	f85d fb08 	ldr.w	pc, [sp], #8
 800894a:	bf00      	nop

0800894c <__aeabi_dcmplt>:
 800894c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8008950:	f7ff ffea 	bl	8008928 <__aeabi_cdcmpeq>
 8008954:	bf34      	ite	cc
 8008956:	2001      	movcc	r0, #1
 8008958:	2000      	movcs	r0, #0
 800895a:	f85d fb08 	ldr.w	pc, [sp], #8
 800895e:	bf00      	nop

08008960 <__aeabi_dcmple>:
 8008960:	f84d ed08 	str.w	lr, [sp, #-8]!
 8008964:	f7ff ffe0 	bl	8008928 <__aeabi_cdcmpeq>
 8008968:	bf94      	ite	ls
 800896a:	2001      	movls	r0, #1
 800896c:	2000      	movhi	r0, #0
 800896e:	f85d fb08 	ldr.w	pc, [sp], #8
 8008972:	bf00      	nop

08008974 <__aeabi_dcmpge>:
 8008974:	f84d ed08 	str.w	lr, [sp, #-8]!
 8008978:	f7ff ffce 	bl	8008918 <__aeabi_cdrcmple>
 800897c:	bf94      	ite	ls
 800897e:	2001      	movls	r0, #1
 8008980:	2000      	movhi	r0, #0
 8008982:	f85d fb08 	ldr.w	pc, [sp], #8
 8008986:	bf00      	nop

08008988 <__aeabi_dcmpgt>:
 8008988:	f84d ed08 	str.w	lr, [sp, #-8]!
 800898c:	f7ff ffc4 	bl	8008918 <__aeabi_cdrcmple>
 8008990:	bf34      	ite	cc
 8008992:	2001      	movcc	r0, #1
 8008994:	2000      	movcs	r0, #0
 8008996:	f85d fb08 	ldr.w	pc, [sp], #8
 800899a:	bf00      	nop

0800899c <__aeabi_dcmpun>:
 800899c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80089a0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80089a4:	d102      	bne.n	80089ac <__aeabi_dcmpun+0x10>
 80089a6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80089aa:	d10a      	bne.n	80089c2 <__aeabi_dcmpun+0x26>
 80089ac:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80089b0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80089b4:	d102      	bne.n	80089bc <__aeabi_dcmpun+0x20>
 80089b6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80089ba:	d102      	bne.n	80089c2 <__aeabi_dcmpun+0x26>
 80089bc:	f04f 0000 	mov.w	r0, #0
 80089c0:	4770      	bx	lr
 80089c2:	f04f 0001 	mov.w	r0, #1
 80089c6:	4770      	bx	lr

080089c8 <__aeabi_d2iz>:
 80089c8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80089cc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80089d0:	d215      	bcs.n	80089fe <__aeabi_d2iz+0x36>
 80089d2:	d511      	bpl.n	80089f8 <__aeabi_d2iz+0x30>
 80089d4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80089d8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80089dc:	d912      	bls.n	8008a04 <__aeabi_d2iz+0x3c>
 80089de:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80089e2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80089e6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80089ea:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80089ee:	fa23 f002 	lsr.w	r0, r3, r2
 80089f2:	bf18      	it	ne
 80089f4:	4240      	negne	r0, r0
 80089f6:	4770      	bx	lr
 80089f8:	f04f 0000 	mov.w	r0, #0
 80089fc:	4770      	bx	lr
 80089fe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8008a02:	d105      	bne.n	8008a10 <__aeabi_d2iz+0x48>
 8008a04:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8008a08:	bf08      	it	eq
 8008a0a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8008a0e:	4770      	bx	lr
 8008a10:	f04f 0000 	mov.w	r0, #0
 8008a14:	4770      	bx	lr
 8008a16:	bf00      	nop

08008a18 <__aeabi_d2uiz>:
 8008a18:	004a      	lsls	r2, r1, #1
 8008a1a:	d211      	bcs.n	8008a40 <__aeabi_d2uiz+0x28>
 8008a1c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8008a20:	d211      	bcs.n	8008a46 <__aeabi_d2uiz+0x2e>
 8008a22:	d50d      	bpl.n	8008a40 <__aeabi_d2uiz+0x28>
 8008a24:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8008a28:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8008a2c:	d40e      	bmi.n	8008a4c <__aeabi_d2uiz+0x34>
 8008a2e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8008a32:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008a36:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8008a3a:	fa23 f002 	lsr.w	r0, r3, r2
 8008a3e:	4770      	bx	lr
 8008a40:	f04f 0000 	mov.w	r0, #0
 8008a44:	4770      	bx	lr
 8008a46:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8008a4a:	d102      	bne.n	8008a52 <__aeabi_d2uiz+0x3a>
 8008a4c:	f04f 30ff 	mov.w	r0, #4294967295
 8008a50:	4770      	bx	lr
 8008a52:	f04f 0000 	mov.w	r0, #0
 8008a56:	4770      	bx	lr

08008a58 <__aeabi_d2f>:
 8008a58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8008a5c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8008a60:	bf24      	itt	cs
 8008a62:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8008a66:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8008a6a:	d90d      	bls.n	8008a88 <__aeabi_d2f+0x30>
 8008a6c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8008a70:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8008a74:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8008a78:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8008a7c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8008a80:	bf08      	it	eq
 8008a82:	f020 0001 	biceq.w	r0, r0, #1
 8008a86:	4770      	bx	lr
 8008a88:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8008a8c:	d121      	bne.n	8008ad2 <__aeabi_d2f+0x7a>
 8008a8e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8008a92:	bfbc      	itt	lt
 8008a94:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8008a98:	4770      	bxlt	lr
 8008a9a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8008a9e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8008aa2:	f1c2 0218 	rsb	r2, r2, #24
 8008aa6:	f1c2 0c20 	rsb	ip, r2, #32
 8008aaa:	fa10 f30c 	lsls.w	r3, r0, ip
 8008aae:	fa20 f002 	lsr.w	r0, r0, r2
 8008ab2:	bf18      	it	ne
 8008ab4:	f040 0001 	orrne.w	r0, r0, #1
 8008ab8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8008abc:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8008ac0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8008ac4:	ea40 000c 	orr.w	r0, r0, ip
 8008ac8:	fa23 f302 	lsr.w	r3, r3, r2
 8008acc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8008ad0:	e7cc      	b.n	8008a6c <__aeabi_d2f+0x14>
 8008ad2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8008ad6:	d107      	bne.n	8008ae8 <__aeabi_d2f+0x90>
 8008ad8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8008adc:	bf1e      	ittt	ne
 8008ade:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8008ae2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8008ae6:	4770      	bxne	lr
 8008ae8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8008aec:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8008af0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8008af4:	4770      	bx	lr
 8008af6:	bf00      	nop

08008af8 <__aeabi_uldivmod>:
 8008af8:	b953      	cbnz	r3, 8008b10 <__aeabi_uldivmod+0x18>
 8008afa:	b94a      	cbnz	r2, 8008b10 <__aeabi_uldivmod+0x18>
 8008afc:	2900      	cmp	r1, #0
 8008afe:	bf08      	it	eq
 8008b00:	2800      	cmpeq	r0, #0
 8008b02:	bf1c      	itt	ne
 8008b04:	f04f 31ff 	movne.w	r1, #4294967295
 8008b08:	f04f 30ff 	movne.w	r0, #4294967295
 8008b0c:	f000 b972 	b.w	8008df4 <__aeabi_idiv0>
 8008b10:	f1ad 0c08 	sub.w	ip, sp, #8
 8008b14:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8008b18:	f000 f806 	bl	8008b28 <__udivmoddi4>
 8008b1c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8008b20:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008b24:	b004      	add	sp, #16
 8008b26:	4770      	bx	lr

08008b28 <__udivmoddi4>:
 8008b28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008b2c:	9e08      	ldr	r6, [sp, #32]
 8008b2e:	4604      	mov	r4, r0
 8008b30:	4688      	mov	r8, r1
 8008b32:	2b00      	cmp	r3, #0
 8008b34:	d14b      	bne.n	8008bce <__udivmoddi4+0xa6>
 8008b36:	428a      	cmp	r2, r1
 8008b38:	4615      	mov	r5, r2
 8008b3a:	d967      	bls.n	8008c0c <__udivmoddi4+0xe4>
 8008b3c:	fab2 f282 	clz	r2, r2
 8008b40:	b14a      	cbz	r2, 8008b56 <__udivmoddi4+0x2e>
 8008b42:	f1c2 0720 	rsb	r7, r2, #32
 8008b46:	fa01 f302 	lsl.w	r3, r1, r2
 8008b4a:	fa20 f707 	lsr.w	r7, r0, r7
 8008b4e:	4095      	lsls	r5, r2
 8008b50:	ea47 0803 	orr.w	r8, r7, r3
 8008b54:	4094      	lsls	r4, r2
 8008b56:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8008b5a:	0c23      	lsrs	r3, r4, #16
 8008b5c:	fbb8 f7fe 	udiv	r7, r8, lr
 8008b60:	fa1f fc85 	uxth.w	ip, r5
 8008b64:	fb0e 8817 	mls	r8, lr, r7, r8
 8008b68:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8008b6c:	fb07 f10c 	mul.w	r1, r7, ip
 8008b70:	4299      	cmp	r1, r3
 8008b72:	d909      	bls.n	8008b88 <__udivmoddi4+0x60>
 8008b74:	18eb      	adds	r3, r5, r3
 8008b76:	f107 30ff 	add.w	r0, r7, #4294967295
 8008b7a:	f080 811b 	bcs.w	8008db4 <__udivmoddi4+0x28c>
 8008b7e:	4299      	cmp	r1, r3
 8008b80:	f240 8118 	bls.w	8008db4 <__udivmoddi4+0x28c>
 8008b84:	3f02      	subs	r7, #2
 8008b86:	442b      	add	r3, r5
 8008b88:	1a5b      	subs	r3, r3, r1
 8008b8a:	b2a4      	uxth	r4, r4
 8008b8c:	fbb3 f0fe 	udiv	r0, r3, lr
 8008b90:	fb0e 3310 	mls	r3, lr, r0, r3
 8008b94:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8008b98:	fb00 fc0c 	mul.w	ip, r0, ip
 8008b9c:	45a4      	cmp	ip, r4
 8008b9e:	d909      	bls.n	8008bb4 <__udivmoddi4+0x8c>
 8008ba0:	192c      	adds	r4, r5, r4
 8008ba2:	f100 33ff 	add.w	r3, r0, #4294967295
 8008ba6:	f080 8107 	bcs.w	8008db8 <__udivmoddi4+0x290>
 8008baa:	45a4      	cmp	ip, r4
 8008bac:	f240 8104 	bls.w	8008db8 <__udivmoddi4+0x290>
 8008bb0:	3802      	subs	r0, #2
 8008bb2:	442c      	add	r4, r5
 8008bb4:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8008bb8:	eba4 040c 	sub.w	r4, r4, ip
 8008bbc:	2700      	movs	r7, #0
 8008bbe:	b11e      	cbz	r6, 8008bc8 <__udivmoddi4+0xa0>
 8008bc0:	40d4      	lsrs	r4, r2
 8008bc2:	2300      	movs	r3, #0
 8008bc4:	e9c6 4300 	strd	r4, r3, [r6]
 8008bc8:	4639      	mov	r1, r7
 8008bca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008bce:	428b      	cmp	r3, r1
 8008bd0:	d909      	bls.n	8008be6 <__udivmoddi4+0xbe>
 8008bd2:	2e00      	cmp	r6, #0
 8008bd4:	f000 80eb 	beq.w	8008dae <__udivmoddi4+0x286>
 8008bd8:	2700      	movs	r7, #0
 8008bda:	e9c6 0100 	strd	r0, r1, [r6]
 8008bde:	4638      	mov	r0, r7
 8008be0:	4639      	mov	r1, r7
 8008be2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008be6:	fab3 f783 	clz	r7, r3
 8008bea:	2f00      	cmp	r7, #0
 8008bec:	d147      	bne.n	8008c7e <__udivmoddi4+0x156>
 8008bee:	428b      	cmp	r3, r1
 8008bf0:	d302      	bcc.n	8008bf8 <__udivmoddi4+0xd0>
 8008bf2:	4282      	cmp	r2, r0
 8008bf4:	f200 80fa 	bhi.w	8008dec <__udivmoddi4+0x2c4>
 8008bf8:	1a84      	subs	r4, r0, r2
 8008bfa:	eb61 0303 	sbc.w	r3, r1, r3
 8008bfe:	2001      	movs	r0, #1
 8008c00:	4698      	mov	r8, r3
 8008c02:	2e00      	cmp	r6, #0
 8008c04:	d0e0      	beq.n	8008bc8 <__udivmoddi4+0xa0>
 8008c06:	e9c6 4800 	strd	r4, r8, [r6]
 8008c0a:	e7dd      	b.n	8008bc8 <__udivmoddi4+0xa0>
 8008c0c:	b902      	cbnz	r2, 8008c10 <__udivmoddi4+0xe8>
 8008c0e:	deff      	udf	#255	; 0xff
 8008c10:	fab2 f282 	clz	r2, r2
 8008c14:	2a00      	cmp	r2, #0
 8008c16:	f040 808f 	bne.w	8008d38 <__udivmoddi4+0x210>
 8008c1a:	1b49      	subs	r1, r1, r5
 8008c1c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8008c20:	fa1f f885 	uxth.w	r8, r5
 8008c24:	2701      	movs	r7, #1
 8008c26:	fbb1 fcfe 	udiv	ip, r1, lr
 8008c2a:	0c23      	lsrs	r3, r4, #16
 8008c2c:	fb0e 111c 	mls	r1, lr, ip, r1
 8008c30:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8008c34:	fb08 f10c 	mul.w	r1, r8, ip
 8008c38:	4299      	cmp	r1, r3
 8008c3a:	d907      	bls.n	8008c4c <__udivmoddi4+0x124>
 8008c3c:	18eb      	adds	r3, r5, r3
 8008c3e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8008c42:	d202      	bcs.n	8008c4a <__udivmoddi4+0x122>
 8008c44:	4299      	cmp	r1, r3
 8008c46:	f200 80cd 	bhi.w	8008de4 <__udivmoddi4+0x2bc>
 8008c4a:	4684      	mov	ip, r0
 8008c4c:	1a59      	subs	r1, r3, r1
 8008c4e:	b2a3      	uxth	r3, r4
 8008c50:	fbb1 f0fe 	udiv	r0, r1, lr
 8008c54:	fb0e 1410 	mls	r4, lr, r0, r1
 8008c58:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8008c5c:	fb08 f800 	mul.w	r8, r8, r0
 8008c60:	45a0      	cmp	r8, r4
 8008c62:	d907      	bls.n	8008c74 <__udivmoddi4+0x14c>
 8008c64:	192c      	adds	r4, r5, r4
 8008c66:	f100 33ff 	add.w	r3, r0, #4294967295
 8008c6a:	d202      	bcs.n	8008c72 <__udivmoddi4+0x14a>
 8008c6c:	45a0      	cmp	r8, r4
 8008c6e:	f200 80b6 	bhi.w	8008dde <__udivmoddi4+0x2b6>
 8008c72:	4618      	mov	r0, r3
 8008c74:	eba4 0408 	sub.w	r4, r4, r8
 8008c78:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8008c7c:	e79f      	b.n	8008bbe <__udivmoddi4+0x96>
 8008c7e:	f1c7 0c20 	rsb	ip, r7, #32
 8008c82:	40bb      	lsls	r3, r7
 8008c84:	fa22 fe0c 	lsr.w	lr, r2, ip
 8008c88:	ea4e 0e03 	orr.w	lr, lr, r3
 8008c8c:	fa01 f407 	lsl.w	r4, r1, r7
 8008c90:	fa20 f50c 	lsr.w	r5, r0, ip
 8008c94:	fa21 f30c 	lsr.w	r3, r1, ip
 8008c98:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8008c9c:	4325      	orrs	r5, r4
 8008c9e:	fbb3 f9f8 	udiv	r9, r3, r8
 8008ca2:	0c2c      	lsrs	r4, r5, #16
 8008ca4:	fb08 3319 	mls	r3, r8, r9, r3
 8008ca8:	fa1f fa8e 	uxth.w	sl, lr
 8008cac:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8008cb0:	fb09 f40a 	mul.w	r4, r9, sl
 8008cb4:	429c      	cmp	r4, r3
 8008cb6:	fa02 f207 	lsl.w	r2, r2, r7
 8008cba:	fa00 f107 	lsl.w	r1, r0, r7
 8008cbe:	d90b      	bls.n	8008cd8 <__udivmoddi4+0x1b0>
 8008cc0:	eb1e 0303 	adds.w	r3, lr, r3
 8008cc4:	f109 30ff 	add.w	r0, r9, #4294967295
 8008cc8:	f080 8087 	bcs.w	8008dda <__udivmoddi4+0x2b2>
 8008ccc:	429c      	cmp	r4, r3
 8008cce:	f240 8084 	bls.w	8008dda <__udivmoddi4+0x2b2>
 8008cd2:	f1a9 0902 	sub.w	r9, r9, #2
 8008cd6:	4473      	add	r3, lr
 8008cd8:	1b1b      	subs	r3, r3, r4
 8008cda:	b2ad      	uxth	r5, r5
 8008cdc:	fbb3 f0f8 	udiv	r0, r3, r8
 8008ce0:	fb08 3310 	mls	r3, r8, r0, r3
 8008ce4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8008ce8:	fb00 fa0a 	mul.w	sl, r0, sl
 8008cec:	45a2      	cmp	sl, r4
 8008cee:	d908      	bls.n	8008d02 <__udivmoddi4+0x1da>
 8008cf0:	eb1e 0404 	adds.w	r4, lr, r4
 8008cf4:	f100 33ff 	add.w	r3, r0, #4294967295
 8008cf8:	d26b      	bcs.n	8008dd2 <__udivmoddi4+0x2aa>
 8008cfa:	45a2      	cmp	sl, r4
 8008cfc:	d969      	bls.n	8008dd2 <__udivmoddi4+0x2aa>
 8008cfe:	3802      	subs	r0, #2
 8008d00:	4474      	add	r4, lr
 8008d02:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8008d06:	fba0 8902 	umull	r8, r9, r0, r2
 8008d0a:	eba4 040a 	sub.w	r4, r4, sl
 8008d0e:	454c      	cmp	r4, r9
 8008d10:	46c2      	mov	sl, r8
 8008d12:	464b      	mov	r3, r9
 8008d14:	d354      	bcc.n	8008dc0 <__udivmoddi4+0x298>
 8008d16:	d051      	beq.n	8008dbc <__udivmoddi4+0x294>
 8008d18:	2e00      	cmp	r6, #0
 8008d1a:	d069      	beq.n	8008df0 <__udivmoddi4+0x2c8>
 8008d1c:	ebb1 050a 	subs.w	r5, r1, sl
 8008d20:	eb64 0403 	sbc.w	r4, r4, r3
 8008d24:	fa04 fc0c 	lsl.w	ip, r4, ip
 8008d28:	40fd      	lsrs	r5, r7
 8008d2a:	40fc      	lsrs	r4, r7
 8008d2c:	ea4c 0505 	orr.w	r5, ip, r5
 8008d30:	e9c6 5400 	strd	r5, r4, [r6]
 8008d34:	2700      	movs	r7, #0
 8008d36:	e747      	b.n	8008bc8 <__udivmoddi4+0xa0>
 8008d38:	f1c2 0320 	rsb	r3, r2, #32
 8008d3c:	fa20 f703 	lsr.w	r7, r0, r3
 8008d40:	4095      	lsls	r5, r2
 8008d42:	fa01 f002 	lsl.w	r0, r1, r2
 8008d46:	fa21 f303 	lsr.w	r3, r1, r3
 8008d4a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8008d4e:	4338      	orrs	r0, r7
 8008d50:	0c01      	lsrs	r1, r0, #16
 8008d52:	fbb3 f7fe 	udiv	r7, r3, lr
 8008d56:	fa1f f885 	uxth.w	r8, r5
 8008d5a:	fb0e 3317 	mls	r3, lr, r7, r3
 8008d5e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8008d62:	fb07 f308 	mul.w	r3, r7, r8
 8008d66:	428b      	cmp	r3, r1
 8008d68:	fa04 f402 	lsl.w	r4, r4, r2
 8008d6c:	d907      	bls.n	8008d7e <__udivmoddi4+0x256>
 8008d6e:	1869      	adds	r1, r5, r1
 8008d70:	f107 3cff 	add.w	ip, r7, #4294967295
 8008d74:	d22f      	bcs.n	8008dd6 <__udivmoddi4+0x2ae>
 8008d76:	428b      	cmp	r3, r1
 8008d78:	d92d      	bls.n	8008dd6 <__udivmoddi4+0x2ae>
 8008d7a:	3f02      	subs	r7, #2
 8008d7c:	4429      	add	r1, r5
 8008d7e:	1acb      	subs	r3, r1, r3
 8008d80:	b281      	uxth	r1, r0
 8008d82:	fbb3 f0fe 	udiv	r0, r3, lr
 8008d86:	fb0e 3310 	mls	r3, lr, r0, r3
 8008d8a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8008d8e:	fb00 f308 	mul.w	r3, r0, r8
 8008d92:	428b      	cmp	r3, r1
 8008d94:	d907      	bls.n	8008da6 <__udivmoddi4+0x27e>
 8008d96:	1869      	adds	r1, r5, r1
 8008d98:	f100 3cff 	add.w	ip, r0, #4294967295
 8008d9c:	d217      	bcs.n	8008dce <__udivmoddi4+0x2a6>
 8008d9e:	428b      	cmp	r3, r1
 8008da0:	d915      	bls.n	8008dce <__udivmoddi4+0x2a6>
 8008da2:	3802      	subs	r0, #2
 8008da4:	4429      	add	r1, r5
 8008da6:	1ac9      	subs	r1, r1, r3
 8008da8:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8008dac:	e73b      	b.n	8008c26 <__udivmoddi4+0xfe>
 8008dae:	4637      	mov	r7, r6
 8008db0:	4630      	mov	r0, r6
 8008db2:	e709      	b.n	8008bc8 <__udivmoddi4+0xa0>
 8008db4:	4607      	mov	r7, r0
 8008db6:	e6e7      	b.n	8008b88 <__udivmoddi4+0x60>
 8008db8:	4618      	mov	r0, r3
 8008dba:	e6fb      	b.n	8008bb4 <__udivmoddi4+0x8c>
 8008dbc:	4541      	cmp	r1, r8
 8008dbe:	d2ab      	bcs.n	8008d18 <__udivmoddi4+0x1f0>
 8008dc0:	ebb8 0a02 	subs.w	sl, r8, r2
 8008dc4:	eb69 020e 	sbc.w	r2, r9, lr
 8008dc8:	3801      	subs	r0, #1
 8008dca:	4613      	mov	r3, r2
 8008dcc:	e7a4      	b.n	8008d18 <__udivmoddi4+0x1f0>
 8008dce:	4660      	mov	r0, ip
 8008dd0:	e7e9      	b.n	8008da6 <__udivmoddi4+0x27e>
 8008dd2:	4618      	mov	r0, r3
 8008dd4:	e795      	b.n	8008d02 <__udivmoddi4+0x1da>
 8008dd6:	4667      	mov	r7, ip
 8008dd8:	e7d1      	b.n	8008d7e <__udivmoddi4+0x256>
 8008dda:	4681      	mov	r9, r0
 8008ddc:	e77c      	b.n	8008cd8 <__udivmoddi4+0x1b0>
 8008dde:	3802      	subs	r0, #2
 8008de0:	442c      	add	r4, r5
 8008de2:	e747      	b.n	8008c74 <__udivmoddi4+0x14c>
 8008de4:	f1ac 0c02 	sub.w	ip, ip, #2
 8008de8:	442b      	add	r3, r5
 8008dea:	e72f      	b.n	8008c4c <__udivmoddi4+0x124>
 8008dec:	4638      	mov	r0, r7
 8008dee:	e708      	b.n	8008c02 <__udivmoddi4+0xda>
 8008df0:	4637      	mov	r7, r6
 8008df2:	e6e9      	b.n	8008bc8 <__udivmoddi4+0xa0>

08008df4 <__aeabi_idiv0>:
 8008df4:	4770      	bx	lr
 8008df6:	bf00      	nop

08008df8 <GetWallCtrlDirection>:
/* バックエンドでコマンドとして処理する */

int GetWallCtrlDirection(profile *mouse)
{
	//新ライブラリ用に変更
	switch(mouse->now.car%8)
 8008df8:	7a83      	ldrb	r3, [r0, #10]
 8008dfa:	f003 0307 	and.w	r3, r3, #7
 8008dfe:	2b06      	cmp	r3, #6
 8008e00:	d855      	bhi.n	8008eae <GetWallCtrlDirection+0xb6>
 8008e02:	e8df f003 	tbb	[pc, r3]
 8008e06:	5440      	.short	0x5440
 8008e08:	5418542c 	.word	0x5418542c
 8008e0c:	04          	.byte	0x04
 8008e0d:	00          	.byte	0x00
		{
			return N_WALL_PID;
		}
		break;
	case west:
		if(mouse->now.wall.west == wall)
 8008e0e:	7b03      	ldrb	r3, [r0, #12]
 8008e10:	f003 02c0 	and.w	r2, r3, #192	; 0xc0
 8008e14:	2a40      	cmp	r2, #64	; 0x40
 8008e16:	d04c      	beq.n	8008eb2 <GetWallCtrlDirection+0xba>
		{
			return F_WALL_PID;
		}
		else if ( mouse->now.wall.north == wall && mouse->now.wall.south == wall)//.westになってた。あと == south )で意味わからない処理に。
 8008e18:	f003 0233 	and.w	r2, r3, #51	; 0x33
 8008e1c:	2a11      	cmp	r2, #17
 8008e1e:	d04a      	beq.n	8008eb6 <GetWallCtrlDirection+0xbe>
		{
			return D_WALL_PID;
		}
		else if ( mouse->now.wall.north == wall )
 8008e20:	f003 0203 	and.w	r2, r3, #3
 8008e24:	2a01      	cmp	r2, #1
 8008e26:	d048      	beq.n	8008eba <GetWallCtrlDirection+0xc2>
		{
			return R_WALL_PID;
		}
		else if ( mouse->now.wall.south == wall )
 8008e28:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8008e2c:	2b10      	cmp	r3, #16
			return L_WALL_PID;
 8008e2e:	bf14      	ite	ne
 8008e30:	2006      	movne	r0, #6
 8008e32:	2002      	moveq	r0, #2
 8008e34:	4770      	bx	lr
		if(mouse->now.wall.south == wall)
 8008e36:	7b03      	ldrb	r3, [r0, #12]
 8008e38:	f003 0230 	and.w	r2, r3, #48	; 0x30
 8008e3c:	2a10      	cmp	r2, #16
 8008e3e:	d038      	beq.n	8008eb2 <GetWallCtrlDirection+0xba>
		else if(mouse->now.wall.east == wall && mouse->now.wall.west == wall)
 8008e40:	f003 02cc 	and.w	r2, r3, #204	; 0xcc
 8008e44:	2a44      	cmp	r2, #68	; 0x44
 8008e46:	d036      	beq.n	8008eb6 <GetWallCtrlDirection+0xbe>
		else if(mouse->now.wall.east == wall)
 8008e48:	f003 020c 	and.w	r2, r3, #12
 8008e4c:	2a04      	cmp	r2, #4
 8008e4e:	d036      	beq.n	8008ebe <GetWallCtrlDirection+0xc6>
		else if(mouse->now.wall.west == wall)
 8008e50:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8008e54:	2b40      	cmp	r3, #64	; 0x40
			return R_WALL_PID;
 8008e56:	bf14      	ite	ne
 8008e58:	2006      	movne	r0, #6
 8008e5a:	2003      	moveq	r0, #3
 8008e5c:	4770      	bx	lr
		if(mouse->now.wall.east == wall)
 8008e5e:	7b03      	ldrb	r3, [r0, #12]
 8008e60:	f003 020c 	and.w	r2, r3, #12
 8008e64:	2a04      	cmp	r2, #4
 8008e66:	d024      	beq.n	8008eb2 <GetWallCtrlDirection+0xba>
		else if(mouse->now.wall.north == wall && mouse->now.wall.south == wall)//south)
 8008e68:	f003 0233 	and.w	r2, r3, #51	; 0x33
 8008e6c:	2a11      	cmp	r2, #17
 8008e6e:	d022      	beq.n	8008eb6 <GetWallCtrlDirection+0xbe>
		else if(mouse->now.wall.north == wall)
 8008e70:	f003 0203 	and.w	r2, r3, #3
 8008e74:	2a01      	cmp	r2, #1
 8008e76:	d022      	beq.n	8008ebe <GetWallCtrlDirection+0xc6>
		else if(mouse->now.wall.south == wall)
 8008e78:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8008e7c:	2b10      	cmp	r3, #16
			return R_WALL_PID;
 8008e7e:	bf14      	ite	ne
 8008e80:	2006      	movne	r0, #6
 8008e82:	2003      	moveq	r0, #3
 8008e84:	4770      	bx	lr
		if(mouse->now.wall.north == wall) //現在の方角と、座標から、壁の存在を確認する処理
 8008e86:	7b03      	ldrb	r3, [r0, #12]
 8008e88:	f003 0203 	and.w	r2, r3, #3
 8008e8c:	2a01      	cmp	r2, #1
 8008e8e:	d010      	beq.n	8008eb2 <GetWallCtrlDirection+0xba>
		else if(mouse->now.wall.east == wall && mouse->now.wall.west == wall)
 8008e90:	f003 02cc 	and.w	r2, r3, #204	; 0xcc
 8008e94:	2a44      	cmp	r2, #68	; 0x44
 8008e96:	d00e      	beq.n	8008eb6 <GetWallCtrlDirection+0xbe>
		else if(mouse->now.wall.east == wall)
 8008e98:	f003 020c 	and.w	r2, r3, #12
 8008e9c:	2a04      	cmp	r2, #4
 8008e9e:	d00c      	beq.n	8008eba <GetWallCtrlDirection+0xc2>
		else if(mouse->now.wall.west == wall)
 8008ea0:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8008ea4:	2b40      	cmp	r3, #64	; 0x40
			return L_WALL_PID;
 8008ea6:	bf14      	ite	ne
 8008ea8:	2006      	movne	r0, #6
 8008eaa:	2002      	moveq	r0, #2
 8008eac:	4770      	bx	lr
		}
		break;

	default:
		//斜め方向
		return N_WALL_PID;
 8008eae:	2006      	movs	r0, #6
 8008eb0:	4770      	bx	lr
			return F_WALL_PID;
 8008eb2:	2008      	movs	r0, #8
 8008eb4:	4770      	bx	lr
			return D_WALL_PID;
 8008eb6:	2001      	movs	r0, #1
 8008eb8:	4770      	bx	lr
			return R_WALL_PID;
 8008eba:	2003      	movs	r0, #3
		break;
	}

}
 8008ebc:	4770      	bx	lr
			return L_WALL_PID;
 8008ebe:	2002      	movs	r0, #2
 8008ec0:	4770      	bx	lr
 8008ec2:	bf00      	nop

08008ec4 <WaitStopAndReset>:

void WaitStopAndReset()
{
 8008ec4:	b430      	push	{r4, r5}
 8008ec6:	480a      	ldr	r0, [pc, #40]	; (8008ef0 <WaitStopAndReset+0x2c>)
 8008ec8:	4d0a      	ldr	r5, [pc, #40]	; (8008ef4 <WaitStopAndReset+0x30>)
 8008eca:	4c0b      	ldr	r4, [pc, #44]	; (8008ef8 <WaitStopAndReset+0x34>)
 8008ecc:	490b      	ldr	r1, [pc, #44]	; (8008efc <WaitStopAndReset+0x38>)
 8008ece:	4a0c      	ldr	r2, [pc, #48]	; (8008f00 <WaitStopAndReset+0x3c>)
	do
	{
		TargetVelocity[BODY] = 0;
 8008ed0:	2300      	movs	r3, #0
 8008ed2:	60ab      	str	r3, [r5, #8]
		Acceleration = 0;
 8008ed4:	6023      	str	r3, [r4, #0]
		TargetAngularV = 0;
 8008ed6:	6003      	str	r3, [r0, #0]
		AngularAcceleration = 0;
 8008ed8:	600b      	str	r3, [r1, #0]

	}while(CurrentVelocity[BODY] != 0);
 8008eda:	edd2 7a02 	vldr	s15, [r2, #8]
 8008ede:	eef5 7a40 	vcmp.f32	s15, #0.0
 8008ee2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008ee6:	d1f4      	bne.n	8008ed2 <WaitStopAndReset+0xe>
	HAL_Delay(100);
 8008ee8:	2064      	movs	r0, #100	; 0x64
}
 8008eea:	bc30      	pop	{r4, r5}
	HAL_Delay(100);
 8008eec:	f005 bf88 	b.w	800ee00 <HAL_Delay>
 8008ef0:	2000152c 	.word	0x2000152c
 8008ef4:	2000151c 	.word	0x2000151c
 8008ef8:	20001214 	.word	0x20001214
 8008efc:	2000121c 	.word	0x2000121c
 8008f00:	20001558 	.word	0x20001558
 8008f04:	00000000 	.word	0x00000000

08008f08 <Rotate>:
void Rotate(float deg, float ang_v)
{
	TargetAngularV = 0;
	Pid[A_VELO_PID].flag = 0;

	float accel_deg = deg*30/90;
 8008f08:	eef3 6a0e 	vmov.f32	s13, #62	; 0x41f00000  30.0
 8008f0c:	ee60 6a26 	vmul.f32	s13, s0, s13
 8008f10:	ed9f 6a9b 	vldr	s12, [pc, #620]	; 8009180 <Rotate+0x278>
	float const_deg = deg*30/90;
	float decel_deg = deg*30/90;
	float angular_acceleration[3] = {
			64*T1*ang_v*ang_v / (2*accel_deg),
 8008f14:	eddf 7a9b 	vldr	s15, [pc, #620]	; 8009184 <Rotate+0x27c>
	TargetAngularV = 0;
 8008f18:	4a9b      	ldr	r2, [pc, #620]	; (8009188 <Rotate+0x280>)
	Pid[A_VELO_PID].flag = 0;
 8008f1a:	4b9c      	ldr	r3, [pc, #624]	; (800918c <Rotate+0x284>)
	float accel_deg = deg*30/90;
 8008f1c:	ee86 7a86 	vdiv.f32	s14, s13, s12
{
 8008f20:	b510      	push	{r4, lr}
	TargetAngularV = 0;
 8008f22:	2400      	movs	r4, #0
			64*T1*ang_v*ang_v / (2*accel_deg),
 8008f24:	ee60 7aa7 	vmul.f32	s15, s1, s15
{
 8008f28:	ed2d 8b04 	vpush	{d8-d9}
			64*T1*ang_v*ang_v / (2*accel_deg),
 8008f2c:	ee77 6a07 	vadd.f32	s13, s14, s14
 8008f30:	ee67 7aa0 	vmul.f32	s15, s15, s1
	TargetAngularV = 0;
 8008f34:	6014      	str	r4, [r2, #0]
	Pid[A_VELO_PID].flag = 0;
 8008f36:	2200      	movs	r2, #0
			0,
			64*T1*ang_v*ang_v / (2*decel_deg)
	};
	float move_angle[3] = {
			accel_deg * M_PI/ 180, //ラジアンに直してる
 8008f38:	ee17 0a10 	vmov	r0, s14
	Pid[A_VELO_PID].flag = 0;
 8008f3c:	629a      	str	r2, [r3, #40]	; 0x28
{
 8008f3e:	eef0 8a60 	vmov.f32	s17, s1
			64*T1*ang_v*ang_v / (2*accel_deg),
 8008f42:	ee87 8aa6 	vdiv.f32	s16, s15, s13
{
 8008f46:	eeb0 9a40 	vmov.f32	s18, s0
			accel_deg * M_PI/ 180, //ラジアンに直してる
 8008f4a:	f7ff fa35 	bl	80083b8 <__aeabi_f2d>
 8008f4e:	a388      	add	r3, pc, #544	; (adr r3, 8009170 <Rotate+0x268>)
 8008f50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f54:	f7ff fa88 	bl	8008468 <__aeabi_dmul>
 8008f58:	2200      	movs	r2, #0
 8008f5a:	4b8d      	ldr	r3, [pc, #564]	; (8009190 <Rotate+0x288>)
 8008f5c:	f7ff fbae 	bl	80086bc <__aeabi_ddiv>
 8008f60:	f7ff fd7a 	bl	8008a58 <__aeabi_d2f>
			const_deg * M_PI/ 180,
			decel_deg * M_PI/ 180,
	};

	if( ang_v > 0)	//右回転
 8008f64:	eef5 8ac0 	vcmpe.f32	s17, #0.0
 8008f68:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
			accel_deg * M_PI/ 180, //ラジアンに直してる
 8008f6c:	ee06 0a90 	vmov	s13, r0
	if( ang_v > 0)	//右回転
 8008f70:	f340 80f2 	ble.w	8009158 <Rotate+0x250>
	{
		TargetAngle += move_angle[0];//回転量がおかしい問題 : 現在の角度+移動量 = 目標角度 になっていたので回転開始時のブレが影響する
 8008f74:	4b87      	ldr	r3, [pc, #540]	; (8009194 <Rotate+0x28c>)

		while( (TargetAngle > Angle) /*&& (( ( keep_pulse[LEFT]+move_pulse ) > ( TotalPulse[LEFT] ) ) && ( ( keep_pulse[RIGHT]-move_pulse ) < ( TotalPulse[RIGHT] ) ) )*/)
 8008f76:	4a88      	ldr	r2, [pc, #544]	; (8009198 <Rotate+0x290>)
		TargetAngle += move_angle[0];//回転量がおかしい問題 : 現在の角度+移動量 = 目標角度 になっていたので回転開始時のブレが影響する
 8008f78:	edd3 7a00 	vldr	s15, [r3]
 8008f7c:	4987      	ldr	r1, [pc, #540]	; (800919c <Rotate+0x294>)
 8008f7e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008f82:	edc3 7a00 	vstr	s15, [r3]
		while( (TargetAngle > Angle) /*&& (( ( keep_pulse[LEFT]+move_pulse ) > ( TotalPulse[LEFT] ) ) && ( ( keep_pulse[RIGHT]-move_pulse ) < ( TotalPulse[RIGHT] ) ) )*/)
 8008f86:	ed93 7a00 	vldr	s14, [r3]
 8008f8a:	edd2 7a00 	vldr	s15, [r2]
 8008f8e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8008f92:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008f96:	dd0a      	ble.n	8008fae <Rotate+0xa6>
		{
			//最短走行の時だけ、Angleが大きくならない、もしくは目標角度がかなり大きい。初期化？最初の旋回なので、0radから90度ぶん目標角度がズレている必要がある。Angleが積算できていないかも。
			AngularAcceleration = angular_acceleration[0]; //ここまで
 8008f98:	ed81 8a00 	vstr	s16, [r1]
		while( (TargetAngle > Angle) /*&& (( ( keep_pulse[LEFT]+move_pulse ) > ( TotalPulse[LEFT] ) ) && ( ( keep_pulse[RIGHT]-move_pulse ) < ( TotalPulse[RIGHT] ) ) )*/)
 8008f9c:	ed93 7a00 	vldr	s14, [r3]
 8008fa0:	edd2 7a00 	vldr	s15, [r2]
 8008fa4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8008fa8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008fac:	dcf4      	bgt.n	8008f98 <Rotate+0x90>
		}
		TargetAngle += move_angle[1];//回転量がおかしい問題 : 現在の角度+移動量 = 目標角度 になっていたので回転開始時のブレが影響する
 8008fae:	edd3 7a00 	vldr	s15, [r3]
 8008fb2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008fb6:	edc3 7a00 	vstr	s15, [r3]
		while(TargetAngle > Angle)
 8008fba:	ed93 7a00 	vldr	s14, [r3]
 8008fbe:	edd2 7a00 	vldr	s15, [r2]
 8008fc2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8008fc6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008fca:	dd0a      	ble.n	8008fe2 <Rotate+0xda>
		{
			AngularAcceleration = angular_acceleration[1];//0
 8008fcc:	2000      	movs	r0, #0
 8008fce:	6008      	str	r0, [r1, #0]
		while(TargetAngle > Angle)
 8008fd0:	ed93 7a00 	vldr	s14, [r3]
 8008fd4:	edd2 7a00 	vldr	s15, [r2]
 8008fd8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8008fdc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008fe0:	dcf5      	bgt.n	8008fce <Rotate+0xc6>
		}
		TargetAngle += move_angle[2];//回転量がおかしい問題 : 現在の角度+移動量 = 目標角度 になっていたので回転開始時のブレが影響する
 8008fe2:	edd3 7a00 	vldr	s15, [r3]

		while(TargetAngle > Angle)
		{
			 AngularAcceleration = -angular_acceleration[2];
			 if( AngularV <= 0)
 8008fe6:	486e      	ldr	r0, [pc, #440]	; (80091a0 <Rotate+0x298>)
		TargetAngle += move_angle[2];//回転量がおかしい問題 : 現在の角度+移動量 = 目標角度 になっていたので回転開始時のブレが影響する
 8008fe8:	ee76 6aa7 	vadd.f32	s13, s13, s15
			 AngularAcceleration = -angular_acceleration[2];
 8008fec:	eeb1 8a48 	vneg.f32	s16, s16
		TargetAngle += move_angle[2];//回転量がおかしい問題 : 現在の角度+移動量 = 目標角度 になっていたので回転開始時のブレが影響する
 8008ff0:	edc3 6a00 	vstr	s13, [r3]
		while(TargetAngle > Angle)
 8008ff4:	e008      	b.n	8009008 <Rotate+0x100>
			 AngularAcceleration = -angular_acceleration[2];
 8008ff6:	ed81 8a00 	vstr	s16, [r1]
			 if( AngularV <= 0)
 8008ffa:	edd0 7a00 	vldr	s15, [r0]
 8008ffe:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8009002:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009006:	d908      	bls.n	800901a <Rotate+0x112>
		while(TargetAngle > Angle)
 8009008:	ed93 7a00 	vldr	s14, [r3]
 800900c:	edd2 7a00 	vldr	s15, [r2]
 8009010:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8009014:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009018:	dced      	bgt.n	8008ff6 <Rotate+0xee>
			 		break;
			 }
		}

	}
	AngularAcceleration = 0;
 800901a:	2300      	movs	r3, #0
 800901c:	600b      	str	r3, [r1, #0]
	WaitStopAndReset();
 800901e:	f7ff ff51 	bl	8008ec4 <WaitStopAndReset>
	int target_pulse = (int)( (deg/360) * ROTATE_PULSE);
 8009022:	eddf 7a60 	vldr	s15, [pc, #384]	; 80091a4 <Rotate+0x29c>
 8009026:	eec9 7a27 	vdiv.f32	s15, s18, s15
 800902a:	ee17 0a90 	vmov	r0, s15
 800902e:	f7ff f9c3 	bl	80083b8 <__aeabi_f2d>
 8009032:	a351      	add	r3, pc, #324	; (adr r3, 8009178 <Rotate+0x270>)
 8009034:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009038:	f7ff fa16 	bl	8008468 <__aeabi_dmul>
 800903c:	f7ff fcc4 	bl	80089c8 <__aeabi_d2iz>
	if(ang_v < 0)
 8009040:	eef5 8ac0 	vcmpe.f32	s17, #0.0
 8009044:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
	int target_pulse = (int)( (deg/360) * ROTATE_PULSE);
 8009048:	4602      	mov	r2, r0
	if(ang_v < 0)
 800904a:	d475      	bmi.n	8009138 <Rotate+0x230>
		KeepPulse[LEFT] -= target_pulse/2;
		KeepPulse[RIGHT] += target_pulse/2;
	}
	else 	if(ang_v > 0)
	{
		KeepPulse[LEFT] += target_pulse/2;
 800904c:	4b56      	ldr	r3, [pc, #344]	; (80091a8 <Rotate+0x2a0>)
 800904e:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
 8009052:	681a      	ldr	r2, [r3, #0]
 8009054:	1040      	asrs	r0, r0, #1
 8009056:	4402      	add	r2, r0
 8009058:	601a      	str	r2, [r3, #0]
		KeepPulse[RIGHT] -= target_pulse/2;
 800905a:	685a      	ldr	r2, [r3, #4]
	}
	KeepPulse[BODY] = KeepPulse[BODY];

}
 800905c:	ecbd 8b04 	vpop	{d8-d9}
		KeepPulse[RIGHT] -= target_pulse/2;
 8009060:	1a10      	subs	r0, r2, r0
 8009062:	6058      	str	r0, [r3, #4]
	KeepPulse[BODY] = KeepPulse[BODY];
 8009064:	689a      	ldr	r2, [r3, #8]
 8009066:	609a      	str	r2, [r3, #8]
}
 8009068:	bd10      	pop	{r4, pc}
		TargetAngle -= move_angle[0];//回転量がおかしい問題 : 現在の角度+移動量 = 目標角度 になっていたので回転開始時のブレが影響する
 800906a:	4b4a      	ldr	r3, [pc, #296]	; (8009194 <Rotate+0x28c>)
		while( (TargetAngle < Angle) /*&& (( ( keep_pulse[LEFT]+move_pulse ) > ( TotalPulse[LEFT] ) ) && ( ( keep_pulse[RIGHT]-move_pulse ) < ( TotalPulse[RIGHT] ) ) )*/)
 800906c:	4a4a      	ldr	r2, [pc, #296]	; (8009198 <Rotate+0x290>)
		TargetAngle -= move_angle[0];//回転量がおかしい問題 : 現在の角度+移動量 = 目標角度 になっていたので回転開始時のブレが影響する
 800906e:	edd3 7a00 	vldr	s15, [r3]
 8009072:	494a      	ldr	r1, [pc, #296]	; (800919c <Rotate+0x294>)
 8009074:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8009078:	edc3 7a00 	vstr	s15, [r3]
		while( (TargetAngle < Angle) /*&& (( ( keep_pulse[LEFT]+move_pulse ) > ( TotalPulse[LEFT] ) ) && ( ( keep_pulse[RIGHT]-move_pulse ) < ( TotalPulse[RIGHT] ) ) )*/)
 800907c:	ed93 7a00 	vldr	s14, [r3]
 8009080:	edd2 7a00 	vldr	s15, [r2]
 8009084:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8009088:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800908c:	d50c      	bpl.n	80090a8 <Rotate+0x1a0>
 800908e:	eeb1 6a48 	vneg.f32	s12, s16
			AngularAcceleration = -angular_acceleration[0]; //ここまで
 8009092:	ed81 6a00 	vstr	s12, [r1]
		while( (TargetAngle < Angle) /*&& (( ( keep_pulse[LEFT]+move_pulse ) > ( TotalPulse[LEFT] ) ) && ( ( keep_pulse[RIGHT]-move_pulse ) < ( TotalPulse[RIGHT] ) ) )*/)
 8009096:	ed93 7a00 	vldr	s14, [r3]
 800909a:	edd2 7a00 	vldr	s15, [r2]
 800909e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80090a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80090a6:	d4f4      	bmi.n	8009092 <Rotate+0x18a>
		TargetAngle -= move_angle[1];//回転量がおかしい問題 : 現在の角度+移動量 = 目標角度 になっていたので回転開始時のブレが影響する
 80090a8:	edd3 7a00 	vldr	s15, [r3]
 80090ac:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80090b0:	edc3 7a00 	vstr	s15, [r3]
		while(TargetAngle < Angle)
 80090b4:	ed93 7a00 	vldr	s14, [r3]
 80090b8:	edd2 7a00 	vldr	s15, [r2]
 80090bc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80090c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80090c4:	d50a      	bpl.n	80090dc <Rotate+0x1d4>
			AngularAcceleration = angular_acceleration[1];//0
 80090c6:	2000      	movs	r0, #0
 80090c8:	6008      	str	r0, [r1, #0]
		while(TargetAngle < Angle)
 80090ca:	ed93 7a00 	vldr	s14, [r3]
 80090ce:	edd2 7a00 	vldr	s15, [r2]
 80090d2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80090d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80090da:	d4f5      	bmi.n	80090c8 <Rotate+0x1c0>
		TargetAngle -= move_angle[2];//回転量がおかしい問題 : 現在の角度+移動量 = 目標角度 になっていたので回転開始時のブレが影響する
 80090dc:	edd3 7a00 	vldr	s15, [r3]
			 if( AngularV >= 0)
 80090e0:	482f      	ldr	r0, [pc, #188]	; (80091a0 <Rotate+0x298>)
		TargetAngle -= move_angle[2];//回転量がおかしい問題 : 現在の角度+移動量 = 目標角度 になっていたので回転開始時のブレが影響する
 80090e2:	ee77 6ae6 	vsub.f32	s13, s15, s13
 80090e6:	edc3 6a00 	vstr	s13, [r3]
		while(TargetAngle < Angle)
 80090ea:	e008      	b.n	80090fe <Rotate+0x1f6>
			 AngularAcceleration = angular_acceleration[2];
 80090ec:	ed81 8a00 	vstr	s16, [r1]
			 if( AngularV >= 0)
 80090f0:	edd0 7a00 	vldr	s15, [r0]
 80090f4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80090f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80090fc:	da08      	bge.n	8009110 <Rotate+0x208>
		while(TargetAngle < Angle)
 80090fe:	ed93 7a00 	vldr	s14, [r3]
 8009102:	edd2 7a00 	vldr	s15, [r2]
 8009106:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800910a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800910e:	d4ed      	bmi.n	80090ec <Rotate+0x1e4>
	AngularAcceleration = 0;
 8009110:	2300      	movs	r3, #0
 8009112:	600b      	str	r3, [r1, #0]
	WaitStopAndReset();
 8009114:	f7ff fed6 	bl	8008ec4 <WaitStopAndReset>
	int target_pulse = (int)( (deg/360) * ROTATE_PULSE);
 8009118:	eddf 7a22 	vldr	s15, [pc, #136]	; 80091a4 <Rotate+0x29c>
 800911c:	eec9 7a27 	vdiv.f32	s15, s18, s15
 8009120:	ee17 0a90 	vmov	r0, s15
 8009124:	f7ff f948 	bl	80083b8 <__aeabi_f2d>
 8009128:	a313      	add	r3, pc, #76	; (adr r3, 8009178 <Rotate+0x270>)
 800912a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800912e:	f7ff f99b 	bl	8008468 <__aeabi_dmul>
 8009132:	f7ff fc49 	bl	80089c8 <__aeabi_d2iz>
 8009136:	4602      	mov	r2, r0
		KeepPulse[LEFT] -= target_pulse/2;
 8009138:	4b1b      	ldr	r3, [pc, #108]	; (80091a8 <Rotate+0x2a0>)
 800913a:	6819      	ldr	r1, [r3, #0]
 800913c:	eb02 72d2 	add.w	r2, r2, r2, lsr #31
 8009140:	eba1 0162 	sub.w	r1, r1, r2, asr #1
 8009144:	6019      	str	r1, [r3, #0]
		KeepPulse[RIGHT] += target_pulse/2;
 8009146:	6858      	ldr	r0, [r3, #4]
}
 8009148:	ecbd 8b04 	vpop	{d8-d9}
		KeepPulse[RIGHT] += target_pulse/2;
 800914c:	eb00 0262 	add.w	r2, r0, r2, asr #1
 8009150:	605a      	str	r2, [r3, #4]
	KeepPulse[BODY] = KeepPulse[BODY];
 8009152:	689a      	ldr	r2, [r3, #8]
 8009154:	609a      	str	r2, [r3, #8]
}
 8009156:	bd10      	pop	{r4, pc}
	else if( ang_v < 0)
 8009158:	d487      	bmi.n	800906a <Rotate+0x162>
	AngularAcceleration = 0;
 800915a:	4b10      	ldr	r3, [pc, #64]	; (800919c <Rotate+0x294>)
 800915c:	601c      	str	r4, [r3, #0]
	WaitStopAndReset();
 800915e:	f7ff feb1 	bl	8008ec4 <WaitStopAndReset>
}
 8009162:	ecbd 8b04 	vpop	{d8-d9}
 8009166:	4b10      	ldr	r3, [pc, #64]	; (80091a8 <Rotate+0x2a0>)
	KeepPulse[BODY] = KeepPulse[BODY];
 8009168:	689a      	ldr	r2, [r3, #8]
 800916a:	609a      	str	r2, [r3, #8]
}
 800916c:	bd10      	pop	{r4, pc}
 800916e:	bf00      	nop
 8009170:	54442d18 	.word	0x54442d18
 8009174:	400921fb 	.word	0x400921fb
 8009178:	a62bf3f2 	.word	0xa62bf3f2
 800917c:	40fac890 	.word	0x40fac890
 8009180:	42b40000 	.word	0x42b40000
 8009184:	3d83126f 	.word	0x3d83126f
 8009188:	2000152c 	.word	0x2000152c
 800918c:	20001318 	.word	0x20001318
 8009190:	40668000 	.word	0x40668000
 8009194:	20001228 	.word	0x20001228
 8009198:	20001218 	.word	0x20001218
 800919c:	2000121c 	.word	0x2000121c
 80091a0:	20001224 	.word	0x20001224
 80091a4:	43b40000 	.word	0x43b40000
 80091a8:	20001580 	.word	0x20001580
 80091ac:	00000000 	.word	0x00000000

080091b0 <SlalomRight>:
	}

}

void SlalomRight(maze_node *maze, profile *mouse)	//現在の速度から、最適な角加速度と、移動量、目標角度などを変更する。
{
 80091b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80091b4:	ed2d 8b08 	vpush	{d8-d11}
 80091b8:	b083      	sub	sp, #12
	switch(mouse->now.car%8)//方角に合わせて、
 80091ba:	7a8d      	ldrb	r5, [r1, #10]
	Pid[A_VELO_PID].flag = 1;

	float v_turn = ExploreVelocity;       //スラローム時の重心速度
	float pre = Sla.Pre;         //スラローム前距離
	float fol = Sla.Fol;         //スラローム後距離
 80091bc:	4aa2      	ldr	r2, [pc, #648]	; (8009448 <SlalomRight+0x298>)
	float ang3 = Sla.Theta3;         //角速度が下がるのはang2からang3まで
	//このあたりのパラメータをどう調整、設計するかが鍵
	float now_angv = AngularV;
	int now_pulse;

	now_pulse = TotalPulse[LEFT] + TotalPulse[RIGHT];	//汎用的に書いておく
 80091be:	4ca3      	ldr	r4, [pc, #652]	; (800944c <SlalomRight+0x29c>)
	float v_turn = ExploreVelocity;       //スラローム時の重心速度
 80091c0:	4ba3      	ldr	r3, [pc, #652]	; (8009450 <SlalomRight+0x2a0>)
	float now_angv = AngularV;
 80091c2:	f8df b2b8 	ldr.w	fp, [pc, #696]	; 800947c <SlalomRight+0x2cc>
{
 80091c6:	9001      	str	r0, [sp, #4]
	Pid[A_VELO_PID].flag = 1;
 80091c8:	48a2      	ldr	r0, [pc, #648]	; (8009454 <SlalomRight+0x2a4>)
	float now_angv = AngularV;
 80091ca:	f8db 6000 	ldr.w	r6, [fp]
	float fol = Sla.Fol;         //スラローム後距離
 80091ce:	ed92 9a01 	vldr	s18, [r2, #4]
	float v_turn = ExploreVelocity;       //スラローム時の重心速度
 80091d2:	681e      	ldr	r6, [r3, #0]
	float alpha_turn = Sla.Alpha;//046;//125;//16;//0.015*13;  //スラローム時の角加速度
 80091d4:	edd2 8a02 	vldr	s17, [r2, #8]
	now_pulse = TotalPulse[LEFT] + TotalPulse[RIGHT];	//汎用的に書いておく
 80091d8:	6823      	ldr	r3, [r4, #0]
	float ang1 = Sla.Theta1;         //角速度が上がるのは0からang1まで
 80091da:	ed92 aa04 	vldr	s20, [r2, #16]
	now_pulse = TotalPulse[LEFT] + TotalPulse[RIGHT];	//汎用的に書いておく
 80091de:	6867      	ldr	r7, [r4, #4]
	float ang2 = Sla.Theta2;         //角速度が一定なのはang1からang2まで
 80091e0:	edd2 9a05 	vldr	s19, [r2, #20]
	float ang3 = Sla.Theta3;         //角速度が下がるのはang2からang3まで
 80091e4:	ed92 8a06 	vldr	s16, [r2, #24]
{
 80091e8:	4688      	mov	r8, r1
	switch(mouse->now.car%8)//方角に合わせて、
 80091ea:	f005 0507 	and.w	r5, r5, #7
	Pid[A_VELO_PID].flag = 1;
 80091ee:	2101      	movs	r1, #1
 80091f0:	6281      	str	r1, [r0, #40]	; 0x28
	switch(mouse->now.car%8)//方角に合わせて、
 80091f2:	2d06      	cmp	r5, #6
 80091f4:	d808      	bhi.n	8009208 <SlalomRight+0x58>
 80091f6:	e8df f015 	tbh	[pc, r5, lsl #1]
 80091fa:	010e      	.short	0x010e
 80091fc:	01090007 	.word	0x01090007
 8009200:	01040007 	.word	0x01040007
 8009204:	00d60007 	.word	0x00d60007
	now_pulse = TotalPulse[LEFT] + TotalPulse[RIGHT];	//汎用的に書いておく
 8009208:	443b      	add	r3, r7
 800920a:	ee07 3a10 	vmov	s14, r3
		}

	}
	else//なければ
	{
		while( now_pulse + pre > (TotalPulse[LEFT] + TotalPulse[RIGHT]) ) //移動量を条件に直進
 800920e:	6823      	ldr	r3, [r4, #0]
 8009210:	6860      	ldr	r0, [r4, #4]
 8009212:	edd2 6a00 	vldr	s13, [r2]
 8009216:	4d90      	ldr	r5, [pc, #576]	; (8009458 <SlalomRight+0x2a8>)
 8009218:	4403      	add	r3, r0
 800921a:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800921e:	ee07 3a90 	vmov	s15, r3
 8009222:	ee37 7a26 	vadd.f32	s14, s14, s13
 8009226:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800922a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800922e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009232:	f340 8100 	ble.w	8009436 <SlalomRight+0x286>
 8009236:	f8df 9248 	ldr.w	r9, [pc, #584]	; 8009480 <SlalomRight+0x2d0>
 800923a:	4b88      	ldr	r3, [pc, #544]	; (800945c <SlalomRight+0x2ac>)
		{
				//velocity_ctrl_flag = 1;
				TargetAngularV = 0;
 800923c:	2700      	movs	r7, #0
 800923e:	602f      	str	r7, [r5, #0]
				AngularLeapsity = 0;
				AngularAcceleration = 0;
 8009240:	f8c9 7000 	str.w	r7, [r9]
				TargetVelocity[BODY] = v_turn;
 8009244:	609e      	str	r6, [r3, #8]
		while( now_pulse + pre > (TotalPulse[LEFT] + TotalPulse[RIGHT]) ) //移動量を条件に直進
 8009246:	6820      	ldr	r0, [r4, #0]
 8009248:	6862      	ldr	r2, [r4, #4]
 800924a:	4410      	add	r0, r2
 800924c:	ee07 0a90 	vmov	s15, r0
 8009250:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009254:	eef4 7ac7 	vcmpe.f32	s15, s14
 8009258:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800925c:	d4ef      	bmi.n	800923e <SlalomRight+0x8e>
 800925e:	f8df a224 	ldr.w	sl, [pc, #548]	; 8009484 <SlalomRight+0x2d4>
 8009262:	f8ca 7000 	str.w	r7, [sl]
				////printf("直進1\r\n");
		}
	}
	now_angv = AngularV;

	float start_angle = Angle;
 8009266:	487e      	ldr	r0, [pc, #504]	; (8009460 <SlalomRight+0x2b0>)
	now_angv = AngularV;
 8009268:	f8db 3000 	ldr.w	r3, [fp]
	float start_angle = Angle;
 800926c:	ed90 7a00 	vldr	s14, [r0]
	Pid[A_VELO_PID].flag = 0;
	while(start_angle + ang1 > Angle)
 8009270:	edd0 7a00 	vldr	s15, [r0]
	Pid[A_VELO_PID].flag = 0;
 8009274:	4a77      	ldr	r2, [pc, #476]	; (8009454 <SlalomRight+0x2a4>)
	while(start_angle + ang1 > Angle)
 8009276:	ee7a 6a07 	vadd.f32	s13, s20, s14
	Pid[A_VELO_PID].flag = 0;
 800927a:	2300      	movs	r3, #0
	while(start_angle + ang1 > Angle)
 800927c:	eef4 6ae7 	vcmpe.f32	s13, s15
 8009280:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
	Pid[A_VELO_PID].flag = 0;
 8009284:	6293      	str	r3, [r2, #40]	; 0x28
	while(start_angle + ang1 > Angle)
 8009286:	dd0a      	ble.n	800929e <SlalomRight+0xee>
 8009288:	4b74      	ldr	r3, [pc, #464]	; (800945c <SlalomRight+0x2ac>)
	{
			AngularAcceleration = alpha_turn;
 800928a:	edc9 8a00 	vstr	s17, [r9]
			TargetVelocity[BODY] = v_turn;
 800928e:	609e      	str	r6, [r3, #8]
	while(start_angle + ang1 > Angle)
 8009290:	edd0 7a00 	vldr	s15, [r0]
 8009294:	eef4 7ae6 	vcmpe.f32	s15, s13
 8009298:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800929c:	d4f5      	bmi.n	800928a <SlalomRight+0xda>

	}
	AngularAcceleration = 0;
 800929e:	2300      	movs	r3, #0
 80092a0:	f8c9 3000 	str.w	r3, [r9]
	AngularLeapsity = 0;
	now_angv = AngularV;
	//alpha_flag = 0;

	while(start_angle + ang2 > Angle)
 80092a4:	ee79 6a87 	vadd.f32	s13, s19, s14
	now_angv = AngularV;
 80092a8:	f8db 7000 	ldr.w	r7, [fp]
	while(start_angle + ang2 > Angle)
 80092ac:	edd0 7a00 	vldr	s15, [r0]
	AngularLeapsity = 0;
 80092b0:	f8ca 3000 	str.w	r3, [sl]
	while(start_angle + ang2 > Angle)
 80092b4:	eef4 6ae7 	vcmpe.f32	s13, s15
 80092b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80092bc:	dd0a      	ble.n	80092d4 <SlalomRight+0x124>
 80092be:	4b67      	ldr	r3, [pc, #412]	; (800945c <SlalomRight+0x2ac>)
	{
			TargetAngularV = TargetAngularV;
 80092c0:	682f      	ldr	r7, [r5, #0]
 80092c2:	602f      	str	r7, [r5, #0]
			TargetVelocity[BODY] = v_turn;
 80092c4:	609e      	str	r6, [r3, #8]
	while(start_angle + ang2 > Angle)
 80092c6:	edd0 7a00 	vldr	s15, [r0]
 80092ca:	eef4 7ae6 	vcmpe.f32	s15, s13
 80092ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80092d2:	d4f5      	bmi.n	80092c0 <SlalomRight+0x110>
	}

	now_angv = AngularV;
 80092d4:	f8db 3000 	ldr.w	r3, [fp]
	while( start_angle + ang3 > Angle)
 80092d8:	edd0 7a00 	vldr	s15, [r0]
 80092dc:	ee38 7a07 	vadd.f32	s14, s16, s14
 80092e0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80092e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80092e8:	d51f      	bpl.n	800932a <SlalomRight+0x17a>
	{
			AngularAcceleration = -alpha_turn;
 80092ea:	eef1 8a68 	vneg.f32	s17, s17
 80092ee:	edc9 8a00 	vstr	s17, [r9]
			if(TargetAngularV < 0)
 80092f2:	edd5 7a00 	vldr	s15, [r5]
 80092f6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80092fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80092fe:	f100 8097 	bmi.w	8009430 <SlalomRight+0x280>
 8009302:	4b56      	ldr	r3, [pc, #344]	; (800945c <SlalomRight+0x2ac>)
 8009304:	e009      	b.n	800931a <SlalomRight+0x16a>
			AngularAcceleration = -alpha_turn;
 8009306:	edc9 8a00 	vstr	s17, [r9]
			if(TargetAngularV < 0)
 800930a:	edd5 7a00 	vldr	s15, [r5]
 800930e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8009312:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009316:	f100 808b 	bmi.w	8009430 <SlalomRight+0x280>
			{
				TargetAngularV = 0;
				break;
			}
			TargetVelocity[BODY] = v_turn;
 800931a:	609e      	str	r6, [r3, #8]
	while( start_angle + ang3 > Angle)
 800931c:	edd0 7a00 	vldr	s15, [r0]
 8009320:	eef4 7ac7 	vcmpe.f32	s15, s14
 8009324:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009328:	d4ed      	bmi.n	8009306 <SlalomRight+0x156>
	}
	AngularAcceleration = 0;
 800932a:	f04f 0b00 	mov.w	fp, #0
 800932e:	f8c9 b000 	str.w	fp, [r9]
	AngularLeapsity = 0;
	TargetAngularV = 0;
 8009332:	f8c5 b000 	str.w	fp, [r5]
	now_pulse = TotalPulse[LEFT] + TotalPulse[RIGHT];
 8009336:	6823      	ldr	r3, [r4, #0]
 8009338:	6862      	ldr	r2, [r4, #4]
	while( now_pulse + fol > (TotalPulse[LEFT] + TotalPulse[RIGHT]) )
	{
			TargetAngularV = 0;
			TargetVelocity[BODY] = v_turn;
 800933a:	4f48      	ldr	r7, [pc, #288]	; (800945c <SlalomRight+0x2ac>)
			if(Calc == 0)
 800933c:	f8df a148 	ldr.w	sl, [pc, #328]	; 8009488 <SlalomRight+0x2d8>
	now_pulse = TotalPulse[LEFT] + TotalPulse[RIGHT];
 8009340:	4413      	add	r3, r2
 8009342:	ee08 3a10 	vmov	s16, r3
 8009346:	eeb8 8ac8 	vcvt.f32.s32	s16, s16
 800934a:	ee38 8a09 	vadd.f32	s16, s16, s18
	while( now_pulse + fol > (TotalPulse[LEFT] + TotalPulse[RIGHT]) )
 800934e:	e006      	b.n	800935e <SlalomRight+0x1ae>
			TargetAngularV = 0;
 8009350:	f8c5 b000 	str.w	fp, [r5]
			TargetVelocity[BODY] = v_turn;
 8009354:	60be      	str	r6, [r7, #8]
			if(Calc == 0)
 8009356:	f8da 3000 	ldr.w	r3, [sl]
 800935a:	2b00      	cmp	r3, #0
 800935c:	d060      	beq.n	8009420 <SlalomRight+0x270>
	while( now_pulse + fol > (TotalPulse[LEFT] + TotalPulse[RIGHT]) )
 800935e:	6823      	ldr	r3, [r4, #0]
 8009360:	6862      	ldr	r2, [r4, #4]
 8009362:	4413      	add	r3, r2
 8009364:	ee07 3a90 	vmov	s15, r3
 8009368:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800936c:	eef4 7ac8 	vcmpe.f32	s15, s16
 8009370:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009374:	d4ec      	bmi.n	8009350 <SlalomRight+0x1a0>
			{
				updateRealSearch(maze, mouse);
				Calc = 1;
			}
	}
	TargetAngle += 90*M_PI/180;
 8009376:	4d3b      	ldr	r5, [pc, #236]	; (8009464 <SlalomRight+0x2b4>)
 8009378:	6828      	ldr	r0, [r5, #0]
 800937a:	f7ff f81d 	bl	80083b8 <__aeabi_f2d>
 800937e:	a330      	add	r3, pc, #192	; (adr r3, 8009440 <SlalomRight+0x290>)
 8009380:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009384:	f7fe feba 	bl	80080fc <__adddf3>
 8009388:	f7ff fb66 	bl	8008a58 <__aeabi_d2f>
	KeepPulse[BODY] += TotalPulse[BODY] - KeepPulse[BODY];
 800938c:	4a36      	ldr	r2, [pc, #216]	; (8009468 <SlalomRight+0x2b8>)
	TargetAngle += 90*M_PI/180;
 800938e:	6028      	str	r0, [r5, #0]
	KeepPulse[BODY] += TotalPulse[BODY] - KeepPulse[BODY];
 8009390:	68a3      	ldr	r3, [r4, #8]
 8009392:	6890      	ldr	r0, [r2, #8]
 8009394:	6891      	ldr	r1, [r2, #8]
 8009396:	1a1b      	subs	r3, r3, r0
 8009398:	440b      	add	r3, r1
 800939a:	6093      	str	r3, [r2, #8]

}
 800939c:	b003      	add	sp, #12
 800939e:	ecbd 8b08 	vpop	{d8-d11}
 80093a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	return mouse->now.wall.west;
 80093a6:	f898 000c 	ldrb.w	r0, [r8, #12]
 80093aa:	0980      	lsrs	r0, r0, #6
	if (getFrontWall(mouse) == WALL/*前に壁があれば、*/) //Uターン後にスラロームするときは、壁の情報が間違っている.壁の情報を毎回正しくする
 80093ac:	2801      	cmp	r0, #1
 80093ae:	f47f af2b 	bne.w	8009208 <SlalomRight+0x58>
 80093b2:	4d29      	ldr	r5, [pc, #164]	; (8009458 <SlalomRight+0x2a8>)
 80093b4:	f8df a0cc 	ldr.w	sl, [pc, #204]	; 8009484 <SlalomRight+0x2d4>
 80093b8:	f8df 90c4 	ldr.w	r9, [pc, #196]	; 8009480 <SlalomRight+0x2d0>
 80093bc:	4f2b      	ldr	r7, [pc, #172]	; (800946c <SlalomRight+0x2bc>)
		while(Photo[FL] < 200 || Photo[FR] < 250)//Photo[FL] < 200 || Photo[FR] < 250/*前壁の閾値より低い間*/)
 80093be:	ed9f ba2c 	vldr	s22, [pc, #176]	; 8009470 <SlalomRight+0x2c0>
 80093c2:	eddf ba2c 	vldr	s23, [pc, #176]	; 8009474 <SlalomRight+0x2c4>
			TargetAngularV = 0;
 80093c6:	eddf aa2c 	vldr	s21, [pc, #176]	; 8009478 <SlalomRight+0x2c8>
 80093ca:	e008      	b.n	80093de <SlalomRight+0x22e>
 80093cc:	edc5 aa00 	vstr	s21, [r5]
			AngularLeapsity = 0;
 80093d0:	edca aa00 	vstr	s21, [sl]
			AngularAcceleration = 0;
 80093d4:	edc9 aa00 	vstr	s21, [r9]
			TargetVelocity[BODY] = v_turn;
 80093d8:	609e      	str	r6, [r3, #8]
			ChangeLED(7);
 80093da:	f004 ff33 	bl	800e244 <ChangeLED>
		while(Photo[FL] < 200 || Photo[FR] < 250)//Photo[FL] < 200 || Photo[FR] < 250/*前壁の閾値より低い間*/)
 80093de:	edd7 7a00 	vldr	s15, [r7]
			TargetVelocity[BODY] = v_turn;
 80093e2:	4b1e      	ldr	r3, [pc, #120]	; (800945c <SlalomRight+0x2ac>)
		while(Photo[FL] < 200 || Photo[FR] < 250)//Photo[FL] < 200 || Photo[FR] < 250/*前壁の閾値より低い間*/)
 80093e4:	eef4 7acb 	vcmpe.f32	s15, s22
 80093e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
			ChangeLED(7);
 80093ec:	f04f 0007 	mov.w	r0, #7
		while(Photo[FL] < 200 || Photo[FR] < 250)//Photo[FL] < 200 || Photo[FR] < 250/*前壁の閾値より低い間*/)
 80093f0:	d4ec      	bmi.n	80093cc <SlalomRight+0x21c>
 80093f2:	edd7 7a03 	vldr	s15, [r7, #12]
 80093f6:	eef4 7aeb 	vcmpe.f32	s15, s23
 80093fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80093fe:	d4e5      	bmi.n	80093cc <SlalomRight+0x21c>
 8009400:	e731      	b.n	8009266 <SlalomRight+0xb6>
	return mouse->now.wall.south;
 8009402:	f898 000c 	ldrb.w	r0, [r8, #12]
 8009406:	f3c0 1001 	ubfx	r0, r0, #4, #2
 800940a:	e7cf      	b.n	80093ac <SlalomRight+0x1fc>
	return mouse->now.wall.east;
 800940c:	f898 000c 	ldrb.w	r0, [r8, #12]
 8009410:	f3c0 0081 	ubfx	r0, r0, #2, #2
 8009414:	e7ca      	b.n	80093ac <SlalomRight+0x1fc>
	return mouse->now.wall.north;
 8009416:	f898 000c 	ldrb.w	r0, [r8, #12]
 800941a:	f000 0003 	and.w	r0, r0, #3
 800941e:	e7c5      	b.n	80093ac <SlalomRight+0x1fc>
				updateRealSearch(maze, mouse);
 8009420:	4641      	mov	r1, r8
 8009422:	9801      	ldr	r0, [sp, #4]
 8009424:	f003 f900 	bl	800c628 <updateRealSearch>
				Calc = 1;
 8009428:	2301      	movs	r3, #1
 800942a:	f8ca 3000 	str.w	r3, [sl]
 800942e:	e796      	b.n	800935e <SlalomRight+0x1ae>
				TargetAngularV = 0;
 8009430:	2300      	movs	r3, #0
 8009432:	602b      	str	r3, [r5, #0]
				break;
 8009434:	e779      	b.n	800932a <SlalomRight+0x17a>
 8009436:	f8df a04c 	ldr.w	sl, [pc, #76]	; 8009484 <SlalomRight+0x2d4>
 800943a:	f8df 9044 	ldr.w	r9, [pc, #68]	; 8009480 <SlalomRight+0x2d0>
 800943e:	e712      	b.n	8009266 <SlalomRight+0xb6>
 8009440:	54442d18 	.word	0x54442d18
 8009444:	3ff921fb 	.word	0x3ff921fb
 8009448:	20001564 	.word	0x20001564
 800944c:	2000154c 	.word	0x2000154c
 8009450:	200015a0 	.word	0x200015a0
 8009454:	20001318 	.word	0x20001318
 8009458:	2000152c 	.word	0x2000152c
 800945c:	2000151c 	.word	0x2000151c
 8009460:	20001218 	.word	0x20001218
 8009464:	20001228 	.word	0x20001228
 8009468:	20001580 	.word	0x20001580
 800946c:	2000158c 	.word	0x2000158c
 8009470:	43480000 	.word	0x43480000
 8009474:	437a0000 	.word	0x437a0000
 8009478:	00000000 	.word	0x00000000
 800947c:	20001224 	.word	0x20001224
 8009480:	2000121c 	.word	0x2000121c
 8009484:	20001220 	.word	0x20001220
 8009488:	200015c8 	.word	0x200015c8
 800948c:	00000000 	.word	0x00000000

08009490 <SlalomLeft>:
void SlalomLeft(maze_node *maze, profile *mouse)	//現在の速度から、最適な角加速度と、移動量、目標角度などを変更する。
{
 8009490:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	Pid[A_VELO_PID].flag = 1;
	//ここの値コピーとその他計算を事前に行う
	float v_turn = ExploreVelocity;       //スラローム時の重心速度
	float pre = Sla.Pre;         //スラローム前距離
	float fol = Sla.Fol;         //スラローム後距離
 8009494:	4a9e      	ldr	r2, [pc, #632]	; (8009710 <SlalomLeft+0x280>)
	float ang3 = Sla.Theta3;         //角速度が下がるのはang2からang3まで
	//このあたりのパラメータをどう調整、設計するかが鍵

	int now_pulse;

	now_pulse = TotalPulse[LEFT] + TotalPulse[RIGHT];	//汎用的に書いておく
 8009496:	4c9f      	ldr	r4, [pc, #636]	; (8009714 <SlalomLeft+0x284>)
	float alpha_turn = -Sla.Alpha;//046;//125;//16;//0.015*13;  //スラローム時の角加速度s
 8009498:	edd2 5a02 	vldr	s11, [r2, #8]
	Pid[A_VELO_PID].flag = 1;
 800949c:	f8df c2a0 	ldr.w	ip, [pc, #672]	; 8009740 <SlalomLeft+0x2b0>
	float v_turn = ExploreVelocity;       //スラローム時の重心速度
 80094a0:	4e9d      	ldr	r6, [pc, #628]	; (8009718 <SlalomLeft+0x288>)
	now_pulse = TotalPulse[LEFT] + TotalPulse[RIGHT];	//汎用的に書いておく
 80094a2:	6823      	ldr	r3, [r4, #0]
	float fol = Sla.Fol;         //スラローム後距離
 80094a4:	ed92 4a01 	vldr	s8, [r2, #4]
	float ang1 = Sla.Theta1;         //角速度が上がるのは0からang1まで
 80094a8:	ed92 6a04 	vldr	s12, [r2, #16]
	float ang2 = Sla.Theta2;         //角速度が一定なのはang1からang2まで
 80094ac:	edd2 6a05 	vldr	s13, [r2, #20]
	float ang3 = Sla.Theta3;         //角速度が下がるのはang2からang3まで
 80094b0:	ed92 3a06 	vldr	s6, [r2, #24]
	now_pulse = TotalPulse[LEFT] + TotalPulse[RIGHT];	//汎用的に書いておく
 80094b4:	6865      	ldr	r5, [r4, #4]
	float v_turn = ExploreVelocity;       //スラローム時の重心速度
 80094b6:	6836      	ldr	r6, [r6, #0]
{
 80094b8:	460f      	mov	r7, r1
	switch(mouse->now.car%8)//方角に合わせて、
 80094ba:	7a89      	ldrb	r1, [r1, #10]
	Pid[A_VELO_PID].flag = 1;
 80094bc:	f04f 0e01 	mov.w	lr, #1
	switch(mouse->now.car%8)//方角に合わせて、
 80094c0:	f001 0107 	and.w	r1, r1, #7
{
 80094c4:	ed2d 8b02 	vpush	{d8}
 80094c8:	4680      	mov	r8, r0
	float alpha_turn = -Sla.Alpha;//046;//125;//16;//0.015*13;  //スラローム時の角加速度s
 80094ca:	eeb1 5a65 	vneg.f32	s10, s11
	Pid[A_VELO_PID].flag = 1;
 80094ce:	f8cc e028 	str.w	lr, [ip, #40]	; 0x28
	switch(mouse->now.car%8)//方角に合わせて、
 80094d2:	2906      	cmp	r1, #6
 80094d4:	d808      	bhi.n	80094e8 <SlalomLeft+0x58>
 80094d6:	e8df f011 	tbh	[pc, r1, lsl #1]
 80094da:	0109      	.short	0x0109
 80094dc:	01050007 	.word	0x01050007
 80094e0:	01010007 	.word	0x01010007
 80094e4:	00d20007 	.word	0x00d20007
	now_pulse = TotalPulse[LEFT] + TotalPulse[RIGHT];	//汎用的に書いておく
 80094e8:	442b      	add	r3, r5
 80094ea:	ee07 3a10 	vmov	s14, r3


	}
	else//なければ
	{
		while( now_pulse + pre  > (TotalPulse[LEFT] + TotalPulse[RIGHT]) ) //移動量を条件に直進
 80094ee:	6823      	ldr	r3, [r4, #0]
 80094f0:	6861      	ldr	r1, [r4, #4]
 80094f2:	edd2 7a00 	vldr	s15, [r2]
 80094f6:	440b      	add	r3, r1
 80094f8:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80094fc:	ee04 3a90 	vmov	s9, r3
 8009500:	ee37 7a27 	vadd.f32	s14, s14, s15
 8009504:	eef8 4ae4 	vcvt.f32.s32	s9, s9
 8009508:	eeb4 7ae4 	vcmpe.f32	s14, s9
 800950c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009510:	f340 80f3 	ble.w	80096fa <SlalomLeft+0x26a>
 8009514:	4d81      	ldr	r5, [pc, #516]	; (800971c <SlalomLeft+0x28c>)
 8009516:	4982      	ldr	r1, [pc, #520]	; (8009720 <SlalomLeft+0x290>)
 8009518:	4a82      	ldr	r2, [pc, #520]	; (8009724 <SlalomLeft+0x294>)
		{
				TargetAngularV = 0;
 800951a:	2000      	movs	r0, #0
 800951c:	6028      	str	r0, [r5, #0]
				AngularAcceleration = 0;
 800951e:	6008      	str	r0, [r1, #0]
				TargetVelocity[BODY] = v_turn;
 8009520:	6096      	str	r6, [r2, #8]
		while( now_pulse + pre  > (TotalPulse[LEFT] + TotalPulse[RIGHT]) ) //移動量を条件に直進
 8009522:	6823      	ldr	r3, [r4, #0]
 8009524:	f8d4 e004 	ldr.w	lr, [r4, #4]
 8009528:	4473      	add	r3, lr
 800952a:	ee07 3a90 	vmov	s15, r3
 800952e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009532:	eef4 7ac7 	vcmpe.f32	s15, s14
 8009536:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800953a:	d4ef      	bmi.n	800951c <SlalomLeft+0x8c>
 800953c:	f8df 9204 	ldr.w	r9, [pc, #516]	; 8009744 <SlalomLeft+0x2b4>

		}
	}

	Pid[A_VELO_PID].flag = 0;
	float start_angle = Angle;
 8009540:	4b79      	ldr	r3, [pc, #484]	; (8009728 <SlalomLeft+0x298>)
 8009542:	edd3 7a00 	vldr	s15, [r3]
	while(start_angle - ang1 < Angle)
 8009546:	ed93 7a00 	vldr	s14, [r3]
 800954a:	ee37 6ac6 	vsub.f32	s12, s15, s12
	Pid[A_VELO_PID].flag = 0;
 800954e:	2200      	movs	r2, #0
	while(start_angle - ang1 < Angle)
 8009550:	eeb4 6ac7 	vcmpe.f32	s12, s14
 8009554:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
	Pid[A_VELO_PID].flag = 0;
 8009558:	f8cc 2028 	str.w	r2, [ip, #40]	; 0x28
	while(start_angle - ang1 < Angle)
 800955c:	d50a      	bpl.n	8009574 <SlalomLeft+0xe4>
 800955e:	4a71      	ldr	r2, [pc, #452]	; (8009724 <SlalomLeft+0x294>)
	{
			AngularAcceleration = alpha_turn;
 8009560:	ed81 5a00 	vstr	s10, [r1]
			TargetVelocity[BODY] = v_turn;
 8009564:	6096      	str	r6, [r2, #8]
	while(start_angle - ang1 < Angle)
 8009566:	ed93 7a00 	vldr	s14, [r3]
 800956a:	eeb4 7ac6 	vcmpe.f32	s14, s12
 800956e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009572:	dcf5      	bgt.n	8009560 <SlalomLeft+0xd0>
	}
	AngularAcceleration = 0;
 8009574:	2200      	movs	r2, #0
 8009576:	600a      	str	r2, [r1, #0]
	AngularLeapsity = 0;
	while(start_angle - ang2 < Angle)
 8009578:	ee77 6ae6 	vsub.f32	s13, s15, s13
 800957c:	ed93 7a00 	vldr	s14, [r3]
	AngularLeapsity = 0;
 8009580:	f8c9 2000 	str.w	r2, [r9]
	while(start_angle - ang2 < Angle)
 8009584:	eef4 6ac7 	vcmpe.f32	s13, s14
 8009588:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800958c:	d50a      	bpl.n	80095a4 <SlalomLeft+0x114>
 800958e:	4a65      	ldr	r2, [pc, #404]	; (8009724 <SlalomLeft+0x294>)
	{
			TargetAngularV = TargetAngularV;
 8009590:	6828      	ldr	r0, [r5, #0]
 8009592:	6028      	str	r0, [r5, #0]
			TargetVelocity[BODY] = v_turn;
 8009594:	6096      	str	r6, [r2, #8]
	while(start_angle - ang2 < Angle)
 8009596:	ed93 7a00 	vldr	s14, [r3]
 800959a:	eeb4 7ae6 	vcmpe.f32	s14, s13
 800959e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80095a2:	dcf5      	bgt.n	8009590 <SlalomLeft+0x100>
	}

	while( start_angle - ang3 < Angle)
 80095a4:	ee77 7ac3 	vsub.f32	s15, s15, s6
 80095a8:	ed93 7a00 	vldr	s14, [r3]
 80095ac:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80095b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80095b4:	dd1d      	ble.n	80095f2 <SlalomLeft+0x162>
	{
			AngularAcceleration = -alpha_turn;
 80095b6:	edc1 5a00 	vstr	s11, [r1]
			if(TargetAngularV > 0)
 80095ba:	ed95 7a00 	vldr	s14, [r5]
 80095be:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 80095c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80095c6:	f300 8095 	bgt.w	80096f4 <SlalomLeft+0x264>
 80095ca:	4a56      	ldr	r2, [pc, #344]	; (8009724 <SlalomLeft+0x294>)
 80095cc:	e009      	b.n	80095e2 <SlalomLeft+0x152>
			AngularAcceleration = -alpha_turn;
 80095ce:	edc1 5a00 	vstr	s11, [r1]
			if(TargetAngularV > 0)
 80095d2:	ed95 7a00 	vldr	s14, [r5]
 80095d6:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 80095da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80095de:	f300 8089 	bgt.w	80096f4 <SlalomLeft+0x264>
			{
				TargetAngularV = 0;
				break;
			}
			TargetVelocity[BODY] = v_turn;
 80095e2:	6096      	str	r6, [r2, #8]
	while( start_angle - ang3 < Angle)
 80095e4:	ed93 7a00 	vldr	s14, [r3]
 80095e8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80095ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80095f0:	dced      	bgt.n	80095ce <SlalomLeft+0x13e>
	}
	AngularAcceleration = 0;
 80095f2:	f04f 0b00 	mov.w	fp, #0
 80095f6:	f8c1 b000 	str.w	fp, [r1]
	AngularLeapsity = 0;
	TargetAngularV = 0;
 80095fa:	f8c5 b000 	str.w	fp, [r5]

	now_pulse = TotalPulse[LEFT] + TotalPulse[RIGHT];
 80095fe:	6823      	ldr	r3, [r4, #0]
 8009600:	6862      	ldr	r2, [r4, #4]
	while( now_pulse + fol > (TotalPulse[LEFT] + TotalPulse[RIGHT]) )
	{
			TargetAngularV = 0;
			TargetVelocity[BODY] = v_turn;
 8009602:	f8df a120 	ldr.w	sl, [pc, #288]	; 8009724 <SlalomLeft+0x294>
			if(Calc == 0)
 8009606:	f8df 9140 	ldr.w	r9, [pc, #320]	; 8009748 <SlalomLeft+0x2b8>
	now_pulse = TotalPulse[LEFT] + TotalPulse[RIGHT];
 800960a:	4413      	add	r3, r2
 800960c:	ee08 3a10 	vmov	s16, r3
 8009610:	eeb8 8ac8 	vcvt.f32.s32	s16, s16
 8009614:	ee38 8a04 	vadd.f32	s16, s16, s8
	while( now_pulse + fol > (TotalPulse[LEFT] + TotalPulse[RIGHT]) )
 8009618:	e006      	b.n	8009628 <SlalomLeft+0x198>
			TargetAngularV = 0;
 800961a:	f8c5 b000 	str.w	fp, [r5]
			TargetVelocity[BODY] = v_turn;
 800961e:	f8ca 6008 	str.w	r6, [sl, #8]
			if(Calc == 0)
 8009622:	f8d9 3000 	ldr.w	r3, [r9]
 8009626:	b313      	cbz	r3, 800966e <SlalomLeft+0x1de>
	while( now_pulse + fol > (TotalPulse[LEFT] + TotalPulse[RIGHT]) )
 8009628:	6823      	ldr	r3, [r4, #0]
 800962a:	6862      	ldr	r2, [r4, #4]
 800962c:	4413      	add	r3, r2
 800962e:	ee07 3a90 	vmov	s15, r3
 8009632:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009636:	eef4 7ac8 	vcmpe.f32	s15, s16
 800963a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800963e:	d4ec      	bmi.n	800961a <SlalomLeft+0x18a>
			{
				updateRealSearch(maze, mouse);
				Calc = 1;
			}
	}
	TargetAngle += -90*M_PI/180;
 8009640:	4d3a      	ldr	r5, [pc, #232]	; (800972c <SlalomLeft+0x29c>)
 8009642:	6828      	ldr	r0, [r5, #0]
 8009644:	f7fe feb8 	bl	80083b8 <__aeabi_f2d>
 8009648:	a32f      	add	r3, pc, #188	; (adr r3, 8009708 <SlalomLeft+0x278>)
 800964a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800964e:	f7fe fd53 	bl	80080f8 <__aeabi_dsub>
 8009652:	f7ff fa01 	bl	8008a58 <__aeabi_d2f>
	KeepPulse[BODY] += TotalPulse[BODY] - KeepPulse[BODY];
 8009656:	4a36      	ldr	r2, [pc, #216]	; (8009730 <SlalomLeft+0x2a0>)
	TargetAngle += -90*M_PI/180;
 8009658:	6028      	str	r0, [r5, #0]
}
 800965a:	ecbd 8b02 	vpop	{d8}
	KeepPulse[BODY] += TotalPulse[BODY] - KeepPulse[BODY];
 800965e:	68a3      	ldr	r3, [r4, #8]
 8009660:	6890      	ldr	r0, [r2, #8]
 8009662:	6891      	ldr	r1, [r2, #8]
 8009664:	1a1b      	subs	r3, r3, r0
 8009666:	440b      	add	r3, r1
 8009668:	6093      	str	r3, [r2, #8]
}
 800966a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
				updateRealSearch(maze, mouse);
 800966e:	4639      	mov	r1, r7
 8009670:	4640      	mov	r0, r8
 8009672:	f002 ffd9 	bl	800c628 <updateRealSearch>
				Calc = 1;
 8009676:	2301      	movs	r3, #1
 8009678:	f8c9 3000 	str.w	r3, [r9]
 800967c:	e7d4      	b.n	8009628 <SlalomLeft+0x198>
	return mouse->now.wall.west;
 800967e:	7b39      	ldrb	r1, [r7, #12]
 8009680:	0989      	lsrs	r1, r1, #6
	if (getFrontWall(mouse) == WALL/*前に壁があれば、*/)
 8009682:	2901      	cmp	r1, #1
 8009684:	f47f af30 	bne.w	80094e8 <SlalomLeft+0x58>
 8009688:	f8df 90b8 	ldr.w	r9, [pc, #184]	; 8009744 <SlalomLeft+0x2b4>
 800968c:	4d23      	ldr	r5, [pc, #140]	; (800971c <SlalomLeft+0x28c>)
 800968e:	f8d9 e000 	ldr.w	lr, [r9]
 8009692:	4923      	ldr	r1, [pc, #140]	; (8009720 <SlalomLeft+0x290>)
 8009694:	4a27      	ldr	r2, [pc, #156]	; (8009734 <SlalomLeft+0x2a4>)
		while(Photo[FL] < 200 || Photo[FR] < 250)//Photo[FL] < 200 || Photo[FR] < 250/*前壁の閾値より低い間*/)
 8009696:	eddf 4a28 	vldr	s9, [pc, #160]	; 8009738 <SlalomLeft+0x2a8>
 800969a:	eddf 3a28 	vldr	s7, [pc, #160]	; 800973c <SlalomLeft+0x2ac>
			TargetVelocity[BODY] = v_turn;
 800969e:	f8df a084 	ldr.w	sl, [pc, #132]	; 8009724 <SlalomLeft+0x294>
			TargetAngularV = 0;
 80096a2:	2300      	movs	r3, #0
	if (getFrontWall(mouse) == WALL/*前に壁があれば、*/)
 80096a4:	2000      	movs	r0, #0
 80096a6:	e005      	b.n	80096b4 <SlalomLeft+0x224>
			TargetAngularV = 0;
 80096a8:	602b      	str	r3, [r5, #0]
			AngularLeapsity = 0;
 80096aa:	469e      	mov	lr, r3
			AngularAcceleration = 0;
 80096ac:	600b      	str	r3, [r1, #0]
 80096ae:	2001      	movs	r0, #1
			TargetVelocity[BODY] = v_turn;
 80096b0:	f8ca 6008 	str.w	r6, [sl, #8]
		while(Photo[FL] < 200 || Photo[FR] < 250)//Photo[FL] < 200 || Photo[FR] < 250/*前壁の閾値より低い間*/)
 80096b4:	ed92 7a00 	vldr	s14, [r2]
 80096b8:	eeb4 7ae4 	vcmpe.f32	s14, s9
 80096bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80096c0:	d4f2      	bmi.n	80096a8 <SlalomLeft+0x218>
 80096c2:	ed92 7a03 	vldr	s14, [r2, #12]
 80096c6:	eeb4 7ae3 	vcmpe.f32	s14, s7
 80096ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80096ce:	d4eb      	bmi.n	80096a8 <SlalomLeft+0x218>
 80096d0:	2800      	cmp	r0, #0
 80096d2:	f43f af35 	beq.w	8009540 <SlalomLeft+0xb0>
 80096d6:	f8c9 e000 	str.w	lr, [r9]
 80096da:	e731      	b.n	8009540 <SlalomLeft+0xb0>
	return mouse->now.wall.south;
 80096dc:	7b39      	ldrb	r1, [r7, #12]
 80096de:	f3c1 1101 	ubfx	r1, r1, #4, #2
 80096e2:	e7ce      	b.n	8009682 <SlalomLeft+0x1f2>
	return mouse->now.wall.east;
 80096e4:	7b39      	ldrb	r1, [r7, #12]
 80096e6:	f3c1 0181 	ubfx	r1, r1, #2, #2
 80096ea:	e7ca      	b.n	8009682 <SlalomLeft+0x1f2>
	return mouse->now.wall.north;
 80096ec:	7b39      	ldrb	r1, [r7, #12]
 80096ee:	f001 0103 	and.w	r1, r1, #3
 80096f2:	e7c6      	b.n	8009682 <SlalomLeft+0x1f2>
				TargetAngularV = 0;
 80096f4:	2300      	movs	r3, #0
 80096f6:	602b      	str	r3, [r5, #0]
				break;
 80096f8:	e77b      	b.n	80095f2 <SlalomLeft+0x162>
 80096fa:	f8df 9048 	ldr.w	r9, [pc, #72]	; 8009744 <SlalomLeft+0x2b4>
 80096fe:	4d07      	ldr	r5, [pc, #28]	; (800971c <SlalomLeft+0x28c>)
 8009700:	4907      	ldr	r1, [pc, #28]	; (8009720 <SlalomLeft+0x290>)
 8009702:	e71d      	b.n	8009540 <SlalomLeft+0xb0>
 8009704:	f3af 8000 	nop.w
 8009708:	54442d18 	.word	0x54442d18
 800970c:	3ff921fb 	.word	0x3ff921fb
 8009710:	20001564 	.word	0x20001564
 8009714:	2000154c 	.word	0x2000154c
 8009718:	200015a0 	.word	0x200015a0
 800971c:	2000152c 	.word	0x2000152c
 8009720:	2000121c 	.word	0x2000121c
 8009724:	2000151c 	.word	0x2000151c
 8009728:	20001218 	.word	0x20001218
 800972c:	20001228 	.word	0x20001228
 8009730:	20001580 	.word	0x20001580
 8009734:	2000158c 	.word	0x2000158c
 8009738:	43480000 	.word	0x43480000
 800973c:	437a0000 	.word	0x437a0000
 8009740:	20001318 	.word	0x20001318
 8009744:	20001220 	.word	0x20001220
 8009748:	200015c8 	.word	0x200015c8
 800974c:	00000000 	.word	0x00000000

08009750 <Accel>:
void Accel(float add_distance, float explore_speed, maze_node *maze, profile *mouse)
{
 8009750:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009754:	ed2d 8b02 	vpush	{d8}
	TargetAngularV = 0;
 8009758:	4a4d      	ldr	r2, [pc, #308]	; (8009890 <Accel+0x140>)
 800975a:	eddf 8a4e 	vldr	s17, [pc, #312]	; 8009894 <Accel+0x144>
	float additional_speed=0;
	additional_speed = explore_speed - CurrentVelocity[BODY];

	Acceleration = T1*additional_speed*additional_speed / (2*add_distance);
#else
	Acceleration = 2.89000f;
 800975e:	4b4e      	ldr	r3, [pc, #312]	; (8009898 <Accel+0x148>)
	TargetAngularV = 0;
 8009760:	edc2 8a00 	vstr	s17, [r2]
{
 8009764:	b083      	sub	sp, #12
#endif
	int target_pulse = (int)(2*add_distance/MM_PER_PULSE);
 8009766:	ee70 7a00 	vadd.f32	s15, s0, s0
	Acceleration = 2.89000f;
 800976a:	4a4c      	ldr	r2, [pc, #304]	; (800989c <Accel+0x14c>)
{
 800976c:	9000      	str	r0, [sp, #0]
	Acceleration = 2.89000f;
 800976e:	6013      	str	r3, [r2, #0]
	int target_pulse = (int)(2*add_distance/MM_PER_PULSE);
 8009770:	ee17 0a90 	vmov	r0, s15
{
 8009774:	eeb0 8a60 	vmov.f32	s16, s1
 8009778:	9101      	str	r1, [sp, #4]
	int target_pulse = (int)(2*add_distance/MM_PER_PULSE);
 800977a:	f7fe fe1d 	bl	80083b8 <__aeabi_f2d>
 800977e:	a340      	add	r3, pc, #256	; (adr r3, 8009880 <Accel+0x130>)
 8009780:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009784:	f7fe ff9a 	bl	80086bc <__aeabi_ddiv>
 8009788:	f7ff f91e 	bl	80089c8 <__aeabi_d2iz>

//	_Bool wall_cut = false;
	Pid[A_VELO_PID].flag = 1;
 800978c:	4b44      	ldr	r3, [pc, #272]	; (80098a0 <Accel+0x150>)
 800978e:	4c45      	ldr	r4, [pc, #276]	; (80098a4 <Accel+0x154>)
 8009790:	4e45      	ldr	r6, [pc, #276]	; (80098a8 <Accel+0x158>)
		if(KeepPulse[BODY] + (target_pulse*0.80) < TotalPulse[BODY] && Calc == 0)
		{
			updateRealSearch(maze, mouse);
			Calc = 1;
		}
		if(TargetVelocity[BODY] > explore_speed)
 8009792:	f8df a11c 	ldr.w	sl, [pc, #284]	; 80098b0 <Accel+0x160>
	Pid[A_VELO_PID].flag = 1;
 8009796:	2201      	movs	r2, #1
	int target_pulse = (int)(2*add_distance/MM_PER_PULSE);
 8009798:	4605      	mov	r5, r0
	Pid[A_VELO_PID].flag = 1;
 800979a:	629a      	str	r2, [r3, #40]	; 0x28
	while( ( KeepPulse[BODY] + target_pulse) > ( TotalPulse[BODY] ) )
 800979c:	e006      	b.n	80097ac <Accel+0x5c>
		if(TargetVelocity[BODY] > explore_speed)
 800979e:	edda 7a02 	vldr	s15, [sl, #8]
 80097a2:	eef4 7ac8 	vcmpe.f32	s15, s16
 80097a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80097aa:	dc39      	bgt.n	8009820 <Accel+0xd0>
	while( ( KeepPulse[BODY] + target_pulse) > ( TotalPulse[BODY] ) )
 80097ac:	68a3      	ldr	r3, [r4, #8]
 80097ae:	68b2      	ldr	r2, [r6, #8]
 80097b0:	442b      	add	r3, r5
 80097b2:	4293      	cmp	r3, r2
		if(KeepPulse[BODY] + (target_pulse*0.80) < TotalPulse[BODY] && Calc == 0)
 80097b4:	4628      	mov	r0, r5
	while( ( KeepPulse[BODY] + target_pulse) > ( TotalPulse[BODY] ) )
 80097b6:	dd3e      	ble.n	8009836 <Accel+0xe6>
		if(KeepPulse[BODY] + (target_pulse*0.80) < TotalPulse[BODY] && Calc == 0)
 80097b8:	f7fe fdec 	bl	8008394 <__aeabi_i2d>
 80097bc:	a332      	add	r3, pc, #200	; (adr r3, 8009888 <Accel+0x138>)
 80097be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80097c2:	f7fe fe51 	bl	8008468 <__aeabi_dmul>
 80097c6:	f8d4 b008 	ldr.w	fp, [r4, #8]
 80097ca:	68b7      	ldr	r7, [r6, #8]
 80097cc:	4680      	mov	r8, r0
 80097ce:	4658      	mov	r0, fp
 80097d0:	4689      	mov	r9, r1
 80097d2:	f7fe fddf 	bl	8008394 <__aeabi_i2d>
 80097d6:	4602      	mov	r2, r0
 80097d8:	460b      	mov	r3, r1
 80097da:	4640      	mov	r0, r8
 80097dc:	4649      	mov	r1, r9
 80097de:	f7fe fc8d 	bl	80080fc <__adddf3>
 80097e2:	4680      	mov	r8, r0
 80097e4:	4638      	mov	r0, r7
 80097e6:	4689      	mov	r9, r1
 80097e8:	f7fe fdd4 	bl	8008394 <__aeabi_i2d>
 80097ec:	4602      	mov	r2, r0
 80097ee:	460b      	mov	r3, r1
 80097f0:	4640      	mov	r0, r8
 80097f2:	4649      	mov	r1, r9
 80097f4:	f7ff f8aa 	bl	800894c <__aeabi_dcmplt>
 80097f8:	2800      	cmp	r0, #0
 80097fa:	d0d0      	beq.n	800979e <Accel+0x4e>
 80097fc:	4b2b      	ldr	r3, [pc, #172]	; (80098ac <Accel+0x15c>)
 80097fe:	681b      	ldr	r3, [r3, #0]
 8009800:	2b00      	cmp	r3, #0
 8009802:	d1cc      	bne.n	800979e <Accel+0x4e>
			updateRealSearch(maze, mouse);
 8009804:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009808:	f002 ff0e 	bl	800c628 <updateRealSearch>
			Calc = 1;
 800980c:	4a27      	ldr	r2, [pc, #156]	; (80098ac <Accel+0x15c>)
 800980e:	2301      	movs	r3, #1
 8009810:	6013      	str	r3, [r2, #0]
		if(TargetVelocity[BODY] > explore_speed)
 8009812:	edda 7a02 	vldr	s15, [sl, #8]
 8009816:	eef4 7ac8 	vcmpe.f32	s15, s16
 800981a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800981e:	ddc5      	ble.n	80097ac <Accel+0x5c>
		{
			Acceleration = 0;
 8009820:	4b1e      	ldr	r3, [pc, #120]	; (800989c <Accel+0x14c>)
 8009822:	edc3 8a00 	vstr	s17, [r3]
			TargetVelocity[BODY] = explore_speed;
 8009826:	ed8a 8a02 	vstr	s16, [sl, #8]
	while( ( KeepPulse[BODY] + target_pulse) > ( TotalPulse[BODY] ) )
 800982a:	68a3      	ldr	r3, [r4, #8]
 800982c:	68b2      	ldr	r2, [r6, #8]
 800982e:	442b      	add	r3, r5
 8009830:	4293      	cmp	r3, r2
		if(KeepPulse[BODY] + (target_pulse*0.80) < TotalPulse[BODY] && Calc == 0)
 8009832:	4628      	mov	r0, r5
	while( ( KeepPulse[BODY] + target_pulse) > ( TotalPulse[BODY] ) )
 8009834:	dcc0      	bgt.n	80097b8 <Accel+0x68>
//			wall_cut = true;
//			ChangeLED(3);
//		}

	}
	Acceleration = 0;
 8009836:	4a19      	ldr	r2, [pc, #100]	; (800989c <Accel+0x14c>)
 8009838:	2300      	movs	r3, #0
 800983a:	6013      	str	r3, [r2, #0]
//	wall_cut = false;
	KeepPulse[BODY] += target_pulse;
 800983c:	68a3      	ldr	r3, [r4, #8]
 800983e:	442b      	add	r3, r5
 8009840:	60a3      	str	r3, [r4, #8]
	KeepPulse[LEFT] += target_pulse*0.5f;
 8009842:	ed94 7a00 	vldr	s14, [r4]
 8009846:	ee07 5a90 	vmov	s15, r5
 800984a:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800984e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009852:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 8009856:	eea7 7aa6 	vfma.f32	s14, s15, s13
 800985a:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 800985e:	ed84 7a00 	vstr	s14, [r4]
	KeepPulse[RIGHT] += target_pulse*0.5f;
 8009862:	ed94 7a01 	vldr	s14, [r4, #4]
 8009866:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800986a:	eea7 7aa6 	vfma.f32	s14, s15, s13
 800986e:	eefd 7ac7 	vcvt.s32.f32	s15, s14
 8009872:	edc4 7a01 	vstr	s15, [r4, #4]
}
 8009876:	b003      	add	sp, #12
 8009878:	ecbd 8b02 	vpop	{d8}
 800987c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009880:	8fa963a1 	.word	0x8fa963a1
 8009884:	3f5023d2 	.word	0x3f5023d2
 8009888:	9999999a 	.word	0x9999999a
 800988c:	3fe99999 	.word	0x3fe99999
 8009890:	2000152c 	.word	0x2000152c
 8009894:	00000000 	.word	0x00000000
 8009898:	4038f5c3 	.word	0x4038f5c3
 800989c:	20001214 	.word	0x20001214
 80098a0:	20001318 	.word	0x20001318
 80098a4:	20001580 	.word	0x20001580
 80098a8:	2000154c 	.word	0x2000154c
 80098ac:	200015c8 	.word	0x200015c8
 80098b0:	2000151c 	.word	0x2000151c
 80098b4:	00000000 	.word	0x00000000

080098b8 <Decel>:
void Decel(float dec_distance, float end_speed)
{
 80098b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80098bc:	ed2d 8b04 	vpush	{d8-d9}

#else
	Acceleration = -2.89;
#endif
	//ここより下を分けて書くべきかはあとで考える
	int target_pulse = (int)(2*dec_distance/MM_PER_PULSE);
 80098c0:	ee70 7a00 	vadd.f32	s15, s0, s0
	Acceleration = -2.89;
 80098c4:	4a5a      	ldr	r2, [pc, #360]	; (8009a30 <Decel+0x178>)
 80098c6:	4b5b      	ldr	r3, [pc, #364]	; (8009a34 <Decel+0x17c>)
 80098c8:	6013      	str	r3, [r2, #0]
{
 80098ca:	b083      	sub	sp, #12
	int target_pulse = (int)(2*dec_distance/MM_PER_PULSE);
 80098cc:	ee17 0a90 	vmov	r0, s15
{
 80098d0:	eeb0 8a60 	vmov.f32	s16, s1
	int target_pulse = (int)(2*dec_distance/MM_PER_PULSE);
 80098d4:	f7fe fd70 	bl	80083b8 <__aeabi_f2d>
 80098d8:	a351      	add	r3, pc, #324	; (adr r3, 8009a20 <Decel+0x168>)
 80098da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80098de:	f7fe feed 	bl	80086bc <__aeabi_ddiv>
 80098e2:	f7ff f871 	bl	80089c8 <__aeabi_d2iz>
 80098e6:	4b54      	ldr	r3, [pc, #336]	; (8009a38 <Decel+0x180>)
 80098e8:	4c54      	ldr	r4, [pc, #336]	; (8009a3c <Decel+0x184>)
 80098ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80098ec:	9301      	str	r3, [sp, #4]

	while( (	(Photo[FR]+Photo[FL]) < 3800) && ( KeepPulse[BODY] + target_pulse) > ( TotalPulse[BODY]) )
 80098ee:	2300      	movs	r3, #0
	int target_pulse = (int)(2*dec_distance/MM_PER_PULSE);
 80098f0:	4605      	mov	r5, r0
 80098f2:	4e53      	ldr	r6, [pc, #332]	; (8009a40 <Decel+0x188>)
	while( (	(Photo[FR]+Photo[FL]) < 3800) && ( KeepPulse[BODY] + target_pulse) > ( TotalPulse[BODY]) )
 80098f4:	ed9f 9a53 	vldr	s18, [pc, #332]	; 8009a44 <Decel+0x18c>
 80098f8:	f8df a160 	ldr.w	sl, [pc, #352]	; 8009a5c <Decel+0x1a4>
	{
		if(end_speed == 0){
 80098fc:	eddf 8a52 	vldr	s17, [pc, #328]	; 8009a48 <Decel+0x190>
			if(TargetVelocity[BODY] <= 90){
 8009900:	eddf 9a52 	vldr	s19, [pc, #328]	; 8009a4c <Decel+0x194>
	while( (	(Photo[FR]+Photo[FL]) < 3800) && ( KeepPulse[BODY] + target_pulse) > ( TotalPulse[BODY]) )
 8009904:	9300      	str	r3, [sp, #0]
 8009906:	e033      	b.n	8009970 <Decel+0xb8>
			if(TargetVelocity[BODY] <= 90){
 8009908:	eef4 7ae9 	vcmpe.f32	s15, s19
 800990c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009910:	d80a      	bhi.n	8009928 <Decel+0x70>
				TargetVelocity[BODY] = 90;//end_speed;
 8009912:	edc3 9a02 	vstr	s19, [r3, #8]
			}
		}
		else if(end_speed != 0){
			if(TargetVelocity[BODY] <= end_speed){
				TargetVelocity[BODY] = end_speed;//90;//end_speed;
				Acceleration = 0;
 8009916:	4b46      	ldr	r3, [pc, #280]	; (8009a30 <Decel+0x178>)
 8009918:	edc3 8a00 	vstr	s17, [r3]
				TargetAngularV = 0;
 800991c:	4b4c      	ldr	r3, [pc, #304]	; (8009a50 <Decel+0x198>)
 800991e:	edc3 8a00 	vstr	s17, [r3]
				AngularAcceleration = 0;
 8009922:	4b4c      	ldr	r3, [pc, #304]	; (8009a54 <Decel+0x19c>)
 8009924:	edc3 8a00 	vstr	s17, [r3]
			}
		}
		if(KeepPulse[BODY] + (target_pulse*0.65) < TotalPulse[BODY] ) //距離で制御を切り替えるなら、別のwhileを用意すればいいのでは
 8009928:	4628      	mov	r0, r5
 800992a:	f7fe fd33 	bl	8008394 <__aeabi_i2d>
 800992e:	a33e      	add	r3, pc, #248	; (adr r3, 8009a28 <Decel+0x170>)
 8009930:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009934:	f7fe fd98 	bl	8008468 <__aeabi_dmul>
 8009938:	f8d4 b008 	ldr.w	fp, [r4, #8]
 800993c:	f8da 7008 	ldr.w	r7, [sl, #8]
 8009940:	4680      	mov	r8, r0
 8009942:	4658      	mov	r0, fp
 8009944:	4689      	mov	r9, r1
 8009946:	f7fe fd25 	bl	8008394 <__aeabi_i2d>
 800994a:	4602      	mov	r2, r0
 800994c:	460b      	mov	r3, r1
 800994e:	4640      	mov	r0, r8
 8009950:	4649      	mov	r1, r9
 8009952:	f7fe fbd3 	bl	80080fc <__adddf3>
 8009956:	4680      	mov	r8, r0
 8009958:	4638      	mov	r0, r7
 800995a:	4689      	mov	r9, r1
 800995c:	f7fe fd1a 	bl	8008394 <__aeabi_i2d>
 8009960:	4602      	mov	r2, r0
 8009962:	460b      	mov	r3, r1
 8009964:	4640      	mov	r0, r8
 8009966:	4649      	mov	r1, r9
 8009968:	f7fe fff0 	bl	800894c <__aeabi_dcmplt>
 800996c:	2800      	cmp	r0, #0
 800996e:	d14e      	bne.n	8009a0e <Decel+0x156>
	while( (	(Photo[FR]+Photo[FL]) < 3800) && ( KeepPulse[BODY] + target_pulse) > ( TotalPulse[BODY]) )
 8009970:	ed96 7a03 	vldr	s14, [r6, #12]
 8009974:	edd6 7a00 	vldr	s15, [r6]
 8009978:	ee77 7a27 	vadd.f32	s15, s14, s15
 800997c:	eef4 7ac9 	vcmpe.f32	s15, s18
 8009980:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009984:	d515      	bpl.n	80099b2 <Decel+0xfa>
 8009986:	68a3      	ldr	r3, [r4, #8]
 8009988:	f8da 2008 	ldr.w	r2, [sl, #8]
 800998c:	442b      	add	r3, r5
 800998e:	4293      	cmp	r3, r2
 8009990:	dd0f      	ble.n	80099b2 <Decel+0xfa>
		if(end_speed == 0){
 8009992:	eeb5 8a40 	vcmp.f32	s16, #0.0
			if(TargetVelocity[BODY] <= 90){
 8009996:	4b30      	ldr	r3, [pc, #192]	; (8009a58 <Decel+0x1a0>)
		if(end_speed == 0){
 8009998:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
			if(TargetVelocity[BODY] <= 90){
 800999c:	edd3 7a02 	vldr	s15, [r3, #8]
		if(end_speed == 0){
 80099a0:	d0b2      	beq.n	8009908 <Decel+0x50>
			if(TargetVelocity[BODY] <= end_speed){
 80099a2:	eef4 7ac8 	vcmpe.f32	s15, s16
 80099a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80099aa:	d8bd      	bhi.n	8009928 <Decel+0x70>
				TargetVelocity[BODY] = end_speed;//90;//end_speed;
 80099ac:	ed83 8a02 	vstr	s16, [r3, #8]
 80099b0:	e7b1      	b.n	8009916 <Decel+0x5e>
 80099b2:	9b00      	ldr	r3, [sp, #0]
 80099b4:	bb7b      	cbnz	r3, 8009a16 <Decel+0x15e>
		{
			Pid[A_VELO_PID].flag = 1;
		}
	}
	TargetVelocity[BODY] = end_speed;
 80099b6:	4a28      	ldr	r2, [pc, #160]	; (8009a58 <Decel+0x1a0>)
 80099b8:	ed82 8a02 	vstr	s16, [r2, #8]
	Acceleration = 0;
 80099bc:	4a1c      	ldr	r2, [pc, #112]	; (8009a30 <Decel+0x178>)
 80099be:	2300      	movs	r3, #0
 80099c0:	6013      	str	r3, [r2, #0]
	TargetAngularV = 0;
 80099c2:	4a23      	ldr	r2, [pc, #140]	; (8009a50 <Decel+0x198>)
 80099c4:	6013      	str	r3, [r2, #0]
	AngularAcceleration = 0;
 80099c6:	4a23      	ldr	r2, [pc, #140]	; (8009a54 <Decel+0x19c>)
 80099c8:	6013      	str	r3, [r2, #0]
	//ChangeLED(2);
	KeepPulse[BODY] += target_pulse;
 80099ca:	68a3      	ldr	r3, [r4, #8]
 80099cc:	442b      	add	r3, r5
 80099ce:	60a3      	str	r3, [r4, #8]
	KeepPulse[LEFT] += target_pulse*0.5f;
 80099d0:	ed94 7a00 	vldr	s14, [r4]
 80099d4:	ee07 5a90 	vmov	s15, r5
 80099d8:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80099dc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80099e0:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 80099e4:	eea7 7aa6 	vfma.f32	s14, s15, s13
 80099e8:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 80099ec:	ed84 7a00 	vstr	s14, [r4]
	KeepPulse[RIGHT] += target_pulse*0.5f;
 80099f0:	ed94 7a01 	vldr	s14, [r4, #4]
 80099f4:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80099f8:	eea7 7aa6 	vfma.f32	s14, s15, s13
 80099fc:	eefd 7ac7 	vcvt.s32.f32	s15, s14
 8009a00:	edc4 7a01 	vstr	s15, [r4, #4]


}
 8009a04:	b003      	add	sp, #12
 8009a06:	ecbd 8b04 	vpop	{d8-d9}
 8009a0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009a0e:	2301      	movs	r3, #1
			Pid[A_VELO_PID].flag = 1;
 8009a10:	e9cd 3300 	strd	r3, r3, [sp]
 8009a14:	e7ac      	b.n	8009970 <Decel+0xb8>
 8009a16:	4b08      	ldr	r3, [pc, #32]	; (8009a38 <Decel+0x180>)
 8009a18:	9a01      	ldr	r2, [sp, #4]
 8009a1a:	629a      	str	r2, [r3, #40]	; 0x28
 8009a1c:	e7cb      	b.n	80099b6 <Decel+0xfe>
 8009a1e:	bf00      	nop
 8009a20:	8fa963a1 	.word	0x8fa963a1
 8009a24:	3f5023d2 	.word	0x3f5023d2
 8009a28:	cccccccd 	.word	0xcccccccd
 8009a2c:	3fe4cccc 	.word	0x3fe4cccc
 8009a30:	20001214 	.word	0x20001214
 8009a34:	c038f5c3 	.word	0xc038f5c3
 8009a38:	20001318 	.word	0x20001318
 8009a3c:	20001580 	.word	0x20001580
 8009a40:	2000158c 	.word	0x2000158c
 8009a44:	456d8000 	.word	0x456d8000
 8009a48:	00000000 	.word	0x00000000
 8009a4c:	42b40000 	.word	0x42b40000
 8009a50:	2000152c 	.word	0x2000152c
 8009a54:	2000121c 	.word	0x2000121c
 8009a58:	2000151c 	.word	0x2000151c
 8009a5c:	2000154c 	.word	0x2000154c

08009a60 <Calib>:
//色々な処理を合わせて先に関数を作ってしまう方がいいかも。
//加速だけ、減速だけ、定速で、などを組み合わせて台形加減速で一区画走る、とか数区画走れる、途中で壁を見る、とか。
void Calib(int distance)
{
 8009a60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	//Pos.を考え中
	int target_pulse = (int)(2*distance/MM_PER_PULSE);
 8009a62:	0040      	lsls	r0, r0, #1
 8009a64:	f7fe fc96 	bl	8008394 <__aeabi_i2d>
 8009a68:	a325      	add	r3, pc, #148	; (adr r3, 8009b00 <Calib+0xa0>)
 8009a6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a6e:	f7fe fe25 	bl	80086bc <__aeabi_ddiv>
 8009a72:	f7fe ffa9 	bl	80089c8 <__aeabi_d2iz>
	//int keep_pulse = TotalPulse[BODY]+target_pulse;
	if(target_pulse > 0)
 8009a76:	2800      	cmp	r0, #0
 8009a78:	dd1a      	ble.n	8009ab0 <Calib+0x50>
	{
		while( KeepPulse[BODY] + target_pulse > TotalPulse[BODY] )
 8009a7a:	4a1b      	ldr	r2, [pc, #108]	; (8009ae8 <Calib+0x88>)
 8009a7c:	491b      	ldr	r1, [pc, #108]	; (8009aec <Calib+0x8c>)
 8009a7e:	6893      	ldr	r3, [r2, #8]
 8009a80:	688c      	ldr	r4, [r1, #8]
 8009a82:	4d1b      	ldr	r5, [pc, #108]	; (8009af0 <Calib+0x90>)
 8009a84:	4403      	add	r3, r0
 8009a86:	42a3      	cmp	r3, r4
 8009a88:	4c1a      	ldr	r4, [pc, #104]	; (8009af4 <Calib+0x94>)
 8009a8a:	dd0a      	ble.n	8009aa2 <Calib+0x42>
		{
			Acceleration = 0;
			TargetVelocity[BODY] = 70;
 8009a8c:	4f1a      	ldr	r7, [pc, #104]	; (8009af8 <Calib+0x98>)
			Acceleration = 0;
 8009a8e:	f04f 0c00 	mov.w	ip, #0
 8009a92:	f8c4 c000 	str.w	ip, [r4]
			TargetVelocity[BODY] = 70;
 8009a96:	60af      	str	r7, [r5, #8]
		while( KeepPulse[BODY] + target_pulse > TotalPulse[BODY] )
 8009a98:	6893      	ldr	r3, [r2, #8]
 8009a9a:	688e      	ldr	r6, [r1, #8]
 8009a9c:	4403      	add	r3, r0
 8009a9e:	42b3      	cmp	r3, r6
 8009aa0:	dcf7      	bgt.n	8009a92 <Calib+0x32>
		while( KeepPulse[BODY] + target_pulse < TotalPulse[BODY] )
		{
			Acceleration = 0;
			TargetVelocity[BODY] = -100;
		}
		KeepPulse[BODY] += target_pulse;
 8009aa2:	6893      	ldr	r3, [r2, #8]
 8009aa4:	4418      	add	r0, r3
 8009aa6:	6090      	str	r0, [r2, #8]
	}
	TargetVelocity[BODY] = 0;
 8009aa8:	2300      	movs	r3, #0
 8009aaa:	60ab      	str	r3, [r5, #8]
	Acceleration = 0;
 8009aac:	6023      	str	r3, [r4, #0]
}
 8009aae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if(target_pulse < 0 )
 8009ab0:	d014      	beq.n	8009adc <Calib+0x7c>
		while( KeepPulse[BODY] + target_pulse < TotalPulse[BODY] )
 8009ab2:	4a0d      	ldr	r2, [pc, #52]	; (8009ae8 <Calib+0x88>)
 8009ab4:	490d      	ldr	r1, [pc, #52]	; (8009aec <Calib+0x8c>)
 8009ab6:	6893      	ldr	r3, [r2, #8]
 8009ab8:	688c      	ldr	r4, [r1, #8]
 8009aba:	4d0d      	ldr	r5, [pc, #52]	; (8009af0 <Calib+0x90>)
 8009abc:	4403      	add	r3, r0
 8009abe:	42a3      	cmp	r3, r4
 8009ac0:	4c0c      	ldr	r4, [pc, #48]	; (8009af4 <Calib+0x94>)
 8009ac2:	daee      	bge.n	8009aa2 <Calib+0x42>
			TargetVelocity[BODY] = -100;
 8009ac4:	4f0d      	ldr	r7, [pc, #52]	; (8009afc <Calib+0x9c>)
			Acceleration = 0;
 8009ac6:	f04f 0c00 	mov.w	ip, #0
 8009aca:	f8c4 c000 	str.w	ip, [r4]
			TargetVelocity[BODY] = -100;
 8009ace:	60af      	str	r7, [r5, #8]
		while( KeepPulse[BODY] + target_pulse < TotalPulse[BODY] )
 8009ad0:	6893      	ldr	r3, [r2, #8]
 8009ad2:	688e      	ldr	r6, [r1, #8]
 8009ad4:	4403      	add	r3, r0
 8009ad6:	42b3      	cmp	r3, r6
 8009ad8:	dbf7      	blt.n	8009aca <Calib+0x6a>
 8009ada:	e7e2      	b.n	8009aa2 <Calib+0x42>
 8009adc:	4c05      	ldr	r4, [pc, #20]	; (8009af4 <Calib+0x94>)
 8009ade:	4d04      	ldr	r5, [pc, #16]	; (8009af0 <Calib+0x90>)
 8009ae0:	e7e2      	b.n	8009aa8 <Calib+0x48>
 8009ae2:	bf00      	nop
 8009ae4:	f3af 8000 	nop.w
 8009ae8:	20001580 	.word	0x20001580
 8009aec:	2000154c 	.word	0x2000154c
 8009af0:	2000151c 	.word	0x2000151c
 8009af4:	20001214 	.word	0x20001214
 8009af8:	428c0000 	.word	0x428c0000
 8009afc:	c2c80000 	.word	0xc2c80000
 8009b00:	8fa963a1 	.word	0x8fa963a1
 8009b04:	3f5023d2 	.word	0x3f5023d2

08009b08 <AjustCenter>:
//	Accel(7,-70);
//	Decel(7,0);
#endif

}
float AjustCenter(profile *mouse){
 8009b08:	b538      	push	{r3, r4, r5, lr}
	//x,y,lrfb
	PIDChangeFlag(L_WALL_PID, 0);
 8009b0a:	2100      	movs	r1, #0
float AjustCenter(profile *mouse){
 8009b0c:	4605      	mov	r5, r0
	PIDChangeFlag(L_WALL_PID, 0);
 8009b0e:	2002      	movs	r0, #2
 8009b10:	f004 ffc0 	bl	800ea94 <PIDChangeFlag>
	PIDChangeFlag(R_WALL_PID, 0);
 8009b14:	2100      	movs	r1, #0
 8009b16:	2003      	movs	r0, #3
 8009b18:	f004 ffbc 	bl	800ea94 <PIDChangeFlag>
	PIDChangeFlag(D_WALL_PID, 0);
 8009b1c:	2100      	movs	r1, #0
 8009b1e:	2001      	movs	r0, #1
 8009b20:	f004 ffb8 	bl	800ea94 <PIDChangeFlag>
	PIDChangeFlag( A_VELO_PID, 0);
 8009b24:	2100      	movs	r1, #0
 8009b26:	4608      	mov	r0, r1
 8009b28:	f004 ffb4 	bl	800ea94 <PIDChangeFlag>
	int wall_ctrl = GetWallCtrlDirection(mouse);
 8009b2c:	4628      	mov	r0, r5
 8009b2e:	f7ff f963 	bl	8008df8 <GetWallCtrlDirection>
	if(wall_ctrl == 0)
 8009b32:	4604      	mov	r4, r0
 8009b34:	bb10      	cbnz	r0, 8009b7c <AjustCenter+0x74>
		ChangeLED(7);
 8009b36:	2007      	movs	r0, #7
 8009b38:	f004 fb84 	bl	800e244 <ChangeLED>
//	float photo_threshold[2]=
//	{
//			3000,
//			4000
//	};
	switch(mouse->now.car%8)
 8009b3c:	7aab      	ldrb	r3, [r5, #10]
 8009b3e:	f003 0307 	and.w	r3, r3, #7
 8009b42:	2b06      	cmp	r3, #6
 8009b44:	d80e      	bhi.n	8009b64 <AjustCenter+0x5c>
 8009b46:	e8df f003 	tbb	[pc, r3]
 8009b4a:	0d48      	.short	0x0d48
 8009b4c:	0d1d0d3d 	.word	0x0d1d0d3d
 8009b50:	04          	.byte	0x04
 8009b51:	00          	.byte	0x00
				Angle = TargetAngle;
				return 61.5;
			}
		break;
	case west:
			if (mouse->now.wall.west == wall) //前に壁があれば前で調整
 8009b52:	7b2b      	ldrb	r3, [r5, #12]
 8009b54:	f003 02c0 	and.w	r2, r3, #192	; 0xc0
 8009b58:	2a40      	cmp	r2, #64	; 0x40
 8009b5a:	d06c      	beq.n	8009c36 <AjustCenter+0x12e>
				while( !((3000 < Photo[FL] + Photo[FR]) && (Photo[FL] + Photo[FR] < 4000)) )//&& !(-0.2< CurrentVelocity[BODY] && CurrentVelocity[BODY] <  0.2))
					{
//					ChangeLED(Pid[F_WALL_PID].flag);
					}
			}
			else if (mouse->now.wall.east == wall) //後ろに壁があるときはバック
 8009b5c:	f003 030c 	and.w	r3, r3, #12
 8009b60:	2b04      	cmp	r3, #4
 8009b62:	d038      	beq.n	8009bd6 <AjustCenter+0xce>
	default:
		break;
	}
//	Control_Mode = NOT_CTRL_PID;
	Pid[wall_ctrl].flag = 0;
	TargetAngularV = 0;
 8009b64:	4a6a      	ldr	r2, [pc, #424]	; (8009d10 <AjustCenter+0x208>)
	Pid[wall_ctrl].flag = 0;
 8009b66:	4b6b      	ldr	r3, [pc, #428]	; (8009d14 <AjustCenter+0x20c>)
	return 45;
 8009b68:	ed9f 0a6b 	vldr	s0, [pc, #428]	; 8009d18 <AjustCenter+0x210>
	TargetAngularV = 0;
 8009b6c:	2100      	movs	r1, #0
 8009b6e:	6011      	str	r1, [r2, #0]
	Pid[wall_ctrl].flag = 0;
 8009b70:	222c      	movs	r2, #44	; 0x2c
 8009b72:	fb02 3404 	mla	r4, r2, r4, r3
 8009b76:	2300      	movs	r3, #0
 8009b78:	62a3      	str	r3, [r4, #40]	; 0x28
}
 8009b7a:	bd38      	pop	{r3, r4, r5, pc}
	else ChangeLED(0);
 8009b7c:	2000      	movs	r0, #0
 8009b7e:	f004 fb61 	bl	800e244 <ChangeLED>
 8009b82:	e7db      	b.n	8009b3c <AjustCenter+0x34>
			if (mouse->now.wall.south == wall) //前に壁があれば前で調整
 8009b84:	7b29      	ldrb	r1, [r5, #12]
 8009b86:	f001 0330 	and.w	r3, r1, #48	; 0x30
 8009b8a:	2b10      	cmp	r3, #16
 8009b8c:	d077      	beq.n	8009c7e <AjustCenter+0x176>
			else if (mouse->now.wall.north == wall) //後ろに壁があるときはバック
 8009b8e:	f001 0103 	and.w	r1, r1, #3
 8009b92:	2901      	cmp	r1, #1
 8009b94:	d1e6      	bne.n	8009b64 <AjustCenter+0x5c>
				PIDChangeFlag(wall_ctrl, 1);
 8009b96:	4620      	mov	r0, r4
 8009b98:	f004 ff7c 	bl	800ea94 <PIDChangeFlag>
	Calib(-50);
 8009b9c:	f06f 0031 	mvn.w	r0, #49	; 0x31
 8009ba0:	f7ff ff5e 	bl	8009a60 <Calib>
				TargetAngularV = 0;
 8009ba4:	4b5a      	ldr	r3, [pc, #360]	; (8009d10 <AjustCenter+0x208>)
				Angle = TargetAngle;
 8009ba6:	495d      	ldr	r1, [pc, #372]	; (8009d1c <AjustCenter+0x214>)
				Pid[wall_ctrl].flag = 0;
 8009ba8:	4a5a      	ldr	r2, [pc, #360]	; (8009d14 <AjustCenter+0x20c>)
				return 61.5;
 8009baa:	ed9f 0a5d 	vldr	s0, [pc, #372]	; 8009d20 <AjustCenter+0x218>
				TargetAngularV = 0;
 8009bae:	2000      	movs	r0, #0
 8009bb0:	6018      	str	r0, [r3, #0]
				Pid[wall_ctrl].flag = 0;
 8009bb2:	232c      	movs	r3, #44	; 0x2c
				Angle = TargetAngle;
 8009bb4:	6808      	ldr	r0, [r1, #0]
 8009bb6:	495b      	ldr	r1, [pc, #364]	; (8009d24 <AjustCenter+0x21c>)
				Pid[wall_ctrl].flag = 0;
 8009bb8:	fb03 2404 	mla	r4, r3, r4, r2
 8009bbc:	2300      	movs	r3, #0
				Angle = TargetAngle;
 8009bbe:	6008      	str	r0, [r1, #0]
				Pid[wall_ctrl].flag = 0;
 8009bc0:	62a3      	str	r3, [r4, #40]	; 0x28
}
 8009bc2:	bd38      	pop	{r3, r4, r5, pc}
			if (mouse->now.wall.east == wall) //前に壁があれば前で調整
 8009bc4:	7b2b      	ldrb	r3, [r5, #12]
 8009bc6:	f003 020c 	and.w	r2, r3, #12
 8009bca:	2a04      	cmp	r2, #4
 8009bcc:	d00f      	beq.n	8009bee <AjustCenter+0xe6>
			else if (mouse->now.wall.west == wall) //後ろに壁があるときはバック
 8009bce:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8009bd2:	2b40      	cmp	r3, #64	; 0x40
 8009bd4:	d1c6      	bne.n	8009b64 <AjustCenter+0x5c>
				PIDChangeFlag(wall_ctrl, 1);
 8009bd6:	2101      	movs	r1, #1
 8009bd8:	e7dd      	b.n	8009b96 <AjustCenter+0x8e>
			if (mouse->now.wall.north == wall) //前に壁があれば前で調整
 8009bda:	7b2b      	ldrb	r3, [r5, #12]
 8009bdc:	f003 0503 	and.w	r5, r3, #3
 8009be0:	2d01      	cmp	r5, #1
 8009be2:	d070      	beq.n	8009cc6 <AjustCenter+0x1be>
			else if (mouse->now.wall.south == wall) //後ろに壁があるときはバック
 8009be4:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8009be8:	2b10      	cmp	r3, #16
 8009bea:	d1bb      	bne.n	8009b64 <AjustCenter+0x5c>
 8009bec:	e7f3      	b.n	8009bd6 <AjustCenter+0xce>
				Calib(-10);
 8009bee:	f06f 0009 	mvn.w	r0, #9
 8009bf2:	f7ff ff35 	bl	8009a60 <Calib>
				PIDChangeFlag(wall_ctrl, 1);
 8009bf6:	2101      	movs	r1, #1
 8009bf8:	4620      	mov	r0, r4
 8009bfa:	f004 ff4b 	bl	800ea94 <PIDChangeFlag>
 8009bfe:	4b4a      	ldr	r3, [pc, #296]	; (8009d28 <AjustCenter+0x220>)
				while( !(( (3000 < Photo[FL] + Photo[FR]) && (Photo[FL] + Photo[FR] < 4000))) )//&& !(-0.2< CurrentVelocity[BODY] && CurrentVelocity[BODY] <  0.2))
 8009c00:	eddf 6a4a 	vldr	s13, [pc, #296]	; 8009d2c <AjustCenter+0x224>
 8009c04:	ed9f 6a4a 	vldr	s12, [pc, #296]	; 8009d30 <AjustCenter+0x228>
 8009c08:	edd3 7a00 	vldr	s15, [r3]
 8009c0c:	ed93 7a03 	vldr	s14, [r3, #12]
 8009c10:	ee77 7a87 	vadd.f32	s15, s15, s14
 8009c14:	eef4 7ae6 	vcmpe.f32	s15, s13
 8009c18:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009c1c:	ddf4      	ble.n	8009c08 <AjustCenter+0x100>
 8009c1e:	edd3 7a00 	vldr	s15, [r3]
 8009c22:	ed93 7a03 	vldr	s14, [r3, #12]
 8009c26:	ee77 7a87 	vadd.f32	s15, s15, s14
 8009c2a:	eef4 7ac6 	vcmpe.f32	s15, s12
 8009c2e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009c32:	d5e9      	bpl.n	8009c08 <AjustCenter+0x100>
 8009c34:	e796      	b.n	8009b64 <AjustCenter+0x5c>
				Calib(-10);
 8009c36:	f06f 0009 	mvn.w	r0, #9
 8009c3a:	f7ff ff11 	bl	8009a60 <Calib>
				PIDChangeFlag(wall_ctrl, 1);
 8009c3e:	2101      	movs	r1, #1
 8009c40:	4620      	mov	r0, r4
 8009c42:	f004 ff27 	bl	800ea94 <PIDChangeFlag>
 8009c46:	4b38      	ldr	r3, [pc, #224]	; (8009d28 <AjustCenter+0x220>)
				while( !((3000 < Photo[FL] + Photo[FR]) && (Photo[FL] + Photo[FR] < 4000)) )//&& !(-0.2< CurrentVelocity[BODY] && CurrentVelocity[BODY] <  0.2))
 8009c48:	eddf 6a38 	vldr	s13, [pc, #224]	; 8009d2c <AjustCenter+0x224>
 8009c4c:	ed9f 6a38 	vldr	s12, [pc, #224]	; 8009d30 <AjustCenter+0x228>
 8009c50:	edd3 7a00 	vldr	s15, [r3]
 8009c54:	ed93 7a03 	vldr	s14, [r3, #12]
 8009c58:	ee77 7a87 	vadd.f32	s15, s15, s14
 8009c5c:	eef4 7ae6 	vcmpe.f32	s15, s13
 8009c60:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009c64:	ddf4      	ble.n	8009c50 <AjustCenter+0x148>
 8009c66:	edd3 7a00 	vldr	s15, [r3]
 8009c6a:	ed93 7a03 	vldr	s14, [r3, #12]
 8009c6e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8009c72:	eef4 7ac6 	vcmpe.f32	s15, s12
 8009c76:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009c7a:	d5e9      	bpl.n	8009c50 <AjustCenter+0x148>
 8009c7c:	e772      	b.n	8009b64 <AjustCenter+0x5c>
				Calib(-10);
 8009c7e:	f06f 0009 	mvn.w	r0, #9
 8009c82:	f7ff feed 	bl	8009a60 <Calib>
				PIDChangeFlag(wall_ctrl, 1);
 8009c86:	2101      	movs	r1, #1
 8009c88:	4620      	mov	r0, r4
 8009c8a:	f004 ff03 	bl	800ea94 <PIDChangeFlag>
 8009c8e:	4b26      	ldr	r3, [pc, #152]	; (8009d28 <AjustCenter+0x220>)
				while( !((3000< Photo[FL] + Photo[FR]) && (Photo[FL] + Photo[FR] < 4000)) )//&& !(-0.2< CurrentVelocity[BODY] && CurrentVelocity[BODY] <  0.2))
 8009c90:	eddf 6a26 	vldr	s13, [pc, #152]	; 8009d2c <AjustCenter+0x224>
 8009c94:	ed9f 6a26 	vldr	s12, [pc, #152]	; 8009d30 <AjustCenter+0x228>
 8009c98:	edd3 7a00 	vldr	s15, [r3]
 8009c9c:	ed93 7a03 	vldr	s14, [r3, #12]
 8009ca0:	ee77 7a87 	vadd.f32	s15, s15, s14
 8009ca4:	eef4 7ae6 	vcmpe.f32	s15, s13
 8009ca8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009cac:	ddf4      	ble.n	8009c98 <AjustCenter+0x190>
 8009cae:	edd3 7a00 	vldr	s15, [r3]
 8009cb2:	ed93 7a03 	vldr	s14, [r3, #12]
 8009cb6:	ee77 7a87 	vadd.f32	s15, s15, s14
 8009cba:	eef4 7ac6 	vcmpe.f32	s15, s12
 8009cbe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009cc2:	d5e9      	bpl.n	8009c98 <AjustCenter+0x190>
 8009cc4:	e74e      	b.n	8009b64 <AjustCenter+0x5c>
				Calib(-10);
 8009cc6:	f06f 0009 	mvn.w	r0, #9
 8009cca:	f7ff fec9 	bl	8009a60 <Calib>
				PIDChangeFlag(wall_ctrl, 1);
 8009cce:	4629      	mov	r1, r5
 8009cd0:	4620      	mov	r0, r4
 8009cd2:	f004 fedf 	bl	800ea94 <PIDChangeFlag>
 8009cd6:	4b14      	ldr	r3, [pc, #80]	; (8009d28 <AjustCenter+0x220>)
				while( !( (3000 < Photo[FL] + Photo[FR]) && (Photo[FL] + Photo[FR] < 4000)) )//&& !(-0.2< CurrentVelocity[BODY] && CurrentVelocity[BODY] <  0.2))//(( (3900 < Photo[FL] + Photo[FR]) && (Photo[FL] + Photo[FR] < 4100))) )
 8009cd8:	eddf 6a14 	vldr	s13, [pc, #80]	; 8009d2c <AjustCenter+0x224>
 8009cdc:	ed9f 6a14 	vldr	s12, [pc, #80]	; 8009d30 <AjustCenter+0x228>
 8009ce0:	edd3 7a00 	vldr	s15, [r3]
 8009ce4:	ed93 7a03 	vldr	s14, [r3, #12]
 8009ce8:	ee77 7a87 	vadd.f32	s15, s15, s14
 8009cec:	eef4 7ae6 	vcmpe.f32	s15, s13
 8009cf0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009cf4:	ddf4      	ble.n	8009ce0 <AjustCenter+0x1d8>
 8009cf6:	edd3 7a00 	vldr	s15, [r3]
 8009cfa:	ed93 7a03 	vldr	s14, [r3, #12]
 8009cfe:	ee77 7a87 	vadd.f32	s15, s15, s14
 8009d02:	eef4 7ac6 	vcmpe.f32	s15, s12
 8009d06:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009d0a:	d5e9      	bpl.n	8009ce0 <AjustCenter+0x1d8>
 8009d0c:	e72a      	b.n	8009b64 <AjustCenter+0x5c>
 8009d0e:	bf00      	nop
 8009d10:	2000152c 	.word	0x2000152c
 8009d14:	20001318 	.word	0x20001318
 8009d18:	42340000 	.word	0x42340000
 8009d1c:	20001228 	.word	0x20001228
 8009d20:	42760000 	.word	0x42760000
 8009d24:	20001218 	.word	0x20001218
 8009d28:	2000158c 	.word	0x2000158c
 8009d2c:	453b8000 	.word	0x453b8000
 8009d30:	457a0000 	.word	0x457a0000

08009d34 <GetWallCompensateDir>:
int GetWallCompensateDir(profile *mouse)
{
	switch(mouse->now.car%8)
 8009d34:	7a83      	ldrb	r3, [r0, #10]
 8009d36:	f003 0307 	and.w	r3, r3, #7
 8009d3a:	2b06      	cmp	r3, #6
 8009d3c:	d835      	bhi.n	8009daa <GetWallCompensateDir+0x76>
 8009d3e:	e8df f003 	tbb	[pc, r3]
 8009d42:	3428      	.short	0x3428
 8009d44:	3410341c 	.word	0x3410341c
 8009d48:	04          	.byte	0x04
 8009d49:	00          	.byte	0x00
				{
					return R_WALL_PID;
				}
				break;
			case west:
				if ( mouse->now.wall.north == wall )
 8009d4a:	7b03      	ldrb	r3, [r0, #12]
 8009d4c:	f003 0203 	and.w	r2, r3, #3
 8009d50:	2a01      	cmp	r2, #1
 8009d52:	d02e      	beq.n	8009db2 <GetWallCompensateDir+0x7e>
				{
					return R_WALL_PID;
				}
				else if ( mouse->now.wall.south == wall )
 8009d54:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8009d58:	2b10      	cmp	r3, #16
					return L_WALL_PID;
 8009d5a:	bf14      	ite	ne
 8009d5c:	2006      	movne	r0, #6
 8009d5e:	2002      	moveq	r0, #2
 8009d60:	4770      	bx	lr
				if(mouse->now.wall.east == wall)
 8009d62:	7b03      	ldrb	r3, [r0, #12]
 8009d64:	f003 020c 	and.w	r2, r3, #12
 8009d68:	2a04      	cmp	r2, #4
 8009d6a:	d020      	beq.n	8009dae <GetWallCompensateDir+0x7a>
				else if(mouse->now.wall.west == wall)
 8009d6c:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8009d70:	2b40      	cmp	r3, #64	; 0x40
					return R_WALL_PID;
 8009d72:	bf14      	ite	ne
 8009d74:	2006      	movne	r0, #6
 8009d76:	2003      	moveq	r0, #3
 8009d78:	4770      	bx	lr
				if(mouse->now.wall.north == wall)
 8009d7a:	7b03      	ldrb	r3, [r0, #12]
 8009d7c:	f003 0203 	and.w	r2, r3, #3
 8009d80:	2a01      	cmp	r2, #1
 8009d82:	d014      	beq.n	8009dae <GetWallCompensateDir+0x7a>
				else if(mouse->now.wall.south == wall)
 8009d84:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8009d88:	2b10      	cmp	r3, #16
					return R_WALL_PID;
 8009d8a:	bf14      	ite	ne
 8009d8c:	2006      	movne	r0, #6
 8009d8e:	2003      	moveq	r0, #3
 8009d90:	4770      	bx	lr
				if(mouse->now.wall.east == wall)
 8009d92:	7b03      	ldrb	r3, [r0, #12]
 8009d94:	f003 020c 	and.w	r2, r3, #12
 8009d98:	2a04      	cmp	r2, #4
 8009d9a:	d00a      	beq.n	8009db2 <GetWallCompensateDir+0x7e>
				else if(mouse->now.wall.west == wall)
 8009d9c:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8009da0:	2b40      	cmp	r3, #64	; 0x40
					return L_WALL_PID;
 8009da2:	bf14      	ite	ne
 8009da4:	2006      	movne	r0, #6
 8009da6:	2002      	moveq	r0, #2
 8009da8:	4770      	bx	lr
				}
				break;

			default:
				//斜め方向
				return N_WALL_PID;
 8009daa:	2006      	movs	r0, #6
 8009dac:	4770      	bx	lr
					return L_WALL_PID;
 8009dae:	2002      	movs	r0, #2
 8009db0:	4770      	bx	lr
					return R_WALL_PID;
 8009db2:	2003      	movs	r0, #3
				break;
			}
	return N_WALL_PID;
}
 8009db4:	4770      	bx	lr
 8009db6:	bf00      	nop

08009db8 <GoStraight>:
void GoStraight(float move_distance,  float explore_speed, int accel_or_decel, maze_node *maze, profile *mouse)
{
 8009db8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009dbc:	ed2d 8b02 	vpush	{d8}
	//x = v0t + 0.5*at^2
	//壁の有無をすべて知っている区間は更新する必要がないので一気に加速させて座標を二つ更新
//	Control_Mode = A_VELO_PID;
	Pid[A_VELO_PID].flag = 1;
	//加減速時は角度制御だけにしておいてあとで困ったら追加
	int target_pulse = (int)(2*move_distance/MM_PER_PULSE);
 8009dc0:	ee70 7a00 	vadd.f32	s15, s0, s0
	Pid[A_VELO_PID].flag = 1;
 8009dc4:	4b9a      	ldr	r3, [pc, #616]	; (800a030 <GoStraight+0x278>)
 8009dc6:	2601      	movs	r6, #1
{
 8009dc8:	b085      	sub	sp, #20
 8009dca:	4604      	mov	r4, r0
	Pid[A_VELO_PID].flag = 1;
 8009dcc:	629e      	str	r6, [r3, #40]	; 0x28
	int target_pulse = (int)(2*move_distance/MM_PER_PULSE);
 8009dce:	ee17 0a90 	vmov	r0, s15
{
 8009dd2:	eeb0 8a40 	vmov.f32	s16, s0
 8009dd6:	eef0 8a60 	vmov.f32	s17, s1
 8009dda:	e9cd 2101 	strd	r2, r1, [sp, #4]
	int target_pulse = (int)(2*move_distance/MM_PER_PULSE);
 8009dde:	f7fe faeb 	bl	80083b8 <__aeabi_f2d>
 8009de2:	a38d      	add	r3, pc, #564	; (adr r3, 800a018 <GoStraight+0x260>)
 8009de4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009de8:	f7fe fc68 	bl	80086bc <__aeabi_ddiv>
 8009dec:	f7fe fdec 	bl	80089c8 <__aeabi_d2iz>
	if(accel_or_decel == 1) //加速するとき
 8009df0:	42b4      	cmp	r4, r6
 8009df2:	f000 80ab 	beq.w	8009f4c <GoStraight+0x194>
	{
		//explore_speed += AddVelocity;
		VelocityMax = true;
		Accel( move_distance , explore_speed, maze, mouse);	//要計算	//現在の制御目標速度がexploreに近ければ加速度は小さくなるし、差が限りなく小さければほぼ加速しない。つまり定速にもなる。微妙なズレを埋めることができる。切り捨てるけど。
	}
	else if(accel_or_decel == -1) //探索速度までの減速. ターン速度までの減速も後で入れる
 8009df6:	3401      	adds	r4, #1
 8009df8:	4683      	mov	fp, r0
 8009dfa:	f000 80b6 	beq.w	8009f6a <GoStraight+0x1b2>

	else
	{
		_Bool wall_cut=false;	//壁切れ用
		_Bool face_check  = false; //一度でも正面領域に収まったか
		int ctrl_mode = GetWallCtrlDirection(mouse);
 8009dfe:	9801      	ldr	r0, [sp, #4]
 8009e00:	4c8c      	ldr	r4, [pc, #560]	; (800a034 <GoStraight+0x27c>)
 8009e02:	4d8d      	ldr	r5, [pc, #564]	; (800a038 <GoStraight+0x280>)
 8009e04:	f7fe fff8 	bl	8008df8 <GetWallCtrlDirection>
				Pid[A_VELO_PID].flag = 1;
				Pid[ctrl_mode].flag = 0;
			}
			else {
				Pid[A_VELO_PID].flag = 0;
				Pid[ctrl_mode].flag = 1;//壁見る
 8009e08:	4989      	ldr	r1, [pc, #548]	; (800a030 <GoStraight+0x278>)
			ctrl_mode = A_VELO_PID;
 8009e0a:	4602      	mov	r2, r0
 8009e0c:	2806      	cmp	r0, #6
 8009e0e:	bf08      	it	eq
 8009e10:	2200      	moveq	r2, #0
				Pid[ctrl_mode].flag = 1;//壁見る
 8009e12:	232c      	movs	r3, #44	; 0x2c
 8009e14:	fb03 1302 	mla	r3, r3, r2, r1
			ctrl_mode = A_VELO_PID;
 8009e18:	9203      	str	r2, [sp, #12]
				Pid[ctrl_mode].flag = 1;//壁見る
 8009e1a:	9300      	str	r3, [sp, #0]
		while( ( KeepPulse[BODY] +(target_pulse)) > ( TotalPulse[BODY]) )
 8009e1c:	68a3      	ldr	r3, [r4, #8]
 8009e1e:	68aa      	ldr	r2, [r5, #8]
 8009e20:	445b      	add	r3, fp
 8009e22:	4293      	cmp	r3, r2
			if(KeepPulse[BODY] + (target_pulse*0.4) < TotalPulse[BODY] ){
 8009e24:	4658      	mov	r0, fp
		while( ( KeepPulse[BODY] +(target_pulse)) > ( TotalPulse[BODY]) )
 8009e26:	dd5d      	ble.n	8009ee4 <GoStraight+0x12c>
			if(KeepPulse[BODY] + (target_pulse*0.4) < TotalPulse[BODY] ){
 8009e28:	f7fe fab4 	bl	8008394 <__aeabi_i2d>
 8009e2c:	68a6      	ldr	r6, [r4, #8]
 8009e2e:	4681      	mov	r9, r0
 8009e30:	4630      	mov	r0, r6
 8009e32:	468a      	mov	sl, r1
 8009e34:	f7fe faae 	bl	8008394 <__aeabi_i2d>
 8009e38:	a379      	add	r3, pc, #484	; (adr r3, 800a020 <GoStraight+0x268>)
 8009e3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e3e:	4606      	mov	r6, r0
 8009e40:	460f      	mov	r7, r1
 8009e42:	4648      	mov	r0, r9
 8009e44:	4651      	mov	r1, sl
 8009e46:	f7fe fb0f 	bl	8008468 <__aeabi_dmul>
 8009e4a:	4602      	mov	r2, r0
 8009e4c:	460b      	mov	r3, r1
 8009e4e:	4630      	mov	r0, r6
 8009e50:	4639      	mov	r1, r7
 8009e52:	f7fe f953 	bl	80080fc <__adddf3>
 8009e56:	f8d5 8008 	ldr.w	r8, [r5, #8]
 8009e5a:	4606      	mov	r6, r0
 8009e5c:	4640      	mov	r0, r8
 8009e5e:	460f      	mov	r7, r1
 8009e60:	f7fe fa98 	bl	8008394 <__aeabi_i2d>
 8009e64:	4602      	mov	r2, r0
 8009e66:	460b      	mov	r3, r1
 8009e68:	4630      	mov	r0, r6
 8009e6a:	4639      	mov	r1, r7
 8009e6c:	f7fe fd6e 	bl	800894c <__aeabi_dcmplt>
				Pid[A_VELO_PID].flag = 1;
 8009e70:	2201      	movs	r2, #1
				Pid[ctrl_mode].flag = 0;
 8009e72:	2300      	movs	r3, #0
			if(KeepPulse[BODY] + (target_pulse*0.4) < TotalPulse[BODY] ){
 8009e74:	2800      	cmp	r0, #0
 8009e76:	d063      	beq.n	8009f40 <GoStraight+0x188>
				Pid[A_VELO_PID].flag = 1;
 8009e78:	496d      	ldr	r1, [pc, #436]	; (800a030 <GoStraight+0x278>)
 8009e7a:	628a      	str	r2, [r1, #40]	; 0x28
				Pid[ctrl_mode].flag = 0;
 8009e7c:	9a00      	ldr	r2, [sp, #0]
 8009e7e:	6293      	str	r3, [r2, #40]	; 0x28
			}
			//ControlWall();
			//探索目標速度 <= 制御目標速度  となったら、加速をやめる。
			//右か左の壁のセンサ値を見て、閾値を下回ったら、TotalPulseかKeepPulseを補正する
			if(KeepPulse[BODY] + (target_pulse*0.80) < TotalPulse[BODY] && Calc == 0)
 8009e80:	68a0      	ldr	r0, [r4, #8]
 8009e82:	f8d5 8008 	ldr.w	r8, [r5, #8]
 8009e86:	f7fe fa85 	bl	8008394 <__aeabi_i2d>
 8009e8a:	a367      	add	r3, pc, #412	; (adr r3, 800a028 <GoStraight+0x270>)
 8009e8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e90:	4606      	mov	r6, r0
 8009e92:	460f      	mov	r7, r1
 8009e94:	4648      	mov	r0, r9
 8009e96:	4651      	mov	r1, sl
 8009e98:	f7fe fae6 	bl	8008468 <__aeabi_dmul>
 8009e9c:	4602      	mov	r2, r0
 8009e9e:	460b      	mov	r3, r1
 8009ea0:	4630      	mov	r0, r6
 8009ea2:	4639      	mov	r1, r7
 8009ea4:	f7fe f92a 	bl	80080fc <__adddf3>
 8009ea8:	4606      	mov	r6, r0
 8009eaa:	4640      	mov	r0, r8
 8009eac:	460f      	mov	r7, r1
 8009eae:	f7fe fa71 	bl	8008394 <__aeabi_i2d>
 8009eb2:	4602      	mov	r2, r0
 8009eb4:	460b      	mov	r3, r1
 8009eb6:	4630      	mov	r0, r6
 8009eb8:	4639      	mov	r1, r7
 8009eba:	f7fe fd47 	bl	800894c <__aeabi_dcmplt>
 8009ebe:	2800      	cmp	r0, #0
 8009ec0:	d0ac      	beq.n	8009e1c <GoStraight+0x64>
 8009ec2:	4b5e      	ldr	r3, [pc, #376]	; (800a03c <GoStraight+0x284>)
 8009ec4:	681b      	ldr	r3, [r3, #0]
 8009ec6:	2b00      	cmp	r3, #0
 8009ec8:	d1a8      	bne.n	8009e1c <GoStraight+0x64>
			{
				updateRealSearch(maze, mouse);
 8009eca:	e9dd 1001 	ldrd	r1, r0, [sp, #4]
 8009ece:	f002 fbab 	bl	800c628 <updateRealSearch>
				Calc = 1;
 8009ed2:	4a5a      	ldr	r2, [pc, #360]	; (800a03c <GoStraight+0x284>)
 8009ed4:	2301      	movs	r3, #1
 8009ed6:	6013      	str	r3, [r2, #0]
		while( ( KeepPulse[BODY] +(target_pulse)) > ( TotalPulse[BODY]) )
 8009ed8:	68a3      	ldr	r3, [r4, #8]
 8009eda:	68aa      	ldr	r2, [r5, #8]
 8009edc:	445b      	add	r3, fp
 8009ede:	4293      	cmp	r3, r2
			if(KeepPulse[BODY] + (target_pulse*0.4) < TotalPulse[BODY] ){
 8009ee0:	4658      	mov	r0, fp
		while( ( KeepPulse[BODY] +(target_pulse)) > ( TotalPulse[BODY]) )
 8009ee2:	dca1      	bgt.n	8009e28 <GoStraight+0x70>
	//		}
		}
		Pid[A_VELO_PID].flag = 1;
		Pid[ctrl_mode].flag = 0;//壁見る
		wall_cut = false;
		Acceleration = 0;
 8009ee4:	4b56      	ldr	r3, [pc, #344]	; (800a040 <GoStraight+0x288>)
		Pid[ctrl_mode].flag = 0;//壁見る
 8009ee6:	4852      	ldr	r0, [pc, #328]	; (800a030 <GoStraight+0x278>)
		Acceleration = 0;
 8009ee8:	2200      	movs	r2, #0
 8009eea:	601a      	str	r2, [r3, #0]
		KeepPulse[BODY] += target_pulse;
 8009eec:	68a3      	ldr	r3, [r4, #8]
		Pid[ctrl_mode].flag = 0;//壁見る
 8009eee:	9a03      	ldr	r2, [sp, #12]
		KeepPulse[BODY] += target_pulse;
 8009ef0:	445b      	add	r3, fp
 8009ef2:	60a3      	str	r3, [r4, #8]
		KeepPulse[LEFT] += target_pulse*0.5f;
 8009ef4:	ed94 7a00 	vldr	s14, [r4]
 8009ef8:	ee07 ba90 	vmov	s15, fp
 8009efc:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8009f00:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009f04:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 8009f08:	eea7 7aa6 	vfma.f32	s14, s15, s13
		Pid[ctrl_mode].flag = 0;//壁見る
 8009f0c:	232c      	movs	r3, #44	; 0x2c
 8009f0e:	fb03 0302 	mla	r3, r3, r2, r0
		Pid[A_VELO_PID].flag = 1;
 8009f12:	2101      	movs	r1, #1
		KeepPulse[LEFT] += target_pulse*0.5f;
 8009f14:	eebd 7ac7 	vcvt.s32.f32	s14, s14
		Pid[ctrl_mode].flag = 0;//壁見る
 8009f18:	2200      	movs	r2, #0
		KeepPulse[LEFT] += target_pulse*0.5f;
 8009f1a:	ed84 7a00 	vstr	s14, [r4]
		KeepPulse[RIGHT] += target_pulse*0.5f;
 8009f1e:	ed94 7a01 	vldr	s14, [r4, #4]
		Pid[A_VELO_PID].flag = 1;
 8009f22:	6281      	str	r1, [r0, #40]	; 0x28
		KeepPulse[RIGHT] += target_pulse*0.5f;
 8009f24:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
		Pid[ctrl_mode].flag = 0;//壁見る
 8009f28:	629a      	str	r2, [r3, #40]	; 0x28
		KeepPulse[RIGHT] += target_pulse*0.5f;
 8009f2a:	eea7 7aa6 	vfma.f32	s14, s15, s13
 8009f2e:	eefd 7ac7 	vcvt.s32.f32	s15, s14
 8009f32:	edc4 7a01 	vstr	s15, [r4, #4]

	}
}
 8009f36:	b005      	add	sp, #20
 8009f38:	ecbd 8b02 	vpop	{d8}
 8009f3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				Pid[A_VELO_PID].flag = 0;
 8009f40:	4a3b      	ldr	r2, [pc, #236]	; (800a030 <GoStraight+0x278>)
 8009f42:	6290      	str	r0, [r2, #40]	; 0x28
				Pid[ctrl_mode].flag = 1;//壁見る
 8009f44:	9a00      	ldr	r2, [sp, #0]
 8009f46:	2301      	movs	r3, #1
 8009f48:	6293      	str	r3, [r2, #40]	; 0x28
 8009f4a:	e799      	b.n	8009e80 <GoStraight+0xc8>
		Accel( move_distance , explore_speed, maze, mouse);	//要計算	//現在の制御目標速度がexploreに近ければ加速度は小さくなるし、差が限りなく小さければほぼ加速しない。つまり定速にもなる。微妙なズレを埋めることができる。切り捨てるけど。
 8009f4c:	e9dd 1001 	ldrd	r1, r0, [sp, #4]
		VelocityMax = true;
 8009f50:	4b3c      	ldr	r3, [pc, #240]	; (800a044 <GoStraight+0x28c>)
		Accel( move_distance , explore_speed, maze, mouse);	//要計算	//現在の制御目標速度がexploreに近ければ加速度は小さくなるし、差が限りなく小さければほぼ加速しない。つまり定速にもなる。微妙なズレを埋めることができる。切り捨てるけど。
 8009f52:	eef0 0a68 	vmov.f32	s1, s17
 8009f56:	eeb0 0a48 	vmov.f32	s0, s16
		VelocityMax = true;
 8009f5a:	701c      	strb	r4, [r3, #0]
}
 8009f5c:	b005      	add	sp, #20
 8009f5e:	ecbd 8b02 	vpop	{d8}
 8009f62:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		Accel( move_distance , explore_speed, maze, mouse);	//要計算	//現在の制御目標速度がexploreに近ければ加速度は小さくなるし、差が限りなく小さければほぼ加速しない。つまり定速にもなる。微妙なズレを埋めることができる。切り捨てるけど。
 8009f66:	f7ff bbf3 	b.w	8009750 <Accel>
		VelocityMax = false;
 8009f6a:	4b36      	ldr	r3, [pc, #216]	; (800a044 <GoStraight+0x28c>)
 8009f6c:	4c31      	ldr	r4, [pc, #196]	; (800a034 <GoStraight+0x27c>)
 8009f6e:	4d32      	ldr	r5, [pc, #200]	; (800a038 <GoStraight+0x280>)
			if(Calc == 0)//減速終了後直ぐにマップ更新
 8009f70:	4f32      	ldr	r7, [pc, #200]	; (800a03c <GoStraight+0x284>)
		Decel( move_distance*0.75f, explore_speed); //0.8で減速
 8009f72:	eeb6 0a08 	vmov.f32	s0, #104	; 0x3f400000  0.750
 8009f76:	eef0 0a68 	vmov.f32	s1, s17
		VelocityMax = false;
 8009f7a:	2200      	movs	r2, #0
		Decel( move_distance*0.75f, explore_speed); //0.8で減速
 8009f7c:	ee28 0a00 	vmul.f32	s0, s16, s0
		VelocityMax = false;
 8009f80:	701a      	strb	r2, [r3, #0]
		Decel( move_distance*0.75f, explore_speed); //0.8で減速
 8009f82:	f7ff fc99 	bl	80098b8 <Decel>
 8009f86:	ee07 ba90 	vmov	s15, fp
 8009f8a:	eef8 8ae7 	vcvt.f32.s32	s17, s15
 8009f8e:	eeb5 8a00 	vmov.f32	s16, #80	; 0x3e800000  0.250
 8009f92:	ee28 8a88 	vmul.f32	s16, s17, s16
		while( ( KeepPulse[BODY] +(target_pulse*0.25f)) > ( TotalPulse[BODY]) ) //残り0.2でマップの更新
 8009f96:	e001      	b.n	8009f9c <GoStraight+0x1e4>
			if(Calc == 0)//減速終了後直ぐにマップ更新
 8009f98:	683b      	ldr	r3, [r7, #0]
 8009f9a:	b3bb      	cbz	r3, 800a00c <GoStraight+0x254>
		while( ( KeepPulse[BODY] +(target_pulse*0.25f)) > ( TotalPulse[BODY]) ) //残り0.2でマップの更新
 8009f9c:	edd4 7a02 	vldr	s15, [r4, #8]
 8009fa0:	ed95 7a02 	vldr	s14, [r5, #8]
 8009fa4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009fa8:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8009fac:	ee77 7a88 	vadd.f32	s15, s15, s16
 8009fb0:	eef4 7ac7 	vcmpe.f32	s15, s14
 8009fb4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009fb8:	dcee      	bgt.n	8009f98 <GoStraight+0x1e0>
		KeepPulse[BODY] += target_pulse*0.2f;
 8009fba:	edd4 7a02 	vldr	s15, [r4, #8]
 8009fbe:	ed9f 7a22 	vldr	s14, [pc, #136]	; 800a048 <GoStraight+0x290>
 8009fc2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009fc6:	ee28 7a87 	vmul.f32	s14, s17, s14
		KeepPulse[LEFT] += target_pulse*0.2f*0.5f;
 8009fca:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
		KeepPulse[BODY] += target_pulse*0.2f;
 8009fce:	ee77 7a87 	vadd.f32	s15, s15, s14
 8009fd2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8009fd6:	edc4 7a02 	vstr	s15, [r4, #8]
		KeepPulse[LEFT] += target_pulse*0.2f*0.5f;
 8009fda:	edd4 7a00 	vldr	s15, [r4]
 8009fde:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009fe2:	eee7 7a26 	vfma.f32	s15, s14, s13
 8009fe6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8009fea:	edc4 7a00 	vstr	s15, [r4]
		KeepPulse[RIGHT] += target_pulse*0.2f*0.5f;
 8009fee:	edd4 7a01 	vldr	s15, [r4, #4]
 8009ff2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009ff6:	eee7 7a26 	vfma.f32	s15, s14, s13
 8009ffa:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8009ffe:	edc4 7a01 	vstr	s15, [r4, #4]
}
 800a002:	b005      	add	sp, #20
 800a004:	ecbd 8b02 	vpop	{d8}
 800a008:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				updateRealSearch(maze, mouse);
 800a00c:	e9dd 1001 	ldrd	r1, r0, [sp, #4]
 800a010:	f002 fb0a 	bl	800c628 <updateRealSearch>
				Calc = 1;
 800a014:	603e      	str	r6, [r7, #0]
 800a016:	e7c1      	b.n	8009f9c <GoStraight+0x1e4>
 800a018:	8fa963a1 	.word	0x8fa963a1
 800a01c:	3f5023d2 	.word	0x3f5023d2
 800a020:	9999999a 	.word	0x9999999a
 800a024:	3fd99999 	.word	0x3fd99999
 800a028:	9999999a 	.word	0x9999999a
 800a02c:	3fe99999 	.word	0x3fe99999
 800a030:	20001318 	.word	0x20001318
 800a034:	20001580 	.word	0x20001580
 800a038:	2000154c 	.word	0x2000154c
 800a03c:	200015c8 	.word	0x200015c8
 800a040:	20001214 	.word	0x20001214
 800a044:	2000159c 	.word	0x2000159c
 800a048:	3e4ccccd 	.word	0x3e4ccccd

0800a04c <TurnRight>:
void TurnRight(char mode, maze_node *maze, profile *mouse)
{
	//関数呼び出しと判定処理が多いと遅い。

	switch( mode )
 800a04c:	2853      	cmp	r0, #83	; 0x53
{
 800a04e:	b570      	push	{r4, r5, r6, lr}
 800a050:	460d      	mov	r5, r1
	switch( mode )
 800a052:	d02b      	beq.n	800a0ac <TurnRight+0x60>
 800a054:	2854      	cmp	r0, #84	; 0x54
 800a056:	d128      	bne.n	800a0aa <TurnRight+0x5e>
 800a058:	4614      	mov	r4, r2
	{
	case 'T' :

		Decel(45, 0);
 800a05a:	eddf 0a17 	vldr	s1, [pc, #92]	; 800a0b8 <TurnRight+0x6c>
 800a05e:	ed9f 0a17 	vldr	s0, [pc, #92]	; 800a0bc <TurnRight+0x70>
		//AjustCenter();
		EmitterOFF();
//		Pid[Control_Mode].flag = 0;
//		PIDReset(Control_Mode);
//		Control_Mode = NOT_CTRL_PID;
		Pid[A_VELO_PID].flag = 0;
 800a062:	4e17      	ldr	r6, [pc, #92]	; (800a0c0 <TurnRight+0x74>)
		Decel(45, 0);
 800a064:	f7ff fc28 	bl	80098b8 <Decel>
		WaitStopAndReset();
 800a068:	f7fe ff2c 	bl	8008ec4 <WaitStopAndReset>
		EmitterOFF();
 800a06c:	f004 f8dc 	bl	800e228 <EmitterOFF>
		//二回目の減速ではマップが完全におかし
		//一回目のターン時の減速終了時は正しい
		//二回目のターン時の減速後までにマップが狂ってる

//		PIDChangeFlag(A_VELO_PID, 0);
		Rotate( 90 , 2*M_PI);//1.5
 800a070:	eddf 0a14 	vldr	s1, [pc, #80]	; 800a0c4 <TurnRight+0x78>
 800a074:	ed9f 0a14 	vldr	s0, [pc, #80]	; 800a0c8 <TurnRight+0x7c>
		Pid[A_VELO_PID].flag = 0;
 800a078:	2300      	movs	r3, #0
 800a07a:	62b3      	str	r3, [r6, #40]	; 0x28
		Rotate( 90 , 2*M_PI);//1.5
 800a07c:	f7fe ff44 	bl	8008f08 <Rotate>
		mouse->now.car += 2;
 800a080:	7aa3      	ldrb	r3, [r4, #10]
 800a082:	3302      	adds	r3, #2
 800a084:	72a3      	strb	r3, [r4, #10]

//		ChangeLED(0);
		//RotateTest(90);

//		float acc = AjustCenter();
		EmitterON();
 800a086:	f004 f8c1 	bl	800e20c <EmitterON>

//		PIDReset(L_VELO_PID);
//		PIDReset(R_VELO_PID);
//		PIDReset(A_VELO_PID);
		HAL_Delay(100);
 800a08a:	2064      	movs	r0, #100	; 0x64
 800a08c:	f004 feb8 	bl	800ee00 <HAL_Delay>
//														printProfile(&my_mouse);
//														printAllWeight(&my_map, &(my_mouse.goal_lesser));
//													}
//												}
//												cc ++;
		Accel(45, ExploreVelocity, maze, mouse);
 800a090:	4b0e      	ldr	r3, [pc, #56]	; (800a0cc <TurnRight+0x80>)
 800a092:	ed9f 0a0a 	vldr	s0, [pc, #40]	; 800a0bc <TurnRight+0x70>
 800a096:	edd3 0a00 	vldr	s1, [r3]
		Pid[A_VELO_PID].flag = 1;
 800a09a:	2301      	movs	r3, #1
		Accel(45, ExploreVelocity, maze, mouse);
 800a09c:	4621      	mov	r1, r4
 800a09e:	4628      	mov	r0, r5
		Pid[A_VELO_PID].flag = 1;
 800a0a0:	62b3      	str	r3, [r6, #40]	; 0x28
	default :
		break;
	}


}
 800a0a2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		Accel(45, ExploreVelocity, maze, mouse);
 800a0a6:	f7ff bb53 	b.w	8009750 <Accel>
}
 800a0aa:	bd70      	pop	{r4, r5, r6, pc}
		SlalomRight(maze, mouse);
 800a0ac:	4628      	mov	r0, r5
 800a0ae:	4611      	mov	r1, r2
}
 800a0b0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		SlalomRight(maze, mouse);
 800a0b4:	f7ff b87c 	b.w	80091b0 <SlalomRight>
 800a0b8:	00000000 	.word	0x00000000
 800a0bc:	42340000 	.word	0x42340000
 800a0c0:	20001318 	.word	0x20001318
 800a0c4:	40c90fdb 	.word	0x40c90fdb
 800a0c8:	42b40000 	.word	0x42b40000
 800a0cc:	200015a0 	.word	0x200015a0

0800a0d0 <TurnLeft>:
void TurnLeft(char mode, maze_node *maze, profile *mouse)
{
	switch( mode )
 800a0d0:	2853      	cmp	r0, #83	; 0x53
{
 800a0d2:	b570      	push	{r4, r5, r6, lr}
 800a0d4:	460d      	mov	r5, r1
	switch( mode )
 800a0d6:	d02e      	beq.n	800a136 <TurnLeft+0x66>
 800a0d8:	2854      	cmp	r0, #84	; 0x54
 800a0da:	d12b      	bne.n	800a134 <TurnLeft+0x64>
 800a0dc:	4614      	mov	r4, r2
	{
	case 'T' :
		//超信地旋回
		Decel(45, 0);
 800a0de:	eddf 0a19 	vldr	s1, [pc, #100]	; 800a144 <TurnLeft+0x74>
 800a0e2:	ed9f 0a19 	vldr	s0, [pc, #100]	; 800a148 <TurnLeft+0x78>

		//AjustCenter();
		EmitterOFF();
//		PIDChangeFlag(A_VELO_PID, 0);
//		Control_Mode = NOT_CTRL_PID;
		Pid[A_VELO_PID].flag = 0;
 800a0e6:	4e19      	ldr	r6, [pc, #100]	; (800a14c <TurnLeft+0x7c>)
		Decel(45, 0);
 800a0e8:	f7ff fbe6 	bl	80098b8 <Decel>
		WaitStopAndReset();
 800a0ec:	f7fe feea 	bl	8008ec4 <WaitStopAndReset>
		EmitterOFF();
 800a0f0:	f004 f89a 	bl	800e228 <EmitterOFF>
		Rotate( 90 , -2*M_PI);//-1.5
 800a0f4:	eddf 0a16 	vldr	s1, [pc, #88]	; 800a150 <TurnLeft+0x80>
 800a0f8:	ed9f 0a16 	vldr	s0, [pc, #88]	; 800a154 <TurnLeft+0x84>
		Pid[A_VELO_PID].flag = 0;
 800a0fc:	2300      	movs	r3, #0
 800a0fe:	62b3      	str	r3, [r6, #40]	; 0x28
		Rotate( 90 , -2*M_PI);//-1.5
 800a100:	f7fe ff02 	bl	8008f08 <Rotate>
		mouse->now.car -= 2;
 800a104:	7aa3      	ldrb	r3, [r4, #10]
 800a106:	3b02      	subs	r3, #2
 800a108:	72a3      	strb	r3, [r4, #10]
		//RotateTest(-90);
//		PIDReset(L_VELO_PID);
//		PIDReset(R_VELO_PID);
//		PIDReset(A_VELO_PID);
		EmitterON();
 800a10a:	f004 f87f 	bl	800e20c <EmitterON>
		HAL_Delay(100);
 800a10e:	2064      	movs	r0, #100	; 0x64
 800a110:	f004 fe76 	bl	800ee00 <HAL_Delay>
//		float acc = AjustCenter();
		HAL_Delay(100);
 800a114:	2064      	movs	r0, #100	; 0x64
 800a116:	f004 fe73 	bl	800ee00 <HAL_Delay>
//		Control_Mode = A_VELO_PID;
		Pid[A_VELO_PID].flag = 1;
//		PIDChangeFlag( A_VELO_PID , 1);
		Accel(45, ExploreVelocity, maze, mouse);
 800a11a:	4b0f      	ldr	r3, [pc, #60]	; (800a158 <TurnLeft+0x88>)
 800a11c:	ed9f 0a0a 	vldr	s0, [pc, #40]	; 800a148 <TurnLeft+0x78>
 800a120:	edd3 0a00 	vldr	s1, [r3]
		Pid[A_VELO_PID].flag = 1;
 800a124:	2301      	movs	r3, #1
		Accel(45, ExploreVelocity, maze, mouse);
 800a126:	4621      	mov	r1, r4
 800a128:	4628      	mov	r0, r5
		Pid[A_VELO_PID].flag = 1;
 800a12a:	62b3      	str	r3, [r6, #40]	; 0x28
		break;
	default :
		break;
	}

}
 800a12c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		Accel(45, ExploreVelocity, maze, mouse);
 800a130:	f7ff bb0e 	b.w	8009750 <Accel>
}
 800a134:	bd70      	pop	{r4, r5, r6, pc}
		SlalomLeft(maze, mouse);
 800a136:	4628      	mov	r0, r5
 800a138:	4611      	mov	r1, r2
}
 800a13a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		SlalomLeft(maze, mouse);
 800a13e:	f7ff b9a7 	b.w	8009490 <SlalomLeft>
 800a142:	bf00      	nop
 800a144:	00000000 	.word	0x00000000
 800a148:	42340000 	.word	0x42340000
 800a14c:	20001318 	.word	0x20001318
 800a150:	c0c90fdb 	.word	0xc0c90fdb
 800a154:	42b40000 	.word	0x42b40000
 800a158:	200015a0 	.word	0x200015a0

0800a15c <GoBack>:
void GoBack(maze_node *maze, profile *mouse)
{
 800a15c:	b538      	push	{r3, r4, r5, lr}
	//減速して
	Decel(45, 0);
 800a15e:	eddf 0a47 	vldr	s1, [pc, #284]	; 800a27c <GoBack+0x120>
 800a162:	ed9f 0a47 	vldr	s0, [pc, #284]	; 800a280 <GoBack+0x124>
{
 800a166:	460c      	mov	r4, r1
 800a168:	ed2d 8b02 	vpush	{d8}
 800a16c:	4605      	mov	r5, r0
	Decel(45, 0);
 800a16e:	f7ff fba3 	bl	80098b8 <Decel>
	float acc = AjustCenter(mouse);
 800a172:	4620      	mov	r0, r4
 800a174:	f7ff fcc8 	bl	8009b08 <AjustCenter>
	WaitStopAndReset();
 800a178:	f7fe fea4 	bl	8008ec4 <WaitStopAndReset>
//	ChangeLED(5);
#if 1
//	Control_Mode = NOT_CTRL_PID;
	int wall_comp = GetWallCompensateDir(mouse);
 800a17c:	4620      	mov	r0, r4
 800a17e:	f7ff fdd9 	bl	8009d34 <GetWallCompensateDir>
		//右か左かそれ以外か
		if(wall_comp == L_WALL_PID)
 800a182:	2802      	cmp	r0, #2
 800a184:	d037      	beq.n	800a1f6 <GoBack+0x9a>
//			Pos.Dir = left;
			Rotate(90, -2*M_PI);
			mouse->now.car = (mouse->now.car - 2) %8;
//			Pos.Dir = back;
		}
		else if(wall_comp == R_WALL_PID)
 800a186:	2803      	cmp	r0, #3
 800a188:	d059      	beq.n	800a23e <GoBack+0xe2>
//			Pos.Dir = right;
			Rotate(90, 2*M_PI);
			mouse->now.car = (mouse->now.car + 2) %8;
//			Pos.Dir = back;
		}
		else if(wall_comp == N_WALL_PID)
 800a18a:	2806      	cmp	r0, #6
 800a18c:	d071      	beq.n	800a272 <GoBack+0x116>
	Pos.Dir = back;

#endif


	acc = AjustCenter(mouse);
 800a18e:	4620      	mov	r0, r4
 800a190:	f7ff fcba 	bl	8009b08 <AjustCenter>

	HAL_Delay(200);
 800a194:	20c8      	movs	r0, #200	; 0xc8
	acc = AjustCenter(mouse);
 800a196:	eeb0 8a40 	vmov.f32	s16, s0
	HAL_Delay(200);
 800a19a:	f004 fe31 	bl	800ee00 <HAL_Delay>

	Accel(acc, ExploreVelocity, maze, mouse);
 800a19e:	4b39      	ldr	r3, [pc, #228]	; (800a284 <GoBack+0x128>)
 800a1a0:	eeb0 0a48 	vmov.f32	s0, s16
 800a1a4:	edd3 0a00 	vldr	s1, [r3]
 800a1a8:	4628      	mov	r0, r5
 800a1aa:	4621      	mov	r1, r4
 800a1ac:	f7ff fad0 	bl	8009750 <Accel>
	//方角に合わせてxyどちらかに±1
	switch(mouse->now.car%8)
 800a1b0:	7aa3      	ldrb	r3, [r4, #10]
 800a1b2:	f003 0307 	and.w	r3, r3, #7
 800a1b6:	2b06      	cmp	r3, #6
 800a1b8:	d808      	bhi.n	800a1cc <GoBack+0x70>
 800a1ba:	e8df f003 	tbb	[pc, r3]
 800a1be:	0716      	.short	0x0716
 800a1c0:	070a0710 	.word	0x070a0710
 800a1c4:	04          	.byte	0x04
 800a1c5:	00          	.byte	0x00
		break;
	case south:
		mouse->now.pos.y --;
		break;
	case west:
		mouse->now.pos.x --;
 800a1c6:	7a23      	ldrb	r3, [r4, #8]
 800a1c8:	3b01      	subs	r3, #1
 800a1ca:	7223      	strb	r3, [r4, #8]
		break;
	default:
		break;
	}

}
 800a1cc:	ecbd 8b02 	vpop	{d8}
 800a1d0:	bd38      	pop	{r3, r4, r5, pc}
		mouse->now.pos.y --;
 800a1d2:	7a63      	ldrb	r3, [r4, #9]
 800a1d4:	3b01      	subs	r3, #1
 800a1d6:	7263      	strb	r3, [r4, #9]
}
 800a1d8:	ecbd 8b02 	vpop	{d8}
 800a1dc:	bd38      	pop	{r3, r4, r5, pc}
		mouse->now.pos.x ++;
 800a1de:	7a23      	ldrb	r3, [r4, #8]
 800a1e0:	3301      	adds	r3, #1
 800a1e2:	7223      	strb	r3, [r4, #8]
}
 800a1e4:	ecbd 8b02 	vpop	{d8}
 800a1e8:	bd38      	pop	{r3, r4, r5, pc}
		mouse->now.pos.y ++;
 800a1ea:	7a63      	ldrb	r3, [r4, #9]
 800a1ec:	3301      	adds	r3, #1
 800a1ee:	7263      	strb	r3, [r4, #9]
}
 800a1f0:	ecbd 8b02 	vpop	{d8}
 800a1f4:	bd38      	pop	{r3, r4, r5, pc}
			Rotate(90, -2*M_PI);//もしくは二回とも左。ここの加速でバグ。 //
 800a1f6:	eddf 0a24 	vldr	s1, [pc, #144]	; 800a288 <GoBack+0x12c>
 800a1fa:	ed9f 0a24 	vldr	s0, [pc, #144]	; 800a28c <GoBack+0x130>
 800a1fe:	f7fe fe83 	bl	8008f08 <Rotate>
			mouse->now.car = (mouse->now.car - 2) %8;
 800a202:	7aa3      	ldrb	r3, [r4, #10]
 800a204:	3b02      	subs	r3, #2
 800a206:	425a      	negs	r2, r3
 800a208:	f002 0207 	and.w	r2, r2, #7
 800a20c:	f003 0307 	and.w	r3, r3, #7
 800a210:	bf58      	it	pl
 800a212:	4253      	negpl	r3, r2
 800a214:	72a3      	strb	r3, [r4, #10]
			acc = AjustCenter(mouse);
 800a216:	4620      	mov	r0, r4
 800a218:	f7ff fc76 	bl	8009b08 <AjustCenter>
			Rotate(90, -2*M_PI);
 800a21c:	eddf 0a1a 	vldr	s1, [pc, #104]	; 800a288 <GoBack+0x12c>
 800a220:	ed9f 0a1a 	vldr	s0, [pc, #104]	; 800a28c <GoBack+0x130>
 800a224:	f7fe fe70 	bl	8008f08 <Rotate>
			mouse->now.car = (mouse->now.car - 2) %8;
 800a228:	7aa3      	ldrb	r3, [r4, #10]
 800a22a:	3b02      	subs	r3, #2
 800a22c:	425a      	negs	r2, r3
 800a22e:	f002 0207 	and.w	r2, r2, #7
 800a232:	f003 0307 	and.w	r3, r3, #7
 800a236:	bf58      	it	pl
 800a238:	4253      	negpl	r3, r2
 800a23a:	72a3      	strb	r3, [r4, #10]
 800a23c:	e7a7      	b.n	800a18e <GoBack+0x32>
			Rotate(90, 2*M_PI);//もしくは二回とも左。ここの加速でバグ。 //
 800a23e:	eddf 0a14 	vldr	s1, [pc, #80]	; 800a290 <GoBack+0x134>
 800a242:	ed9f 0a12 	vldr	s0, [pc, #72]	; 800a28c <GoBack+0x130>
 800a246:	f7fe fe5f 	bl	8008f08 <Rotate>
			mouse->now.car = (mouse->now.car + 2) %8;
 800a24a:	7aa3      	ldrb	r3, [r4, #10]
 800a24c:	3302      	adds	r3, #2
 800a24e:	f003 0307 	and.w	r3, r3, #7
 800a252:	72a3      	strb	r3, [r4, #10]
			acc = AjustCenter(mouse);
 800a254:	4620      	mov	r0, r4
 800a256:	f7ff fc57 	bl	8009b08 <AjustCenter>
			Rotate(90, 2*M_PI);
 800a25a:	eddf 0a0d 	vldr	s1, [pc, #52]	; 800a290 <GoBack+0x134>
 800a25e:	ed9f 0a0b 	vldr	s0, [pc, #44]	; 800a28c <GoBack+0x130>
			Rotate(180, 2*M_PI);
 800a262:	f7fe fe51 	bl	8008f08 <Rotate>
			mouse->now.car = (mouse->now.car + 2) %8;
 800a266:	7aa3      	ldrb	r3, [r4, #10]
 800a268:	3302      	adds	r3, #2
 800a26a:	f003 0307 	and.w	r3, r3, #7
 800a26e:	72a3      	strb	r3, [r4, #10]
 800a270:	e78d      	b.n	800a18e <GoBack+0x32>
			Rotate(180, 2*M_PI);
 800a272:	eddf 0a07 	vldr	s1, [pc, #28]	; 800a290 <GoBack+0x134>
 800a276:	ed9f 0a07 	vldr	s0, [pc, #28]	; 800a294 <GoBack+0x138>
 800a27a:	e7f2      	b.n	800a262 <GoBack+0x106>
 800a27c:	00000000 	.word	0x00000000
 800a280:	42340000 	.word	0x42340000
 800a284:	200015a0 	.word	0x200015a0
 800a288:	c0c90fdb 	.word	0xc0c90fdb
 800a28c:	42b40000 	.word	0x42b40000
 800a290:	40c90fdb 	.word	0x40c90fdb
 800a294:	43340000 	.word	0x43340000

0800a298 <HAL_TIM_PeriodElapsedCallback>:


}

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800a298:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	if( htim == &htim1)
 800a29c:	4bc8      	ldr	r3, [pc, #800]	; (800a5c0 <HAL_TIM_PeriodElapsedCallback+0x328>)
 800a29e:	4298      	cmp	r0, r3
{
 800a2a0:	ed2d 8b02 	vpush	{d8}
 800a2a4:	4604      	mov	r4, r0
	if( htim == &htim1)
 800a2a6:	d007      	beq.n	800a2b8 <HAL_TIM_PeriodElapsedCallback+0x20>
		default :
			break;
		}
	}

	if( htim == &htim8)
 800a2a8:	4bc6      	ldr	r3, [pc, #792]	; (800a5c4 <HAL_TIM_PeriodElapsedCallback+0x32c>)
 800a2aa:	429c      	cmp	r4, r3
 800a2ac:	f000 80e7 	beq.w	800a47e <HAL_TIM_PeriodElapsedCallback+0x1e6>
		Photo[FL] = GetWallDataAverage(10, adc1[0], FL);	//adc1_IN10
		Photo[SR] = GetWallDataAverage(10, adc1[1], SR);	//adc1_IN14
		Photo[SL] = GetWallDataAverage(10, adc2[0], SL);	//adc2_IN11
		Photo[FR] = GetWallDataAverage(10, adc2[1], FR);	//adc2_IN15
	}
}
 800a2b0:	ecbd 8b02 	vpop	{d8}
 800a2b4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		switch(IT_mode){
 800a2b8:	4bc3      	ldr	r3, [pc, #780]	; (800a5c8 <HAL_TIM_PeriodElapsedCallback+0x330>)
 800a2ba:	681b      	ldr	r3, [r3, #0]
 800a2bc:	2b06      	cmp	r3, #6
 800a2be:	f000 8101 	beq.w	800a4c4 <HAL_TIM_PeriodElapsedCallback+0x22c>
 800a2c2:	2b07      	cmp	r3, #7
 800a2c4:	d00c      	beq.n	800a2e0 <HAL_TIM_PeriodElapsedCallback+0x48>
 800a2c6:	2b05      	cmp	r3, #5
 800a2c8:	d1ee      	bne.n	800a2a8 <HAL_TIM_PeriodElapsedCallback+0x10>
			if(timer1 < 5000)
 800a2ca:	4dc0      	ldr	r5, [pc, #768]	; (800a5cc <HAL_TIM_PeriodElapsedCallback+0x334>)
 800a2cc:	682a      	ldr	r2, [r5, #0]
 800a2ce:	f241 3387 	movw	r3, #4999	; 0x1387
 800a2d2:	429a      	cmp	r2, r3
 800a2d4:	f340 81cc 	ble.w	800a670 <HAL_TIM_PeriodElapsedCallback+0x3d8>
			else t = 0;
 800a2d8:	4bbd      	ldr	r3, [pc, #756]	; (800a5d0 <HAL_TIM_PeriodElapsedCallback+0x338>)
 800a2da:	2200      	movs	r2, #0
 800a2dc:	601a      	str	r2, [r3, #0]
 800a2de:	e7e3      	b.n	800a2a8 <HAL_TIM_PeriodElapsedCallback+0x10>
	PulseDisplacement[LEFT] = - (TIM3->CNT - INITIAL_PULSE);
 800a2e0:	f8df e344 	ldr.w	lr, [pc, #836]	; 800a628 <HAL_TIM_PeriodElapsedCallback+0x390>
 800a2e4:	49bb      	ldr	r1, [pc, #748]	; (800a5d4 <HAL_TIM_PeriodElapsedCallback+0x33c>)
 800a2e6:	f8de c024 	ldr.w	ip, [lr, #36]	; 0x24
	PulseDisplacement[RIGHT] = - (TIM4->CNT - INITIAL_PULSE);
 800a2ea:	48bb      	ldr	r0, [pc, #748]	; (800a5d8 <HAL_TIM_PeriodElapsedCallback+0x340>)
	CurrentVelocity[LEFT] =  (float)PulseDisplacement[LEFT] * convert_to_velocity;
 800a2ec:	eddf 6abb 	vldr	s13, [pc, #748]	; 800a5dc <HAL_TIM_PeriodElapsedCallback+0x344>
 800a2f0:	4ebb      	ldr	r6, [pc, #748]	; (800a5e0 <HAL_TIM_PeriodElapsedCallback+0x348>)
	TotalPulse[LEFT] += PulseDisplacement[LEFT];
 800a2f2:	4abc      	ldr	r2, [pc, #752]	; (800a5e4 <HAL_TIM_PeriodElapsedCallback+0x34c>)
    AngularV = -((0.01*zg_law) + (0.99)* (zg_last));
 800a2f4:	4fbc      	ldr	r7, [pc, #752]	; (800a5e8 <HAL_TIM_PeriodElapsedCallback+0x350>)
	TargetVelocity[BODY] += Acceleration;
 800a2f6:	4dbd      	ldr	r5, [pc, #756]	; (800a5ec <HAL_TIM_PeriodElapsedCallback+0x354>)
	PulseDisplacement[LEFT] = - (TIM3->CNT - INITIAL_PULSE);
 800a2f8:	f247 532f 	movw	r3, #29999	; 0x752f
 800a2fc:	eba3 0c0c 	sub.w	ip, r3, ip
 800a300:	f8c1 c000 	str.w	ip, [r1]
	TIM3->CNT = INITIAL_PULSE;
 800a304:	f8ce 3024 	str.w	r3, [lr, #36]	; 0x24
	PulseDisplacement[RIGHT] = - (TIM4->CNT - INITIAL_PULSE);
 800a308:	f8d0 e024 	ldr.w	lr, [r0, #36]	; 0x24
	TIM4->CNT = INITIAL_PULSE;
 800a30c:	6243      	str	r3, [r0, #36]	; 0x24
	PulseDisplacement[RIGHT] = - (TIM4->CNT - INITIAL_PULSE);
 800a30e:	eba3 030e 	sub.w	r3, r3, lr
	CurrentVelocity[RIGHT] =  (float)PulseDisplacement[RIGHT] * convert_to_velocity;
 800a312:	ee07 3a90 	vmov	s15, r3
	CurrentVelocity[LEFT] =  (float)PulseDisplacement[LEFT] * convert_to_velocity;
 800a316:	ee07 ca10 	vmov	s14, ip
	CurrentVelocity[RIGHT] =  (float)PulseDisplacement[RIGHT] * convert_to_velocity;
 800a31a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	CurrentVelocity[LEFT] =  (float)PulseDisplacement[LEFT] * convert_to_velocity;
 800a31e:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
	CurrentVelocity[RIGHT] =  (float)PulseDisplacement[RIGHT] * convert_to_velocity;
 800a322:	ee67 7aa6 	vmul.f32	s15, s15, s13
	CurrentVelocity[LEFT] =  (float)PulseDisplacement[LEFT] * convert_to_velocity;
 800a326:	ee27 7a26 	vmul.f32	s14, s14, s13
	CurrentVelocity[BODY] = (CurrentVelocity[LEFT] + CurrentVelocity[RIGHT] )*0.5f;
 800a32a:	eef6 8a00 	vmov.f32	s17, #96	; 0x3f000000  0.5
	CurrentVelocity[LEFT] =  (float)PulseDisplacement[LEFT] * convert_to_velocity;
 800a32e:	ed86 7a00 	vstr	s14, [r6]
	CurrentVelocity[RIGHT] =  (float)PulseDisplacement[RIGHT] * convert_to_velocity;
 800a332:	edc6 7a01 	vstr	s15, [r6, #4]
	CurrentVelocity[BODY] = (CurrentVelocity[LEFT] + CurrentVelocity[RIGHT] )*0.5f;
 800a336:	edd6 7a00 	vldr	s15, [r6]
 800a33a:	ed96 7a01 	vldr	s14, [r6, #4]
	PulseDisplacement[RIGHT] = - (TIM4->CNT - INITIAL_PULSE);
 800a33e:	604b      	str	r3, [r1, #4]
	CurrentVelocity[BODY] = (CurrentVelocity[LEFT] + CurrentVelocity[RIGHT] )*0.5f;
 800a340:	ee77 7a87 	vadd.f32	s15, s15, s14
	ZGyro = ReadIMU(0x37, 0x38);
 800a344:	2138      	movs	r1, #56	; 0x38
	CurrentVelocity[BODY] = (CurrentVelocity[LEFT] + CurrentVelocity[RIGHT] )*0.5f;
 800a346:	ee67 7aa8 	vmul.f32	s15, s15, s17
	ZGyro = ReadIMU(0x37, 0x38);
 800a34a:	2037      	movs	r0, #55	; 0x37
	CurrentVelocity[BODY] = (CurrentVelocity[LEFT] + CurrentVelocity[RIGHT] )*0.5f;
 800a34c:	edc6 7a02 	vstr	s15, [r6, #8]
	TotalPulse[LEFT] += PulseDisplacement[LEFT];
 800a350:	f8d2 e000 	ldr.w	lr, [r2]
 800a354:	44f4      	add	ip, lr
 800a356:	f8c2 c000 	str.w	ip, [r2]
	TotalPulse[RIGHT] += PulseDisplacement[RIGHT];
 800a35a:	f8d2 c004 	ldr.w	ip, [r2, #4]
 800a35e:	4463      	add	r3, ip
 800a360:	6053      	str	r3, [r2, #4]
	TotalPulse[BODY] = TotalPulse[LEFT]+TotalPulse[RIGHT];
 800a362:	6813      	ldr	r3, [r2, #0]
 800a364:	f8d2 c004 	ldr.w	ip, [r2, #4]
 800a368:	4463      	add	r3, ip
 800a36a:	6093      	str	r3, [r2, #8]
	ZGyro = ReadIMU(0x37, 0x38);
 800a36c:	f003 fdda 	bl	800df24 <ReadIMU>
 800a370:	4b9f      	ldr	r3, [pc, #636]	; (800a5f0 <HAL_TIM_PeriodElapsedCallback+0x358>)
    zg_law =  ( ZGyro - zg_offset )*convert_to_imu_angv;//16.4 * 180;//rad/s or rad/0.001s
 800a372:	4aa0      	ldr	r2, [pc, #640]	; (800a5f4 <HAL_TIM_PeriodElapsedCallback+0x35c>)
	ZGyro = ReadIMU(0x37, 0x38);
 800a374:	ed83 0a00 	vstr	s0, [r3]
    zg_law =  ( ZGyro - zg_offset )*convert_to_imu_angv;//16.4 * 180;//rad/s or rad/0.001s
 800a378:	ed93 8a00 	vldr	s16, [r3]
 800a37c:	ed92 7a00 	vldr	s14, [r2]
 800a380:	4b9d      	ldr	r3, [pc, #628]	; (800a5f8 <HAL_TIM_PeriodElapsedCallback+0x360>)
    AngularV = -((0.01*zg_law) + (0.99)* (zg_last));
 800a382:	6838      	ldr	r0, [r7, #0]
    zg_law =  ( ZGyro - zg_offset )*convert_to_imu_angv;//16.4 * 180;//rad/s or rad/0.001s
 800a384:	edd3 7a00 	vldr	s15, [r3]
 800a388:	ee38 8a47 	vsub.f32	s16, s16, s14
 800a38c:	ee28 8a27 	vmul.f32	s16, s16, s15
    AngularV = -((0.01*zg_law) + (0.99)* (zg_last));
 800a390:	f7fe f812 	bl	80083b8 <__aeabi_f2d>
 800a394:	a386      	add	r3, pc, #536	; (adr r3, 800a5b0 <HAL_TIM_PeriodElapsedCallback+0x318>)
 800a396:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a39a:	f7fe f865 	bl	8008468 <__aeabi_dmul>
 800a39e:	4680      	mov	r8, r0
 800a3a0:	ee18 0a10 	vmov	r0, s16
 800a3a4:	4689      	mov	r9, r1
 800a3a6:	f7fe f807 	bl	80083b8 <__aeabi_f2d>
 800a3aa:	a383      	add	r3, pc, #524	; (adr r3, 800a5b8 <HAL_TIM_PeriodElapsedCallback+0x320>)
 800a3ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a3b0:	f7fe f85a 	bl	8008468 <__aeabi_dmul>
 800a3b4:	4602      	mov	r2, r0
 800a3b6:	460b      	mov	r3, r1
 800a3b8:	4640      	mov	r0, r8
 800a3ba:	4649      	mov	r1, r9
 800a3bc:	f7fd fe9e 	bl	80080fc <__adddf3>
 800a3c0:	f7fe fb4a 	bl	8008a58 <__aeabi_d2f>
 800a3c4:	4b8d      	ldr	r3, [pc, #564]	; (800a5fc <HAL_TIM_PeriodElapsedCallback+0x364>)
	Angle += AngularV * T1;
 800a3c6:	498e      	ldr	r1, [pc, #568]	; (800a600 <HAL_TIM_PeriodElapsedCallback+0x368>)
 800a3c8:	eddf 7a8e 	vldr	s15, [pc, #568]	; 800a604 <HAL_TIM_PeriodElapsedCallback+0x36c>
	AngularAcceleration += AngularLeapsity;
 800a3cc:	4a8e      	ldr	r2, [pc, #568]	; (800a608 <HAL_TIM_PeriodElapsedCallback+0x370>)
 800a3ce:	f8df c264 	ldr.w	ip, [pc, #612]	; 800a634 <HAL_TIM_PeriodElapsedCallback+0x39c>
	TargetVelocity[RIGHT] = ( TargetVelocity[BODY] - TargetAngularV * TREAD_WIDTH * 0.5f );
 800a3d2:	eddf 6a8e 	vldr	s13, [pc, #568]	; 800a60c <HAL_TIM_PeriodElapsedCallback+0x374>
	AngularAcceleration += AngularLeapsity;
 800a3d6:	ed9c 6a00 	vldr	s12, [ip]
	TargetVelocity[BODY] += Acceleration;
 800a3da:	f8df c254 	ldr.w	ip, [pc, #596]	; 800a630 <HAL_TIM_PeriodElapsedCallback+0x398>
    zg_last = zg_law;
 800a3de:	ed87 8a00 	vstr	s16, [r7]
    AngularV = -((0.01*zg_law) + (0.99)* (zg_last));
 800a3e2:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 800a3e6:	6018      	str	r0, [r3, #0]
	Angle += AngularV * T1;
 800a3e8:	edd3 5a00 	vldr	s11, [r3]
 800a3ec:	ed91 7a00 	vldr	s14, [r1]
	TargetAngularV += AngularAcceleration;
 800a3f0:	4b87      	ldr	r3, [pc, #540]	; (800a610 <HAL_TIM_PeriodElapsedCallback+0x378>)
	VelocityLeftOut = PIDControl( L_VELO_PID, TargetVelocity[LEFT], CurrentVelocity[LEFT]);
 800a3f2:	4f88      	ldr	r7, [pc, #544]	; (800a614 <HAL_TIM_PeriodElapsedCallback+0x37c>)
	Angle += AngularV * T1;
 800a3f4:	eea5 7aa7 	vfma.f32	s14, s11, s15
	VelocityLeftOut = PIDControl( L_VELO_PID, TargetVelocity[LEFT], CurrentVelocity[LEFT]);
 800a3f8:	2004      	movs	r0, #4
	Angle += AngularV * T1;
 800a3fa:	ed81 7a00 	vstr	s14, [r1]
	AngularAcceleration += AngularLeapsity;
 800a3fe:	edd2 7a00 	vldr	s15, [r2]
 800a402:	ee77 7a86 	vadd.f32	s15, s15, s12
 800a406:	edc2 7a00 	vstr	s15, [r2]
	TargetVelocity[BODY] += Acceleration;
 800a40a:	eddc 7a00 	vldr	s15, [ip]
 800a40e:	ed95 7a02 	vldr	s14, [r5, #8]
 800a412:	ee77 7a87 	vadd.f32	s15, s15, s14
 800a416:	edc5 7a02 	vstr	s15, [r5, #8]
	TargetAngularV += AngularAcceleration;
 800a41a:	edd2 7a00 	vldr	s15, [r2]
 800a41e:	ed93 7a00 	vldr	s14, [r3]
 800a422:	ee77 7a87 	vadd.f32	s15, s15, s14
 800a426:	edc3 7a00 	vstr	s15, [r3]
	TargetVelocity[RIGHT] = ( TargetVelocity[BODY] - TargetAngularV * TREAD_WIDTH * 0.5f );
 800a42a:	edd5 7a02 	vldr	s15, [r5, #8]
 800a42e:	ed93 7a00 	vldr	s14, [r3]
 800a432:	ee26 7ac7 	vnmul.f32	s14, s13, s14
 800a436:	eee7 7a28 	vfma.f32	s15, s14, s17
 800a43a:	edc5 7a01 	vstr	s15, [r5, #4]
	TargetVelocity[LEFT] = ( TargetAngularV *TREAD_WIDTH ) + TargetVelocity[RIGHT];
 800a43e:	ed93 7a00 	vldr	s14, [r3]
 800a442:	edd5 7a01 	vldr	s15, [r5, #4]
 800a446:	eee7 7a26 	vfma.f32	s15, s14, s13
 800a44a:	edc5 7a00 	vstr	s15, [r5]
	VelocityLeftOut = PIDControl( L_VELO_PID, TargetVelocity[LEFT], CurrentVelocity[LEFT]);
 800a44e:	ed95 0a00 	vldr	s0, [r5]
 800a452:	edd6 0a00 	vldr	s1, [r6]
 800a456:	f004 fb33 	bl	800eac0 <PIDControl>
	VelocityRightOut = PIDControl( R_VELO_PID, TargetVelocity[RIGHT], CurrentVelocity[RIGHT]);
 800a45a:	ed95 0a01 	vldr	s0, [r5, #4]
	VelocityLeftOut = PIDControl( L_VELO_PID, TargetVelocity[LEFT], CurrentVelocity[LEFT]);
 800a45e:	6038      	str	r0, [r7, #0]
	VelocityRightOut = PIDControl( R_VELO_PID, TargetVelocity[RIGHT], CurrentVelocity[RIGHT]);
 800a460:	edd6 0a01 	vldr	s1, [r6, #4]
 800a464:	2005      	movs	r0, #5
 800a466:	f004 fb2b 	bl	800eac0 <PIDControl>
 800a46a:	4b6b      	ldr	r3, [pc, #428]	; (800a618 <HAL_TIM_PeriodElapsedCallback+0x380>)
 800a46c:	4601      	mov	r1, r0
	Motor_Switch( VelocityLeftOut, VelocityRightOut );
 800a46e:	6838      	ldr	r0, [r7, #0]
	VelocityRightOut = PIDControl( R_VELO_PID, TargetVelocity[RIGHT], CurrentVelocity[RIGHT]);
 800a470:	6019      	str	r1, [r3, #0]
	Motor_Switch( VelocityLeftOut, VelocityRightOut );
 800a472:	f003 ff71 	bl	800e358 <Motor_Switch>
	if( htim == &htim8)
 800a476:	4b53      	ldr	r3, [pc, #332]	; (800a5c4 <HAL_TIM_PeriodElapsedCallback+0x32c>)
 800a478:	429c      	cmp	r4, r3
 800a47a:	f47f af19 	bne.w	800a2b0 <HAL_TIM_PeriodElapsedCallback+0x18>
		Photo[FL] = GetWallDataAverage(10, adc1[0], FL);	//adc1_IN10
 800a47e:	4e67      	ldr	r6, [pc, #412]	; (800a61c <HAL_TIM_PeriodElapsedCallback+0x384>)
 800a480:	4c67      	ldr	r4, [pc, #412]	; (800a620 <HAL_TIM_PeriodElapsedCallback+0x388>)
 800a482:	6831      	ldr	r1, [r6, #0]
		Photo[SL] = GetWallDataAverage(10, adc2[0], SL);	//adc2_IN11
 800a484:	4d67      	ldr	r5, [pc, #412]	; (800a624 <HAL_TIM_PeriodElapsedCallback+0x38c>)
		Photo[FL] = GetWallDataAverage(10, adc1[0], FL);	//adc1_IN10
 800a486:	2200      	movs	r2, #0
 800a488:	200a      	movs	r0, #10
 800a48a:	f003 ffc1 	bl	800e410 <GetWallDataAverage>
		Photo[SR] = GetWallDataAverage(10, adc1[1], SR);	//adc1_IN14
 800a48e:	6871      	ldr	r1, [r6, #4]
		Photo[FL] = GetWallDataAverage(10, adc1[0], FL);	//adc1_IN10
 800a490:	ed84 0a00 	vstr	s0, [r4]
		Photo[SR] = GetWallDataAverage(10, adc1[1], SR);	//adc1_IN14
 800a494:	2201      	movs	r2, #1
 800a496:	200a      	movs	r0, #10
 800a498:	f003 ffba 	bl	800e410 <GetWallDataAverage>
		Photo[SL] = GetWallDataAverage(10, adc2[0], SL);	//adc2_IN11
 800a49c:	6829      	ldr	r1, [r5, #0]
		Photo[SR] = GetWallDataAverage(10, adc1[1], SR);	//adc1_IN14
 800a49e:	ed84 0a01 	vstr	s0, [r4, #4]
		Photo[SL] = GetWallDataAverage(10, adc2[0], SL);	//adc2_IN11
 800a4a2:	2202      	movs	r2, #2
 800a4a4:	200a      	movs	r0, #10
 800a4a6:	f003 ffb3 	bl	800e410 <GetWallDataAverage>
		Photo[FR] = GetWallDataAverage(10, adc2[1], FR);	//adc2_IN15
 800a4aa:	6869      	ldr	r1, [r5, #4]
		Photo[SL] = GetWallDataAverage(10, adc2[0], SL);	//adc2_IN11
 800a4ac:	ed84 0a02 	vstr	s0, [r4, #8]
		Photo[FR] = GetWallDataAverage(10, adc2[1], FR);	//adc2_IN15
 800a4b0:	2203      	movs	r2, #3
 800a4b2:	200a      	movs	r0, #10
 800a4b4:	f003 ffac 	bl	800e410 <GetWallDataAverage>
}
 800a4b8:	ecbd 8b02 	vpop	{d8}
		Photo[FR] = GetWallDataAverage(10, adc2[1], FR);	//adc2_IN15
 800a4bc:	ed84 0a03 	vstr	s0, [r4, #12]
}
 800a4c0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	PulseDisplacement[LEFT] = - (TIM3->CNT - INITIAL_PULSE);
 800a4c4:	4d58      	ldr	r5, [pc, #352]	; (800a628 <HAL_TIM_PeriodElapsedCallback+0x390>)
 800a4c6:	4843      	ldr	r0, [pc, #268]	; (800a5d4 <HAL_TIM_PeriodElapsedCallback+0x33c>)
 800a4c8:	6a69      	ldr	r1, [r5, #36]	; 0x24
	PulseDisplacement[RIGHT] = - (TIM4->CNT - INITIAL_PULSE);
 800a4ca:	4a43      	ldr	r2, [pc, #268]	; (800a5d8 <HAL_TIM_PeriodElapsedCallback+0x340>)
	CurrentVelocity[LEFT] =  (float)PulseDisplacement[LEFT] * convert_to_velocity;
 800a4cc:	eddf 7a43 	vldr	s15, [pc, #268]	; 800a5dc <HAL_TIM_PeriodElapsedCallback+0x344>
 800a4d0:	4e43      	ldr	r6, [pc, #268]	; (800a5e0 <HAL_TIM_PeriodElapsedCallback+0x348>)
	Update_IMU(&AngularV, &Angle); //メディアンフィルタとオフセットだけで何とかした.
 800a4d2:	4f4b      	ldr	r7, [pc, #300]	; (800a600 <HAL_TIM_PeriodElapsedCallback+0x368>)
	PulseDisplacement[LEFT] = - (TIM3->CNT - INITIAL_PULSE);
 800a4d4:	f247 532f 	movw	r3, #29999	; 0x752f
 800a4d8:	1a59      	subs	r1, r3, r1
 800a4da:	6001      	str	r1, [r0, #0]
	TIM3->CNT = INITIAL_PULSE;
 800a4dc:	626b      	str	r3, [r5, #36]	; 0x24
	PulseDisplacement[RIGHT] = - (TIM4->CNT - INITIAL_PULSE);
 800a4de:	6a55      	ldr	r5, [r2, #36]	; 0x24
	TIM4->CNT = INITIAL_PULSE;
 800a4e0:	6253      	str	r3, [r2, #36]	; 0x24
	PulseDisplacement[RIGHT] = - (TIM4->CNT - INITIAL_PULSE);
 800a4e2:	1b5b      	subs	r3, r3, r5
	CurrentVelocity[RIGHT] =  (float)PulseDisplacement[RIGHT] * convert_to_velocity;
 800a4e4:	ee07 3a10 	vmov	s14, r3
	CurrentVelocity[LEFT] =  (float)PulseDisplacement[LEFT] * convert_to_velocity;
 800a4e8:	ee06 1a90 	vmov	s13, r1
	CurrentVelocity[RIGHT] =  (float)PulseDisplacement[RIGHT] * convert_to_velocity;
 800a4ec:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
	CurrentVelocity[LEFT] =  (float)PulseDisplacement[LEFT] * convert_to_velocity;
 800a4f0:	eef8 6ae6 	vcvt.f32.s32	s13, s13
	CurrentVelocity[RIGHT] =  (float)PulseDisplacement[RIGHT] * convert_to_velocity;
 800a4f4:	ee27 7a27 	vmul.f32	s14, s14, s15
	CurrentVelocity[LEFT] =  (float)PulseDisplacement[LEFT] * convert_to_velocity;
 800a4f8:	ee66 6aa7 	vmul.f32	s13, s13, s15
	CurrentVelocity[BODY] = (CurrentVelocity[LEFT] + CurrentVelocity[RIGHT] )*0.5f;
 800a4fc:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
	CurrentVelocity[LEFT] =  (float)PulseDisplacement[LEFT] * convert_to_velocity;
 800a500:	edc6 6a00 	vstr	s13, [r6]
	CurrentVelocity[RIGHT] =  (float)PulseDisplacement[RIGHT] * convert_to_velocity;
 800a504:	ed86 7a01 	vstr	s14, [r6, #4]
	CurrentVelocity[BODY] = (CurrentVelocity[LEFT] + CurrentVelocity[RIGHT] )*0.5f;
 800a508:	edd6 7a00 	vldr	s15, [r6]
 800a50c:	ed96 7a01 	vldr	s14, [r6, #4]
	TotalPulse[LEFT] += PulseDisplacement[LEFT];
 800a510:	4a34      	ldr	r2, [pc, #208]	; (800a5e4 <HAL_TIM_PeriodElapsedCallback+0x34c>)
	PulseDisplacement[RIGHT] = - (TIM4->CNT - INITIAL_PULSE);
 800a512:	6043      	str	r3, [r0, #4]
	CurrentVelocity[BODY] = (CurrentVelocity[LEFT] + CurrentVelocity[RIGHT] )*0.5f;
 800a514:	ee77 7a87 	vadd.f32	s15, s15, s14
 800a518:	ee67 7a86 	vmul.f32	s15, s15, s12
 800a51c:	edc6 7a02 	vstr	s15, [r6, #8]
	TotalPulse[LEFT] += PulseDisplacement[LEFT];
 800a520:	6810      	ldr	r0, [r2, #0]
 800a522:	4401      	add	r1, r0
 800a524:	6011      	str	r1, [r2, #0]
	TotalPulse[RIGHT] += PulseDisplacement[RIGHT];
 800a526:	6851      	ldr	r1, [r2, #4]
	Update_IMU(&AngularV, &Angle); //メディアンフィルタとオフセットだけで何とかした.
 800a528:	4834      	ldr	r0, [pc, #208]	; (800a5fc <HAL_TIM_PeriodElapsedCallback+0x364>)
	TotalPulse[RIGHT] += PulseDisplacement[RIGHT];
 800a52a:	440b      	add	r3, r1
 800a52c:	6053      	str	r3, [r2, #4]
	TotalPulse[BODY] = TotalPulse[LEFT]+TotalPulse[RIGHT];
 800a52e:	6813      	ldr	r3, [r2, #0]
 800a530:	6851      	ldr	r1, [r2, #4]
 800a532:	440b      	add	r3, r1
	Update_IMU(&AngularV, &Angle); //メディアンフィルタとオフセットだけで何とかした.
 800a534:	4639      	mov	r1, r7
	TotalPulse[BODY] = TotalPulse[LEFT]+TotalPulse[RIGHT];
 800a536:	6093      	str	r3, [r2, #8]
	Update_IMU(&AngularV, &Angle); //メディアンフィルタとオフセットだけで何とかした.
 800a538:	f003 fd62 	bl	800e000 <Update_IMU>
				if( Pid[A_VELO_PID].flag == 1 )
 800a53c:	4b3b      	ldr	r3, [pc, #236]	; (800a62c <HAL_TIM_PeriodElapsedCallback+0x394>)
 800a53e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800a540:	2a01      	cmp	r2, #1
 800a542:	f000 809f 	beq.w	800a684 <HAL_TIM_PeriodElapsedCallback+0x3ec>
				else if( Pid[D_WALL_PID].flag == 1 )
 800a546:	6d58      	ldr	r0, [r3, #84]	; 0x54
 800a548:	2801      	cmp	r0, #1
 800a54a:	f000 80ac 	beq.w	800a6a6 <HAL_TIM_PeriodElapsedCallback+0x40e>
				else if( Pid[L_WALL_PID].flag == 1 )
 800a54e:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 800a552:	2a01      	cmp	r2, #1
 800a554:	d070      	beq.n	800a638 <HAL_TIM_PeriodElapsedCallback+0x3a0>
				else if( Pid[R_WALL_PID].flag == 1 )
 800a556:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 800a55a:	2a01      	cmp	r2, #1
 800a55c:	f000 80ce 	beq.w	800a6fc <HAL_TIM_PeriodElapsedCallback+0x464>
				else if( Pid[F_WALL_PID].flag == 1)
 800a560:	f8d3 3188 	ldr.w	r3, [r3, #392]	; 0x188
 800a564:	2b01      	cmp	r3, #1
 800a566:	f000 80aa 	beq.w	800a6be <HAL_TIM_PeriodElapsedCallback+0x426>
 800a56a:	4b29      	ldr	r3, [pc, #164]	; (800a610 <HAL_TIM_PeriodElapsedCallback+0x378>)
 800a56c:	4d1f      	ldr	r5, [pc, #124]	; (800a5ec <HAL_TIM_PeriodElapsedCallback+0x354>)
	TargetVelocity[BODY] += Acceleration;
 800a56e:	4a30      	ldr	r2, [pc, #192]	; (800a630 <HAL_TIM_PeriodElapsedCallback+0x398>)
	TargetVelocity[RIGHT] = ( TargetVelocity[BODY] - TargetAngularV * TREAD_WIDTH * 0.5f );
 800a570:	eddf 6a26 	vldr	s13, [pc, #152]	; 800a60c <HAL_TIM_PeriodElapsedCallback+0x374>
	TargetVelocity[BODY] += Acceleration;
 800a574:	edd2 7a00 	vldr	s15, [r2]
 800a578:	ed95 7a02 	vldr	s14, [r5, #8]
	TargetAngularV += AngularAcceleration;
 800a57c:	4a22      	ldr	r2, [pc, #136]	; (800a608 <HAL_TIM_PeriodElapsedCallback+0x370>)
	VelocityLeftOut = PIDControl( L_VELO_PID, TargetVelocity[LEFT], CurrentVelocity[LEFT]);
 800a57e:	4f25      	ldr	r7, [pc, #148]	; (800a614 <HAL_TIM_PeriodElapsedCallback+0x37c>)
	TargetVelocity[BODY] += Acceleration;
 800a580:	ee77 7a87 	vadd.f32	s15, s15, s14
	TargetVelocity[RIGHT] = ( TargetVelocity[BODY] - TargetAngularV * TREAD_WIDTH * 0.5f );
 800a584:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
	TargetVelocity[BODY] += Acceleration;
 800a588:	edc5 7a02 	vstr	s15, [r5, #8]
	TargetAngularV += AngularAcceleration;
 800a58c:	edd2 7a00 	vldr	s15, [r2]
 800a590:	ed93 7a00 	vldr	s14, [r3]
 800a594:	ee77 7a87 	vadd.f32	s15, s15, s14
	VelocityLeftOut = PIDControl( L_VELO_PID, TargetVelocity[LEFT], CurrentVelocity[LEFT]);
 800a598:	2004      	movs	r0, #4
	TargetAngularV += AngularAcceleration;
 800a59a:	edc3 7a00 	vstr	s15, [r3]
	TargetVelocity[RIGHT] = ( TargetVelocity[BODY] - TargetAngularV * TREAD_WIDTH * 0.5f );
 800a59e:	edd5 7a02 	vldr	s15, [r5, #8]
 800a5a2:	ed93 7a00 	vldr	s14, [r3]
 800a5a6:	ee26 7ac7 	vnmul.f32	s14, s13, s14
 800a5aa:	eee7 7a06 	vfma.f32	s15, s14, s12
 800a5ae:	e744      	b.n	800a43a <HAL_TIM_PeriodElapsedCallback+0x1a2>
 800a5b0:	7ae147ae 	.word	0x7ae147ae
 800a5b4:	3fefae14 	.word	0x3fefae14
 800a5b8:	47ae147b 	.word	0x47ae147b
 800a5bc:	3f847ae1 	.word	0x3f847ae1
 800a5c0:	20001f6c 	.word	0x20001f6c
 800a5c4:	20001d24 	.word	0x20001d24
 800a5c8:	2000150c 	.word	0x2000150c
 800a5cc:	20001514 	.word	0x20001514
 800a5d0:	20001508 	.word	0x20001508
 800a5d4:	200015cc 	.word	0x200015cc
 800a5d8:	40000800 	.word	0x40000800
 800a5dc:	3f7c2fb9 	.word	0x3f7c2fb9
 800a5e0:	20001558 	.word	0x20001558
 800a5e4:	2000154c 	.word	0x2000154c
 800a5e8:	20000208 	.word	0x20000208
 800a5ec:	2000151c 	.word	0x2000151c
 800a5f0:	200012c8 	.word	0x200012c8
 800a5f4:	200012d4 	.word	0x200012d4
 800a5f8:	08016eec 	.word	0x08016eec
 800a5fc:	20001224 	.word	0x20001224
 800a600:	20001218 	.word	0x20001218
 800a604:	3a83126f 	.word	0x3a83126f
 800a608:	2000121c 	.word	0x2000121c
 800a60c:	4209999a 	.word	0x4209999a
 800a610:	2000152c 	.word	0x2000152c
 800a614:	200015a4 	.word	0x200015a4
 800a618:	200015c4 	.word	0x200015c4
 800a61c:	200012b4 	.word	0x200012b4
 800a620:	2000158c 	.word	0x2000158c
 800a624:	200012c0 	.word	0x200012c0
 800a628:	40000400 	.word	0x40000400
 800a62c:	20001318 	.word	0x20001318
 800a630:	20001214 	.word	0x20001214
 800a634:	20001220 	.word	0x20001220
					wall_l = PIDControl( L_WALL_PID,  Photo[SL], TargetPhoto[SL]);
 800a638:	4a37      	ldr	r2, [pc, #220]	; (800a718 <HAL_TIM_PeriodElapsedCallback+0x480>)
 800a63a:	4b38      	ldr	r3, [pc, #224]	; (800a71c <HAL_TIM_PeriodElapsedCallback+0x484>)
 800a63c:	ed92 0a02 	vldr	s0, [r2, #8]
 800a640:	4d37      	ldr	r5, [pc, #220]	; (800a720 <HAL_TIM_PeriodElapsedCallback+0x488>)
 800a642:	edd3 0a02 	vldr	s1, [r3, #8]
 800a646:	2002      	movs	r0, #2
 800a648:	f004 fa3a 	bl	800eac0 <PIDControl>
					TargetAngularV = (float)wall_l*0.001;//0.002 だと速さはちょうどいいけど細かさが足りないかも。
 800a64c:	ee07 0a90 	vmov	s15, r0
 800a650:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a654:	ee17 0a90 	vmov	r0, s15
 800a658:	f7fd feae 	bl	80083b8 <__aeabi_f2d>
 800a65c:	a32c      	add	r3, pc, #176	; (adr r3, 800a710 <HAL_TIM_PeriodElapsedCallback+0x478>)
 800a65e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a662:	f7fd ff01 	bl	8008468 <__aeabi_dmul>
 800a666:	f7fe f9f7 	bl	8008a58 <__aeabi_d2f>
 800a66a:	4b2e      	ldr	r3, [pc, #184]	; (800a724 <HAL_TIM_PeriodElapsedCallback+0x48c>)
 800a66c:	6018      	str	r0, [r3, #0]
 800a66e:	e77e      	b.n	800a56e <HAL_TIM_PeriodElapsedCallback+0x2d6>
				Update_IMU(&AngularV, &Angle);
 800a670:	492d      	ldr	r1, [pc, #180]	; (800a728 <HAL_TIM_PeriodElapsedCallback+0x490>)
 800a672:	482e      	ldr	r0, [pc, #184]	; (800a72c <HAL_TIM_PeriodElapsedCallback+0x494>)
 800a674:	f003 fcc4 	bl	800e000 <Update_IMU>
				timer1 += t;
 800a678:	4a2d      	ldr	r2, [pc, #180]	; (800a730 <HAL_TIM_PeriodElapsedCallback+0x498>)
 800a67a:	682b      	ldr	r3, [r5, #0]
 800a67c:	6812      	ldr	r2, [r2, #0]
 800a67e:	4413      	add	r3, r2
 800a680:	602b      	str	r3, [r5, #0]
 800a682:	e611      	b.n	800a2a8 <HAL_TIM_PeriodElapsedCallback+0x10>
					ang_out = PIDControl( A_VELO_PID,  TargetAngle, Angle);
 800a684:	4b2b      	ldr	r3, [pc, #172]	; (800a734 <HAL_TIM_PeriodElapsedCallback+0x49c>)
 800a686:	4d26      	ldr	r5, [pc, #152]	; (800a720 <HAL_TIM_PeriodElapsedCallback+0x488>)
					ang_out = PIDControl( A_VELO_PID,  TargetAngle, Angle);
 800a688:	ed93 0a00 	vldr	s0, [r3]
 800a68c:	edd7 0a00 	vldr	s1, [r7]
 800a690:	2000      	movs	r0, #0
 800a692:	f004 fa15 	bl	800eac0 <PIDControl>
					TargetAngularV = (float)ang_out;
 800a696:	ee07 0a90 	vmov	s15, r0
 800a69a:	4b22      	ldr	r3, [pc, #136]	; (800a724 <HAL_TIM_PeriodElapsedCallback+0x48c>)
 800a69c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a6a0:	edc3 7a00 	vstr	s15, [r3]
 800a6a4:	e763      	b.n	800a56e <HAL_TIM_PeriodElapsedCallback+0x2d6>
					wall_d = PIDControl( D_WALL_PID, Photo[SL], Photo[SR]+PhotoDiff);	//左に寄ってたら+→角速度は+
 800a6a6:	4b1c      	ldr	r3, [pc, #112]	; (800a718 <HAL_TIM_PeriodElapsedCallback+0x480>)
 800a6a8:	4a23      	ldr	r2, [pc, #140]	; (800a738 <HAL_TIM_PeriodElapsedCallback+0x4a0>)
 800a6aa:	ed93 0a02 	vldr	s0, [r3, #8]
 800a6ae:	edd3 0a01 	vldr	s1, [r3, #4]
 800a6b2:	edd2 7a00 	vldr	s15, [r2]
 800a6b6:	4d1a      	ldr	r5, [pc, #104]	; (800a720 <HAL_TIM_PeriodElapsedCallback+0x488>)
 800a6b8:	ee70 0aa7 	vadd.f32	s1, s1, s15
 800a6bc:	e7c4      	b.n	800a648 <HAL_TIM_PeriodElapsedCallback+0x3b0>
					wall_f = PIDControl( F_WALL_PID,   4000, (	(Photo[FR]+Photo[FL])));
 800a6be:	4b16      	ldr	r3, [pc, #88]	; (800a718 <HAL_TIM_PeriodElapsedCallback+0x480>)
 800a6c0:	ed9f 0a1e 	vldr	s0, [pc, #120]	; 800a73c <HAL_TIM_PeriodElapsedCallback+0x4a4>
 800a6c4:	edd3 0a03 	vldr	s1, [r3, #12]
 800a6c8:	edd3 7a00 	vldr	s15, [r3]
					TargetVelocity[BODY] = (float)wall_f*0.001;
 800a6cc:	4d14      	ldr	r5, [pc, #80]	; (800a720 <HAL_TIM_PeriodElapsedCallback+0x488>)
					wall_f = PIDControl( F_WALL_PID,   4000, (	(Photo[FR]+Photo[FL])));
 800a6ce:	ee70 0aa7 	vadd.f32	s1, s1, s15
 800a6d2:	2008      	movs	r0, #8
 800a6d4:	f004 f9f4 	bl	800eac0 <PIDControl>
					TargetVelocity[BODY] = (float)wall_f*0.001;
 800a6d8:	ee07 0a90 	vmov	s15, r0
 800a6dc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a6e0:	ee17 0a90 	vmov	r0, s15
 800a6e4:	f7fd fe68 	bl	80083b8 <__aeabi_f2d>
 800a6e8:	a309      	add	r3, pc, #36	; (adr r3, 800a710 <HAL_TIM_PeriodElapsedCallback+0x478>)
 800a6ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a6ee:	f7fd febb 	bl	8008468 <__aeabi_dmul>
 800a6f2:	f7fe f9b1 	bl	8008a58 <__aeabi_d2f>
					ang_out = PIDControl( A_VELO_PID,  TargetAngle, Angle);
 800a6f6:	4b0f      	ldr	r3, [pc, #60]	; (800a734 <HAL_TIM_PeriodElapsedCallback+0x49c>)
					TargetVelocity[BODY] = (float)wall_f*0.001;
 800a6f8:	60a8      	str	r0, [r5, #8]
 800a6fa:	e7c5      	b.n	800a688 <HAL_TIM_PeriodElapsedCallback+0x3f0>
					wall_r = PIDControl( R_WALL_PID,  TargetPhoto[SR], Photo[SR]);			//右に寄ってたら-
 800a6fc:	4a07      	ldr	r2, [pc, #28]	; (800a71c <HAL_TIM_PeriodElapsedCallback+0x484>)
 800a6fe:	4b06      	ldr	r3, [pc, #24]	; (800a718 <HAL_TIM_PeriodElapsedCallback+0x480>)
 800a700:	ed92 0a01 	vldr	s0, [r2, #4]
 800a704:	4d06      	ldr	r5, [pc, #24]	; (800a720 <HAL_TIM_PeriodElapsedCallback+0x488>)
 800a706:	edd3 0a01 	vldr	s1, [r3, #4]
 800a70a:	2003      	movs	r0, #3
 800a70c:	e79c      	b.n	800a648 <HAL_TIM_PeriodElapsedCallback+0x3b0>
 800a70e:	bf00      	nop
 800a710:	d2f1a9fc 	.word	0xd2f1a9fc
 800a714:	3f50624d 	.word	0x3f50624d
 800a718:	2000158c 	.word	0x2000158c
 800a71c:	200015b0 	.word	0x200015b0
 800a720:	2000151c 	.word	0x2000151c
 800a724:	2000152c 	.word	0x2000152c
 800a728:	20001218 	.word	0x20001218
 800a72c:	20001224 	.word	0x20001224
 800a730:	20001508 	.word	0x20001508
 800a734:	20001228 	.word	0x20001228
 800a738:	20001540 	.word	0x20001540
 800a73c:	457a0000 	.word	0x457a0000

0800a740 <initMaze>:
            maze->ColumnNode[i][j].weight = MAX_WEIGHT;
        }
    }
}
void initMaze(maze_node *maze) //重みは別で初期化
{
 800a740:	b5f0      	push	{r4, r5, r6, r7, lr}
    //まず未探索状態にする
    for(int i=0; i < NUMBER_OF_SQUARES_X; i++)
 800a742:	2700      	movs	r7, #0
 800a744:	4604      	mov	r4, r0
    {
        for(int j=1; j < NUMBER_OF_SQUARES_Y; j++)
 800a746:	4684      	mov	ip, r0
        {
            maze->RawNode[i][j].existence = UNKNOWN;
            maze->RawNode[i][j].draw = false;//未知壁は描画のときに無いものとする
 800a748:	4639      	mov	r1, r7
            maze->RawNode[i][j].existence = UNKNOWN;
 800a74a:	2602      	movs	r6, #2
 800a74c:	b2fd      	uxtb	r5, r7
{
 800a74e:	4663      	mov	r3, ip
        for(int j=1; j < NUMBER_OF_SQUARES_Y; j++)
 800a750:	2201      	movs	r2, #1
            maze->RawNode[i][j].rc = 0;
            maze->RawNode[i][j].pos.x = i;
            maze->RawNode[i][j].pos.y = j;
 800a752:	73da      	strb	r2, [r3, #15]
        for(int j=1; j < NUMBER_OF_SQUARES_Y; j++)
 800a754:	3201      	adds	r2, #1
 800a756:	2a09      	cmp	r2, #9
            maze->RawNode[i][j].existence = UNKNOWN;
 800a758:	721e      	strb	r6, [r3, #8]
            maze->RawNode[i][j].draw = false;//未知壁は描画のときに無いものとする
 800a75a:	7319      	strb	r1, [r3, #12]
            maze->RawNode[i][j].rc = 0;
 800a75c:	7359      	strb	r1, [r3, #13]
            maze->RawNode[i][j].pos.x = i;
 800a75e:	739d      	strb	r5, [r3, #14]
 800a760:	f103 0308 	add.w	r3, r3, #8
        for(int j=1; j < NUMBER_OF_SQUARES_Y; j++)
 800a764:	d1f5      	bne.n	800a752 <initMaze+0x12>
    for(int i=0; i < NUMBER_OF_SQUARES_X; i++)
 800a766:	3701      	adds	r7, #1
 800a768:	2f09      	cmp	r7, #9
 800a76a:	f10c 0c50 	add.w	ip, ip, #80	; 0x50
 800a76e:	d1ed      	bne.n	800a74c <initMaze+0xc>
        }
    }
    for(int i=0; i < NUMBER_OF_SQUARES_X; i++)
 800a770:	2200      	movs	r2, #0
    {
            maze->RawNode[i][0].existence = WALL;
            maze->RawNode[i][0].draw = true;//未知壁は描画のときに無いものとする
            maze->RawNode[i][0].rc = 0;
 800a772:	4615      	mov	r5, r2
 800a774:	4603      	mov	r3, r0
            maze->RawNode[i][0].existence = WALL;
 800a776:	2101      	movs	r1, #1
            maze->RawNode[i][0].pos.x = i;
 800a778:	b2d6      	uxtb	r6, r2
    for(int i=0; i < NUMBER_OF_SQUARES_X; i++)
 800a77a:	3201      	adds	r2, #1
 800a77c:	2a09      	cmp	r2, #9
            maze->RawNode[i][0].existence = WALL;
 800a77e:	7019      	strb	r1, [r3, #0]
            maze->RawNode[i][0].draw = true;//未知壁は描画のときに無いものとする
 800a780:	7119      	strb	r1, [r3, #4]
            maze->RawNode[i][0].rc = 0;
 800a782:	715d      	strb	r5, [r3, #5]
            maze->RawNode[i][0].pos.y = 0;
 800a784:	71dd      	strb	r5, [r3, #7]
            maze->RawNode[i][NUMBER_OF_SQUARES_Y].existence = WALL;
 800a786:	f883 1048 	strb.w	r1, [r3, #72]	; 0x48
            maze->RawNode[i][NUMBER_OF_SQUARES_Y].draw = true;//未知壁は描画のときに無いものとする
 800a78a:	f883 104c 	strb.w	r1, [r3, #76]	; 0x4c
            maze->RawNode[i][NUMBER_OF_SQUARES_Y].rc = 0;
 800a78e:	f883 504d 	strb.w	r5, [r3, #77]	; 0x4d
            maze->RawNode[i][NUMBER_OF_SQUARES_Y].pos.x = i;
            maze->RawNode[i][NUMBER_OF_SQUARES_Y].pos.y = NUMBER_OF_SQUARES_Y;
 800a792:	f883 704f 	strb.w	r7, [r3, #79]	; 0x4f
            maze->RawNode[i][0].pos.x = i;
 800a796:	719e      	strb	r6, [r3, #6]
            maze->RawNode[i][NUMBER_OF_SQUARES_Y].pos.x = i;
 800a798:	f883 604e 	strb.w	r6, [r3, #78]	; 0x4e
 800a79c:	f103 0350 	add.w	r3, r3, #80	; 0x50
    for(int i=0; i < NUMBER_OF_SQUARES_X; i++)
 800a7a0:	d1ea      	bne.n	800a778 <initMaze+0x38>
    }
    for(int i=1; i < NUMBER_OF_SQUARES_X; i++)
 800a7a2:	f04f 0c01 	mov.w	ip, #1
    {
        for(int j=0; j < NUMBER_OF_SQUARES_Y; j++)
        {
            maze->ColumnNode[i][j].existence = UNKNOWN;
            maze->ColumnNode[i][j].draw = false;
            maze->ColumnNode[i][j].rc = 1;
 800a7a6:	4667      	mov	r7, ip
 800a7a8:	f100 0e48 	add.w	lr, r0, #72	; 0x48
            maze->ColumnNode[i][j].existence = UNKNOWN;
 800a7ac:	2602      	movs	r6, #2
            maze->ColumnNode[i][j].draw = false;
 800a7ae:	2500      	movs	r5, #0
 800a7b0:	fa5f f18c 	uxtb.w	r1, ip
    for(int i=0; i < NUMBER_OF_SQUARES_X; i++)
 800a7b4:	4673      	mov	r3, lr
        for(int j=0; j < NUMBER_OF_SQUARES_Y; j++)
 800a7b6:	2200      	movs	r2, #0
            maze->ColumnNode[i][j].pos.x = i;
            maze->ColumnNode[i][j].pos.y = j;
 800a7b8:	f883 22d7 	strb.w	r2, [r3, #727]	; 0x2d7
        for(int j=0; j < NUMBER_OF_SQUARES_Y; j++)
 800a7bc:	3201      	adds	r2, #1
 800a7be:	2a09      	cmp	r2, #9
            maze->ColumnNode[i][j].existence = UNKNOWN;
 800a7c0:	f883 62d0 	strb.w	r6, [r3, #720]	; 0x2d0
            maze->ColumnNode[i][j].draw = false;
 800a7c4:	f883 52d4 	strb.w	r5, [r3, #724]	; 0x2d4
            maze->ColumnNode[i][j].rc = 1;
 800a7c8:	f883 72d5 	strb.w	r7, [r3, #725]	; 0x2d5
            maze->ColumnNode[i][j].pos.x = i;
 800a7cc:	f883 12d6 	strb.w	r1, [r3, #726]	; 0x2d6
 800a7d0:	f103 0308 	add.w	r3, r3, #8
        for(int j=0; j < NUMBER_OF_SQUARES_Y; j++)
 800a7d4:	d1f0      	bne.n	800a7b8 <initMaze+0x78>
    for(int i=1; i < NUMBER_OF_SQUARES_X; i++)
 800a7d6:	f10c 0c01 	add.w	ip, ip, #1
 800a7da:	f1bc 0f09 	cmp.w	ip, #9
 800a7de:	f10e 0e48 	add.w	lr, lr, #72	; 0x48
 800a7e2:	d1e5      	bne.n	800a7b0 <initMaze+0x70>
        }
    }
    for(int j=0; j < NUMBER_OF_SQUARES_Y; j++)
 800a7e4:	2100      	movs	r1, #0
    {
            maze->ColumnNode[0][j].existence = WALL;
            maze->ColumnNode[0][j].draw = true;
            maze->ColumnNode[0][j].rc = 1;
            maze->ColumnNode[0][j].pos.x = 0;
 800a7e6:	460e      	mov	r6, r1
 800a7e8:	4603      	mov	r3, r0
            maze->ColumnNode[0][j].existence = WALL;
 800a7ea:	2201      	movs	r2, #1
            maze->ColumnNode[0][j].pos.y = j;
 800a7ec:	b2cd      	uxtb	r5, r1
    for(int j=0; j < NUMBER_OF_SQUARES_Y; j++)
 800a7ee:	3101      	adds	r1, #1
 800a7f0:	2909      	cmp	r1, #9
            maze->ColumnNode[0][j].existence = WALL;
 800a7f2:	f883 22d0 	strb.w	r2, [r3, #720]	; 0x2d0
            maze->ColumnNode[0][j].draw = true;
 800a7f6:	f883 22d4 	strb.w	r2, [r3, #724]	; 0x2d4
            maze->ColumnNode[0][j].rc = 1;
 800a7fa:	f883 22d5 	strb.w	r2, [r3, #725]	; 0x2d5
            maze->ColumnNode[0][j].pos.x = 0;
 800a7fe:	f883 62d6 	strb.w	r6, [r3, #726]	; 0x2d6
            maze->ColumnNode[NUMBER_OF_SQUARES_X][j].existence = WALL;
 800a802:	f883 2558 	strb.w	r2, [r3, #1368]	; 0x558
            maze->ColumnNode[NUMBER_OF_SQUARES_X][j].draw = true;
 800a806:	f883 255c 	strb.w	r2, [r3, #1372]	; 0x55c
            maze->ColumnNode[NUMBER_OF_SQUARES_X][j].rc = 1;
 800a80a:	f883 255d 	strb.w	r2, [r3, #1373]	; 0x55d
            maze->ColumnNode[NUMBER_OF_SQUARES_X][j].pos.x = NUMBER_OF_SQUARES_X;
 800a80e:	f883 c55e 	strb.w	ip, [r3, #1374]	; 0x55e
            maze->ColumnNode[0][j].pos.y = j;
 800a812:	f883 52d7 	strb.w	r5, [r3, #727]	; 0x2d7
            maze->ColumnNode[NUMBER_OF_SQUARES_X][j].pos.y = j;
 800a816:	f883 555f 	strb.w	r5, [r3, #1375]	; 0x55f
 800a81a:	f103 0308 	add.w	r3, r3, #8
    for(int j=0; j < NUMBER_OF_SQUARES_Y; j++)
 800a81e:	d1e5      	bne.n	800a7ec <initMaze+0xac>
    }
    
    // 壁の有無を初期化
    for(int i=0; i < NUMBER_OF_SQUARES_X; i++)
 800a820:	2200      	movs	r2, #0
        maze->RawNode[i][NUMBER_OF_SQUARES_Y].existence = WALL;     //北壁すべて1

        maze->RawNode[i][0].draw = true;                        
        maze->RawNode[i][NUMBER_OF_SQUARES_Y].draw = true;

        maze->RawNode[i][0].rc = 0;
 800a822:	4616      	mov	r6, r2
 800a824:	4603      	mov	r3, r0
        maze->RawNode[i][0].existence = WALL;                       //南壁すべて1
 800a826:	2501      	movs	r5, #1
        maze->RawNode[i][NUMBER_OF_SQUARES_Y].rc = 0;

        maze->RawNode[i][0].pos.x = i;
 800a828:	b2d7      	uxtb	r7, r2
    for(int i=0; i < NUMBER_OF_SQUARES_X; i++)
 800a82a:	3201      	adds	r2, #1
 800a82c:	2a09      	cmp	r2, #9
        maze->RawNode[i][0].existence = WALL;                       //南壁すべて1
 800a82e:	701d      	strb	r5, [r3, #0]
        maze->RawNode[i][NUMBER_OF_SQUARES_Y].existence = WALL;     //北壁すべて1
 800a830:	f883 5048 	strb.w	r5, [r3, #72]	; 0x48
        maze->RawNode[i][0].draw = true;                        
 800a834:	711d      	strb	r5, [r3, #4]
        maze->RawNode[i][NUMBER_OF_SQUARES_Y].draw = true;
 800a836:	f883 504c 	strb.w	r5, [r3, #76]	; 0x4c
        maze->RawNode[i][0].rc = 0;
 800a83a:	715e      	strb	r6, [r3, #5]
        maze->RawNode[i][NUMBER_OF_SQUARES_Y].rc = 0;
 800a83c:	f883 604d 	strb.w	r6, [r3, #77]	; 0x4d
        maze->RawNode[i][0].pos.y = 0;
 800a840:	71de      	strb	r6, [r3, #7]
        maze->RawNode[i][NUMBER_OF_SQUARES_Y].pos.x = i;
        maze->RawNode[i][NUMBER_OF_SQUARES_Y].pos.y = NUMBER_OF_SQUARES_Y;
 800a842:	f883 104f 	strb.w	r1, [r3, #79]	; 0x4f
        maze->RawNode[i][0].pos.x = i;
 800a846:	719f      	strb	r7, [r3, #6]
        maze->RawNode[i][NUMBER_OF_SQUARES_Y].pos.x = i;
 800a848:	f883 704e 	strb.w	r7, [r3, #78]	; 0x4e
 800a84c:	f103 0350 	add.w	r3, r3, #80	; 0x50
    for(int i=0; i < NUMBER_OF_SQUARES_X; i++)
 800a850:	d1ea      	bne.n	800a828 <initMaze+0xe8>
    }
    for(int j=0; j < NUMBER_OF_SQUARES_Y; j++)
 800a852:	2100      	movs	r1, #0
        maze->ColumnNode[NUMBER_OF_SQUARES_X][j].draw = true;

        maze->ColumnNode[0][j].rc = 1;
        maze->ColumnNode[NUMBER_OF_SQUARES_X][j].rc = 1;

        maze->ColumnNode[0][j].pos.x = 0;
 800a854:	460e      	mov	r6, r1
        maze->ColumnNode[0][j].existence = WALL;                    //西壁すべて1
 800a856:	2301      	movs	r3, #1
        maze->ColumnNode[0][j].pos.y = j;
 800a858:	b2cd      	uxtb	r5, r1
    for(int j=0; j < NUMBER_OF_SQUARES_Y; j++)
 800a85a:	3101      	adds	r1, #1
 800a85c:	2909      	cmp	r1, #9
        maze->ColumnNode[0][j].existence = WALL;                    //西壁すべて1
 800a85e:	f884 32d0 	strb.w	r3, [r4, #720]	; 0x2d0
        maze->ColumnNode[NUMBER_OF_SQUARES_X][j].existence = WALL;  //東壁すべて1
 800a862:	f884 3558 	strb.w	r3, [r4, #1368]	; 0x558
        maze->ColumnNode[0][j].draw = true;                    
 800a866:	f884 32d4 	strb.w	r3, [r4, #724]	; 0x2d4
        maze->ColumnNode[NUMBER_OF_SQUARES_X][j].draw = true;
 800a86a:	f884 355c 	strb.w	r3, [r4, #1372]	; 0x55c
        maze->ColumnNode[0][j].rc = 1;
 800a86e:	f884 32d5 	strb.w	r3, [r4, #725]	; 0x2d5
        maze->ColumnNode[NUMBER_OF_SQUARES_X][j].rc = 1;
 800a872:	f884 355d 	strb.w	r3, [r4, #1373]	; 0x55d
        maze->ColumnNode[0][j].pos.x = 0;
 800a876:	f884 62d6 	strb.w	r6, [r4, #726]	; 0x2d6
        maze->ColumnNode[NUMBER_OF_SQUARES_X][j].pos.x = NUMBER_OF_SQUARES_X;
 800a87a:	f884 255e 	strb.w	r2, [r4, #1374]	; 0x55e
        maze->ColumnNode[0][j].pos.y = j;
 800a87e:	f884 52d7 	strb.w	r5, [r4, #727]	; 0x2d7
        maze->ColumnNode[NUMBER_OF_SQUARES_X][j].pos.y = j;
 800a882:	f884 555f 	strb.w	r5, [r4, #1375]	; 0x55f
 800a886:	f104 0408 	add.w	r4, r4, #8
    for(int j=0; j < NUMBER_OF_SQUARES_Y; j++)
 800a88a:	d1e5      	bne.n	800a858 <initMaze+0x118>
    }
    maze->ColumnNode[1][0].existence = WALL;    //東1
 800a88c:	f880 3318 	strb.w	r3, [r0, #792]	; 0x318
    maze->RawNode[0][1].existence = NOWALL;     //北0
 800a890:	7206      	strb	r6, [r0, #8]

    maze->ColumnNode[1][0].draw = true;    //東1
 800a892:	f880 331c 	strb.w	r3, [r0, #796]	; 0x31c
    maze->RawNode[0][1].draw = false;     //北0
 800a896:	7306      	strb	r6, [r0, #12]
}
 800a898:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a89a:	bf00      	nop

0800a89c <initTargetAreaWeight>:
void initTargetAreaWeight(maze_node *maze, uint8_t x, uint8_t y, uint8_t target_size_x, uint8_t target_size_y)
{
 800a89c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a8a0:	f89d 801c 	ldrb.w	r8, [sp, #28]
    //ゴールエリアの外堀と中のノードは全て0、壁があればMAX。
    for(int i=0; i < target_size_x; i++)
 800a8a4:	2b00      	cmp	r3, #0
 800a8a6:	d044      	beq.n	800a932 <initTargetAreaWeight+0x96>
 800a8a8:	1c4c      	adds	r4, r1, #1
 800a8aa:	eb04 04c4 	add.w	r4, r4, r4, lsl #3
 800a8ae:	250a      	movs	r5, #10
 800a8b0:	18a7      	adds	r7, r4, r2
 800a8b2:	fb15 2201 	smlabb	r2, r5, r1, r2
 800a8b6:	eb00 07c7 	add.w	r7, r0, r7, lsl #3
 800a8ba:	eb00 0cc2 	add.w	ip, r0, r2, lsl #3
 800a8be:	f04f 0908 	mov.w	r9, #8
 800a8c2:	f04f 0e00 	mov.w	lr, #0
            // maze->ColumnNode[x+1+i][y+j].weight = (maze->ColumnNode[x+1+i][y+j].weight == MAX_WEIGHT) ? MAX_WEIGHT : 0; //東
            // maze->RawNode[x+i][y+j].weight = (maze->RawNode[x+i][y+j].weight == MAX_WEIGHT) ? MAX_WEIGHT : 0;           //南
            // maze->ColumnNode[x+i][y+j].weight = (maze->ColumnNode[x+i][y+j].weight == MAX_WEIGHT) ? MAX_WEIGHT : 0;     //西

        	//なぜdraw == trueでやっていたかわからない
            maze->RawNode[x+i][y+1+j].weight = (maze->RawNode[x+i][y+1+j].existence == WALL) ? MAX_WEIGHT : 0;       //北
 800a8c6:	f640 74ff 	movw	r4, #4095	; 0xfff
        for(int j=0; j < target_size_y; j++)
 800a8ca:	f1b8 0f00 	cmp.w	r8, #0
 800a8ce:	d028      	beq.n	800a922 <initTargetAreaWeight+0x86>
 800a8d0:	f1a7 0048 	sub.w	r0, r7, #72	; 0x48
 800a8d4:	fb19 7608 	smlabb	r6, r9, r8, r7
 800a8d8:	4639      	mov	r1, r7
 800a8da:	4662      	mov	r2, ip
            maze->RawNode[x+i][y+1+j].weight = (maze->RawNode[x+i][y+1+j].existence == WALL) ? MAX_WEIGHT : 0;       //北
 800a8dc:	7a15      	ldrb	r5, [r2, #8]
 800a8de:	2d01      	cmp	r5, #1
 800a8e0:	bf14      	ite	ne
 800a8e2:	2500      	movne	r5, #0
 800a8e4:	4625      	moveq	r5, r4
 800a8e6:	8155      	strh	r5, [r2, #10]
            maze->ColumnNode[x+1+i][y+j].weight = (maze->ColumnNode[x+1+i][y+j].existence == WALL) ? MAX_WEIGHT : 0; //東
 800a8e8:	f891 52d0 	ldrb.w	r5, [r1, #720]	; 0x2d0
 800a8ec:	2d01      	cmp	r5, #1
 800a8ee:	bf14      	ite	ne
 800a8f0:	2500      	movne	r5, #0
 800a8f2:	4625      	moveq	r5, r4
 800a8f4:	f8a1 52d2 	strh.w	r5, [r1, #722]	; 0x2d2
            maze->RawNode[x+i][y+j].weight = (maze->RawNode[x+i][y+j].existence == WALL) ? MAX_WEIGHT : 0;           //南
 800a8f8:	7815      	ldrb	r5, [r2, #0]
 800a8fa:	2d01      	cmp	r5, #1
 800a8fc:	bf14      	ite	ne
 800a8fe:	2500      	movne	r5, #0
 800a900:	4625      	moveq	r5, r4
 800a902:	8055      	strh	r5, [r2, #2]
            maze->ColumnNode[x+i][y+j].weight = (maze->ColumnNode[x+i][y+j].existence == WALL) ? MAX_WEIGHT : 0;     //西
 800a904:	f890 52d0 	ldrb.w	r5, [r0, #720]	; 0x2d0
 800a908:	3108      	adds	r1, #8
 800a90a:	2d01      	cmp	r5, #1
 800a90c:	bf14      	ite	ne
 800a90e:	2500      	movne	r5, #0
 800a910:	4625      	moveq	r5, r4
        for(int j=0; j < target_size_y; j++)
 800a912:	42b1      	cmp	r1, r6
            maze->ColumnNode[x+i][y+j].weight = (maze->ColumnNode[x+i][y+j].existence == WALL) ? MAX_WEIGHT : 0;     //西
 800a914:	f8a0 52d2 	strh.w	r5, [r0, #722]	; 0x2d2
 800a918:	f102 0208 	add.w	r2, r2, #8
 800a91c:	f100 0008 	add.w	r0, r0, #8
        for(int j=0; j < target_size_y; j++)
 800a920:	d1dc      	bne.n	800a8dc <initTargetAreaWeight+0x40>
    for(int i=0; i < target_size_x; i++)
 800a922:	f10e 0e01 	add.w	lr, lr, #1
 800a926:	459e      	cmp	lr, r3
 800a928:	f10c 0c50 	add.w	ip, ip, #80	; 0x50
 800a92c:	f107 0748 	add.w	r7, r7, #72	; 0x48
 800a930:	d1cb      	bne.n	800a8ca <initTargetAreaWeight+0x2e>
        }
    }
}
 800a932:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a936:	bf00      	nop

0800a938 <updateAllNodeWeight>:

#define WEIGHT_NANAME   5
#define WEIGHT_STRAIGHT 7

void updateAllNodeWeight(maze_node *maze, uint8_t x, uint8_t y, uint8_t area_size_x, uint8_t area_size_y, int mask)
{
 800a938:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a93c:	b085      	sub	sp, #20
 800a93e:	4680      	mov	r8, r0
 800a940:	f89d e038 	ldrb.w	lr, [sp, #56]	; 0x38
 800a944:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 800a946:	f500 7c34 	add.w	ip, r0, #720	; 0x2d0
            maze->RawNode[i][j].weight = MAX_WEIGHT;  
 800a94a:	f640 77ff 	movw	r7, #4095	; 0xfff
 800a94e:	f100 0550 	add.w	r5, r0, #80	; 0x50
 800a952:	8047      	strh	r7, [r0, #2]
 800a954:	3008      	adds	r0, #8
        for(int j=0; j < NUMBER_OF_SQUARES_Y+1; j++)
 800a956:	42a8      	cmp	r0, r5
 800a958:	d1fb      	bne.n	800a952 <updateAllNodeWeight+0x1a>
    for(int i=0; i < NUMBER_OF_SQUARES_X; i++)
 800a95a:	4560      	cmp	r0, ip
 800a95c:	d1f7      	bne.n	800a94e <updateAllNodeWeight+0x16>
 800a95e:	4646      	mov	r6, r8
            maze->ColumnNode[i][j].weight = MAX_WEIGHT;
 800a960:	f640 7cff 	movw	ip, #4095	; 0xfff
 800a964:	f106 0548 	add.w	r5, r6, #72	; 0x48
 800a968:	f8a6 c2d2 	strh.w	ip, [r6, #722]	; 0x2d2
 800a96c:	3608      	adds	r6, #8
        for(int j=0; j < NUMBER_OF_SQUARES_Y; j++)
 800a96e:	42ae      	cmp	r6, r5
 800a970:	d1fa      	bne.n	800a968 <updateAllNodeWeight+0x30>
    for(int i=0; i < NUMBER_OF_SQUARES_X+1; i++)
 800a972:	4286      	cmp	r6, r0
 800a974:	d1f6      	bne.n	800a964 <updateAllNodeWeight+0x2c>
	//全体に154/20ms = 7.7ms
    //新しい区画に入ったときに、更新

    initWeight(maze); //3/20ms

    initTargetAreaWeight(maze, x,y, area_size_x,area_size_y);
 800a976:	f8cd e000 	str.w	lr, [sp]
 800a97a:	4640      	mov	r0, r8
 800a97c:	f7ff ff8e 	bl	800a89c <initTargetAreaWeight>
 800a980:	4645      	mov	r5, r8
 800a982:	f108 0250 	add.w	r2, r8, #80	; 0x50
 800a986:	9203      	str	r2, [sp, #12]
 800a988:	f108 0e48 	add.w	lr, r8, #72	; 0x48
			for(j = 1; j < NUMBER_OF_SQUARES_Y; j++)		//迷路の大きさ分ループ(y座標)
			{
                //1ノードずつ見る.そこから加算対象が最大6個
                //端を見ないので、一番上の列からスタート j=N; j >= 0, xを1からN-1まで
                //次に行 j=N-1から1まで xを0からN-1まで
				if(maze->RawNode[i][j].weight == MAX_WEIGHT)		//MAXの場合は次へ
 800a98c:	f640 72ff 	movw	r2, #4095	; 0xfff
 800a990:	46ac      	mov	ip, r5
					}
                    //南西
    				if( ((maze->ColumnNode[i][j-1].existence & mask) == NOWALL) && (maze->ColumnNode[i][j-1].weight == MAX_WEIGHT))		//壁がなければ
					{
						maze->ColumnNode[i][j-1].weight = maze->RawNode[i][j].weight + WEIGHT_NANAME;	//値を代入
						change_flag = true;		//値が更新されたことを示す
 800a992:	f04f 0800 	mov.w	r8, #0
		change_flag = false;				//変更がなかった場合にはループを抜ける
 800a996:	4647      	mov	r7, r8
						change_flag = true;		//値が更新されたことを示す
 800a998:	4661      	mov	r1, ip
 800a99a:	46e2      	mov	sl, ip
 800a99c:	46c1      	mov	r9, r8
 800a99e:	f101 0848 	add.w	r8, r1, #72	; 0x48
    for(int i=0; i < NUMBER_OF_SQUARES_X; i++)
 800a9a2:	4645      	mov	r5, r8
 800a9a4:	4653      	mov	r3, sl
 800a9a6:	2001      	movs	r0, #1
				if(maze->RawNode[i][j].weight == MAX_WEIGHT)		//MAXの場合は次へ
 800a9a8:	895e      	ldrh	r6, [r3, #10]
 800a9aa:	4296      	cmp	r6, r2
 800a9ac:	d055      	beq.n	800aa5a <updateAllNodeWeight+0x122>
				if(j < NUMBER_OF_SQUARES_Y-1)   //範囲チェック. 座標のxyではなく、ノードのxy
 800a9ae:	2808      	cmp	r0, #8
 800a9b0:	d010      	beq.n	800a9d4 <updateAllNodeWeight+0x9c>
					if( ((maze->RawNode[i][j+1].existence & mask) == NOWALL) && (maze->RawNode[i][j+1].weight == MAX_WEIGHT) )	//壁がなければ(maskの意味はstatic_parametersを参照)
 800a9b2:	f893 b010 	ldrb.w	fp, [r3, #16]
 800a9b6:	ea1b 0f04 	tst.w	fp, r4
 800a9ba:	d109      	bne.n	800a9d0 <updateAllNodeWeight+0x98>
 800a9bc:	f8b3 b012 	ldrh.w	fp, [r3, #18]
 800a9c0:	4593      	cmp	fp, r2
 800a9c2:	d105      	bne.n	800a9d0 <updateAllNodeWeight+0x98>
						maze->RawNode[i][j+1].weight = maze->RawNode[i][j].weight + WEIGHT_STRAIGHT;	//値を代入
 800a9c4:	f106 0907 	add.w	r9, r6, #7
 800a9c8:	f8a3 9012 	strh.w	r9, [r3, #18]
						change_flag = true;		//値が更新されたことを示す
 800a9cc:	f04f 0901 	mov.w	r9, #1
				if(j > 1)						//範囲チェック.ミスってた
 800a9d0:	2801      	cmp	r0, #1
 800a9d2:	d00c      	beq.n	800a9ee <updateAllNodeWeight+0xb6>
					if( ((maze->RawNode[i][j-1].existence & mask) == NOWALL) && (maze->RawNode[i][j-1].weight == MAX_WEIGHT) )	//壁がなければ
 800a9d4:	f893 b000 	ldrb.w	fp, [r3]
 800a9d8:	ea1b 0f04 	tst.w	fp, r4
 800a9dc:	d107      	bne.n	800a9ee <updateAllNodeWeight+0xb6>
 800a9de:	f8b3 b002 	ldrh.w	fp, [r3, #2]
 800a9e2:	4593      	cmp	fp, r2
 800a9e4:	d103      	bne.n	800a9ee <updateAllNodeWeight+0xb6>
						maze->RawNode[i][j-1].weight = maze->RawNode[i][j].weight + WEIGHT_STRAIGHT;	//値を代入
 800a9e6:	3607      	adds	r6, #7
 800a9e8:	805e      	strh	r6, [r3, #2]
						change_flag = true;		//値が更新されたことを示す
 800a9ea:	f04f 0901 	mov.w	r9, #1
				if(i < NUMBER_OF_SQUARES_X-1)					//範囲チェック
 800a9ee:	2f08      	cmp	r7, #8
 800a9f0:	d017      	beq.n	800aa22 <updateAllNodeWeight+0xea>
					if( ((maze->ColumnNode[i+1][j].existence & mask) == NOWALL) && (maze->ColumnNode[i+1][j].weight == MAX_WEIGHT))		//壁がなければ
 800a9f2:	f895 62d8 	ldrb.w	r6, [r5, #728]	; 0x2d8
 800a9f6:	4226      	tst	r6, r4
 800a9f8:	d109      	bne.n	800aa0e <updateAllNodeWeight+0xd6>
 800a9fa:	f8b5 62da 	ldrh.w	r6, [r5, #730]	; 0x2da
 800a9fe:	4296      	cmp	r6, r2
 800aa00:	d105      	bne.n	800aa0e <updateAllNodeWeight+0xd6>
						maze->ColumnNode[i+1][j].weight = maze->RawNode[i][j].weight + WEIGHT_NANAME;	//値を代入
 800aa02:	895e      	ldrh	r6, [r3, #10]
 800aa04:	3605      	adds	r6, #5
 800aa06:	f8a5 62da 	strh.w	r6, [r5, #730]	; 0x2da
						change_flag = true;		//値が更新されたことを示す
 800aa0a:	f04f 0901 	mov.w	r9, #1
                    if( ((maze->ColumnNode[i+1][j-1].existence & mask) == NOWALL) && (maze->ColumnNode[i+1][j-1].weight == MAX_WEIGHT)	)		//壁がなければ
 800aa0e:	f895 62d0 	ldrb.w	r6, [r5, #720]	; 0x2d0
 800aa12:	4226      	tst	r6, r4
 800aa14:	d104      	bne.n	800aa20 <updateAllNodeWeight+0xe8>
 800aa16:	f8b5 62d2 	ldrh.w	r6, [r5, #722]	; 0x2d2
 800aa1a:	4296      	cmp	r6, r2
 800aa1c:	f000 8092 	beq.w	800ab44 <updateAllNodeWeight+0x20c>
				if(i > 0)						//範囲チェック
 800aa20:	b1df      	cbz	r7, 800aa5a <updateAllNodeWeight+0x122>
					if( ((maze->ColumnNode[i][j].existence & mask) == NOWALL)  && (maze->ColumnNode[i][j].weight == MAX_WEIGHT) )		//壁がなければ
 800aa22:	f891 62d8 	ldrb.w	r6, [r1, #728]	; 0x2d8
 800aa26:	4226      	tst	r6, r4
 800aa28:	d109      	bne.n	800aa3e <updateAllNodeWeight+0x106>
 800aa2a:	f8b1 62da 	ldrh.w	r6, [r1, #730]	; 0x2da
 800aa2e:	4296      	cmp	r6, r2
 800aa30:	d105      	bne.n	800aa3e <updateAllNodeWeight+0x106>
							maze->ColumnNode[i][j].weight = maze->RawNode[i][j].weight + WEIGHT_NANAME;	//値を代入
 800aa32:	895e      	ldrh	r6, [r3, #10]
 800aa34:	3605      	adds	r6, #5
 800aa36:	f8a1 62da 	strh.w	r6, [r1, #730]	; 0x2da
							change_flag = true;		//値が更新されたことを示す
 800aa3a:	f04f 0901 	mov.w	r9, #1
    				if( ((maze->ColumnNode[i][j-1].existence & mask) == NOWALL) && (maze->ColumnNode[i][j-1].weight == MAX_WEIGHT))		//壁がなければ
 800aa3e:	f891 62d0 	ldrb.w	r6, [r1, #720]	; 0x2d0
 800aa42:	4226      	tst	r6, r4
 800aa44:	d109      	bne.n	800aa5a <updateAllNodeWeight+0x122>
 800aa46:	f8b1 62d2 	ldrh.w	r6, [r1, #722]	; 0x2d2
 800aa4a:	4296      	cmp	r6, r2
 800aa4c:	d105      	bne.n	800aa5a <updateAllNodeWeight+0x122>
						maze->ColumnNode[i][j-1].weight = maze->RawNode[i][j].weight + WEIGHT_NANAME;	//値を代入
 800aa4e:	895e      	ldrh	r6, [r3, #10]
 800aa50:	3605      	adds	r6, #5
 800aa52:	f8a1 62d2 	strh.w	r6, [r1, #722]	; 0x2d2
						change_flag = true;		//値が更新されたことを示す
 800aa56:	f04f 0901 	mov.w	r9, #1
 800aa5a:	3001      	adds	r0, #1
			for(j = 1; j < NUMBER_OF_SQUARES_Y; j++)		//迷路の大きさ分ループ(y座標)
 800aa5c:	2809      	cmp	r0, #9
 800aa5e:	f103 0308 	add.w	r3, r3, #8
 800aa62:	f101 0108 	add.w	r1, r1, #8
 800aa66:	f105 0508 	add.w	r5, r5, #8
 800aa6a:	d19d      	bne.n	800a9a8 <updateAllNodeWeight+0x70>
 800aa6c:	3701      	adds	r7, #1
		for( i = 0; i < NUMBER_OF_SQUARES_X; i++)			//迷路の大きさ分ループ(x座標)
 800aa6e:	2f09      	cmp	r7, #9
 800aa70:	f10a 0a50 	add.w	sl, sl, #80	; 0x50
 800aa74:	4641      	mov	r1, r8
 800aa76:	d192      	bne.n	800a99e <updateAllNodeWeight+0x66>
 800aa78:	f8dd a00c 	ldr.w	sl, [sp, #12]
 800aa7c:	464f      	mov	r7, r9
 800aa7e:	4671      	mov	r1, lr
 800aa80:	f04f 0801 	mov.w	r8, #1
 800aa84:	f101 0948 	add.w	r9, r1, #72	; 0x48
		change_flag = false;				//変更がなかった場合にはループを抜ける
 800aa88:	464d      	mov	r5, r9
 800aa8a:	4653      	mov	r3, sl
 800aa8c:	2000      	movs	r0, #0
        //列
        for(i = 1; i < NUMBER_OF_SQUARES_X; i++)
		{
			for( j = 0; j < NUMBER_OF_SQUARES_Y; j++)
			{
                if(maze->ColumnNode[i][j].weight == MAX_WEIGHT)		//MAXの場合は次へ
 800aa8e:	f8b1 62d2 	ldrh.w	r6, [r1, #722]	; 0x2d2
 800aa92:	4296      	cmp	r6, r2
 800aa94:	d04f      	beq.n	800ab36 <updateAllNodeWeight+0x1fe>
					continue;
				}
                // printf("continueはクリア. Column[%d][%d]\r\n",i,j);

                //東側ノード
				if(i < NUMBER_OF_SQUARES_X-1)					//範囲チェック
 800aa96:	f1b8 0f08 	cmp.w	r8, #8
 800aa9a:	d00f      	beq.n	800aabc <updateAllNodeWeight+0x184>
				{
                    // printf("列東%d,mask: %d, result: %d\r\n",maze->ColumnNode[i+1][j].existence, mask,((maze->ColumnNode[i+1][j].existence) & mask));
					if( ((maze->ColumnNode[i+1][j].existence & mask) == NOWALL) && (maze->ColumnNode[i+1][j].weight == MAX_WEIGHT))	//壁がなければ(maskの意味はstatic_parametersを参照)
 800aa9c:	f895 b2d0 	ldrb.w	fp, [r5, #720]	; 0x2d0
 800aaa0:	ea1b 0f04 	tst.w	fp, r4
 800aaa4:	d107      	bne.n	800aab6 <updateAllNodeWeight+0x17e>
 800aaa6:	f8b5 b2d2 	ldrh.w	fp, [r5, #722]	; 0x2d2
 800aaaa:	4593      	cmp	fp, r2
 800aaac:	d103      	bne.n	800aab6 <updateAllNodeWeight+0x17e>
					{
						maze->ColumnNode[i+1][j].weight = maze->ColumnNode[i][j].weight + WEIGHT_STRAIGHT;	//値を代入
 800aaae:	3607      	adds	r6, #7
 800aab0:	f8a5 62d2 	strh.w	r6, [r5, #722]	; 0x2d2
						change_flag = true;		//値が更新されたことを示す
 800aab4:	2701      	movs	r7, #1
					}
                }
                //西側ノード
				if(i > 1)						//範囲チェック
 800aab6:	f1b8 0f01 	cmp.w	r8, #1
 800aaba:	d00d      	beq.n	800aad8 <updateAllNodeWeight+0x1a0>
				{
					if( ((maze->ColumnNode[i-1][j].existence & mask) == NOWALL) && (maze->ColumnNode[i-1][j].weight == MAX_WEIGHT))	//壁がなければ
 800aabc:	f891 6288 	ldrb.w	r6, [r1, #648]	; 0x288
 800aac0:	4226      	tst	r6, r4
 800aac2:	d109      	bne.n	800aad8 <updateAllNodeWeight+0x1a0>
 800aac4:	f8b1 628a 	ldrh.w	r6, [r1, #650]	; 0x28a
 800aac8:	4296      	cmp	r6, r2
 800aaca:	d105      	bne.n	800aad8 <updateAllNodeWeight+0x1a0>
					{
						maze->ColumnNode[i-1][j].weight = maze->ColumnNode[i][j].weight + WEIGHT_STRAIGHT;	//値を代入
 800aacc:	f8b1 62d2 	ldrh.w	r6, [r1, #722]	; 0x2d2
 800aad0:	3607      	adds	r6, #7
 800aad2:	f8a1 628a 	strh.w	r6, [r1, #650]	; 0x28a
						change_flag = true;		//値が更新されたことを示す
 800aad6:	2701      	movs	r7, #1
					}
				}
                //北側に斜めが2方向
				if(j < NUMBER_OF_SQUARES_Y-1)					//範囲チェック
 800aad8:	2808      	cmp	r0, #8
 800aada:	d013      	beq.n	800ab04 <updateAllNodeWeight+0x1cc>
				{
                    //北東
					if( ((maze->RawNode[i][j+1].existence & mask) == NOWALL) && (maze->RawNode[i][j+1].weight == MAX_WEIGHT))		//壁がなければ
 800aadc:	7a1e      	ldrb	r6, [r3, #8]
 800aade:	4226      	tst	r6, r4
 800aae0:	d107      	bne.n	800aaf2 <updateAllNodeWeight+0x1ba>
 800aae2:	895e      	ldrh	r6, [r3, #10]
 800aae4:	4296      	cmp	r6, r2
 800aae6:	d104      	bne.n	800aaf2 <updateAllNodeWeight+0x1ba>
					{
						maze->RawNode[i][j+1].weight = maze->ColumnNode[i][j].weight + WEIGHT_NANAME;	//値を代入
 800aae8:	f8b1 62d2 	ldrh.w	r6, [r1, #722]	; 0x2d2
 800aaec:	3605      	adds	r6, #5
 800aaee:	815e      	strh	r6, [r3, #10]
						change_flag = true;		//値が更新されたことを示す
 800aaf0:	2701      	movs	r7, #1
					}

                    //北西
                    if( ((maze->RawNode[i-1][j+1].existence & mask) == NOWALL) && (maze->RawNode[i-1][j+1].weight == MAX_WEIGHT))		//壁がなければ
 800aaf2:	f813 6c48 	ldrb.w	r6, [r3, #-72]
 800aaf6:	4226      	tst	r6, r4
 800aaf8:	d103      	bne.n	800ab02 <updateAllNodeWeight+0x1ca>
 800aafa:	f833 6c46 	ldrh.w	r6, [r3, #-70]
 800aafe:	4296      	cmp	r6, r2
 800ab00:	d027      	beq.n	800ab52 <updateAllNodeWeight+0x21a>
						change_flag = true;		//値が更新されたことを示す
					}
				}

                //南側に斜めが2方向
				if(j > 0)						//範囲チェック
 800ab02:	b1d0      	cbz	r0, 800ab3a <updateAllNodeWeight+0x202>
				{
                    //南東
					if( ((maze->RawNode[i][j].existence & mask) == NOWALL) && (maze->RawNode[i][j].weight == MAX_WEIGHT)	)		//壁がなければ
 800ab04:	781e      	ldrb	r6, [r3, #0]
 800ab06:	4226      	tst	r6, r4
 800ab08:	d107      	bne.n	800ab1a <updateAllNodeWeight+0x1e2>
 800ab0a:	885e      	ldrh	r6, [r3, #2]
 800ab0c:	4296      	cmp	r6, r2
 800ab0e:	d104      	bne.n	800ab1a <updateAllNodeWeight+0x1e2>
					{
						maze->RawNode[i][j].weight = maze->ColumnNode[i][j].weight + WEIGHT_NANAME;	//値を代入
 800ab10:	f8b1 62d2 	ldrh.w	r6, [r1, #722]	; 0x2d2
 800ab14:	3605      	adds	r6, #5
 800ab16:	805e      	strh	r6, [r3, #2]
						change_flag = true;		//値が更新されたことを示す
 800ab18:	2701      	movs	r7, #1
					}
                    //南西
    				if( ((maze->RawNode[i-1][j].existence & mask) == NOWALL) && (maze->RawNode[i-1][j].weight == MAX_WEIGHT))		//壁がなければ
 800ab1a:	f813 6c50 	ldrb.w	r6, [r3, #-80]
 800ab1e:	4226      	tst	r6, r4
 800ab20:	d109      	bne.n	800ab36 <updateAllNodeWeight+0x1fe>
 800ab22:	f833 6c4e 	ldrh.w	r6, [r3, #-78]
 800ab26:	4296      	cmp	r6, r2
 800ab28:	d105      	bne.n	800ab36 <updateAllNodeWeight+0x1fe>
					{
							maze->RawNode[i-1][j].weight = maze->ColumnNode[i][j].weight + WEIGHT_NANAME;	//値を代入
 800ab2a:	f8b1 62d2 	ldrh.w	r6, [r1, #722]	; 0x2d2
 800ab2e:	3605      	adds	r6, #5
 800ab30:	f823 6c4e 	strh.w	r6, [r3, #-78]
							change_flag = true;		//値が更新されたことを示す
 800ab34:	2701      	movs	r7, #1
			for( j = 0; j < NUMBER_OF_SQUARES_Y; j++)
 800ab36:	2808      	cmp	r0, #8
 800ab38:	d012      	beq.n	800ab60 <updateAllNodeWeight+0x228>
 800ab3a:	3001      	adds	r0, #1
 800ab3c:	3108      	adds	r1, #8
 800ab3e:	3308      	adds	r3, #8
 800ab40:	3508      	adds	r5, #8
 800ab42:	e7a4      	b.n	800aa8e <updateAllNodeWeight+0x156>
						maze->ColumnNode[i+1][j-1].weight = maze->RawNode[i][j].weight + WEIGHT_NANAME;	//値を代入
 800ab44:	895e      	ldrh	r6, [r3, #10]
 800ab46:	3605      	adds	r6, #5
 800ab48:	f8a5 62d2 	strh.w	r6, [r5, #722]	; 0x2d2
						change_flag = true;		//値が更新されたことを示す
 800ab4c:	f04f 0901 	mov.w	r9, #1
 800ab50:	e766      	b.n	800aa20 <updateAllNodeWeight+0xe8>
						maze->RawNode[i-1][j+1].weight = maze->ColumnNode[i][j].weight + WEIGHT_NANAME;	//値を代入
 800ab52:	f8b1 62d2 	ldrh.w	r6, [r1, #722]	; 0x2d2
 800ab56:	3605      	adds	r6, #5
 800ab58:	f823 6c46 	strh.w	r6, [r3, #-70]
						change_flag = true;		//値が更新されたことを示す
 800ab5c:	2701      	movs	r7, #1
 800ab5e:	e7d0      	b.n	800ab02 <updateAllNodeWeight+0x1ca>
 800ab60:	f108 0801 	add.w	r8, r8, #1
        for(i = 1; i < NUMBER_OF_SQUARES_X; i++)
 800ab64:	f1b8 0f09 	cmp.w	r8, #9
 800ab68:	f10a 0a50 	add.w	sl, sl, #80	; 0x50
 800ab6c:	4649      	mov	r1, r9
 800ab6e:	d189      	bne.n	800aa84 <updateAllNodeWeight+0x14c>
				}
            }
        }
        //printf("重みの更新\r\n");//一回しか呼ばれていない
        //cnt++;
	}while(change_flag == true);	//全体を作り終わるまで待つ
 800ab70:	2f00      	cmp	r7, #0
 800ab72:	f47f af0e 	bne.w	800a992 <updateAllNodeWeight+0x5a>
//    t = 0;
//	HAL_TIM_Base_Stop_IT(&htim8);
//	printf("%d/20ms, %d, %d\r\n\r\n",timer8, skip_raw, skip_column);
}
 800ab76:	b005      	add	sp, #20
 800ab78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800ab7c <updateNodeThree>:
void updateNodeThree(maze_node *maze, state *st, uint8_t x, uint8_t y)
{
 800ab7c:	b5f0      	push	{r4, r5, r6, r7, lr}
    //壁の有無の更新。既知の壁には上書きしない。重みの更新は？既知かどうかは重複するから書かない
        //重みは？壁があればMAX値、なければそのまま
    maze->RawNode[x][y+1].existence = (maze->RawNode[x][y+1].existence == UNKNOWN) ? st->wall.north : maze->RawNode[x][y+1].existence;             //北
 800ab7e:	0094      	lsls	r4, r2, #2
 800ab80:	1c5f      	adds	r7, r3, #1
 800ab82:	18a5      	adds	r5, r4, r2
 800ab84:	eb07 0545 	add.w	r5, r7, r5, lsl #1
 800ab88:	18a6      	adds	r6, r4, r2
 800ab8a:	f810 c035 	ldrb.w	ip, [r0, r5, lsl #3]
 800ab8e:	f1bc 0f02 	cmp.w	ip, #2
 800ab92:	bf08      	it	eq
 800ab94:	f891 c004 	ldrbeq.w	ip, [r1, #4]
    maze->ColumnNode[x+1][y].existence = (maze->ColumnNode[x+1][y].existence == UNKNOWN) ? st->wall.east : maze->ColumnNode[x+1][y].existence;    //東
 800ab98:	f102 0501 	add.w	r5, r2, #1
    maze->RawNode[x][y+1].existence = (maze->RawNode[x][y+1].existence == UNKNOWN) ? st->wall.north : maze->RawNode[x][y+1].existence;             //北
 800ab9c:	eb07 0646 	add.w	r6, r7, r6, lsl #1
 800aba0:	eb05 05c5 	add.w	r5, r5, r5, lsl #3
 800aba4:	bf08      	it	eq
 800aba6:	f00c 0c03 	andeq.w	ip, ip, #3
 800abaa:	441d      	add	r5, r3
 800abac:	f800 c036 	strb.w	ip, [r0, r6, lsl #3]
 800abb0:	eb00 05c5 	add.w	r5, r0, r5, lsl #3
    maze->RawNode[x][y].existence = (maze->RawNode[x][y].existence == UNKNOWN) ? st->wall.south : maze->RawNode[x][y].existence;                   //南
 800abb4:	eb04 0c02 	add.w	ip, r4, r2
    maze->ColumnNode[x+1][y].existence = (maze->ColumnNode[x+1][y].existence == UNKNOWN) ? st->wall.east : maze->ColumnNode[x+1][y].existence;    //東
 800abb8:	f895 62d0 	ldrb.w	r6, [r5, #720]	; 0x2d0
 800abbc:	2e02      	cmp	r6, #2
 800abbe:	bf08      	it	eq
 800abc0:	790e      	ldrbeq	r6, [r1, #4]
    maze->RawNode[x][y].existence = (maze->RawNode[x][y].existence == UNKNOWN) ? st->wall.south : maze->RawNode[x][y].existence;                   //南
 800abc2:	eb03 0c4c 	add.w	ip, r3, ip, lsl #1
    maze->ColumnNode[x+1][y].existence = (maze->ColumnNode[x+1][y].existence == UNKNOWN) ? st->wall.east : maze->ColumnNode[x+1][y].existence;    //東
 800abc6:	bf08      	it	eq
 800abc8:	f3c6 0681 	ubfxeq	r6, r6, #2, #2
 800abcc:	f885 62d0 	strb.w	r6, [r5, #720]	; 0x2d0
    maze->RawNode[x][y].existence = (maze->RawNode[x][y].existence == UNKNOWN) ? st->wall.south : maze->RawNode[x][y].existence;                   //南
 800abd0:	f810 c03c 	ldrb.w	ip, [r0, ip, lsl #3]
 800abd4:	f1bc 0f02 	cmp.w	ip, #2
 800abd8:	bf08      	it	eq
 800abda:	f891 c004 	ldrbeq.w	ip, [r1, #4]
 800abde:	eb04 0e02 	add.w	lr, r4, r2
 800abe2:	eb03 0e4e 	add.w	lr, r3, lr, lsl #1
 800abe6:	f04f 0609 	mov.w	r6, #9
 800abea:	bf08      	it	eq
 800abec:	f3cc 1c01 	ubfxeq	ip, ip, #4, #2
 800abf0:	fb16 3602 	smlabb	r6, r6, r2, r3
 800abf4:	f800 c03e 	strb.w	ip, [r0, lr, lsl #3]
 800abf8:	eb00 06c6 	add.w	r6, r0, r6, lsl #3
    // maze->RawNode[x][y+1].flag = true;      //北
    // maze->ColumnNode[x+1][y].flag = true;   //東
    // maze->RawNode[x][y].flag = true;        //南
    // maze->ColumnNode[x][y].flag = true;     //西

    maze->RawNode[x][y+1].draw = (maze->RawNode[x][y+1].existence == WALL) ? true : false;          //北
 800abfc:	4414      	add	r4, r2
    maze->ColumnNode[x][y].existence = (maze->ColumnNode[x][y].existence == UNKNOWN) ? st->wall.west : maze->ColumnNode[x][y].existence;          //西
 800abfe:	f896 c2d0 	ldrb.w	ip, [r6, #720]	; 0x2d0
 800ac02:	f1bc 0f02 	cmp.w	ip, #2
 800ac06:	bf08      	it	eq
 800ac08:	f891 c004 	ldrbeq.w	ip, [r1, #4]
    maze->RawNode[x][y+1].draw = (maze->RawNode[x][y+1].existence == WALL) ? true : false;          //北
 800ac0c:	ea4f 0444 	mov.w	r4, r4, lsl #1
 800ac10:	eb04 0207 	add.w	r2, r4, r7
    maze->ColumnNode[x][y].existence = (maze->ColumnNode[x][y].existence == UNKNOWN) ? st->wall.west : maze->ColumnNode[x][y].existence;          //西
 800ac14:	bf08      	it	eq
 800ac16:	ea4f 1c9c 	moveq.w	ip, ip, lsr #6
 800ac1a:	f886 c2d0 	strb.w	ip, [r6, #720]	; 0x2d0
    maze->RawNode[x][y+1].draw = (maze->RawNode[x][y+1].existence == WALL) ? true : false;          //北
 800ac1e:	f810 1032 	ldrb.w	r1, [r0, r2, lsl #3]
 800ac22:	f1a1 0101 	sub.w	r1, r1, #1
 800ac26:	eb00 02c2 	add.w	r2, r0, r2, lsl #3
 800ac2a:	fab1 f181 	clz	r1, r1
 800ac2e:	0949      	lsrs	r1, r1, #5
 800ac30:	7111      	strb	r1, [r2, #4]
    maze->ColumnNode[x+1][y].draw = (maze->ColumnNode[x+1][y].existence == WALL) ? true : false;    //東
 800ac32:	f895 22d0 	ldrb.w	r2, [r5, #720]	; 0x2d0
 800ac36:	f1a2 0201 	sub.w	r2, r2, #1
 800ac3a:	fab2 f282 	clz	r2, r2
    maze->RawNode[x][y].draw = (maze->RawNode[x][y].existence == WALL) ? true : false;              //南
 800ac3e:	4423      	add	r3, r4
    maze->ColumnNode[x+1][y].draw = (maze->ColumnNode[x+1][y].existence == WALL) ? true : false;    //東
 800ac40:	0952      	lsrs	r2, r2, #5
 800ac42:	f885 22d4 	strb.w	r2, [r5, #724]	; 0x2d4
    maze->RawNode[x][y].draw = (maze->RawNode[x][y].existence == WALL) ? true : false;              //南
 800ac46:	f810 2033 	ldrb.w	r2, [r0, r3, lsl #3]
 800ac4a:	f1a2 0201 	sub.w	r2, r2, #1
 800ac4e:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
 800ac52:	fab2 f282 	clz	r2, r2
 800ac56:	0952      	lsrs	r2, r2, #5
 800ac58:	711a      	strb	r2, [r3, #4]
    maze->ColumnNode[x][y].draw = (maze->ColumnNode[x][y].existence == WALL) ? true : false;        //西
 800ac5a:	f896 32d0 	ldrb.w	r3, [r6, #720]	; 0x2d0
 800ac5e:	f1a3 0301 	sub.w	r3, r3, #1
 800ac62:	fab3 f383 	clz	r3, r3
 800ac66:	095b      	lsrs	r3, r3, #5
 800ac68:	f886 32d4 	strb.w	r3, [r6, #724]	; 0x2d4
    //重みは毎回リセットして計算しなおすのでここでは要らない
    // maze->RawNode[x][y+1].weight = (maze->RawNode[x][y+1].existence == WALL) ? MAX_WEIGHT : maze->RawNode[x][y+1].weight;             //北
    // maze->ColumnNode[x+1][y].weight = (maze->ColumnNode[x+1][y].existence == WALL) ? MAX_WEIGHT : maze->ColumnNode[x+1][y].weight;    //東
    // maze->RawNode[x][y].weight = (maze->RawNode[x][y].existence == WALL) ? MAX_WEIGHT : maze->RawNode[x][y].weight;                   //南
    // maze->ColumnNode[x][y].weight = (maze->ColumnNode[x][y].existence == WALL) ? MAX_WEIGHT : maze->ColumnNode[x][y].weight;          //西
}
 800ac6c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ac6e:	bf00      	nop

0800ac70 <printAllWeight>:
        return false;
    }
}

void printAllWeight(maze_node *maze, position *pos)
{
 800ac70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ac74:	b085      	sub	sp, #20
 800ac76:	4606      	mov	r6, r0
 800ac78:	9003      	str	r0, [sp, #12]
    //全出力を3桁にそろえればよさそう
    //重みが0かつゴールエリア内の座標なら赤色で出力 31;1m
    //行から表示して、
    //列を表示
    //交互に
    printf("全ノードの重み\r\n");
 800ac7a:	484d      	ldr	r0, [pc, #308]	; (800adb0 <printAllWeight+0x140>)

    for(int y=NUMBER_OF_SQUARES_Y; y > 0; y--)
    {
        //行
        printf("  +  ");
 800ac7c:	f8df 9140 	ldr.w	r9, [pc, #320]	; 800adc0 <printAllWeight+0x150>
            {
                printf(" \x1B[31;1m%3x\x1B[37;m ",maze->RawNode[x][y].weight);
            }
            else
            {
                printf(" %3x ",maze->RawNode[x][y].weight);
 800ac80:	4d4c      	ldr	r5, [pc, #304]	; (800adb4 <printAllWeight+0x144>)
            else
            {
                printf(" %3x ",maze->ColumnNode[x][y-1].weight);
            }
            if(x < NUMBER_OF_SQUARES_X)
                printf("     ");
 800ac82:	f8df 8140 	ldr.w	r8, [pc, #320]	; 800adc4 <printAllWeight+0x154>
{
 800ac86:	460c      	mov	r4, r1
    printf("全ノードの重み\r\n");
 800ac88:	f008 fbfa 	bl	8013480 <puts>
 800ac8c:	4633      	mov	r3, r6
 800ac8e:	3340      	adds	r3, #64	; 0x40
 800ac90:	9302      	str	r3, [sp, #8]
    for(int y=NUMBER_OF_SQUARES_Y; y > 0; y--)
 800ac92:	2709      	movs	r7, #9
        printf("  +  ");
 800ac94:	4648      	mov	r0, r9
 800ac96:	f008 fb6b 	bl	8013370 <iprintf>
 800ac9a:	9b02      	ldr	r3, [sp, #8]
        for(int x=0; x < NUMBER_OF_SQUARES_X; x++)
 800ac9c:	f04f 0a00 	mov.w	sl, #0
 800aca0:	f103 0608 	add.w	r6, r3, #8
 800aca4:	e010      	b.n	800acc8 <printAllWeight+0x58>
            if(judgeRawNodeGoal(maze, x,y) == true || ((pos->x == x) && (pos->y == y)))//辿った経路を赤で表示
 800aca6:	7823      	ldrb	r3, [r4, #0]
 800aca8:	4553      	cmp	r3, sl
 800acaa:	d102      	bne.n	800acb2 <printAllWeight+0x42>
 800acac:	7863      	ldrb	r3, [r4, #1]
 800acae:	42bb      	cmp	r3, r7
 800acb0:	d016      	beq.n	800ace0 <printAllWeight+0x70>
                printf(" %3x ",maze->RawNode[x][y].weight);
 800acb2:	f008 fb5d 	bl	8013370 <iprintf>
            if(x < NUMBER_OF_SQUARES_X-1)
 800acb6:	f1ba 0f08 	cmp.w	sl, #8
                 printf("  +  ");
 800acba:	4648      	mov	r0, r9
            if(x < NUMBER_OF_SQUARES_X-1)
 800acbc:	d018      	beq.n	800acf0 <printAllWeight+0x80>
                 printf("  +  ");
 800acbe:	f008 fb57 	bl	8013370 <iprintf>
        for(int x=0; x < NUMBER_OF_SQUARES_X; x++)
 800acc2:	f10a 0a01 	add.w	sl, sl, #1
 800acc6:	3650      	adds	r6, #80	; 0x50
    if(maze->RawNode[x][y].weight == 0)
 800acc8:	8872      	ldrh	r2, [r6, #2]
        if ( __JUDGE_GOAL__ (x,y) || __JUDGE_GOAL__(x,y-1) )
 800acca:	f1aa 0306 	sub.w	r3, sl, #6
 800acce:	b2db      	uxtb	r3, r3
                printf(" %3x ",maze->RawNode[x][y].weight);
 800acd0:	4611      	mov	r1, r2
 800acd2:	4628      	mov	r0, r5
    if(maze->RawNode[x][y].weight == 0)
 800acd4:	2a00      	cmp	r2, #0
 800acd6:	d1e6      	bne.n	800aca6 <printAllWeight+0x36>
        if ( __JUDGE_GOAL__ (x,y) || __JUDGE_GOAL__(x,y-1) )
 800acd8:	2b01      	cmp	r3, #1
 800acda:	d8e4      	bhi.n	800aca6 <printAllWeight+0x36>
 800acdc:	2f02      	cmp	r7, #2
 800acde:	dce2      	bgt.n	800aca6 <printAllWeight+0x36>
                printf(" \x1B[31;1m%3x\x1B[37;m ",maze->RawNode[x][y].weight);
 800ace0:	4611      	mov	r1, r2
 800ace2:	4835      	ldr	r0, [pc, #212]	; (800adb8 <printAllWeight+0x148>)
 800ace4:	f008 fb44 	bl	8013370 <iprintf>
            if(x < NUMBER_OF_SQUARES_X-1)
 800ace8:	f1ba 0f08 	cmp.w	sl, #8
                 printf("  +  ");
 800acec:	4648      	mov	r0, r9
            if(x < NUMBER_OF_SQUARES_X-1)
 800acee:	d1e6      	bne.n	800acbe <printAllWeight+0x4e>
 800acf0:	1e7b      	subs	r3, r7, #1
 800acf2:	461e      	mov	r6, r3
        printf("\r\n");
 800acf4:	4831      	ldr	r0, [pc, #196]	; (800adbc <printAllWeight+0x14c>)
 800acf6:	9301      	str	r3, [sp, #4]
 800acf8:	f008 fbc2 	bl	8013480 <puts>
 800acfc:	4633      	mov	r3, r6
 800acfe:	b2f6      	uxtb	r6, r6
 800ad00:	1af6      	subs	r6, r6, r3
 800ad02:	00f6      	lsls	r6, r6, #3
 800ad04:	f8dd a008 	ldr.w	sl, [sp, #8]
        for(int x=0; x < NUMBER_OF_SQUARES_X+1; x++)
 800ad08:	f04f 0b00 	mov.w	fp, #0
 800ad0c:	e00d      	b.n	800ad2a <printAllWeight+0xba>
                printf(" %3x ",maze->ColumnNode[x][y-1].weight);
 800ad0e:	f8ba 12d2 	ldrh.w	r1, [sl, #722]	; 0x2d2
 800ad12:	f008 fb2d 	bl	8013370 <iprintf>
            if(x < NUMBER_OF_SQUARES_X)
 800ad16:	f1bb 0f09 	cmp.w	fp, #9
                printf("     ");
 800ad1a:	4640      	mov	r0, r8
            if(x < NUMBER_OF_SQUARES_X)
 800ad1c:	d022      	beq.n	800ad64 <printAllWeight+0xf4>
                printf("     ");
 800ad1e:	f008 fb27 	bl	8013370 <iprintf>
        for(int x=0; x < NUMBER_OF_SQUARES_X+1; x++)
 800ad22:	f10b 0b01 	add.w	fp, fp, #1
 800ad26:	f10a 0a48 	add.w	sl, sl, #72	; 0x48
    if(maze->ColumnNode[x][y].weight == 0)
 800ad2a:	eb0a 0106 	add.w	r1, sl, r6
        if ( __JUDGE_GOAL__ (x,y) || __JUDGE_GOAL__(x-1,y) )
 800ad2e:	f1ab 0306 	sub.w	r3, fp, #6
    if(maze->ColumnNode[x][y].weight == 0)
 800ad32:	f8b1 12d2 	ldrh.w	r1, [r1, #722]	; 0x2d2
        if ( __JUDGE_GOAL__ (x,y) || __JUDGE_GOAL__(x-1,y) )
 800ad36:	b2db      	uxtb	r3, r3
                printf(" %3x ",maze->ColumnNode[x][y-1].weight);
 800ad38:	4628      	mov	r0, r5
    if(maze->ColumnNode[x][y].weight == 0)
 800ad3a:	b921      	cbnz	r1, 800ad46 <printAllWeight+0xd6>
        if ( __JUDGE_GOAL__ (x,y) || __JUDGE_GOAL__(x-1,y) )
 800ad3c:	2b02      	cmp	r3, #2
 800ad3e:	d802      	bhi.n	800ad46 <printAllWeight+0xd6>
 800ad40:	9b01      	ldr	r3, [sp, #4]
 800ad42:	2b01      	cmp	r3, #1
 800ad44:	dd05      	ble.n	800ad52 <printAllWeight+0xe2>
            if(judgeColumnNodeGoal(maze, x,y-1) == true || ((pos->x == x) && (pos->y == y)))
 800ad46:	7823      	ldrb	r3, [r4, #0]
 800ad48:	455b      	cmp	r3, fp
 800ad4a:	d1e0      	bne.n	800ad0e <printAllWeight+0x9e>
 800ad4c:	7863      	ldrb	r3, [r4, #1]
 800ad4e:	42bb      	cmp	r3, r7
 800ad50:	d1dd      	bne.n	800ad0e <printAllWeight+0x9e>
                printf(" \x1B[31;1m%3x\x1B[37;m ",maze->ColumnNode[x][y-1].weight);
 800ad52:	f8ba 12d2 	ldrh.w	r1, [sl, #722]	; 0x2d2
 800ad56:	4818      	ldr	r0, [pc, #96]	; (800adb8 <printAllWeight+0x148>)
 800ad58:	f008 fb0a 	bl	8013370 <iprintf>
            if(x < NUMBER_OF_SQUARES_X)
 800ad5c:	f1bb 0f09 	cmp.w	fp, #9
                printf("     ");
 800ad60:	4640      	mov	r0, r8
            if(x < NUMBER_OF_SQUARES_X)
 800ad62:	d1dc      	bne.n	800ad1e <printAllWeight+0xae>
 800ad64:	9b02      	ldr	r3, [sp, #8]
        }
        printf("\r\n");
 800ad66:	4815      	ldr	r0, [pc, #84]	; (800adbc <printAllWeight+0x14c>)
 800ad68:	3b08      	subs	r3, #8
 800ad6a:	9302      	str	r3, [sp, #8]
 800ad6c:	f008 fb88 	bl	8013480 <puts>
 800ad70:	9f01      	ldr	r7, [sp, #4]
    for(int y=NUMBER_OF_SQUARES_Y; y > 0; y--)
 800ad72:	2f00      	cmp	r7, #0
 800ad74:	d18e      	bne.n	800ac94 <printAllWeight+0x24>
    }
    //y が0のときの行だけ表示
    printf("  +  ");
 800ad76:	4812      	ldr	r0, [pc, #72]	; (800adc0 <printAllWeight+0x150>)
    for(int x=0; x < NUMBER_OF_SQUARES_X; x++)
    {
        printf(" %3x ",maze->RawNode[x][0].weight);
 800ad78:	4e0e      	ldr	r6, [pc, #56]	; (800adb4 <printAllWeight+0x144>)
        if(x < NUMBER_OF_SQUARES_X-1)
                printf("  +  ");
 800ad7a:	4607      	mov	r7, r0
    printf("  +  ");
 800ad7c:	f008 faf8 	bl	8013370 <iprintf>
 800ad80:	9b03      	ldr	r3, [sp, #12]
        printf(" %3x ",maze->RawNode[x][0].weight);
 800ad82:	4630      	mov	r0, r6
 800ad84:	8859      	ldrh	r1, [r3, #2]
 800ad86:	461c      	mov	r4, r3
 800ad88:	f008 faf2 	bl	8013370 <iprintf>
 800ad8c:	f504 7520 	add.w	r5, r4, #640	; 0x280
                printf("  +  ");
 800ad90:	4638      	mov	r0, r7
 800ad92:	f008 faed 	bl	8013370 <iprintf>
 800ad96:	3450      	adds	r4, #80	; 0x50
        printf(" %3x ",maze->RawNode[x][0].weight);
 800ad98:	8861      	ldrh	r1, [r4, #2]
 800ad9a:	4630      	mov	r0, r6
 800ad9c:	f008 fae8 	bl	8013370 <iprintf>
        if(x < NUMBER_OF_SQUARES_X-1)
 800ada0:	42ac      	cmp	r4, r5
 800ada2:	d1f5      	bne.n	800ad90 <printAllWeight+0x120>
    }
    printf("\r\n");
 800ada4:	4805      	ldr	r0, [pc, #20]	; (800adbc <printAllWeight+0x14c>)


}
 800ada6:	b005      	add	sp, #20
 800ada8:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    printf("\r\n");
 800adac:	f008 bb68 	b.w	8013480 <puts>
 800adb0:	08016d58 	.word	0x08016d58
 800adb4:	08016d8c 	.word	0x08016d8c
 800adb8:	08016d78 	.word	0x08016d78
 800adbc:	08017020 	.word	0x08017020
 800adc0:	08016d70 	.word	0x08016d70
 800adc4:	08016d94 	.word	0x08016d94

0800adc8 <printAllNodeExistence>:
        printf("\r\n");
    }
    printf("\r\n");
}
void printAllNodeExistence(maze_node *mn)
{
 800adc8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800adcc:	4680      	mov	r8, r0
 800adce:	4605      	mov	r5, r0
    printf("全ノードの壁の存在\r\n");
 800add0:	481a      	ldr	r0, [pc, #104]	; (800ae3c <printAllNodeExistence+0x74>)
    //行を増やして同じ処理
    for(int i=0; i < NUMBER_OF_SQUARES_X; i++)
    {
        for(int j=1; j < NUMBER_OF_SQUARES_Y+1; j++)
        {
            printf("%u,",mn->RawNode[i][j].existence);
 800add2:	4f1b      	ldr	r7, [pc, #108]	; (800ae40 <printAllNodeExistence+0x78>)
        }
        for(int j=0; j < NUMBER_OF_SQUARES_Y; j++)
        {
            printf("%u",mn->ColumnNode[i+1][j].existence);
 800add4:	4e1b      	ldr	r6, [pc, #108]	; (800ae44 <printAllNodeExistence+0x7c>)
            if(j < NUMBER_OF_SQUARES_Y-1)
                printf(",");
        }
        printf("\r\n");
 800add6:	f8df a070 	ldr.w	sl, [pc, #112]	; 800ae48 <printAllNodeExistence+0x80>
 800adda:	f108 0848 	add.w	r8, r8, #72	; 0x48
 800adde:	f505 7934 	add.w	r9, r5, #720	; 0x2d0
    printf("全ノードの壁の存在\r\n");
 800ade2:	f008 fb4d 	bl	8013480 <puts>
        for(int j=1; j < NUMBER_OF_SQUARES_Y+1; j++)
 800ade6:	2401      	movs	r4, #1
            printf("%u,",mn->RawNode[i][j].existence);
 800ade8:	f815 1034 	ldrb.w	r1, [r5, r4, lsl #3]
 800adec:	4638      	mov	r0, r7
        for(int j=1; j < NUMBER_OF_SQUARES_Y+1; j++)
 800adee:	3401      	adds	r4, #1
            printf("%u,",mn->RawNode[i][j].existence);
 800adf0:	f008 fabe 	bl	8013370 <iprintf>
        for(int j=1; j < NUMBER_OF_SQUARES_Y+1; j++)
 800adf4:	2c0a      	cmp	r4, #10
 800adf6:	d1f7      	bne.n	800ade8 <printAllNodeExistence+0x20>
            printf("%u",mn->ColumnNode[i+1][j].existence);
 800adf8:	f898 12d0 	ldrb.w	r1, [r8, #720]	; 0x2d0
 800adfc:	4630      	mov	r0, r6
 800adfe:	f008 fab7 	bl	8013370 <iprintf>
 800ae02:	f108 0b40 	add.w	fp, r8, #64	; 0x40
 800ae06:	4644      	mov	r4, r8
                printf(",");
 800ae08:	202c      	movs	r0, #44	; 0x2c
 800ae0a:	f008 fac9 	bl	80133a0 <putchar>
 800ae0e:	3408      	adds	r4, #8
            printf("%u",mn->ColumnNode[i+1][j].existence);
 800ae10:	f894 12d0 	ldrb.w	r1, [r4, #720]	; 0x2d0
 800ae14:	4630      	mov	r0, r6
 800ae16:	f008 faab 	bl	8013370 <iprintf>
            if(j < NUMBER_OF_SQUARES_Y-1)
 800ae1a:	455c      	cmp	r4, fp
 800ae1c:	d1f4      	bne.n	800ae08 <printAllNodeExistence+0x40>
 800ae1e:	f108 0848 	add.w	r8, r8, #72	; 0x48
        printf("\r\n");
 800ae22:	4650      	mov	r0, sl
 800ae24:	f008 fb2c 	bl	8013480 <puts>
    for(int i=0; i < NUMBER_OF_SQUARES_X; i++)
 800ae28:	45c8      	cmp	r8, r9
 800ae2a:	f105 0550 	add.w	r5, r5, #80	; 0x50
 800ae2e:	d1da      	bne.n	800ade6 <printAllNodeExistence+0x1e>
    }
    printf("\r\n");
 800ae30:	4805      	ldr	r0, [pc, #20]	; (800ae48 <printAllNodeExistence+0x80>)
}
 800ae32:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    printf("\r\n");
 800ae36:	f008 bb23 	b.w	8013480 <puts>
 800ae3a:	bf00      	nop
 800ae3c:	08016d38 	.word	0x08016d38
 800ae40:	08016d30 	.word	0x08016d30
 800ae44:	08016d34 	.word	0x08016d34
 800ae48:	08017020 	.word	0x08017020

0800ae4c <printMatrix16ValueFromNode>:
    val += 8 * maze->ColumnNode[x][y].draw;     //西    
    return val;
}
//機体からTeraTermで出力するための関数
void printMatrix16ValueFromNode(maze_node *maze)
{
 800ae4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ae50:	4604      	mov	r4, r0
 800ae52:	b083      	sub	sp, #12
    printf("機体からTeraTermへの出力用\r\n");
 800ae54:	4822      	ldr	r0, [pc, #136]	; (800aee0 <printMatrix16ValueFromNode+0x94>)
    for(int j=NUMBER_OF_SQUARES_Y-1; j >= 0; j--)
    {
        for(int i=0; i < NUMBER_OF_SQUARES_X; i++)
        {
            printf("%u",convertNodeTo16Value(maze, i,j));
 800ae56:	4e23      	ldr	r6, [pc, #140]	; (800aee4 <printMatrix16ValueFromNode+0x98>)
    printf("機体からTeraTermへの出力用\r\n");
 800ae58:	f008 fb12 	bl	8013480 <puts>
 800ae5c:	f04f 0809 	mov.w	r8, #9
 800ae60:	f104 0348 	add.w	r3, r4, #72	; 0x48
    for(int j=NUMBER_OF_SQUARES_Y-1; j >= 0; j--)
 800ae64:	f04f 0908 	mov.w	r9, #8
 800ae68:	f1a3 0208 	sub.w	r2, r3, #8
 800ae6c:	eba9 0408 	sub.w	r4, r9, r8
 800ae70:	9201      	str	r2, [sp, #4]
 800ae72:	4692      	mov	sl, r2
 800ae74:	00e4      	lsls	r4, r4, #3
 800ae76:	f503 7520 	add.w	r5, r3, #640	; 0x280
 800ae7a:	f503 7734 	add.w	r7, r3, #720	; 0x2d0
{
 800ae7e:	469b      	mov	fp, r3
 800ae80:	e003      	b.n	800ae8a <printMatrix16ValueFromNode+0x3e>
            if(i < NUMBER_OF_SQUARES_X-1)
                printf(",");
 800ae82:	f008 fa8d 	bl	80133a0 <putchar>
        for(int i=0; i < NUMBER_OF_SQUARES_X; i++)
 800ae86:	455f      	cmp	r7, fp
 800ae88:	d01b      	beq.n	800aec2 <printMatrix16ValueFromNode+0x76>
    val += 8 * maze->ColumnNode[x][y].draw;     //西    
 800ae8a:	f89a 12d4 	ldrb.w	r1, [sl, #724]	; 0x2d4
    val += 2 * maze->ColumnNode[x+1][y].draw;   //東
 800ae8e:	f89a e31c 	ldrb.w	lr, [sl, #796]	; 0x31c
    val += 8 * maze->ColumnNode[x][y].draw;     //西    
 800ae92:	f89b 0004 	ldrb.w	r0, [fp, #4]
    val += 4 * maze->RawNode[x][y].draw;        //南
 800ae96:	eb0b 0c04 	add.w	ip, fp, r4
    val += 8 * maze->ColumnNode[x][y].draw;     //西    
 800ae9a:	00c9      	lsls	r1, r1, #3
 800ae9c:	eb01 014e 	add.w	r1, r1, lr, lsl #1
    val += 4 * maze->RawNode[x][y].draw;        //南
 800aea0:	f89c c004 	ldrb.w	ip, [ip, #4]
    val += 8 * maze->ColumnNode[x][y].draw;     //西    
 800aea4:	4401      	add	r1, r0
 800aea6:	eb01 018c 	add.w	r1, r1, ip, lsl #2
            printf("%u",convertNodeTo16Value(maze, i,j));
 800aeaa:	b2c9      	uxtb	r1, r1
 800aeac:	4630      	mov	r0, r6
 800aeae:	f008 fa5f 	bl	8013370 <iprintf>
            if(i < NUMBER_OF_SQUARES_X-1)
 800aeb2:	455d      	cmp	r5, fp
                printf(",");
 800aeb4:	f04f 002c 	mov.w	r0, #44	; 0x2c
 800aeb8:	f10b 0b50 	add.w	fp, fp, #80	; 0x50
 800aebc:	f10a 0a48 	add.w	sl, sl, #72	; 0x48
            if(i < NUMBER_OF_SQUARES_X-1)
 800aec0:	d1df      	bne.n	800ae82 <printMatrix16ValueFromNode+0x36>
        }
        printf("\r\n");
 800aec2:	4809      	ldr	r0, [pc, #36]	; (800aee8 <printMatrix16ValueFromNode+0x9c>)
 800aec4:	f008 fadc 	bl	8013480 <puts>
    for(int j=NUMBER_OF_SQUARES_Y-1; j >= 0; j--)
 800aec8:	f1b8 0801 	subs.w	r8, r8, #1
 800aecc:	f109 39ff 	add.w	r9, r9, #4294967295
 800aed0:	9b01      	ldr	r3, [sp, #4]
 800aed2:	d1c9      	bne.n	800ae68 <printMatrix16ValueFromNode+0x1c>
    }
    printf("\r\n");
 800aed4:	4804      	ldr	r0, [pc, #16]	; (800aee8 <printMatrix16ValueFromNode+0x9c>)

}
 800aed6:	b003      	add	sp, #12
 800aed8:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    printf("\r\n");
 800aedc:	f008 bad0 	b.w	8013480 <puts>
 800aee0:	08016d9c 	.word	0x08016d9c
 800aee4:	08016d34 	.word	0x08016d34
 800aee8:	08017020 	.word	0x08017020

0800aeec <shiftState>:
    prof->now.car = prof->next.car;
//    prof->now.dir = prof->next.dir;
    prof->now.pos.x = prof->next.pos.x;
    prof->now.pos.y = prof->next.pos.y;
    prof->now.node = prof->next.node;//ポインタ渡し
    prof->now.wall.north = prof->next.wall.north;
 800aeec:	7e02      	ldrb	r2, [r0, #24]
 800aeee:	7b03      	ldrb	r3, [r0, #12]
    prof->now.pos.y = prof->next.pos.y;
 800aef0:	7d41      	ldrb	r1, [r0, #21]
 800aef2:	7241      	strb	r1, [r0, #9]
{
 800aef4:	b430      	push	{r4, r5}
    prof->now.car = prof->next.car;
 800aef6:	7d85      	ldrb	r5, [r0, #22]
 800aef8:	7285      	strb	r5, [r0, #10]
    prof->now.wall.north = prof->next.wall.north;
 800aefa:	f3c2 0501 	ubfx	r5, r2, #0, #2
 800aefe:	f365 0301 	bfi	r3, r5, #0, #2
    prof->now.wall.east = prof->next.wall.east;
 800af02:	f3c2 0581 	ubfx	r5, r2, #2, #2
 800af06:	f365 0383 	bfi	r3, r5, #2, #2
    prof->now.wall.south = prof->next.wall.south;
 800af0a:	f3c2 1501 	ubfx	r5, r2, #4, #2
 800af0e:	f365 1305 	bfi	r3, r5, #4, #2
    prof->now.wall.west = prof->next.wall.west;
 800af12:	0992      	lsrs	r2, r2, #6
    prof->now.pos.x = prof->next.pos.x;
 800af14:	7d04      	ldrb	r4, [r0, #20]
 800af16:	7204      	strb	r4, [r0, #8]
    prof->now.wall.west = prof->next.wall.west;
 800af18:	f362 1387 	bfi	r3, r2, #6, #2
    prof->now.node = prof->next.node;//ポインタ渡し
 800af1c:	69c2      	ldr	r2, [r0, #28]
 800af1e:	6102      	str	r2, [r0, #16]
    prof->now.wall.west = prof->next.wall.west;
 800af20:	7303      	strb	r3, [r0, #12]
}
 800af22:	bc30      	pop	{r4, r5}
 800af24:	4770      	bx	lr
 800af26:	bf00      	nop

0800af28 <getNextNode>:
        break;
    }
    return error;
}
node *getNextNode(maze_node *maze, cardinal car, node *now_node, int mask)
{
 800af28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    uint16_t compare_weight=0;
    compare_weight = now_node->weight;

    _Bool flag=false;
    //printf("マイノードが01のどちらか:%d\r\n",now_node->rc);
    if(now_node->rc == 0)
 800af2c:	f892 c005 	ldrb.w	ip, [r2, #5]
    compare_weight = now_node->weight;
 800af30:	8857      	ldrh	r7, [r2, #2]
 800af32:	7991      	ldrb	r1, [r2, #6]
 800af34:	79d4      	ldrb	r4, [r2, #7]
{
 800af36:	b083      	sub	sp, #12
    if(now_node->rc == 0)
 800af38:	f1bc 0f00 	cmp.w	ip, #0
 800af3c:	d17f      	bne.n	800b03e <getNextNode+0x116>
        //北側ノード
        if(now_node->pos.y < NUMBER_OF_SQUARES_Y-1)					//範囲チェック
        {

            //printf("%u\r\n",now_node->pos.y);
            if( (maze->RawNode[now_node->pos.x][now_node->pos.y+1].existence & mask) == NOWALL)	//壁がなければ(maskの意味はstatic_parametersを参照)
 800af3e:	008e      	lsls	r6, r1, #2
        if(now_node->pos.y < NUMBER_OF_SQUARES_Y-1)					//範囲チェック
 800af40:	2c07      	cmp	r4, #7
 800af42:	f104 3eff 	add.w	lr, r4, #4294967295
            if( (maze->RawNode[now_node->pos.x][now_node->pos.y+1].existence & mask) == NOWALL)	//壁がなければ(maskの意味はstatic_parametersを参照)
 800af46:	9601      	str	r6, [sp, #4]
        if(now_node->pos.y < NUMBER_OF_SQUARES_Y-1)					//範囲チェック
 800af48:	f200 80bd 	bhi.w	800b0c6 <getNextNode+0x19e>
            if( (maze->RawNode[now_node->pos.x][now_node->pos.y+1].existence & mask) == NOWALL)	//壁がなければ(maskの意味はstatic_parametersを参照)
 800af4c:	eb06 0801 	add.w	r8, r6, r1
 800af50:	f104 0901 	add.w	r9, r4, #1
 800af54:	eb09 0848 	add.w	r8, r9, r8, lsl #1
 800af58:	f810 a038 	ldrb.w	sl, [r0, r8, lsl #3]
 800af5c:	ea1a 0f03 	tst.w	sl, r3
 800af60:	d115      	bne.n	800af8e <getNextNode+0x66>
            {
            	static int cnt = 1;
//            				ChangeLED(cnt%7);
            				cnt ++;
 800af62:	f8df a2ac 	ldr.w	sl, [pc, #684]	; 800b210 <getNextNode+0x2e8>


                // printf("%d\r\n", maze->RawNode[now_node->pos.x][now_node->pos.y+1].existence);//壁があることになってた..
                if(compare_weight > maze->RawNode[now_node->pos.x][now_node->pos.y+1].weight)
 800af66:	eb00 08c8 	add.w	r8, r0, r8, lsl #3
            				cnt ++;
 800af6a:	f8da 6000 	ldr.w	r6, [sl]
                if(compare_weight > maze->RawNode[now_node->pos.x][now_node->pos.y+1].weight)
 800af6e:	f8b8 8002 	ldrh.w	r8, [r8, #2]
            				cnt ++;
 800af72:	f106 0b01 	add.w	fp, r6, #1
                if(compare_weight > maze->RawNode[now_node->pos.x][now_node->pos.y+1].weight)
 800af76:	45b8      	cmp	r8, r7
            				cnt ++;
 800af78:	f8ca b000 	str.w	fp, [sl]
                if(compare_weight > maze->RawNode[now_node->pos.x][now_node->pos.y+1].weight)
 800af7c:	d207      	bcs.n	800af8e <getNextNode+0x66>

#if DEBUG_ON
                    printf("北へ\r\n");
#endif
                    compare_weight = maze->RawNode[now_node->pos.x][now_node->pos.y+1].weight;
                    next_node = &(maze->RawNode[now_node->pos.x][now_node->pos.y+1]);
 800af7e:	250a      	movs	r5, #10
 800af80:	fb15 9501 	smlabb	r5, r5, r1, r9
 800af84:	4647      	mov	r7, r8
 800af86:	eb00 05c5 	add.w	r5, r0, r5, lsl #3
                    flag = true;
 800af8a:	f04f 0c01 	mov.w	ip, #1
                }
            }
        }
        //南へ側ノード
        if(now_node->pos.y > 1)						//範囲チェック
 800af8e:	2c01      	cmp	r4, #1
 800af90:	f200 8099 	bhi.w	800b0c6 <getNextNode+0x19e>
                    flag = true;
                }
            }
        }
        //東へ側に斜めが2方向
        if(now_node->pos.x < NUMBER_OF_SQUARES_X-1)					//範囲チェック
 800af94:	2907      	cmp	r1, #7
 800af96:	d82f      	bhi.n	800aff8 <getNextNode+0xd0>
        {
            //北東へ
            if( (maze->ColumnNode[now_node->pos.x+1][now_node->pos.y].existence & mask) == NOWALL)		//壁がなければ
 800af98:	1c4e      	adds	r6, r1, #1
 800af9a:	eb06 06c6 	add.w	r6, r6, r6, lsl #3
 800af9e:	eb06 0804 	add.w	r8, r6, r4
 800afa2:	eb00 08c8 	add.w	r8, r0, r8, lsl #3
 800afa6:	f898 92d0 	ldrb.w	r9, [r8, #720]	; 0x2d0
 800afaa:	ea19 0f03 	tst.w	r9, r3
 800afae:	d10b      	bne.n	800afc8 <getNextNode+0xa0>
            {
                //重みを比較して更新
                if(compare_weight > maze->ColumnNode[now_node->pos.x+1][now_node->pos.y].weight)
 800afb0:	f8b8 82d2 	ldrh.w	r8, [r8, #722]	; 0x2d2
 800afb4:	45b8      	cmp	r8, r7
 800afb6:	d207      	bcs.n	800afc8 <getNextNode+0xa0>
                {
#if DEBUG_ON
                    printf("北東へ\r\n");
#endif
                    compare_weight = maze->ColumnNode[now_node->pos.x+1][now_node->pos.y].weight;
                    next_node = &(maze->ColumnNode[now_node->pos.x+1][now_node->pos.y]);
 800afb8:	f104 055a 	add.w	r5, r4, #90	; 0x5a
 800afbc:	4435      	add	r5, r6
 800afbe:	4647      	mov	r7, r8
 800afc0:	eb00 05c5 	add.w	r5, r0, r5, lsl #3
                    flag = true;
 800afc4:	f04f 0c01 	mov.w	ip, #1
 800afc8:	eb0e 0806 	add.w	r8, lr, r6
 800afcc:	eb00 08c8 	add.w	r8, r0, r8, lsl #3
                }
            }

            //南へ東へ
            if( (maze->ColumnNode[now_node->pos.x+1][now_node->pos.y-1].existence & mask) == NOWALL)		//壁がなければ
 800afd0:	f898 92d0 	ldrb.w	r9, [r8, #720]	; 0x2d0
 800afd4:	ea19 0f03 	tst.w	r9, r3
 800afd8:	f040 80e8 	bne.w	800b1ac <getNextNode+0x284>
            {
                //重みを比較して更新
                if(compare_weight > maze->ColumnNode[now_node->pos.x+1][now_node->pos.y-1].weight)
 800afdc:	f8b8 82d2 	ldrh.w	r8, [r8, #722]	; 0x2d2
 800afe0:	45b8      	cmp	r8, r7
 800afe2:	f080 80e3 	bcs.w	800b1ac <getNextNode+0x284>
                {
#if DEBUG_ON
                    printf("南東へ\r\n");
#endif
                    compare_weight = maze->ColumnNode[now_node->pos.x+1][now_node->pos.y-1].weight;
                    next_node = &(maze->ColumnNode[now_node->pos.x+1][now_node->pos.y-1]);
 800afe6:	f10e 055a 	add.w	r5, lr, #90	; 0x5a
 800afea:	4435      	add	r5, r6
 800afec:	eb00 05c5 	add.w	r5, r0, r5, lsl #3
                }
            }
        }

        //西へ側に斜めが2方向
        if(now_node->pos.x > 0)						//範囲チェック
 800aff0:	b309      	cbz	r1, 800b036 <getNextNode+0x10e>
 800aff2:	4647      	mov	r7, r8
                    flag = true;
 800aff4:	f04f 0c01 	mov.w	ip, #1
 800aff8:	eb01 01c1 	add.w	r1, r1, r1, lsl #3
 800affc:	1866      	adds	r6, r4, r1
 800affe:	eb01 080e 	add.w	r8, r1, lr
 800b002:	eb00 06c6 	add.w	r6, r0, r6, lsl #3
 800b006:	eb00 08c8 	add.w	r8, r0, r8, lsl #3
        {
            //北西へ
            if( (maze->ColumnNode[now_node->pos.x][now_node->pos.y].existence & mask) == NOWALL)		//壁がなければ
 800b00a:	f896 92d0 	ldrb.w	r9, [r6, #720]	; 0x2d0
 800b00e:	f898 a2d0 	ldrb.w	sl, [r8, #720]	; 0x2d0
 800b012:	ea19 0f03 	tst.w	r9, r3
 800b016:	ea0a 0a03 	and.w	sl, sl, r3
 800b01a:	f000 80da 	beq.w	800b1d2 <getNextNode+0x2aa>
                    next_node = &(maze->ColumnNode[now_node->pos.x][now_node->pos.y]);
                    flag = true;
                }
            }
            //南へ西へ
            if( (maze->ColumnNode[now_node->pos.x][now_node->pos.y-1].existence & mask) == NOWALL)		//壁がなければ
 800b01e:	f1ba 0f00 	cmp.w	sl, #0
 800b022:	d104      	bne.n	800b02e <getNextNode+0x106>
            {
                //重みを比較して更新
                if(compare_weight > maze->ColumnNode[now_node->pos.x][now_node->pos.y-1].weight)
 800b024:	f8b8 32d2 	ldrh.w	r3, [r8, #722]	; 0x2d2
 800b028:	42bb      	cmp	r3, r7
 800b02a:	f0c0 80e4 	bcc.w	800b1f6 <getNextNode+0x2ce>
 800b02e:	f1bc 0f00 	cmp.w	ip, #0
 800b032:	bf08      	it	eq
 800b034:	4615      	moveq	r5, r2
        return now_node;//万が一更新されなかったら、今いるノードが目標ノードなので、停止するはず。
        //停止しなかった。前回の情報がそのまま反映されるだけ
    }
    return now_node; //

}
 800b036:	4628      	mov	r0, r5
 800b038:	b003      	add	sp, #12
 800b03a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if(now_node->pos.x < NUMBER_OF_SQUARES_X-1)					//範囲チェック
 800b03e:	2907      	cmp	r1, #7
 800b040:	f101 3eff 	add.w	lr, r1, #4294967295
 800b044:	d958      	bls.n	800b0f8 <getNextNode+0x1d0>
    _Bool flag=false;
 800b046:	f04f 0800 	mov.w	r8, #0
 800b04a:	eb0e 0ace 	add.w	sl, lr, lr, lsl #3
 800b04e:	eb0a 0604 	add.w	r6, sl, r4
 800b052:	eb00 06c6 	add.w	r6, r0, r6, lsl #3
            if( (maze->ColumnNode[now_node->pos.x-1][now_node->pos.y].existence & mask) == NOWALL)	//壁がなければ
 800b056:	f896 92d0 	ldrb.w	r9, [r6, #720]	; 0x2d0
 800b05a:	ea19 0f03 	tst.w	r9, r3
 800b05e:	f000 8093 	beq.w	800b188 <getNextNode+0x260>
            if( (maze->RawNode[now_node->pos.x][now_node->pos.y+1].existence & mask) == NOWALL)		//壁がなければ
 800b062:	008e      	lsls	r6, r1, #2
        if(now_node->pos.y < NUMBER_OF_SQUARES_Y-1)					//範囲チェック
 800b064:	2c07      	cmp	r4, #7
            if( (maze->RawNode[now_node->pos.x][now_node->pos.y+1].existence & mask) == NOWALL)		//壁がなければ
 800b066:	9601      	str	r6, [sp, #4]
        if(now_node->pos.y < NUMBER_OF_SQUARES_Y-1)					//範囲チェック
 800b068:	d95e      	bls.n	800b128 <getNextNode+0x200>
 800b06a:	ea4f 098e 	mov.w	r9, lr, lsl #2
            if( (maze->RawNode[now_node->pos.x][now_node->pos.y].existence & mask) == NOWALL)		//壁がなければ
 800b06e:	9e01      	ldr	r6, [sp, #4]
 800b070:	440e      	add	r6, r1
 800b072:	eb09 0c0e 	add.w	ip, r9, lr
 800b076:	eb04 0646 	add.w	r6, r4, r6, lsl #1
 800b07a:	eb04 0c4c 	add.w	ip, r4, ip, lsl #1
 800b07e:	f810 b036 	ldrb.w	fp, [r0, r6, lsl #3]
 800b082:	f810 a03c 	ldrb.w	sl, [r0, ip, lsl #3]
 800b086:	ea1b 0f03 	tst.w	fp, r3
 800b08a:	ea0a 0a03 	and.w	sl, sl, r3
 800b08e:	f040 8091 	bne.w	800b1b4 <getNextNode+0x28c>
                if(compare_weight > maze->RawNode[now_node->pos.x][now_node->pos.y].weight)
 800b092:	eb00 06c6 	add.w	r6, r0, r6, lsl #3
 800b096:	8873      	ldrh	r3, [r6, #2]
 800b098:	42bb      	cmp	r3, r7
 800b09a:	f080 808b 	bcs.w	800b1b4 <getNextNode+0x28c>
                    next_node = &(maze->RawNode[now_node->pos.x][now_node->pos.y]);
 800b09e:	250a      	movs	r5, #10
 800b0a0:	fb15 4101 	smlabb	r1, r5, r1, r4
 800b0a4:	eb00 05c1 	add.w	r5, r0, r1, lsl #3
            if( (maze->RawNode[now_node->pos.x-1][now_node->pos.y].existence & mask) == NOWALL)		//壁がなければ
 800b0a8:	f1ba 0f00 	cmp.w	sl, #0
 800b0ac:	d1c3      	bne.n	800b036 <getNextNode+0x10e>
                if(compare_weight > maze->RawNode[now_node->pos.x-1][now_node->pos.y].weight)
 800b0ae:	eb00 0ccc 	add.w	ip, r0, ip, lsl #3
 800b0b2:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 800b0b6:	429a      	cmp	r2, r3
 800b0b8:	d2bd      	bcs.n	800b036 <getNextNode+0x10e>
                    next_node = &(maze->RawNode[now_node->pos.x-1][now_node->pos.y]);
 800b0ba:	44ce      	add	lr, r9
 800b0bc:	eb04 044e 	add.w	r4, r4, lr, lsl #1
 800b0c0:	eb00 05c4 	add.w	r5, r0, r4, lsl #3
 800b0c4:	e7b7      	b.n	800b036 <getNextNode+0x10e>
            if( (maze->RawNode[now_node->pos.x][now_node->pos.y-1].existence & mask) == NOWALL)	//壁がなければ
 800b0c6:	9e01      	ldr	r6, [sp, #4]
 800b0c8:	440e      	add	r6, r1
 800b0ca:	eb0e 0646 	add.w	r6, lr, r6, lsl #1
 800b0ce:	f810 8036 	ldrb.w	r8, [r0, r6, lsl #3]
 800b0d2:	ea18 0f03 	tst.w	r8, r3
 800b0d6:	f47f af5d 	bne.w	800af94 <getNextNode+0x6c>
                if(compare_weight > maze->RawNode[now_node->pos.x][now_node->pos.y-1].weight)
 800b0da:	eb00 06c6 	add.w	r6, r0, r6, lsl #3
 800b0de:	8876      	ldrh	r6, [r6, #2]
 800b0e0:	42be      	cmp	r6, r7
 800b0e2:	f4bf af57 	bcs.w	800af94 <getNextNode+0x6c>
                    next_node = &(maze->RawNode[now_node->pos.x][now_node->pos.y-1]);
 800b0e6:	250a      	movs	r5, #10
 800b0e8:	fb15 e501 	smlabb	r5, r5, r1, lr
 800b0ec:	4637      	mov	r7, r6
 800b0ee:	eb00 05c5 	add.w	r5, r0, r5, lsl #3
                    flag = true;
 800b0f2:	f04f 0c01 	mov.w	ip, #1
 800b0f6:	e74d      	b.n	800af94 <getNextNode+0x6c>
            if( (maze->ColumnNode[now_node->pos.x+1][now_node->pos.y].existence & mask) == NOWALL)	//壁がなければ(maskの意味はstatic_parametersを参照)
 800b0f8:	1c4e      	adds	r6, r1, #1
 800b0fa:	eb06 09c6 	add.w	r9, r6, r6, lsl #3
 800b0fe:	eb04 0609 	add.w	r6, r4, r9
 800b102:	eb00 06c6 	add.w	r6, r0, r6, lsl #3
 800b106:	f896 82d0 	ldrb.w	r8, [r6, #720]	; 0x2d0
 800b10a:	ea18 0803 	ands.w	r8, r8, r3
 800b10e:	d178      	bne.n	800b202 <getNextNode+0x2da>
                if(compare_weight > maze->ColumnNode[now_node->pos.x+1][now_node->pos.y].weight)
 800b110:	f8b6 a2d2 	ldrh.w	sl, [r6, #722]	; 0x2d2
 800b114:	45ba      	cmp	sl, r7
 800b116:	d276      	bcs.n	800b206 <getNextNode+0x2de>
                    next_node = &(maze->ColumnNode[now_node->pos.x+1][now_node->pos.y]);
 800b118:	f104 055a 	add.w	r5, r4, #90	; 0x5a
 800b11c:	444d      	add	r5, r9
 800b11e:	4657      	mov	r7, sl
 800b120:	eb00 05c5 	add.w	r5, r0, r5, lsl #3
                    flag = true;
 800b124:	46e0      	mov	r8, ip
 800b126:	e06e      	b.n	800b206 <getNextNode+0x2de>
            if( (maze->RawNode[now_node->pos.x][now_node->pos.y+1].existence & mask) == NOWALL)		//壁がなければ
 800b128:	eb06 0901 	add.w	r9, r6, r1
 800b12c:	f104 0a01 	add.w	sl, r4, #1
 800b130:	eb0a 0949 	add.w	r9, sl, r9, lsl #1
 800b134:	f810 b039 	ldrb.w	fp, [r0, r9, lsl #3]
 800b138:	ea1b 0f03 	tst.w	fp, r3
 800b13c:	d10c      	bne.n	800b158 <getNextNode+0x230>
                if(compare_weight > maze->RawNode[now_node->pos.x][now_node->pos.y+1].weight)
 800b13e:	eb00 09c9 	add.w	r9, r0, r9, lsl #3
 800b142:	f8b9 9002 	ldrh.w	r9, [r9, #2]
 800b146:	45b9      	cmp	r9, r7
 800b148:	d206      	bcs.n	800b158 <getNextNode+0x230>
                    next_node = &(maze->RawNode[now_node->pos.x][now_node->pos.y+1]);
 800b14a:	250a      	movs	r5, #10
 800b14c:	fb15 a501 	smlabb	r5, r5, r1, sl
 800b150:	464f      	mov	r7, r9
 800b152:	eb00 05c5 	add.w	r5, r0, r5, lsl #3
                    flag = true;
 800b156:	46e0      	mov	r8, ip
            if( (maze->RawNode[now_node->pos.x-1][now_node->pos.y+1].existence & mask) == NOWALL)		//壁がなければ
 800b158:	ea4f 098e 	mov.w	r9, lr, lsl #2
 800b15c:	eb09 0b0e 	add.w	fp, r9, lr
 800b160:	eb0a 0a4b 	add.w	sl, sl, fp, lsl #1
 800b164:	f810 b03a 	ldrb.w	fp, [r0, sl, lsl #3]
 800b168:	ea1b 0f03 	tst.w	fp, r3
 800b16c:	d119      	bne.n	800b1a2 <getNextNode+0x27a>
                if(compare_weight > maze->RawNode[now_node->pos.x-1][now_node->pos.y+1].weight)
 800b16e:	eb00 0aca 	add.w	sl, r0, sl, lsl #3
 800b172:	f8ba b002 	ldrh.w	fp, [sl, #2]
 800b176:	45bb      	cmp	fp, r7
 800b178:	d213      	bcs.n	800b1a2 <getNextNode+0x27a>
                    next_node = &(maze->RawNode[now_node->pos.x-1][now_node->pos.y+1]);
 800b17a:	4655      	mov	r5, sl
        if(now_node->pos.y > 0)						//範囲チェック
 800b17c:	2c00      	cmp	r4, #0
 800b17e:	f43f af5a 	beq.w	800b036 <getNextNode+0x10e>
                    flag = true;
 800b182:	46e0      	mov	r8, ip
        if(now_node->pos.y > 0)						//範囲チェック
 800b184:	465f      	mov	r7, fp
 800b186:	e772      	b.n	800b06e <getNextNode+0x146>
                if(compare_weight > maze->ColumnNode[now_node->pos.x-1][now_node->pos.y].weight)
 800b188:	f8b6 62d2 	ldrh.w	r6, [r6, #722]	; 0x2d2
 800b18c:	42be      	cmp	r6, r7
 800b18e:	f4bf af68 	bcs.w	800b062 <getNextNode+0x13a>
                    next_node = &(maze->ColumnNode[now_node->pos.x-1][now_node->pos.y]);
 800b192:	f104 055a 	add.w	r5, r4, #90	; 0x5a
 800b196:	4455      	add	r5, sl
 800b198:	4637      	mov	r7, r6
 800b19a:	eb00 05c5 	add.w	r5, r0, r5, lsl #3
                    flag = true;
 800b19e:	46e0      	mov	r8, ip
 800b1a0:	e75f      	b.n	800b062 <getNextNode+0x13a>
        if(now_node->pos.y > 0)						//範囲チェック
 800b1a2:	2c00      	cmp	r4, #0
 800b1a4:	f47f af63 	bne.w	800b06e <getNextNode+0x146>
 800b1a8:	46c4      	mov	ip, r8
 800b1aa:	e740      	b.n	800b02e <getNextNode+0x106>
        if(now_node->pos.x > 0)						//範囲チェック
 800b1ac:	2900      	cmp	r1, #0
 800b1ae:	f43f af3e 	beq.w	800b02e <getNextNode+0x106>
 800b1b2:	e721      	b.n	800aff8 <getNextNode+0xd0>
            if( (maze->RawNode[now_node->pos.x-1][now_node->pos.y].existence & mask) == NOWALL)		//壁がなければ
 800b1b4:	f1ba 0f00 	cmp.w	sl, #0
 800b1b8:	d1f6      	bne.n	800b1a8 <getNextNode+0x280>
                if(compare_weight > maze->RawNode[now_node->pos.x-1][now_node->pos.y].weight)
 800b1ba:	eb09 030e 	add.w	r3, r9, lr
 800b1be:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 800b1c2:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
 800b1c6:	885b      	ldrh	r3, [r3, #2]
 800b1c8:	42bb      	cmp	r3, r7
 800b1ca:	f4ff af76 	bcc.w	800b0ba <getNextNode+0x192>
 800b1ce:	46c4      	mov	ip, r8
 800b1d0:	e72d      	b.n	800b02e <getNextNode+0x106>
                if(compare_weight > maze->ColumnNode[now_node->pos.x][now_node->pos.y].weight)
 800b1d2:	f8b6 32d2 	ldrh.w	r3, [r6, #722]	; 0x2d2
 800b1d6:	42bb      	cmp	r3, r7
 800b1d8:	f4bf af21 	bcs.w	800b01e <getNextNode+0xf6>
                    next_node = &(maze->ColumnNode[now_node->pos.x][now_node->pos.y]);
 800b1dc:	345a      	adds	r4, #90	; 0x5a
 800b1de:	440c      	add	r4, r1
 800b1e0:	eb00 05c4 	add.w	r5, r0, r4, lsl #3
            if( (maze->ColumnNode[now_node->pos.x][now_node->pos.y-1].existence & mask) == NOWALL)		//壁がなければ
 800b1e4:	f1ba 0f00 	cmp.w	sl, #0
 800b1e8:	f47f af25 	bne.w	800b036 <getNextNode+0x10e>
                if(compare_weight > maze->ColumnNode[now_node->pos.x][now_node->pos.y-1].weight)
 800b1ec:	f8b8 22d2 	ldrh.w	r2, [r8, #722]	; 0x2d2
 800b1f0:	429a      	cmp	r2, r3
 800b1f2:	f4bf af20 	bcs.w	800b036 <getNextNode+0x10e>
                    next_node = &(maze->ColumnNode[now_node->pos.x][now_node->pos.y-1]);
 800b1f6:	f10e 045a 	add.w	r4, lr, #90	; 0x5a
 800b1fa:	440c      	add	r4, r1
 800b1fc:	eb00 05c4 	add.w	r5, r0, r4, lsl #3
 800b200:	e719      	b.n	800b036 <getNextNode+0x10e>
    _Bool flag=false;
 800b202:	f04f 0800 	mov.w	r8, #0
        if(now_node->pos.x > 1)						//範囲チェック
 800b206:	2901      	cmp	r1, #1
 800b208:	f67f af2b 	bls.w	800b062 <getNextNode+0x13a>
 800b20c:	e71d      	b.n	800b04a <getNextNode+0x122>
 800b20e:	bf00      	nop
 800b210:	20000000 	.word	0x20000000

0800b214 <judgeAccelorNot>:

	compare_weight = now_node->weight;

	_Bool flag=false;
	//現ノードから3方向ノードを見て、未知なら即return
	if(now_node->rc == 0)
 800b214:	7953      	ldrb	r3, [r2, #5]
{
 800b216:	b4f0      	push	{r4, r5, r6, r7}
	compare_weight = now_node->weight;
 800b218:	8854      	ldrh	r4, [r2, #2]
	if(now_node->rc == 0)
 800b21a:	bba3      	cbnz	r3, 800b286 <judgeAccelorNot+0x72>
	{
		switch(car)
 800b21c:	2900      	cmp	r1, #0
 800b21e:	f000 8090 	beq.w	800b342 <judgeAccelorNot+0x12e>
 800b222:	2904      	cmp	r1, #4
 800b224:	d12c      	bne.n	800b280 <judgeAccelorNot+0x6c>
	            }
	        }
	        break;
		case south:
			//南へ
			if(now_node->pos.y > 1)						//範囲チェック
 800b226:	79d1      	ldrb	r1, [r2, #7]
 800b228:	7992      	ldrb	r2, [r2, #6]
 800b22a:	2901      	cmp	r1, #1
 800b22c:	f101 35ff 	add.w	r5, r1, #4294967295
 800b230:	d90e      	bls.n	800b250 <judgeAccelorNot+0x3c>
			{
				if( (maze->RawNode[now_node->pos.x][now_node->pos.y-1].existence ) == UNKNOWN)	//壁がなければ
 800b232:	eb02 0182 	add.w	r1, r2, r2, lsl #2
 800b236:	eb05 0141 	add.w	r1, r5, r1, lsl #1
 800b23a:	f810 6031 	ldrb.w	r6, [r0, r1, lsl #3]
 800b23e:	2e02      	cmp	r6, #2
 800b240:	d01e      	beq.n	800b280 <judgeAccelorNot+0x6c>
				{
					return false;
				}
					//重みを比較して更新
				else if( (maze->RawNode[now_node->pos.x][now_node->pos.y-1].existence ) == NOWALL)
 800b242:	b92e      	cbnz	r6, 800b250 <judgeAccelorNot+0x3c>
				{
					if(compare_weight > maze->RawNode[now_node->pos.x][now_node->pos.y-1].weight)
 800b244:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
 800b248:	8849      	ldrh	r1, [r1, #2]
 800b24a:	42a1      	cmp	r1, r4
 800b24c:	f0c0 80bc 	bcc.w	800b3c8 <judgeAccelorNot+0x1b4>
	_Bool flag=false;
 800b250:	461e      	mov	r6, r3
//						next_node = &(maze->RawNode[now_node->pos.x][now_node->pos.y-1]);
						flag = true;
					}
				}
			}
			if(now_node->pos.x < NUMBER_OF_SQUARES_X-1)					//範囲チェック
 800b252:	2a07      	cmp	r2, #7
 800b254:	f200 8084 	bhi.w	800b360 <judgeAccelorNot+0x14c>
			{
				//南へ東へ
				if( (maze->ColumnNode[now_node->pos.x+1][now_node->pos.y-1].existence ) == UNKNOWN)		//壁がなければ
 800b258:	1c51      	adds	r1, r2, #1
 800b25a:	eb01 01c1 	add.w	r1, r1, r1, lsl #3
 800b25e:	4429      	add	r1, r5
 800b260:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
 800b264:	f891 72d0 	ldrb.w	r7, [r1, #720]	; 0x2d0
 800b268:	2f02      	cmp	r7, #2
 800b26a:	d009      	beq.n	800b280 <judgeAccelorNot+0x6c>
				{
					return false;
				}
				else if( (maze->ColumnNode[now_node->pos.x+1][now_node->pos.y-1].existence ) == NOWALL)		//壁がなければ
 800b26c:	b92f      	cbnz	r7, 800b27a <judgeAccelorNot+0x66>
				{
					//重みを比較して更新
					if(compare_weight > maze->ColumnNode[now_node->pos.x+1][now_node->pos.y-1].weight)
 800b26e:	f8b1 12d2 	ldrh.w	r1, [r1, #722]	; 0x2d2
 800b272:	42a1      	cmp	r1, r4
					{
						compare_weight = maze->ColumnNode[now_node->pos.x+1][now_node->pos.y-1].weight;
//						next_node = &(maze->ColumnNode[now_node->pos.x+1][now_node->pos.y-1]);
						flag = false;
 800b274:	bf3c      	itt	cc
 800b276:	463e      	movcc	r6, r7
 800b278:	460c      	movcc	r4, r1
					}
				}
			}
			if(now_node->pos.x > 0)						//範囲チェック
 800b27a:	2a00      	cmp	r2, #0
 800b27c:	d170      	bne.n	800b360 <judgeAccelorNot+0x14c>
 800b27e:	4633      	mov	r3, r6
	}
	return flag; //壁が全部あるときもfalseになっている
	//未知があった時点でreturn false
	//直進かどうかまで見て、直進でなければfalse
	//既知でかつ直進ならtrue
}
 800b280:	4618      	mov	r0, r3
 800b282:	bcf0      	pop	{r4, r5, r6, r7}
 800b284:	4770      	bx	lr
		switch(car)
 800b286:	2902      	cmp	r1, #2
 800b288:	d03a      	beq.n	800b300 <judgeAccelorNot+0xec>
 800b28a:	2906      	cmp	r1, #6
 800b28c:	d155      	bne.n	800b33a <judgeAccelorNot+0x126>
			if(now_node->pos.x > 1)						//範囲チェック
 800b28e:	7991      	ldrb	r1, [r2, #6]
 800b290:	79d2      	ldrb	r2, [r2, #7]
 800b292:	2901      	cmp	r1, #1
 800b294:	f101 35ff 	add.w	r5, r1, #4294967295
 800b298:	d90b      	bls.n	800b2b2 <judgeAccelorNot+0x9e>
 800b29a:	eb05 01c5 	add.w	r1, r5, r5, lsl #3
 800b29e:	4411      	add	r1, r2
 800b2a0:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
				if( (maze->ColumnNode[now_node->pos.x-1][now_node->pos.y].existence ) ==UNKNOWN)	//壁がなければ
 800b2a4:	f891 62d0 	ldrb.w	r6, [r1, #720]	; 0x2d0
 800b2a8:	2e02      	cmp	r6, #2
 800b2aa:	d046      	beq.n	800b33a <judgeAccelorNot+0x126>
				else if( (maze->ColumnNode[now_node->pos.x-1][now_node->pos.y].existence ) == NOWALL)	//壁がなければ
 800b2ac:	2e00      	cmp	r6, #0
 800b2ae:	f000 8084 	beq.w	800b3ba <judgeAccelorNot+0x1a6>
	_Bool flag=false;
 800b2b2:	2300      	movs	r3, #0
			if(now_node->pos.y < NUMBER_OF_SQUARES_Y-1)					//範囲チェック
 800b2b4:	2a07      	cmp	r2, #7
				if( (maze->RawNode[now_node->pos.x-1][now_node->pos.y+1].existence ) == UNKNOWN)		//壁がなければ
 800b2b6:	ea4f 0185 	mov.w	r1, r5, lsl #2
			if(now_node->pos.y < NUMBER_OF_SQUARES_Y-1)					//範囲チェック
 800b2ba:	d811      	bhi.n	800b2e0 <judgeAccelorNot+0xcc>
				if( (maze->RawNode[now_node->pos.x-1][now_node->pos.y+1].existence ) == UNKNOWN)		//壁がなければ
 800b2bc:	194f      	adds	r7, r1, r5
 800b2be:	1c56      	adds	r6, r2, #1
 800b2c0:	eb06 0647 	add.w	r6, r6, r7, lsl #1
 800b2c4:	f810 7036 	ldrb.w	r7, [r0, r6, lsl #3]
 800b2c8:	2f02      	cmp	r7, #2
 800b2ca:	d036      	beq.n	800b33a <judgeAccelorNot+0x126>
				else if( (maze->RawNode[now_node->pos.x-1][now_node->pos.y+1].existence ) == NOWALL)		//壁がなければ
 800b2cc:	b937      	cbnz	r7, 800b2dc <judgeAccelorNot+0xc8>
					if(compare_weight > maze->RawNode[now_node->pos.x-1][now_node->pos.y+1].weight)
 800b2ce:	eb00 06c6 	add.w	r6, r0, r6, lsl #3
 800b2d2:	8876      	ldrh	r6, [r6, #2]
 800b2d4:	42a6      	cmp	r6, r4
 800b2d6:	bf3c      	itt	cc
 800b2d8:	4634      	movcc	r4, r6
						flag = false;
 800b2da:	463b      	movcc	r3, r7
			if(now_node->pos.y > 0)						//範囲チェック
 800b2dc:	2a00      	cmp	r2, #0
 800b2de:	d0cf      	beq.n	800b280 <judgeAccelorNot+0x6c>
				if( (maze->RawNode[now_node->pos.x-1][now_node->pos.y].existence ) == UNKNOWN)		//壁がなければ
 800b2e0:	440d      	add	r5, r1
 800b2e2:	eb02 0245 	add.w	r2, r2, r5, lsl #1
 800b2e6:	f810 1032 	ldrb.w	r1, [r0, r2, lsl #3]
 800b2ea:	2902      	cmp	r1, #2
 800b2ec:	d025      	beq.n	800b33a <judgeAccelorNot+0x126>
				else if( (maze->RawNode[now_node->pos.x-1][now_node->pos.y].existence ) == NOWALL)		//壁がなければ
 800b2ee:	2900      	cmp	r1, #0
 800b2f0:	d1c6      	bne.n	800b280 <judgeAccelorNot+0x6c>
					if(compare_weight > maze->RawNode[now_node->pos.x-1][now_node->pos.y].weight)
 800b2f2:	eb00 00c2 	add.w	r0, r0, r2, lsl #3
 800b2f6:	8842      	ldrh	r2, [r0, #2]
	                    flag = false;
 800b2f8:	42a2      	cmp	r2, r4
 800b2fa:	bf38      	it	cc
 800b2fc:	2300      	movcc	r3, #0
 800b2fe:	e7bf      	b.n	800b280 <judgeAccelorNot+0x6c>
			if(now_node->pos.x < NUMBER_OF_SQUARES_X-1)					//範囲チェック
 800b300:	7995      	ldrb	r5, [r2, #6]
 800b302:	79d1      	ldrb	r1, [r2, #7]
 800b304:	2d07      	cmp	r5, #7
 800b306:	d80b      	bhi.n	800b320 <judgeAccelorNot+0x10c>
				if( (maze->ColumnNode[now_node->pos.x+1][now_node->pos.y].existence ) == UNKNOWN)	//壁がなければ(maskの意味はstatic_parametersを参照)
 800b308:	1c6a      	adds	r2, r5, #1
 800b30a:	eb02 02c2 	add.w	r2, r2, r2, lsl #3
 800b30e:	440a      	add	r2, r1
 800b310:	eb00 02c2 	add.w	r2, r0, r2, lsl #3
 800b314:	f892 62d0 	ldrb.w	r6, [r2, #720]	; 0x2d0
 800b318:	2e02      	cmp	r6, #2
 800b31a:	d00e      	beq.n	800b33a <judgeAccelorNot+0x126>
				else if( (maze->ColumnNode[now_node->pos.x+1][now_node->pos.y].existence ) == NOWALL)	//壁がなければ(maskの意味はstatic_parametersを参照)
 800b31c:	2e00      	cmp	r6, #0
 800b31e:	d056      	beq.n	800b3ce <judgeAccelorNot+0x1ba>
	_Bool flag=false;
 800b320:	2300      	movs	r3, #0
			if(now_node->pos.y < NUMBER_OF_SQUARES_Y-1)					//範囲チェック
 800b322:	2907      	cmp	r1, #7
				if( (maze->RawNode[now_node->pos.x][now_node->pos.y+1].existence ) == UNKNOWN)		//壁がなければ
 800b324:	ea4f 0285 	mov.w	r2, r5, lsl #2
			if(now_node->pos.y < NUMBER_OF_SQUARES_Y-1)					//範囲チェック
 800b328:	d836      	bhi.n	800b398 <judgeAccelorNot+0x184>
				if( (maze->RawNode[now_node->pos.x][now_node->pos.y+1].existence ) == UNKNOWN)		//壁がなければ
 800b32a:	1957      	adds	r7, r2, r5
 800b32c:	1c4e      	adds	r6, r1, #1
 800b32e:	eb06 0647 	add.w	r6, r6, r7, lsl #1
 800b332:	f810 7036 	ldrb.w	r7, [r0, r6, lsl #3]
 800b336:	2f02      	cmp	r7, #2
 800b338:	d123      	bne.n	800b382 <judgeAccelorNot+0x16e>
	                    flag = false;
 800b33a:	2300      	movs	r3, #0
}
 800b33c:	4618      	mov	r0, r3
 800b33e:	bcf0      	pop	{r4, r5, r6, r7}
 800b340:	4770      	bx	lr
	        if(now_node->pos.y < NUMBER_OF_SQUARES_Y-1)					//範囲チェック
 800b342:	79d5      	ldrb	r5, [r2, #7]
 800b344:	7992      	ldrb	r2, [r2, #6]
 800b346:	2d07      	cmp	r5, #7
 800b348:	d882      	bhi.n	800b250 <judgeAccelorNot+0x3c>
	            if( (maze->RawNode[now_node->pos.x][now_node->pos.y+1].existence ) == UNKNOWN)	//壁がなければ(maskの意味はstatic_parametersを参照)
 800b34a:	eb02 0682 	add.w	r6, r2, r2, lsl #2
 800b34e:	1c69      	adds	r1, r5, #1
 800b350:	eb01 0146 	add.w	r1, r1, r6, lsl #1
 800b354:	f810 6031 	ldrb.w	r6, [r0, r1, lsl #3]
 800b358:	2e02      	cmp	r6, #2
 800b35a:	f47f af72 	bne.w	800b242 <judgeAccelorNot+0x2e>
 800b35e:	e78f      	b.n	800b280 <judgeAccelorNot+0x6c>
 800b360:	2109      	movs	r1, #9
 800b362:	fb11 5202 	smlabb	r2, r1, r2, r5
 800b366:	eb00 00c2 	add.w	r0, r0, r2, lsl #3
				if( (maze->ColumnNode[now_node->pos.x][now_node->pos.y-1].existence ) == UNKNOWN)		//壁がなければ
 800b36a:	f890 22d0 	ldrb.w	r2, [r0, #720]	; 0x2d0
 800b36e:	2a02      	cmp	r2, #2
 800b370:	d086      	beq.n	800b280 <judgeAccelorNot+0x6c>
				else if( (maze->ColumnNode[now_node->pos.x][now_node->pos.y-1].existence ) == NOWALL)		//壁がなければ
 800b372:	2a00      	cmp	r2, #0
 800b374:	d183      	bne.n	800b27e <judgeAccelorNot+0x6a>
					if(compare_weight > maze->ColumnNode[now_node->pos.x][now_node->pos.y-1].weight)
 800b376:	f8b0 22d2 	ldrh.w	r2, [r0, #722]	; 0x2d2
 800b37a:	42a2      	cmp	r2, r4
 800b37c:	bf28      	it	cs
 800b37e:	4633      	movcs	r3, r6
 800b380:	e77e      	b.n	800b280 <judgeAccelorNot+0x6c>
				else if( (maze->RawNode[now_node->pos.x][now_node->pos.y+1].existence ) == NOWALL)		//壁がなければ
 800b382:	b937      	cbnz	r7, 800b392 <judgeAccelorNot+0x17e>
					if(compare_weight > maze->RawNode[now_node->pos.x][now_node->pos.y+1].weight)
 800b384:	eb00 06c6 	add.w	r6, r0, r6, lsl #3
 800b388:	8876      	ldrh	r6, [r6, #2]
 800b38a:	42a6      	cmp	r6, r4
 800b38c:	bf3c      	itt	cc
 800b38e:	4634      	movcc	r4, r6
						flag = false;
 800b390:	463b      	movcc	r3, r7
			if(now_node->pos.y > 0)						//範囲チェック
 800b392:	2900      	cmp	r1, #0
 800b394:	f43f af74 	beq.w	800b280 <judgeAccelorNot+0x6c>
				if( (maze->RawNode[now_node->pos.x][now_node->pos.y].existence ) == UNKNOWN)		//壁がなければ
 800b398:	4415      	add	r5, r2
 800b39a:	eb01 0145 	add.w	r1, r1, r5, lsl #1
 800b39e:	f810 2031 	ldrb.w	r2, [r0, r1, lsl #3]
 800b3a2:	2a02      	cmp	r2, #2
 800b3a4:	d0c9      	beq.n	800b33a <judgeAccelorNot+0x126>
				else if( (maze->RawNode[now_node->pos.x][now_node->pos.y].existence ) == NOWALL)		//壁がなければ
 800b3a6:	2a00      	cmp	r2, #0
 800b3a8:	f47f af6a 	bne.w	800b280 <judgeAccelorNot+0x6c>
					if(compare_weight > maze->RawNode[now_node->pos.x][now_node->pos.y].weight)
 800b3ac:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
 800b3b0:	884a      	ldrh	r2, [r1, #2]
	                    flag = false;
 800b3b2:	42a2      	cmp	r2, r4
 800b3b4:	bf38      	it	cc
 800b3b6:	2300      	movcc	r3, #0
 800b3b8:	e762      	b.n	800b280 <judgeAccelorNot+0x6c>
					if(compare_weight > maze->ColumnNode[now_node->pos.x-1][now_node->pos.y].weight)
 800b3ba:	f8b1 12d2 	ldrh.w	r1, [r1, #722]	; 0x2d2
 800b3be:	42a1      	cmp	r1, r4
 800b3c0:	f4bf af77 	bcs.w	800b2b2 <judgeAccelorNot+0x9e>
 800b3c4:	460c      	mov	r4, r1
 800b3c6:	e775      	b.n	800b2b4 <judgeAccelorNot+0xa0>
 800b3c8:	460c      	mov	r4, r1
						flag = true;
 800b3ca:	2601      	movs	r6, #1
 800b3cc:	e741      	b.n	800b252 <judgeAccelorNot+0x3e>
					if(compare_weight > maze->ColumnNode[now_node->pos.x+1][now_node->pos.y].weight)
 800b3ce:	f8b2 22d2 	ldrh.w	r2, [r2, #722]	; 0x2d2
 800b3d2:	42a2      	cmp	r2, r4
 800b3d4:	d2a4      	bcs.n	800b320 <judgeAccelorNot+0x10c>
 800b3d6:	4614      	mov	r4, r2
 800b3d8:	e7a3      	b.n	800b322 <judgeAccelorNot+0x10e>
 800b3da:	bf00      	nop

0800b3dc <getNextState>:
state *getNextState(state *now_state, state *next_state, node *next_node)
{
 800b3dc:	b4f0      	push	{r4, r5, r6, r7}
    uint8_t now_x = now_state->node->pos.x;
    uint8_t now_y = now_state->node->pos.y;
    uint8_t next_x = next_node->pos.x;
    uint8_t next_y = next_node->pos.y;

    switch(now_state->car%8)
 800b3de:	7883      	ldrb	r3, [r0, #2]
    uint8_t now_x = now_state->node->pos.x;
 800b3e0:	6884      	ldr	r4, [r0, #8]
    uint8_t next_x = next_node->pos.x;
 800b3e2:	7996      	ldrb	r6, [r2, #6]
    uint8_t now_x = now_state->node->pos.x;
 800b3e4:	79a5      	ldrb	r5, [r4, #6]
    uint8_t next_y = next_node->pos.y;
 800b3e6:	79d7      	ldrb	r7, [r2, #7]
    uint8_t now_y = now_state->node->pos.y;
 800b3e8:	79e4      	ldrb	r4, [r4, #7]
    switch(now_state->car%8)
 800b3ea:	f003 0307 	and.w	r3, r3, #7
 800b3ee:	2b06      	cmp	r3, #6
 800b3f0:	d81e      	bhi.n	800b430 <getNextState+0x54>
 800b3f2:	e8df f003 	tbb	[pc, r3]
 800b3f6:	1d04      	.short	0x1d04
 800b3f8:	1d341d4e 	.word	0x1d341d4e
 800b3fc:	20          	.byte	0x20
 800b3fd:	00          	.byte	0x00
    {
        case north://行から、列に行くのか行に行くのかで、差分の取り方を変える
            if(next_node->rc == 0)
 800b3fe:	7953      	ldrb	r3, [r2, #5]
 800b400:	2b00      	cmp	r3, #0
 800b402:	d059      	beq.n	800b4b8 <getNextState+0xdc>
            if(next_node->rc == 1)
            {
                //行から列.左右のどちらか判断.あとで後ろも候補にあげる
                //右旋回
                //北向きから北東
                if( __RAW_TO_COLUMN_NE__(now_x, now_y, next_x, next_y) )
 800b404:	1c6b      	adds	r3, r5, #1
 800b406:	42b3      	cmp	r3, r6
 800b408:	f000 80c3 	beq.w	800b592 <getNextState+0x1b6>
                    return next_state;
                }

                //左旋回
                //北向きから北西
                if( __RAW_TO_COLUMN_NW__(now_x, now_y, next_x, next_y) )
 800b40c:	42b5      	cmp	r5, r6
 800b40e:	d10f      	bne.n	800b430 <getNextState+0x54>
 800b410:	42bc      	cmp	r4, r7
 800b412:	f000 8119 	beq.w	800b648 <getNextState+0x26c>
 800b416:	3c01      	subs	r4, #1
                    return next_state;
                }

                //Uターンして右旋回
                //北向きから南西
                if( __RAW_TO_COLUMN_SW__(now_x, now_y, next_x, next_y) )
 800b418:	42bc      	cmp	r4, r7
 800b41a:	d109      	bne.n	800b430 <getNextState+0x54>
                {
                    next_state->car = west;
 800b41c:	2306      	movs	r3, #6
 800b41e:	708b      	strb	r3, [r1, #2]
                    next_state->pos.x = now_state->pos.x - 1;
 800b420:	7803      	ldrb	r3, [r0, #0]
 800b422:	3b01      	subs	r3, #1
                //Uターンして右旋回
                //西向きから南東
                if( __COLUMN_TO_RAW_SE__(now_x, now_y, next_x, next_y) )
                {
                    next_state->car = south;
                    next_state->pos.x = now_state->pos.x + 1;
 800b424:	700b      	strb	r3, [r1, #0]
                    next_state->pos.y = now_state->pos.y - 1;
 800b426:	7843      	ldrb	r3, [r0, #1]
                    now_state->dir = backright;
 800b428:	2203      	movs	r2, #3
                    next_state->pos.y = now_state->pos.y - 1;
 800b42a:	3b01      	subs	r3, #1
 800b42c:	704b      	strb	r3, [r1, #1]
                    now_state->dir = backright;
 800b42e:	70c2      	strb	r2, [r0, #3]
#if DEBUG_ON
    printf("エラー in function 'getNextState'.\r\n");
#endif

    return next_state; //ここまで来てしまったらエラー
}
 800b430:	4608      	mov	r0, r1
 800b432:	bcf0      	pop	{r4, r5, r6, r7}
 800b434:	4770      	bx	lr
            if(next_node->rc == 1)
 800b436:	7953      	ldrb	r3, [r2, #5]
 800b438:	1e6a      	subs	r2, r5, #1
 800b43a:	2b00      	cmp	r3, #0
 800b43c:	d05b      	beq.n	800b4f6 <getNextState+0x11a>
                if( __COLUMN_TO_COLUMN_WEST__(now_x, now_y, next_x, next_y) )
 800b43e:	42b2      	cmp	r2, r6
 800b440:	f000 808f 	beq.w	800b562 <getNextState+0x186>
                if( __COLUMN_TO_COLUMN_EAST__(now_x, now_y, next_x, next_y) )
 800b444:	3501      	adds	r5, #1
 800b446:	42ae      	cmp	r6, r5
 800b448:	d1f2      	bne.n	800b430 <getNextState+0x54>
 800b44a:	42bc      	cmp	r4, r7
 800b44c:	d1f0      	bne.n	800b430 <getNextState+0x54>
                    next_state->car = east;
 800b44e:	2302      	movs	r3, #2
 800b450:	708b      	strb	r3, [r1, #2]
                    next_state->pos.x = now_state->pos.x + 2;
 800b452:	7803      	ldrb	r3, [r0, #0]
                    now_state->dir = back;
 800b454:	2204      	movs	r2, #4
                    next_state->pos.x = now_state->pos.x + 2;
 800b456:	3302      	adds	r3, #2
 800b458:	700b      	strb	r3, [r1, #0]
                    now_state->dir = back;
 800b45a:	70c2      	strb	r2, [r0, #3]
                    return next_state;
 800b45c:	e7e8      	b.n	800b430 <getNextState+0x54>
            if(next_node->rc == 0)
 800b45e:	7953      	ldrb	r3, [r2, #5]
 800b460:	2b00      	cmp	r3, #0
 800b462:	d039      	beq.n	800b4d8 <getNextState+0xfc>
                if( __RAW_TO_COLUMN_SW__(now_x, now_y, next_x, next_y) )
 800b464:	42b5      	cmp	r5, r6
 800b466:	f000 80a3 	beq.w	800b5b0 <getNextState+0x1d4>
                if( __RAW_TO_COLUMN_SE__(now_x, now_y, next_x, next_y) )
 800b46a:	3501      	adds	r5, #1
 800b46c:	42b5      	cmp	r5, r6
 800b46e:	d1df      	bne.n	800b430 <getNextState+0x54>
 800b470:	1e63      	subs	r3, r4, #1
 800b472:	42bb      	cmp	r3, r7
 800b474:	f000 80e0 	beq.w	800b638 <getNextState+0x25c>
                if( __RAW_TO_COLUMN_NE__(now_x, now_y, next_x, next_y) )
 800b478:	42bc      	cmp	r4, r7
 800b47a:	d1d9      	bne.n	800b430 <getNextState+0x54>
                    next_state->car = east;
 800b47c:	2302      	movs	r3, #2
 800b47e:	708b      	strb	r3, [r1, #2]
                    next_state->pos.x = now_state->pos.x + 1;
 800b480:	7803      	ldrb	r3, [r0, #0]
 800b482:	3301      	adds	r3, #1
 800b484:	700b      	strb	r3, [r1, #0]
                    next_state->pos.y = now_state->pos.y + 1;
 800b486:	7843      	ldrb	r3, [r0, #1]
                    now_state->dir = backright;
 800b488:	2203      	movs	r2, #3
                    next_state->pos.y = now_state->pos.y + 1;
 800b48a:	3301      	adds	r3, #1
 800b48c:	704b      	strb	r3, [r1, #1]
                    now_state->dir = backright;
 800b48e:	70c2      	strb	r2, [r0, #3]
                    return next_state;
 800b490:	e7ce      	b.n	800b430 <getNextState+0x54>
            if(next_node->rc == 1)
 800b492:	7953      	ldrb	r3, [r2, #5]
 800b494:	2b00      	cmp	r3, #0
 800b496:	d042      	beq.n	800b51e <getNextState+0x142>
                if( __COLUMN_TO_COLUMN_EAST__(now_x, now_y, next_x, next_y) )
 800b498:	1c6b      	adds	r3, r5, #1
 800b49a:	42b3      	cmp	r3, r6
 800b49c:	d056      	beq.n	800b54c <getNextState+0x170>
                if( __COLUMN_TO_COLUMN_WEST__(now_x, now_y, next_x, next_y) )
 800b49e:	3d01      	subs	r5, #1
 800b4a0:	42ae      	cmp	r6, r5
 800b4a2:	d1c5      	bne.n	800b430 <getNextState+0x54>
 800b4a4:	42bc      	cmp	r4, r7
 800b4a6:	d1c3      	bne.n	800b430 <getNextState+0x54>
                    next_state->car = west;
 800b4a8:	2306      	movs	r3, #6
 800b4aa:	708b      	strb	r3, [r1, #2]
                    next_state->pos.x = now_state->pos.x - 2; //次に壁を更新するタイミングは、この座標に到達したとき。コマンドでここまで進ませる.Uターンは既知区間であることを考慮する
 800b4ac:	7803      	ldrb	r3, [r0, #0]
                    now_state->dir = back;
 800b4ae:	2204      	movs	r2, #4
                    next_state->pos.x = now_state->pos.x - 2; //次に壁を更新するタイミングは、この座標に到達したとき。コマンドでここまで進ませる.Uターンは既知区間であることを考慮する
 800b4b0:	3b02      	subs	r3, #2
 800b4b2:	700b      	strb	r3, [r1, #0]
                    now_state->dir = back;
 800b4b4:	70c2      	strb	r2, [r0, #3]
                    return next_state;
 800b4b6:	e7bb      	b.n	800b430 <getNextState+0x54>
                if( __RAW_TO_RAW_NORTH__(now_x, now_y, next_x, next_y) )
 800b4b8:	42b5      	cmp	r5, r6
 800b4ba:	d1b9      	bne.n	800b430 <getNextState+0x54>
 800b4bc:	1c62      	adds	r2, r4, #1
 800b4be:	42ba      	cmp	r2, r7
 800b4c0:	f000 8096 	beq.w	800b5f0 <getNextState+0x214>
                if( __RAW_TO_RAW_SOUTH__(now_x, now_y, next_x, next_y) )
 800b4c4:	3c01      	subs	r4, #1
 800b4c6:	42a7      	cmp	r7, r4
 800b4c8:	d1b2      	bne.n	800b430 <getNextState+0x54>
                    next_state->car = south;
 800b4ca:	2204      	movs	r2, #4
 800b4cc:	708a      	strb	r2, [r1, #2]
                    next_state->pos.y = now_state->pos.y - 2; //次に壁を更新するタイミングは、この座標に到達したとき。コマンドでここまで進ませる.Uターンは既知区間であることを考慮する
 800b4ce:	7843      	ldrb	r3, [r0, #1]
 800b4d0:	3b02      	subs	r3, #2
 800b4d2:	704b      	strb	r3, [r1, #1]
                    now_state->dir = back;
 800b4d4:	70c2      	strb	r2, [r0, #3]
                    return next_state;
 800b4d6:	e7ab      	b.n	800b430 <getNextState+0x54>
                if( __RAW_TO_RAW_SOUTH__(now_x, now_y, next_x, next_y) )
 800b4d8:	42b5      	cmp	r5, r6
 800b4da:	d1a9      	bne.n	800b430 <getNextState+0x54>
 800b4dc:	1e62      	subs	r2, r4, #1
 800b4de:	42ba      	cmp	r2, r7
 800b4e0:	d07f      	beq.n	800b5e2 <getNextState+0x206>
                if( __RAW_TO_RAW_NORTH__(now_x, now_y, next_x, next_y) )
 800b4e2:	3401      	adds	r4, #1
 800b4e4:	42a7      	cmp	r7, r4
 800b4e6:	d1a3      	bne.n	800b430 <getNextState+0x54>
                    next_state->car = north;
 800b4e8:	708b      	strb	r3, [r1, #2]
                    next_state->pos.y = now_state->pos.y + 2;
 800b4ea:	7843      	ldrb	r3, [r0, #1]
                    now_state->dir = back;
 800b4ec:	2204      	movs	r2, #4
                    next_state->pos.y = now_state->pos.y + 2;
 800b4ee:	3302      	adds	r3, #2
 800b4f0:	704b      	strb	r3, [r1, #1]
                    now_state->dir = back;
 800b4f2:	70c2      	strb	r2, [r0, #3]
                    return next_state;
 800b4f4:	e79c      	b.n	800b430 <getNextState+0x54>
                if( __COLUMN_TO_RAW_NW__(now_x, now_y, next_x, next_y) )
 800b4f6:	42b2      	cmp	r2, r6
 800b4f8:	d065      	beq.n	800b5c6 <getNextState+0x1ea>
                if( __COLUMN_TO_RAW_SE__(now_x, now_y, next_x, next_y) )
 800b4fa:	42b5      	cmp	r5, r6
 800b4fc:	d198      	bne.n	800b430 <getNextState+0x54>
 800b4fe:	42bc      	cmp	r4, r7
 800b500:	f000 80ad 	beq.w	800b65e <getNextState+0x282>
                if( __COLUMN_TO_RAW_NE__(now_x, now_y, next_x, next_y) )
 800b504:	3401      	adds	r4, #1
 800b506:	42bc      	cmp	r4, r7
 800b508:	d192      	bne.n	800b430 <getNextState+0x54>
                    next_state->car = north;
 800b50a:	708b      	strb	r3, [r1, #2]
                    next_state->pos.x = now_state->pos.x + 1;
 800b50c:	7803      	ldrb	r3, [r0, #0]
 800b50e:	3301      	adds	r3, #1
 800b510:	700b      	strb	r3, [r1, #0]
                    next_state->pos.y = now_state->pos.y + 1;
 800b512:	7843      	ldrb	r3, [r0, #1]
                    now_state->dir = backleft;
 800b514:	2205      	movs	r2, #5
                    next_state->pos.y = now_state->pos.y + 1;
 800b516:	3301      	adds	r3, #1
 800b518:	704b      	strb	r3, [r1, #1]
                    now_state->dir = backleft;
 800b51a:	70c2      	strb	r2, [r0, #3]
                    return next_state;
 800b51c:	e788      	b.n	800b430 <getNextState+0x54>
                if( __COLUMN_TO_RAW_SE__(now_x, now_y, next_x, next_y) )
 800b51e:	42b5      	cmp	r5, r6
 800b520:	d02a      	beq.n	800b578 <getNextState+0x19c>
                if( __COLUMN_TO_RAW_NW__(now_x, now_y, next_x, next_y) )
 800b522:	3d01      	subs	r5, #1
 800b524:	42b5      	cmp	r5, r6
 800b526:	d183      	bne.n	800b430 <getNextState+0x54>
 800b528:	1c62      	adds	r2, r4, #1
 800b52a:	42ba      	cmp	r2, r7
 800b52c:	f000 8093 	beq.w	800b656 <getNextState+0x27a>
                if( __COLUMN_TO_RAW_SW__(now_x, now_y, next_x, next_y) )
 800b530:	42bc      	cmp	r4, r7
 800b532:	f47f af7d 	bne.w	800b430 <getNextState+0x54>
                    next_state->car = south;
 800b536:	2304      	movs	r3, #4
 800b538:	708b      	strb	r3, [r1, #2]
                    next_state->pos.x = now_state->pos.x - 1;
 800b53a:	7803      	ldrb	r3, [r0, #0]
 800b53c:	3b01      	subs	r3, #1
 800b53e:	700b      	strb	r3, [r1, #0]
                    next_state->pos.y = now_state->pos.y - 1;
 800b540:	7843      	ldrb	r3, [r0, #1]
                    now_state->dir = backleft;
 800b542:	2205      	movs	r2, #5
                    next_state->pos.y = now_state->pos.y - 1;
 800b544:	3b01      	subs	r3, #1
 800b546:	704b      	strb	r3, [r1, #1]
                    now_state->dir = backleft;
 800b548:	70c2      	strb	r2, [r0, #3]
                    return next_state;
 800b54a:	e771      	b.n	800b430 <getNextState+0x54>
                if( __COLUMN_TO_COLUMN_EAST__(now_x, now_y, next_x, next_y) )
 800b54c:	42bc      	cmp	r4, r7
 800b54e:	f47f af6f 	bne.w	800b430 <getNextState+0x54>
                    next_state->car = east;
 800b552:	2302      	movs	r3, #2
 800b554:	708b      	strb	r3, [r1, #2]
                    next_state->pos.x = now_state->pos.x + 1;
 800b556:	7803      	ldrb	r3, [r0, #0]
                    now_state->dir = front;
 800b558:	2200      	movs	r2, #0
                    next_state->pos.x = now_state->pos.x + 1;
 800b55a:	3301      	adds	r3, #1
 800b55c:	700b      	strb	r3, [r1, #0]
                    now_state->dir = front;
 800b55e:	70c2      	strb	r2, [r0, #3]
                    return next_state;
 800b560:	e766      	b.n	800b430 <getNextState+0x54>
                if( __COLUMN_TO_COLUMN_WEST__(now_x, now_y, next_x, next_y) )
 800b562:	42bc      	cmp	r4, r7
 800b564:	f47f af64 	bne.w	800b430 <getNextState+0x54>
                    next_state->car = west;
 800b568:	2306      	movs	r3, #6
 800b56a:	708b      	strb	r3, [r1, #2]
                    next_state->pos.x = now_state->pos.x - 1; //次に壁を更新するタイミングは、この座標に到達したとき。コマンドでここまで進ませる.Uターンは既知区間であることを考慮する
 800b56c:	7803      	ldrb	r3, [r0, #0]
                    now_state->dir = front;
 800b56e:	2200      	movs	r2, #0
                    next_state->pos.x = now_state->pos.x - 1; //次に壁を更新するタイミングは、この座標に到達したとき。コマンドでここまで進ませる.Uターンは既知区間であることを考慮する
 800b570:	3b01      	subs	r3, #1
 800b572:	700b      	strb	r3, [r1, #0]
                    now_state->dir = front;
 800b574:	70c2      	strb	r2, [r0, #3]
                    return next_state;
 800b576:	e75b      	b.n	800b430 <getNextState+0x54>
                if( __COLUMN_TO_RAW_SE__(now_x, now_y, next_x, next_y) )
 800b578:	42bc      	cmp	r4, r7
 800b57a:	d04d      	beq.n	800b618 <getNextState+0x23c>
                if( __COLUMN_TO_RAW_NE__(now_x, now_y, next_x, next_y) )
 800b57c:	3401      	adds	r4, #1
 800b57e:	42bc      	cmp	r4, r7
 800b580:	f47f af56 	bne.w	800b430 <getNextState+0x54>
                    next_state->car = north;
 800b584:	708b      	strb	r3, [r1, #2]
                    next_state->pos.y = now_state->pos.y + 1;
 800b586:	7843      	ldrb	r3, [r0, #1]
                    now_state->dir = left;
 800b588:	2206      	movs	r2, #6
                    next_state->pos.y = now_state->pos.y + 1;
 800b58a:	3301      	adds	r3, #1
 800b58c:	704b      	strb	r3, [r1, #1]
                    now_state->dir = left;
 800b58e:	70c2      	strb	r2, [r0, #3]
                    return next_state;
 800b590:	e74e      	b.n	800b430 <getNextState+0x54>
                if( __RAW_TO_COLUMN_NE__(now_x, now_y, next_x, next_y) )
 800b592:	42bc      	cmp	r4, r7
 800b594:	d032      	beq.n	800b5fc <getNextState+0x220>
                if( __RAW_TO_COLUMN_NW__(now_x, now_y, next_x, next_y) )
 800b596:	42b5      	cmp	r5, r6
 800b598:	f104 34ff 	add.w	r4, r4, #4294967295
 800b59c:	f43f af3c 	beq.w	800b418 <getNextState+0x3c>
                if( __RAW_TO_COLUMN_SE__(now_x, now_y, next_x, next_y) )
 800b5a0:	42bc      	cmp	r4, r7
 800b5a2:	f47f af45 	bne.w	800b430 <getNextState+0x54>
                    next_state->car = east;
 800b5a6:	2302      	movs	r3, #2
 800b5a8:	708b      	strb	r3, [r1, #2]
                    next_state->pos.x = now_state->pos.x + 1;
 800b5aa:	7803      	ldrb	r3, [r0, #0]
 800b5ac:	3301      	adds	r3, #1
 800b5ae:	e7c6      	b.n	800b53e <getNextState+0x162>
                if( __RAW_TO_COLUMN_SW__(now_x, now_y, next_x, next_y) )
 800b5b0:	1e63      	subs	r3, r4, #1
 800b5b2:	42bb      	cmp	r3, r7
 800b5b4:	d038      	beq.n	800b628 <getNextState+0x24c>
                if( __RAW_TO_COLUMN_NW__(now_x, now_y, next_x, next_y) )
 800b5b6:	42bc      	cmp	r4, r7
 800b5b8:	f47f af3a 	bne.w	800b430 <getNextState+0x54>
                    next_state->car = west;
 800b5bc:	2306      	movs	r3, #6
 800b5be:	708b      	strb	r3, [r1, #2]
                    next_state->pos.x = now_state->pos.x - 1;
 800b5c0:	7803      	ldrb	r3, [r0, #0]
 800b5c2:	3b01      	subs	r3, #1
 800b5c4:	e7a4      	b.n	800b510 <getNextState+0x134>
                if( __COLUMN_TO_RAW_NW__(now_x, now_y, next_x, next_y) )
 800b5c6:	1c62      	adds	r2, r4, #1
 800b5c8:	42ba      	cmp	r2, r7
 800b5ca:	d01e      	beq.n	800b60a <getNextState+0x22e>
                if( __COLUMN_TO_RAW_SW__(now_x, now_y, next_x, next_y) )
 800b5cc:	42bc      	cmp	r4, r7
 800b5ce:	f47f af2f 	bne.w	800b430 <getNextState+0x54>
                    next_state->car = south;
 800b5d2:	2304      	movs	r3, #4
 800b5d4:	708b      	strb	r3, [r1, #2]
                    next_state->pos.y = now_state->pos.y - 1;
 800b5d6:	7843      	ldrb	r3, [r0, #1]
                    now_state->dir = left;
 800b5d8:	2206      	movs	r2, #6
                    next_state->pos.y = now_state->pos.y - 1;
 800b5da:	3b01      	subs	r3, #1
 800b5dc:	704b      	strb	r3, [r1, #1]
                    now_state->dir = left;
 800b5de:	70c2      	strb	r2, [r0, #3]
                    return next_state;
 800b5e0:	e726      	b.n	800b430 <getNextState+0x54>
                    next_state->car = south;
 800b5e2:	2204      	movs	r2, #4
 800b5e4:	708a      	strb	r2, [r1, #2]
                    next_state->pos.y = now_state->pos.y - 1; //次に壁を更新するタイミングは、この座標に到達したとき。コマンドでここまで進ませる.Uターンは既知区間であることを考慮する
 800b5e6:	7842      	ldrb	r2, [r0, #1]
 800b5e8:	3a01      	subs	r2, #1
 800b5ea:	704a      	strb	r2, [r1, #1]
                    now_state->dir = front;
 800b5ec:	70c3      	strb	r3, [r0, #3]
                    return next_state;
 800b5ee:	e71f      	b.n	800b430 <getNextState+0x54>
                    next_state->car = north;
 800b5f0:	708b      	strb	r3, [r1, #2]
                    next_state->pos.y = now_state->pos.y + 1;
 800b5f2:	7842      	ldrb	r2, [r0, #1]
 800b5f4:	3201      	adds	r2, #1
 800b5f6:	704a      	strb	r2, [r1, #1]
                    now_state->dir = front;
 800b5f8:	70c3      	strb	r3, [r0, #3]
                    return next_state;
 800b5fa:	e719      	b.n	800b430 <getNextState+0x54>
                    next_state->car = east;
 800b5fc:	2202      	movs	r2, #2
 800b5fe:	708a      	strb	r2, [r1, #2]
                    next_state->pos.x = now_state->pos.x + 1;
 800b600:	7803      	ldrb	r3, [r0, #0]
 800b602:	3301      	adds	r3, #1
 800b604:	700b      	strb	r3, [r1, #0]
                    now_state->dir = right;
 800b606:	70c2      	strb	r2, [r0, #3]
                    return next_state;
 800b608:	e712      	b.n	800b430 <getNextState+0x54>
                    next_state->car = north;
 800b60a:	708b      	strb	r3, [r1, #2]
                    next_state->pos.y = now_state->pos.y + 1;
 800b60c:	7843      	ldrb	r3, [r0, #1]
                    now_state->dir = right;
 800b60e:	2202      	movs	r2, #2
                    next_state->pos.y = now_state->pos.y + 1;
 800b610:	3301      	adds	r3, #1
 800b612:	704b      	strb	r3, [r1, #1]
                    now_state->dir = right;
 800b614:	70c2      	strb	r2, [r0, #3]
                    return next_state;
 800b616:	e70b      	b.n	800b430 <getNextState+0x54>
                    next_state->car = south;
 800b618:	2304      	movs	r3, #4
 800b61a:	708b      	strb	r3, [r1, #2]
                    next_state->pos.y = now_state->pos.y - 1;
 800b61c:	7843      	ldrb	r3, [r0, #1]
                    now_state->dir = right;
 800b61e:	2202      	movs	r2, #2
                    next_state->pos.y = now_state->pos.y - 1;
 800b620:	3b01      	subs	r3, #1
 800b622:	704b      	strb	r3, [r1, #1]
                    now_state->dir = right;
 800b624:	70c2      	strb	r2, [r0, #3]
                    return next_state;
 800b626:	e703      	b.n	800b430 <getNextState+0x54>
                    next_state->car = west;
 800b628:	2306      	movs	r3, #6
 800b62a:	708b      	strb	r3, [r1, #2]
                    next_state->pos.x = now_state->pos.x - 1;
 800b62c:	7803      	ldrb	r3, [r0, #0]
                    now_state->dir = right;
 800b62e:	2202      	movs	r2, #2
                    next_state->pos.x = now_state->pos.x - 1;
 800b630:	3b01      	subs	r3, #1
 800b632:	700b      	strb	r3, [r1, #0]
                    now_state->dir = right;
 800b634:	70c2      	strb	r2, [r0, #3]
                    return next_state;
 800b636:	e6fb      	b.n	800b430 <getNextState+0x54>
                    next_state->car = east;
 800b638:	2302      	movs	r3, #2
 800b63a:	708b      	strb	r3, [r1, #2]
                    next_state->pos.x = now_state->pos.x + 1;
 800b63c:	7803      	ldrb	r3, [r0, #0]
                    now_state->dir = left;
 800b63e:	2206      	movs	r2, #6
                    next_state->pos.x = now_state->pos.x + 1;
 800b640:	3301      	adds	r3, #1
 800b642:	700b      	strb	r3, [r1, #0]
                    now_state->dir = left;
 800b644:	70c2      	strb	r2, [r0, #3]
                    return next_state;
 800b646:	e6f3      	b.n	800b430 <getNextState+0x54>
                    next_state->car = west;
 800b648:	2206      	movs	r2, #6
 800b64a:	708a      	strb	r2, [r1, #2]
                    next_state->pos.x = now_state->pos.x - 1;
 800b64c:	7803      	ldrb	r3, [r0, #0]
 800b64e:	3b01      	subs	r3, #1
 800b650:	700b      	strb	r3, [r1, #0]
                    now_state->dir = left;
 800b652:	70c2      	strb	r2, [r0, #3]
                    return next_state;
 800b654:	e6ec      	b.n	800b430 <getNextState+0x54>
                    next_state->car = north;
 800b656:	708b      	strb	r3, [r1, #2]
                    next_state->pos.x = now_state->pos.x - 1;
 800b658:	7803      	ldrb	r3, [r0, #0]
 800b65a:	3b01      	subs	r3, #1
 800b65c:	e712      	b.n	800b484 <getNextState+0xa8>
                    next_state->car = south;
 800b65e:	2304      	movs	r3, #4
 800b660:	708b      	strb	r3, [r1, #2]
                    next_state->pos.x = now_state->pos.x + 1;
 800b662:	7803      	ldrb	r3, [r0, #0]
 800b664:	3301      	adds	r3, #1
 800b666:	e6dd      	b.n	800b424 <getNextState+0x48>

0800b668 <initSearchData>:
}


int Num_Nodes = 0;
void initSearchData(maze_node *my_maze, profile *Mouse)
{
 800b668:	b570      	push	{r4, r5, r6, lr}
 800b66a:	b082      	sub	sp, #8
 800b66c:	4606      	mov	r6, r0
 800b66e:	460c      	mov	r4, r1
    initMaze(my_maze);
 800b670:	f7ff f866 	bl	800a740 <initMaze>
 800b674:	4602      	mov	r2, r0
 800b676:	f500 7534 	add.w	r5, r0, #720	; 0x2d0
 800b67a:	4603      	mov	r3, r0
            maze->RawNode[i][j].weight = MAX_WEIGHT;  
 800b67c:	f640 70ff 	movw	r0, #4095	; 0xfff
 800b680:	f103 0150 	add.w	r1, r3, #80	; 0x50
 800b684:	8058      	strh	r0, [r3, #2]
 800b686:	3308      	adds	r3, #8
        for(int j=0; j < NUMBER_OF_SQUARES_Y+1; j++)
 800b688:	428b      	cmp	r3, r1
 800b68a:	d1fb      	bne.n	800b684 <initSearchData+0x1c>
    for(int i=0; i < NUMBER_OF_SQUARES_X; i++)
 800b68c:	42ab      	cmp	r3, r5
 800b68e:	d1f7      	bne.n	800b680 <initSearchData+0x18>
            maze->ColumnNode[i][j].weight = MAX_WEIGHT;
 800b690:	f640 70ff 	movw	r0, #4095	; 0xfff
 800b694:	f102 0148 	add.w	r1, r2, #72	; 0x48
 800b698:	f8a2 02d2 	strh.w	r0, [r2, #722]	; 0x2d2
 800b69c:	3208      	adds	r2, #8
        for(int j=0; j < NUMBER_OF_SQUARES_Y; j++)
 800b69e:	4291      	cmp	r1, r2
 800b6a0:	d1fa      	bne.n	800b698 <initSearchData+0x30>
    for(int i=0; i < NUMBER_OF_SQUARES_X+1; i++)
 800b6a2:	4299      	cmp	r1, r3
 800b6a4:	d1f6      	bne.n	800b694 <initSearchData+0x2c>
    pos->y = y;
 800b6a6:	2200      	movs	r2, #0
 800b6a8:	2301      	movs	r3, #1
    pos->x = x;
 800b6aa:	2106      	movs	r1, #6
 800b6ac:	2007      	movs	r0, #7
 800b6ae:	70a0      	strb	r0, [r4, #2]
    pos->y = y;
 800b6b0:	70e3      	strb	r3, [r4, #3]
 800b6b2:	7563      	strb	r3, [r4, #21]
    prof->next.dir = 1; //not use while running
 800b6b4:	75e3      	strb	r3, [r4, #23]
    prof->now.node = &(maze->RawNode[0][0]);
 800b6b6:	6126      	str	r6, [r4, #16]
    pos->x = x;
 800b6b8:	7021      	strb	r1, [r4, #0]
    pos->y = y;
 800b6ba:	7062      	strb	r2, [r4, #1]
    pos->x = x;
 800b6bc:	7222      	strb	r2, [r4, #8]
    pos->y = y;
 800b6be:	7262      	strb	r2, [r4, #9]
    st->car = car;
 800b6c0:	72a2      	strb	r2, [r4, #10]
    prof->now.dir = front;
 800b6c2:	72e2      	strb	r2, [r4, #11]
    pos->x = x;
 800b6c4:	7522      	strb	r2, [r4, #20]
    st->car = car;
 800b6c6:	75a2      	strb	r2, [r4, #22]
    existence->north = state[0];
 800b6c8:	2054      	movs	r0, #84	; 0x54
    initProfile(Mouse, my_maze);

    Mouse->now.node = &(my_maze->RawNode[0][0]);
    Mouse->next.node = &(my_maze->RawNode[0][1]);
    //スタート座標にいる状態で、現在の重みを更新
     updateAllNodeWeight(my_maze, Mouse->goal_lesser.x, Mouse->goal_lesser.y, GOAL_SIZE_X, GOAL_SIZE_Y, 0x01);
 800b6ca:	9301      	str	r3, [sp, #4]
    existence->north = state[0];
 800b6cc:	234a      	movs	r3, #74	; 0x4a
 800b6ce:	7320      	strb	r0, [r4, #12]
 800b6d0:	7623      	strb	r3, [r4, #24]
    prof->next.node = &(maze->RawNode[0][1]);
 800b6d2:	f106 0008 	add.w	r0, r6, #8
     updateAllNodeWeight(my_maze, Mouse->goal_lesser.x, Mouse->goal_lesser.y, GOAL_SIZE_X, GOAL_SIZE_Y, 0x01);
 800b6d6:	2302      	movs	r3, #2
    prof->next.node = &(maze->RawNode[0][1]);
 800b6d8:	61e0      	str	r0, [r4, #28]
     updateAllNodeWeight(my_maze, Mouse->goal_lesser.x, Mouse->goal_lesser.y, GOAL_SIZE_X, GOAL_SIZE_Y, 0x01);
 800b6da:	4630      	mov	r0, r6
 800b6dc:	9300      	str	r3, [sp, #0]
 800b6de:	f7ff f92b 	bl	800a938 <updateAllNodeWeight>
//     updateAllNodeWeight(&my_map, my_mouse.goal_lesser.x, my_mouse.goal_lesser.y, GOAL_SIZE_X, GOAL_SIZE_Y, 0x01);
}
 800b6e2:	b002      	add	sp, #8
 800b6e4:	bd70      	pop	{r4, r5, r6, pc}
 800b6e6:	bf00      	nop

0800b6e8 <getPathNode>:

Path FastPath[16*16]={0};

//最短走行用の経路配列作成
void getPathNode(maze_node *maze, profile *mouse)
{
 800b6e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b6ec:	4b8a      	ldr	r3, [pc, #552]	; (800b918 <getPathNode+0x230>)
 800b6ee:	460c      	mov	r4, r1
 800b6f0:	b085      	sub	sp, #20
 800b6f2:	4606      	mov	r6, r0
 800b6f4:	f503 5180 	add.w	r1, r3, #4096	; 0x1000

	//ノード情報は既にある前提
	for(int i=0; i < 16*16; i++)
		FastPath[i].path_ahead = false;
 800b6f8:	2200      	movs	r2, #0
 800b6fa:	735a      	strb	r2, [r3, #13]
 800b6fc:	3310      	adds	r3, #16
	for(int i=0; i < 16*16; i++)
 800b6fe:	428b      	cmp	r3, r1
 800b700:	d1fb      	bne.n	800b6fa <getPathNode+0x12>
	mouse->now.wall.north = maze->RawNode[now_x][now_y+1].existence;//北
 800b702:	7a22      	ldrb	r2, [r4, #8]
 800b704:	f894 c009 	ldrb.w	ip, [r4, #9]
 800b708:	7b23      	ldrb	r3, [r4, #12]

	static int path_num=0;
	//最初の次ノードは既に入っているので格納
	getNowWallVirtual(maze, mouse, mouse->now.pos.x, mouse->now.pos.y);//0,1の壁がうまく更新できてない
	getNextWallVirtual(maze, mouse, mouse->next.pos.x, mouse->next.pos.y);
 800b70a:	7d25      	ldrb	r5, [r4, #20]
 800b70c:	f894 9015 	ldrb.w	r9, [r4, #21]
	mouse->next.wall.north = maze->RawNode[next_x][next_y+1].existence;//北
 800b710:	f894 e018 	ldrb.w	lr, [r4, #24]
	FastPath[path_num].path_state = mouse->now;
 800b714:	f8df b20c 	ldr.w	fp, [pc, #524]	; 800b924 <getPathNode+0x23c>
	mouse->now.wall.north = maze->RawNode[now_x][now_y+1].existence;//北
 800b718:	eb02 0082 	add.w	r0, r2, r2, lsl #2
 800b71c:	0040      	lsls	r0, r0, #1
 800b71e:	f10c 0801 	add.w	r8, ip, #1
 800b722:	4480      	add	r8, r0
	mouse->now.wall.east = maze->ColumnNode[now_x+1][now_y].existence;//東
 800b724:	1c51      	adds	r1, r2, #1
	mouse->now.wall.north = maze->RawNode[now_x][now_y+1].existence;//北
 800b726:	f816 8038 	ldrb.w	r8, [r6, r8, lsl #3]
	FastPath[path_num].path_state = mouse->now;
 800b72a:	f8db 7000 	ldr.w	r7, [fp]
	mouse->now.wall.east = maze->ColumnNode[now_x+1][now_y].existence;//東
 800b72e:	eb01 01c1 	add.w	r1, r1, r1, lsl #3
 800b732:	4461      	add	r1, ip
	mouse->now.wall.north = maze->RawNode[now_x][now_y+1].existence;//北
 800b734:	f368 0301 	bfi	r3, r8, #0, #2
	mouse->now.wall.east = maze->ColumnNode[now_x+1][now_y].existence;//東
 800b738:	315a      	adds	r1, #90	; 0x5a
	mouse->now.wall.north = maze->RawNode[now_x][now_y+1].existence;//北
 800b73a:	7323      	strb	r3, [r4, #12]
	mouse->now.wall.east = maze->ColumnNode[now_x+1][now_y].existence;//東
 800b73c:	f816 1031 	ldrb.w	r1, [r6, r1, lsl #3]
	mouse->now.wall.south = maze->RawNode[now_x][now_y].existence;//南
 800b740:	4460      	add	r0, ip
	mouse->now.wall.east = maze->ColumnNode[now_x+1][now_y].existence;//東
 800b742:	f361 0383 	bfi	r3, r1, #2, #2
 800b746:	7323      	strb	r3, [r4, #12]
	mouse->now.wall.south = maze->RawNode[now_x][now_y].existence;//南
 800b748:	f816 1030 	ldrb.w	r1, [r6, r0, lsl #3]
	mouse->now.wall.west = maze->ColumnNode[now_x][now_y].existence;//西
 800b74c:	eb02 02c2 	add.w	r2, r2, r2, lsl #3
 800b750:	4462      	add	r2, ip
	mouse->now.wall.south = maze->RawNode[now_x][now_y].existence;//南
 800b752:	f361 1305 	bfi	r3, r1, #4, #2
	mouse->now.wall.west = maze->ColumnNode[now_x][now_y].existence;//西
 800b756:	325a      	adds	r2, #90	; 0x5a
	mouse->now.wall.south = maze->RawNode[now_x][now_y].existence;//南
 800b758:	7323      	strb	r3, [r4, #12]
	mouse->now.wall.west = maze->ColumnNode[now_x][now_y].existence;//西
 800b75a:	f816 0032 	ldrb.w	r0, [r6, r2, lsl #3]
	mouse->next.wall.north = maze->RawNode[next_x][next_y+1].existence;//北
 800b75e:	eb05 0185 	add.w	r1, r5, r5, lsl #2
 800b762:	0049      	lsls	r1, r1, #1
 800b764:	f109 0201 	add.w	r2, r9, #1
	mouse->now.wall.west = maze->ColumnNode[now_x][now_y].existence;//西
 800b768:	f360 1387 	bfi	r3, r0, #6, #2
	mouse->next.wall.north = maze->RawNode[next_x][next_y+1].existence;//北
 800b76c:	440a      	add	r2, r1
	mouse->now.wall.west = maze->ColumnNode[now_x][now_y].existence;//西
 800b76e:	7323      	strb	r3, [r4, #12]
	mouse->next.wall.north = maze->RawNode[next_x][next_y+1].existence;//北
 800b770:	f816 3032 	ldrb.w	r3, [r6, r2, lsl #3]
	mouse->next.wall.east = maze->ColumnNode[next_x+1][next_y].existence;//東
 800b774:	1c6a      	adds	r2, r5, #1
 800b776:	eb02 02c2 	add.w	r2, r2, r2, lsl #3
	mouse->next.wall.north = maze->RawNode[next_x][next_y+1].existence;//北
 800b77a:	f003 0303 	and.w	r3, r3, #3
	mouse->next.wall.east = maze->ColumnNode[next_x+1][next_y].existence;//東
 800b77e:	444a      	add	r2, r9
	mouse->next.wall.north = maze->RawNode[next_x][next_y+1].existence;//北
 800b780:	f363 0e01 	bfi	lr, r3, #0, #2
	mouse->next.wall.east = maze->ColumnNode[next_x+1][next_y].existence;//東
 800b784:	325a      	adds	r2, #90	; 0x5a
	mouse->next.wall.north = maze->RawNode[next_x][next_y+1].existence;//北
 800b786:	f884 e018 	strb.w	lr, [r4, #24]
	mouse->next.wall.east = maze->ColumnNode[next_x+1][next_y].existence;//東
 800b78a:	f816 e032 	ldrb.w	lr, [r6, r2, lsl #3]
 800b78e:	7e22      	ldrb	r2, [r4, #24]
	mouse->next.wall.north = maze->RawNode[next_x][next_y+1].existence;//北
 800b790:	9300      	str	r3, [sp, #0]
	mouse->next.wall.east = maze->ColumnNode[next_x+1][next_y].existence;//東
 800b792:	f00e 0e03 	and.w	lr, lr, #3
 800b796:	f36e 0283 	bfi	r2, lr, #2, #2
	mouse->next.wall.south = maze->RawNode[next_x][next_y].existence;//南
 800b79a:	4449      	add	r1, r9
	mouse->next.wall.east = maze->ColumnNode[next_x+1][next_y].existence;//東
 800b79c:	7622      	strb	r2, [r4, #24]
	mouse->next.wall.south = maze->RawNode[next_x][next_y].existence;//南
 800b79e:	f816 8031 	ldrb.w	r8, [r6, r1, lsl #3]
	FastPath[path_num].path_state = mouse->now;
 800b7a2:	4b5d      	ldr	r3, [pc, #372]	; (800b918 <getPathNode+0x230>)
	mouse->next.wall.south = maze->RawNode[next_x][next_y].existence;//南
 800b7a4:	b2d1      	uxtb	r1, r2
	mouse->next.wall.west = maze->ColumnNode[next_x][next_y].existence;//西
 800b7a6:	eb05 02c5 	add.w	r2, r5, r5, lsl #3
	mouse->next.wall.south = maze->RawNode[next_x][next_y].existence;//南
 800b7aa:	f008 0803 	and.w	r8, r8, #3
	mouse->next.wall.west = maze->ColumnNode[next_x][next_y].existence;//西
 800b7ae:	444a      	add	r2, r9
	mouse->next.wall.south = maze->RawNode[next_x][next_y].existence;//南
 800b7b0:	f368 1105 	bfi	r1, r8, #4, #2
	mouse->next.wall.west = maze->ColumnNode[next_x][next_y].existence;//西
 800b7b4:	325a      	adds	r2, #90	; 0x5a
	mouse->next.wall.south = maze->RawNode[next_x][next_y].existence;//南
 800b7b6:	7621      	strb	r1, [r4, #24]
	mouse->next.wall.west = maze->ColumnNode[next_x][next_y].existence;//西
 800b7b8:	f816 a032 	ldrb.w	sl, [r6, r2, lsl #3]
 800b7bc:	b2ca      	uxtb	r2, r1
 800b7be:	f00a 0a03 	and.w	sl, sl, #3
 800b7c2:	f36a 1287 	bfi	r2, sl, #6, #2
 800b7c6:	7622      	strb	r2, [r4, #24]
	FastPath[path_num].path_state = mouse->now;
 800b7c8:	f104 0208 	add.w	r2, r4, #8
 800b7cc:	9203      	str	r2, [sp, #12]
 800b7ce:	ca07      	ldmia	r2, {r0, r1, r2}
 800b7d0:	eb03 1c07 	add.w	ip, r3, r7, lsl #4
 800b7d4:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
	FastPath[path_num].path_ahead = true;
 800b7d8:	2201      	movs	r2, #1
 800b7da:	f88c 200d 	strb.w	r2, [ip, #13]
    prof->now.wall.north = prof->next.wall.north;
 800b7de:	9b00      	ldr	r3, [sp, #0]
 800b7e0:	7b20      	ldrb	r0, [r4, #12]
    prof->now.car = prof->next.car;
 800b7e2:	7da1      	ldrb	r1, [r4, #22]
    prof->now.node = prof->next.node;//ポインタ渡し
 800b7e4:	69e2      	ldr	r2, [r4, #28]
    prof->now.pos.x = prof->next.pos.x;
 800b7e6:	7225      	strb	r5, [r4, #8]
    prof->now.wall.north = prof->next.wall.north;
 800b7e8:	f363 0001 	bfi	r0, r3, #0, #2
    prof->now.wall.east = prof->next.wall.east;
 800b7ec:	4603      	mov	r3, r0
 800b7ee:	f36e 0383 	bfi	r3, lr, #2, #2
    prof->now.wall.south = prof->next.wall.south;
 800b7f2:	f368 1305 	bfi	r3, r8, #4, #2
    prof->now.wall.west = prof->next.wall.west;
 800b7f6:	f36a 1387 	bfi	r3, sl, #6, #2
 800b7fa:	7323      	strb	r3, [r4, #12]
 800b7fc:	f104 0314 	add.w	r3, r4, #20
    prof->now.pos.y = prof->next.pos.y;
 800b800:	f884 9009 	strb.w	r9, [r4, #9]
    prof->now.car = prof->next.car;
 800b804:	72a1      	strb	r1, [r4, #10]
    prof->now.node = prof->next.node;//ポインタ渡し
 800b806:	6122      	str	r2, [r4, #16]
 800b808:	9302      	str	r3, [sp, #8]
 800b80a:	46ba      	mov	sl, r7
 800b80c:	9600      	str	r6, [sp, #0]
 800b80e:	e061      	b.n	800b8d4 <getPathNode+0x1ec>
	//ゴールなら減速.　なのでwhile文
	while(! ((mouse->goal_lesser.x <= mouse->now.pos.x && mouse->now.pos.x <= mouse->goal_larger.x) && (mouse->goal_lesser.y <= mouse->now.pos.y && mouse->now.pos.y <= mouse->goal_larger.y))  ) //nextがゴール到達するまでループ
	{
		//0,1。前方。
//		getNowWallVirtual(my_mouse.now.pos.x, my_mouse.now.pos.y);
		mouse->next.node = getNextNode(maze, mouse->now.car, mouse->now.node, 0x03);
 800b810:	6922      	ldr	r2, [r4, #16]
 800b812:	7aa1      	ldrb	r1, [r4, #10]
 800b814:	f7ff fb88 	bl	800af28 <getNextNode>
		getNextState(&(mouse->now),&(mouse->next), mouse->next.node);
 800b818:	e9dd 1602 	ldrd	r1, r6, [sp, #8]
		mouse->next.node = getNextNode(maze, mouse->now.car, mouse->now.node, 0x03);
 800b81c:	4602      	mov	r2, r0
 800b81e:	61e0      	str	r0, [r4, #28]
		getNextState(&(mouse->now),&(mouse->next), mouse->next.node);
 800b820:	4630      	mov	r0, r6
 800b822:	f7ff fddb 	bl	800b3dc <getNextState>
		getNextWallVirtual(maze, mouse, mouse->next.pos.x, mouse->next.pos.y);
 800b826:	7d23      	ldrb	r3, [r4, #20]
 800b828:	7d65      	ldrb	r5, [r4, #21]
	mouse->next.wall.north = maze->RawNode[next_x][next_y+1].existence;//北
 800b82a:	9f00      	ldr	r7, [sp, #0]
    prof->now.car = prof->next.car;
 800b82c:	7da2      	ldrb	r2, [r4, #22]
 800b82e:	9201      	str	r2, [sp, #4]
	mouse->next.wall.north = maze->RawNode[next_x][next_y+1].existence;//北
 800b830:	eb03 0183 	add.w	r1, r3, r3, lsl #2
 800b834:	0049      	lsls	r1, r1, #1
 800b836:	f105 0c01 	add.w	ip, r5, #1
 800b83a:	448c      	add	ip, r1
	mouse->next.wall.east = maze->ColumnNode[next_x+1][next_y].existence;//東
 800b83c:	1c5a      	adds	r2, r3, #1
	mouse->next.wall.north = maze->RawNode[next_x][next_y+1].existence;//北
 800b83e:	f817 903c 	ldrb.w	r9, [r7, ip, lsl #3]
 800b842:	7e20      	ldrb	r0, [r4, #24]
	mouse->next.wall.east = maze->ColumnNode[next_x+1][next_y].existence;//東
 800b844:	eb02 02c2 	add.w	r2, r2, r2, lsl #3
	mouse->next.wall.north = maze->RawNode[next_x][next_y+1].existence;//北
 800b848:	f009 0903 	and.w	r9, r9, #3
	mouse->next.wall.east = maze->ColumnNode[next_x+1][next_y].existence;//東
 800b84c:	442a      	add	r2, r5
	mouse->next.wall.north = maze->RawNode[next_x][next_y+1].existence;//北
 800b84e:	f369 0001 	bfi	r0, r9, #0, #2
	mouse->next.wall.east = maze->ColumnNode[next_x+1][next_y].existence;//東
 800b852:	325a      	adds	r2, #90	; 0x5a
	mouse->next.wall.north = maze->RawNode[next_x][next_y+1].existence;//北
 800b854:	7620      	strb	r0, [r4, #24]
	mouse->next.wall.east = maze->ColumnNode[next_x+1][next_y].existence;//東
 800b856:	f817 8032 	ldrb.w	r8, [r7, r2, lsl #3]
 800b85a:	7e22      	ldrb	r2, [r4, #24]
 800b85c:	f008 0803 	and.w	r8, r8, #3
	mouse->next.wall.south = maze->RawNode[next_x][next_y].existence;//南
 800b860:	4429      	add	r1, r5
	mouse->next.wall.east = maze->ColumnNode[next_x+1][next_y].existence;//東
 800b862:	f368 0283 	bfi	r2, r8, #2, #2
 800b866:	7622      	strb	r2, [r4, #24]
	mouse->next.wall.south = maze->RawNode[next_x][next_y].existence;//南
 800b868:	f817 e031 	ldrb.w	lr, [r7, r1, lsl #3]
 800b86c:	7e21      	ldrb	r1, [r4, #24]
	mouse->next.wall.west = maze->ColumnNode[next_x][next_y].existence;//西
 800b86e:	eb03 02c3 	add.w	r2, r3, r3, lsl #3
	mouse->next.wall.south = maze->RawNode[next_x][next_y].existence;//南
 800b872:	f00e 0e03 	and.w	lr, lr, #3
	mouse->next.wall.west = maze->ColumnNode[next_x][next_y].existence;//西
 800b876:	442a      	add	r2, r5
	mouse->next.wall.south = maze->RawNode[next_x][next_y].existence;//南
 800b878:	f36e 1105 	bfi	r1, lr, #4, #2
	mouse->next.wall.west = maze->ColumnNode[next_x][next_y].existence;//西
 800b87c:	325a      	adds	r2, #90	; 0x5a
	mouse->next.wall.south = maze->RawNode[next_x][next_y].existence;//南
 800b87e:	7621      	strb	r1, [r4, #24]
	mouse->next.wall.west = maze->ColumnNode[next_x][next_y].existence;//西
 800b880:	f817 c032 	ldrb.w	ip, [r7, r2, lsl #3]
 800b884:	b2ca      	uxtb	r2, r1
 800b886:	f00c 0c03 	and.w	ip, ip, #3
 800b88a:	f36c 1287 	bfi	r2, ip, #6, #2
 800b88e:	7622      	strb	r2, [r4, #24]
//			printf("now\r\n");
//			printState(&(my_mouse.now));
		path_num ++;
		//次の方向はこの時点で入れる.nextstateがわかった時点で入れたい
		FastPath[path_num].path_state = mouse->now; //next.dir
 800b890:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 800b894:	4e20      	ldr	r6, [pc, #128]	; (800b918 <getPathNode+0x230>)
		path_num ++;
 800b896:	f10a 0701 	add.w	r7, sl, #1
		FastPath[path_num].path_state = mouse->now; //next.dir
 800b89a:	eb06 1a07 	add.w	sl, r6, r7, lsl #4
 800b89e:	e88a 0007 	stmia.w	sl, {r0, r1, r2}
    prof->now.wall.north = prof->next.wall.north;
 800b8a2:	7b21      	ldrb	r1, [r4, #12]
    prof->now.pos.x = prof->next.pos.x;
 800b8a4:	7223      	strb	r3, [r4, #8]
    prof->now.wall.north = prof->next.wall.north;
 800b8a6:	f369 0101 	bfi	r1, r9, #0, #2
    prof->now.wall.east = prof->next.wall.east;
 800b8aa:	460b      	mov	r3, r1
 800b8ac:	f368 0383 	bfi	r3, r8, #2, #2
    prof->now.wall.south = prof->next.wall.south;
 800b8b0:	f36e 1305 	bfi	r3, lr, #4, #2
    prof->now.wall.west = prof->next.wall.west;
 800b8b4:	f36c 1387 	bfi	r3, ip, #6, #2
    prof->now.node = prof->next.node;//ポインタ渡し
 800b8b8:	69e2      	ldr	r2, [r4, #28]
    prof->now.wall.west = prof->next.wall.west;
 800b8ba:	7323      	strb	r3, [r4, #12]
    prof->now.car = prof->next.car;
 800b8bc:	9b01      	ldr	r3, [sp, #4]
    prof->now.pos.y = prof->next.pos.y;
 800b8be:	7265      	strb	r5, [r4, #9]
    prof->now.car = prof->next.car;
 800b8c0:	72a3      	strb	r3, [r4, #10]
    prof->now.node = prof->next.node;//ポインタ渡し
 800b8c2:	6122      	str	r2, [r4, #16]
		shiftState(mouse);
//			printf("next\r\n");
//			printState(&(my_mouse.next));

			printf("\r\n");
 800b8c4:	4815      	ldr	r0, [pc, #84]	; (800b91c <getPathNode+0x234>)
		path_num ++;
 800b8c6:	f8cb 7000 	str.w	r7, [fp]
			printf("\r\n");
 800b8ca:	f007 fdd9 	bl	8013480 <puts>
 800b8ce:	f8db a000 	ldr.w	sl, [fp]
 800b8d2:	7a25      	ldrb	r5, [r4, #8]
	while(! ((mouse->goal_lesser.x <= mouse->now.pos.x && mouse->now.pos.x <= mouse->goal_larger.x) && (mouse->goal_lesser.y <= mouse->now.pos.y && mouse->now.pos.y <= mouse->goal_larger.y))  ) //nextがゴール到達するまでループ
 800b8d4:	7822      	ldrb	r2, [r4, #0]
		mouse->next.node = getNextNode(maze, mouse->now.car, mouse->now.node, 0x03);
 800b8d6:	9800      	ldr	r0, [sp, #0]
	while(! ((mouse->goal_lesser.x <= mouse->now.pos.x && mouse->now.pos.x <= mouse->goal_larger.x) && (mouse->goal_lesser.y <= mouse->now.pos.y && mouse->now.pos.y <= mouse->goal_larger.y))  ) //nextがゴール到達するまでループ
 800b8d8:	42aa      	cmp	r2, r5
		mouse->next.node = getNextNode(maze, mouse->now.car, mouse->now.node, 0x03);
 800b8da:	f04f 0303 	mov.w	r3, #3
	while(! ((mouse->goal_lesser.x <= mouse->now.pos.x && mouse->now.pos.x <= mouse->goal_larger.x) && (mouse->goal_lesser.y <= mouse->now.pos.y && mouse->now.pos.y <= mouse->goal_larger.y))  ) //nextがゴール到達するまでループ
 800b8de:	d897      	bhi.n	800b810 <getPathNode+0x128>
 800b8e0:	78a2      	ldrb	r2, [r4, #2]
 800b8e2:	42aa      	cmp	r2, r5
 800b8e4:	d394      	bcc.n	800b810 <getPathNode+0x128>
 800b8e6:	7a62      	ldrb	r2, [r4, #9]
 800b8e8:	7861      	ldrb	r1, [r4, #1]
 800b8ea:	4291      	cmp	r1, r2
 800b8ec:	d890      	bhi.n	800b810 <getPathNode+0x128>
 800b8ee:	78e1      	ldrb	r1, [r4, #3]
 800b8f0:	4291      	cmp	r1, r2
 800b8f2:	d38d      	bcc.n	800b810 <getPathNode+0x128>
	}
	path_num ++;
	FastPath[path_num].path_state = mouse->next;
 800b8f4:	9b02      	ldr	r3, [sp, #8]
 800b8f6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800b8fa:	4657      	mov	r7, sl
 800b8fc:	4b06      	ldr	r3, [pc, #24]	; (800b918 <getPathNode+0x230>)
	path_num ++;
 800b8fe:	3701      	adds	r7, #1
	FastPath[path_num].path_state = mouse->next;
 800b900:	eb03 1307 	add.w	r3, r3, r7, lsl #4
 800b904:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	Num_Nodes = path_num;
 800b908:	4b05      	ldr	r3, [pc, #20]	; (800b920 <getPathNode+0x238>)
	path_num ++;
 800b90a:	f8cb 7000 	str.w	r7, [fp]
	Num_Nodes = path_num;
 800b90e:	601f      	str	r7, [r3, #0]
//		{
//			printState(&(FastPath[i].path_state));
//		}
//		printf("\r\n");

}
 800b910:	b005      	add	sp, #20
 800b912:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b916:	bf00      	nop
 800b918:	2000020c 	.word	0x2000020c
 800b91c:	08017020 	.word	0x08017020
 800b920:	2000120c 	.word	0x2000120c
 800b924:	20001210 	.word	0x20001210

0800b928 <getPathAction>:

void getPathAction(profile *mouse)
{
 800b928:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	//Pathからアクション計画を立てる
	int count = 0;
	if( (mouse->goal_lesser.x <= FastPath[count].path_state.node->pos.x &&  FastPath[count].path_state.node->pos.x <= mouse->goal_larger.x) && (mouse->goal_lesser.y <= FastPath[count].path_state.node->pos.y &&  FastPath[count].path_state.node->pos.y <= mouse->goal_larger.y) ){
 800b92c:	4b54      	ldr	r3, [pc, #336]	; (800ba80 <getPathAction+0x158>)
 800b92e:	7806      	ldrb	r6, [r0, #0]
 800b930:	689a      	ldr	r2, [r3, #8]
 800b932:	78c1      	ldrb	r1, [r0, #3]
 800b934:	7993      	ldrb	r3, [r2, #6]
 800b936:	f890 c002 	ldrb.w	ip, [r0, #2]
 800b93a:	f890 9001 	ldrb.w	r9, [r0, #1]
{
 800b93e:	b083      	sub	sp, #12
	if( (mouse->goal_lesser.x <= FastPath[count].path_state.node->pos.x &&  FastPath[count].path_state.node->pos.x <= mouse->goal_larger.x) && (mouse->goal_lesser.y <= FastPath[count].path_state.node->pos.y &&  FastPath[count].path_state.node->pos.y <= mouse->goal_larger.y) ){
 800b940:	429e      	cmp	r6, r3
 800b942:	9101      	str	r1, [sp, #4]
 800b944:	d80a      	bhi.n	800b95c <getPathAction+0x34>
 800b946:	4563      	cmp	r3, ip
 800b948:	d808      	bhi.n	800b95c <getPathAction+0x34>
 800b94a:	79d3      	ldrb	r3, [r2, #7]
 800b94c:	454b      	cmp	r3, r9
 800b94e:	d305      	bcc.n	800b95c <getPathAction+0x34>
 800b950:	428b      	cmp	r3, r1
 800b952:	d803      	bhi.n	800b95c <getPathAction+0x34>
 800b954:	f04f 33ff 	mov.w	r3, #4294967295
	int count = 0;
 800b958:	2100      	movs	r1, #0
 800b95a:	e079      	b.n	800ba50 <getPathAction+0x128>
			FastPath[0].path_action = ACC_DEC;//加減速一回で終わり
			//61.5+45mm
		}
	}
	else {
		if(FastPath[2].path_state.node->rc == 1){
 800b95c:	4948      	ldr	r1, [pc, #288]	; (800ba80 <getPathAction+0x158>)
 800b95e:	6a8b      	ldr	r3, [r1, #40]	; 0x28
 800b960:	795b      	ldrb	r3, [r3, #5]
 800b962:	bb73      	cbnz	r3, 800b9c2 <getPathAction+0x9a>
			FastPath[0].path_action = START;	 //初手ターン用の加速
			FastPath[1].path_action = R_90_SEARCH;
		}
		else{
			//2マス以上直進
			FastPath[0].path_action = ACC_DEC;
 800b964:	4a46      	ldr	r2, [pc, #280]	; (800ba80 <getPathAction+0x158>)
 800b966:	2301      	movs	r3, #1
 800b968:	7313      	strb	r3, [r2, #12]
			FastPath[1].path_action = ACC_DEC;
 800b96a:	7713      	strb	r3, [r2, #28]
{
 800b96c:	2102      	movs	r1, #2
				                }
								//左旋回
								//東向きから北東 or //西向きから南西
								if( __COLUMN_TO_RAW_NE__(now_x, now_y, next_x, next_y) || __COLUMN_TO_RAW_SW__(now_x, now_y, next_x, next_y) )
								{
									FastPath[count].path_action = L_90_SEARCH;
 800b96e:	468b      	mov	fp, r1
 800b970:	4b43      	ldr	r3, [pc, #268]	; (800ba80 <getPathAction+0x158>)
									FastPath[count].path_action = R_90_SEARCH;
 800b972:	f04f 0a03 	mov.w	sl, #3
							FastPath[count].path_action = ACC_DEC;
 800b976:	f04f 0801 	mov.w	r8, #1
 800b97a:	e00a      	b.n	800b992 <getPathAction+0x6a>
							uint8_t now_x = FastPath[count].path_state.node->pos.x, now_y = FastPath[count].path_state.node->pos.y;
 800b97c:	7982      	ldrb	r2, [r0, #6]
 800b97e:	79c5      	ldrb	r5, [r0, #7]
							uint8_t next_x = FastPath[count+1].path_state.node->pos.x, next_y = FastPath[count+1].path_state.node->pos.y;
 800b980:	79a0      	ldrb	r0, [r4, #6]
 800b982:	79e4      	ldrb	r4, [r4, #7]
							if(FastPath[count].path_state.node->rc == 0)
 800b984:	bb17      	cbnz	r7, 800b9cc <getPathAction+0xa4>
								if( __RAW_TO_COLUMN_NE__(now_x, now_y, next_x, next_y) || __RAW_TO_COLUMN_SW__(now_x, now_y, next_x, next_y) )
 800b986:	1c57      	adds	r7, r2, #1
 800b988:	4287      	cmp	r7, r0
 800b98a:	d03c      	beq.n	800ba06 <getPathAction+0xde>
 800b98c:	4282      	cmp	r2, r0
 800b98e:	d043      	beq.n	800ba18 <getPathAction+0xf0>
 800b990:	3310      	adds	r3, #16
		while( !((mouse->goal_lesser.x <= FastPath[count].path_state.pos.x &&  FastPath[count].path_state.pos.x <= mouse->goal_larger.x) && (mouse->goal_lesser.y <= FastPath[count].path_state.pos.y &&  FastPath[count].path_state.pos.y <= mouse->goal_larger.y)) )
 800b992:	f893 2020 	ldrb.w	r2, [r3, #32]
 800b996:	4296      	cmp	r6, r2
 800b998:	d808      	bhi.n	800b9ac <getPathAction+0x84>
 800b99a:	4562      	cmp	r2, ip
 800b99c:	d806      	bhi.n	800b9ac <getPathAction+0x84>
 800b99e:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
 800b9a2:	454a      	cmp	r2, r9
 800b9a4:	d302      	bcc.n	800b9ac <getPathAction+0x84>
 800b9a6:	9801      	ldr	r0, [sp, #4]
 800b9a8:	4282      	cmp	r2, r0
 800b9aa:	d950      	bls.n	800ba4e <getPathAction+0x126>
						if(FastPath[count].path_state.node->rc == FastPath[count+1].path_state.node->rc){
 800b9ac:	6a98      	ldr	r0, [r3, #40]	; 0x28
 800b9ae:	6b9c      	ldr	r4, [r3, #56]	; 0x38
 800b9b0:	7947      	ldrb	r7, [r0, #5]
 800b9b2:	7962      	ldrb	r2, [r4, #5]
 800b9b4:	42ba      	cmp	r2, r7
 800b9b6:	f101 0101 	add.w	r1, r1, #1
 800b9ba:	d1df      	bne.n	800b97c <getPathAction+0x54>
							FastPath[count].path_action = ACC_DEC;
 800b9bc:	f883 802c 	strb.w	r8, [r3, #44]	; 0x2c
 800b9c0:	e7e6      	b.n	800b990 <getPathAction+0x68>
			FastPath[0].path_action = START;	 //初手ターン用の加速
 800b9c2:	2200      	movs	r2, #0
			FastPath[1].path_action = R_90_SEARCH;
 800b9c4:	2303      	movs	r3, #3
			FastPath[0].path_action = START;	 //初手ターン用の加速
 800b9c6:	730a      	strb	r2, [r1, #12]
			FastPath[1].path_action = R_90_SEARCH;
 800b9c8:	770b      	strb	r3, [r1, #28]
 800b9ca:	e7cf      	b.n	800b96c <getPathAction+0x44>
								if( __COLUMN_TO_RAW_SE__(now_x, now_y, next_x, next_y) || __COLUMN_TO_RAW_NW__(now_x, now_y, next_x, next_y) )
 800b9cc:	4282      	cmp	r2, r0
 800b9ce:	d00d      	beq.n	800b9ec <getPathAction+0xc4>
 800b9d0:	1e57      	subs	r7, r2, #1
 800b9d2:	4287      	cmp	r7, r0
 800b9d4:	d1dc      	bne.n	800b990 <getPathAction+0x68>
 800b9d6:	f105 0e01 	add.w	lr, r5, #1
 800b9da:	4574      	cmp	r4, lr
 800b9dc:	d024      	beq.n	800ba28 <getPathAction+0x100>
								if( __COLUMN_TO_RAW_NE__(now_x, now_y, next_x, next_y) || __COLUMN_TO_RAW_SW__(now_x, now_y, next_x, next_y) )
 800b9de:	4287      	cmp	r7, r0
 800b9e0:	d1d6      	bne.n	800b990 <getPathAction+0x68>
 800b9e2:	42a5      	cmp	r5, r4
 800b9e4:	d1d4      	bne.n	800b990 <getPathAction+0x68>
									FastPath[count].path_action = L_90_SEARCH;
 800b9e6:	f883 b02c 	strb.w	fp, [r3, #44]	; 0x2c
 800b9ea:	e7d1      	b.n	800b990 <getPathAction+0x68>
								if( __COLUMN_TO_RAW_SE__(now_x, now_y, next_x, next_y) || __COLUMN_TO_RAW_NW__(now_x, now_y, next_x, next_y) )
 800b9ec:	42a5      	cmp	r5, r4
 800b9ee:	d01b      	beq.n	800ba28 <getPathAction+0x100>
 800b9f0:	1e57      	subs	r7, r2, #1
 800b9f2:	4297      	cmp	r7, r2
 800b9f4:	f105 0e01 	add.w	lr, r5, #1
 800b9f8:	d13e      	bne.n	800ba78 <getPathAction+0x150>
 800b9fa:	45a6      	cmp	lr, r4
 800b9fc:	d014      	beq.n	800ba28 <getPathAction+0x100>
								if( __COLUMN_TO_RAW_NE__(now_x, now_y, next_x, next_y) || __COLUMN_TO_RAW_SW__(now_x, now_y, next_x, next_y) )
 800b9fe:	45a6      	cmp	lr, r4
 800ba00:	d0f1      	beq.n	800b9e6 <getPathAction+0xbe>
 800ba02:	1e57      	subs	r7, r2, #1
 800ba04:	e7eb      	b.n	800b9de <getPathAction+0xb6>
								if( __RAW_TO_COLUMN_NE__(now_x, now_y, next_x, next_y) || __RAW_TO_COLUMN_SW__(now_x, now_y, next_x, next_y) )
 800ba06:	42a5      	cmp	r5, r4
 800ba08:	d016      	beq.n	800ba38 <getPathAction+0x110>
 800ba0a:	42ba      	cmp	r2, r7
 800ba0c:	f105 32ff 	add.w	r2, r5, #4294967295
 800ba10:	d018      	beq.n	800ba44 <getPathAction+0x11c>
								if( __RAW_TO_COLUMN_NW__(now_x, now_y, next_x, next_y) || __RAW_TO_COLUMN_SE__(now_x, now_y, next_x, next_y) )
 800ba12:	42a2      	cmp	r2, r4
 800ba14:	d1bc      	bne.n	800b990 <getPathAction+0x68>
 800ba16:	e7e6      	b.n	800b9e6 <getPathAction+0xbe>
								if( __RAW_TO_COLUMN_NE__(now_x, now_y, next_x, next_y) || __RAW_TO_COLUMN_SW__(now_x, now_y, next_x, next_y) )
 800ba18:	1e6a      	subs	r2, r5, #1
 800ba1a:	42a2      	cmp	r2, r4
 800ba1c:	d014      	beq.n	800ba48 <getPathAction+0x120>
								if( __RAW_TO_COLUMN_NW__(now_x, now_y, next_x, next_y) || __RAW_TO_COLUMN_SE__(now_x, now_y, next_x, next_y) )
 800ba1e:	42a5      	cmp	r5, r4
 800ba20:	d0e1      	beq.n	800b9e6 <getPathAction+0xbe>
 800ba22:	4287      	cmp	r7, r0
 800ba24:	d1b4      	bne.n	800b990 <getPathAction+0x68>
 800ba26:	e7f4      	b.n	800ba12 <getPathAction+0xea>
								if( __COLUMN_TO_RAW_NE__(now_x, now_y, next_x, next_y) || __COLUMN_TO_RAW_SW__(now_x, now_y, next_x, next_y) )
 800ba28:	4282      	cmp	r2, r0
									FastPath[count].path_action = R_90_SEARCH;
 800ba2a:	f883 a02c 	strb.w	sl, [r3, #44]	; 0x2c
 800ba2e:	bf08      	it	eq
 800ba30:	f105 0e01 	addeq.w	lr, r5, #1
								if( __COLUMN_TO_RAW_NE__(now_x, now_y, next_x, next_y) || __COLUMN_TO_RAW_SW__(now_x, now_y, next_x, next_y) )
 800ba34:	d0e3      	beq.n	800b9fe <getPathAction+0xd6>
 800ba36:	e7e4      	b.n	800ba02 <getPathAction+0xda>
								if( __RAW_TO_COLUMN_NW__(now_x, now_y, next_x, next_y) || __RAW_TO_COLUMN_SE__(now_x, now_y, next_x, next_y) )
 800ba38:	42ba      	cmp	r2, r7
									FastPath[count].path_action = R_90_SEARCH;
 800ba3a:	f883 a02c 	strb.w	sl, [r3, #44]	; 0x2c
								if( __RAW_TO_COLUMN_NW__(now_x, now_y, next_x, next_y) || __RAW_TO_COLUMN_SE__(now_x, now_y, next_x, next_y) )
 800ba3e:	d0d2      	beq.n	800b9e6 <getPathAction+0xbe>
 800ba40:	1e62      	subs	r2, r4, #1
 800ba42:	e7e6      	b.n	800ba12 <getPathAction+0xea>
								if( __RAW_TO_COLUMN_NE__(now_x, now_y, next_x, next_y) || __RAW_TO_COLUMN_SW__(now_x, now_y, next_x, next_y) )
 800ba44:	4294      	cmp	r4, r2
 800ba46:	d1e4      	bne.n	800ba12 <getPathAction+0xea>
									FastPath[count].path_action = R_90_SEARCH;
 800ba48:	f883 a02c 	strb.w	sl, [r3, #44]	; 0x2c
 800ba4c:	e7e7      	b.n	800ba1e <getPathAction+0xf6>
 800ba4e:	1e4b      	subs	r3, r1, #1
	//ゴールノード
	//終端速度の変数 0
	//前回がターンなら加減速を選択して、加速の割合を0として減速
	//前回までが直進なら、加減速を選択して、ゴールラインを駆け抜ける処理を入れる
		//一つ前のpath_actionによって変える
		switch(FastPath[count-1].path_action)
 800ba50:	4a0b      	ldr	r2, [pc, #44]	; (800ba80 <getPathAction+0x158>)
 800ba52:	eb02 1303 	add.w	r3, r2, r3, lsl #4
 800ba56:	7b1b      	ldrb	r3, [r3, #12]
 800ba58:	b12b      	cbz	r3, 800ba66 <getPathAction+0x13e>
 800ba5a:	2b03      	cmp	r3, #3
 800ba5c:	d806      	bhi.n	800ba6c <getPathAction+0x144>
				FastPath[count].path_action = ACC_DEC; //ただの減速.
				//加速の割合を0にする
				break;
			case ACC_DEC:
				//前回ACC_DECということはそのまま継続でひとまとめにする
				FastPath[count].path_action = ACC_DEC; //前のアクションとひとまとめ（countを利用）
 800ba5e:	eb02 1101 	add.w	r1, r2, r1, lsl #4
 800ba62:	2301      	movs	r3, #1
 800ba64:	730b      	strb	r3, [r1, #12]
		//accel to decel
		//turn(left, right) = two pattern
		//90deg slalom
		//45deg slalom
		//180deg slalom
}
 800ba66:	b003      	add	sp, #12
 800ba68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				printf("missng action !! in getPathAction.\r\n");
 800ba6c:	4805      	ldr	r0, [pc, #20]	; (800ba84 <getPathAction+0x15c>)
}
 800ba6e:	b003      	add	sp, #12
 800ba70:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
				printf("missng action !! in getPathAction.\r\n");
 800ba74:	f007 bd04 	b.w	8013480 <puts>
								if( __COLUMN_TO_RAW_NE__(now_x, now_y, next_x, next_y) || __COLUMN_TO_RAW_SW__(now_x, now_y, next_x, next_y) )
 800ba78:	45a6      	cmp	lr, r4
 800ba7a:	d189      	bne.n	800b990 <getPathAction+0x68>
 800ba7c:	e7b3      	b.n	800b9e6 <getPathAction+0xbe>
 800ba7e:	bf00      	nop
 800ba80:	2000020c 	.word	0x2000020c
 800ba84:	08016cfc 	.word	0x08016cfc

0800ba88 <InitExplore>:

	//ハード処理

}
void InitExplore()
{
 800ba88:	b570      	push	{r4, r5, r6, lr}
	//PID制御準備
	//PIDInit();
	PIDChangeFlag(L_VELO_PID, 0);
 800ba8a:	2100      	movs	r1, #0
 800ba8c:	2004      	movs	r0, #4
 800ba8e:	f003 f801 	bl	800ea94 <PIDChangeFlag>
	PIDChangeFlag(R_VELO_PID, 0);
 800ba92:	2100      	movs	r1, #0
 800ba94:	2005      	movs	r0, #5
 800ba96:	f002 fffd 	bl	800ea94 <PIDChangeFlag>
	PIDChangeFlag(L_WALL_PID, 0);
 800ba9a:	2100      	movs	r1, #0
 800ba9c:	2002      	movs	r0, #2
 800ba9e:	f002 fff9 	bl	800ea94 <PIDChangeFlag>
	PIDChangeFlag(R_WALL_PID, 0);
 800baa2:	2100      	movs	r1, #0
 800baa4:	2003      	movs	r0, #3
 800baa6:	f002 fff5 	bl	800ea94 <PIDChangeFlag>
	PIDChangeFlag(D_WALL_PID, 0);
 800baaa:	2100      	movs	r1, #0
 800baac:	2001      	movs	r0, #1
 800baae:	f002 fff1 	bl	800ea94 <PIDChangeFlag>
	//PIDChangeFlag(B_VELO, 0);
	PIDChangeFlag(A_VELO_PID, 0);
 800bab2:	2100      	movs	r1, #0
 800bab4:	4608      	mov	r0, r1
 800bab6:	f002 ffed 	bl	800ea94 <PIDChangeFlag>

//	Load_Gain();

	uint8_t imu_check;
	imu_check = IMU_init();
 800baba:	f002 fb53 	bl	800e164 <IMU_init>
	printf("imu_check 1ならOK: %d\r\n",imu_check);
 800babe:	4c2f      	ldr	r4, [pc, #188]	; (800bb7c <InitExplore+0xf4>)
	//ここまででハードの準備はできた。
	//ここからはソフト的な準備

	TargetVelocity[BODY] = 0;
	TargetAngularV = 0;
	Acceleration = 0;
 800bac0:	4d2f      	ldr	r5, [pc, #188]	; (800bb80 <InitExplore+0xf8>)
	//両壁の値を取得。それぞれの値と差分を制御目標に反映。
//	TargetPhoto[SL] = Photo[SL];//439.600006;//THRESHOLD_SL;
//	TargetPhoto[SR] = Photo[SR];//294.299988;//THRESHOLD_SR;
//	PhotoDiff = TargetPhoto[SL] - TargetPhoto[SR];
	TargetPhoto[SL] = 370;//439.600006;//THRESHOLD_SL;
	TargetPhoto[SR] = 300;//294.299988;//THRESHOLD_SR;
 800bac2:	4e30      	ldr	r6, [pc, #192]	; (800bb84 <InitExplore+0xfc>)
	printf("imu_check 1ならOK: %d\r\n",imu_check);
 800bac4:	4601      	mov	r1, r0
 800bac6:	4620      	mov	r0, r4
 800bac8:	f007 fc52 	bl	8013370 <iprintf>
	imu_check =IMU_init();
 800bacc:	f002 fb4a 	bl	800e164 <IMU_init>
	printf("imu_check 1ならOK: %d\r\n",imu_check);
 800bad0:	4601      	mov	r1, r0
 800bad2:	4620      	mov	r0, r4
 800bad4:	f007 fc4c 	bl	8013370 <iprintf>
	HAL_Delay(100);
 800bad8:	2064      	movs	r0, #100	; 0x64
 800bada:	f003 f991 	bl	800ee00 <HAL_Delay>
	ZGyro = ReadIMU(0x37, 0x38);
 800bade:	2138      	movs	r1, #56	; 0x38
 800bae0:	2037      	movs	r0, #55	; 0x37
 800bae2:	f002 fa1f 	bl	800df24 <ReadIMU>
 800bae6:	4b28      	ldr	r3, [pc, #160]	; (800bb88 <InitExplore+0x100>)
	AngularAcceleration = 0;
 800bae8:	4c28      	ldr	r4, [pc, #160]	; (800bb8c <InitExplore+0x104>)
	ZGyro = ReadIMU(0x37, 0x38);
 800baea:	ed83 0a00 	vstr	s0, [r3]
	printf("gyro : %f\r\n",ZGyro);
 800baee:	6818      	ldr	r0, [r3, #0]
 800baf0:	f7fc fc62 	bl	80083b8 <__aeabi_f2d>
 800baf4:	4602      	mov	r2, r0
 800baf6:	460b      	mov	r3, r1
 800baf8:	4825      	ldr	r0, [pc, #148]	; (800bb90 <InitExplore+0x108>)
 800bafa:	f007 fc39 	bl	8013370 <iprintf>
	Motor_PWM_Start();
 800bafe:	f002 fbfb 	bl	800e2f8 <Motor_PWM_Start>
	EncoderStart(); //戻し忘れないように
 800bb02:	f002 fb73 	bl	800e1ec <EncoderStart>
	EmitterON();
 800bb06:	f002 fb81 	bl	800e20c <EmitterON>
	ADCStart();
 800bb0a:	f002 f8d9 	bl	800dcc0 <ADCStart>
	InitPulse( (int*)(&(TIM3->CNT)),  INITIAL_PULSE);
 800bb0e:	f247 512f 	movw	r1, #29999	; 0x752f
 800bb12:	4820      	ldr	r0, [pc, #128]	; (800bb94 <InitExplore+0x10c>)
 800bb14:	f002 fc7a 	bl	800e40c <InitPulse>
	InitPulse( (int*)(&(TIM4->CNT)),  INITIAL_PULSE);
 800bb18:	f247 512f 	movw	r1, #29999	; 0x752f
 800bb1c:	481e      	ldr	r0, [pc, #120]	; (800bb98 <InitExplore+0x110>)
 800bb1e:	f002 fc75 	bl	800e40c <InitPulse>
	HAL_TIM_Base_Start_IT(&htim1);
 800bb22:	481e      	ldr	r0, [pc, #120]	; (800bb9c <InitExplore+0x114>)
 800bb24:	f004 ff44 	bl	80109b0 <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim8);
 800bb28:	481d      	ldr	r0, [pc, #116]	; (800bba0 <InitExplore+0x118>)
 800bb2a:	f004 ff41 	bl	80109b0 <HAL_TIM_Base_Start_IT>
	TargetVelocity[BODY] = 0;
 800bb2e:	491d      	ldr	r1, [pc, #116]	; (800bba4 <InitExplore+0x11c>)
	TargetAngularV = 0;
 800bb30:	481d      	ldr	r0, [pc, #116]	; (800bba8 <InitExplore+0x120>)
	TotalPulse[LEFT] = 0;
 800bb32:	4a1e      	ldr	r2, [pc, #120]	; (800bbac <InitExplore+0x124>)
	TargetVelocity[BODY] = 0;
 800bb34:	2300      	movs	r3, #0
 800bb36:	608b      	str	r3, [r1, #8]
	TargetPhoto[SL] = 370;//439.600006;//THRESHOLD_SL;
 800bb38:	491d      	ldr	r1, [pc, #116]	; (800bbb0 <InitExplore+0x128>)
	TargetAngularV = 0;
 800bb3a:	6003      	str	r3, [r0, #0]
	Acceleration = 0;
 800bb3c:	602b      	str	r3, [r5, #0]
	TargetPhoto[SL] = 370;//439.600006;//THRESHOLD_SL;
 800bb3e:	481d      	ldr	r0, [pc, #116]	; (800bbb4 <InitExplore+0x12c>)
	AngularAcceleration = 0;
 800bb40:	6023      	str	r3, [r4, #0]
	PhotoDiff = 70;
 800bb42:	4b1d      	ldr	r3, [pc, #116]	; (800bbb8 <InitExplore+0x130>)
 800bb44:	4d1d      	ldr	r5, [pc, #116]	; (800bbbc <InitExplore+0x134>)
	TotalPulse[LEFT] = 0;
 800bb46:	2400      	movs	r4, #0
 800bb48:	6014      	str	r4, [r2, #0]
	TotalPulse[RIGHT] = 0;
 800bb4a:	6054      	str	r4, [r2, #4]
	TotalPulse[BODY] = 0;
 800bb4c:	6094      	str	r4, [r2, #8]
	TargetPhoto[SL] = 370;//439.600006;//THRESHOLD_SL;
 800bb4e:	6088      	str	r0, [r1, #8]

	PIDReset(L_VELO_PID);
 800bb50:	2004      	movs	r0, #4
	TargetPhoto[SR] = 300;//294.299988;//THRESHOLD_SR;
 800bb52:	604e      	str	r6, [r1, #4]
	PhotoDiff = 70;
 800bb54:	601d      	str	r5, [r3, #0]
	PIDReset(L_VELO_PID);
 800bb56:	f002 ffa5 	bl	800eaa4 <PIDReset>
	PIDReset(R_VELO_PID);
 800bb5a:	2005      	movs	r0, #5
 800bb5c:	f002 ffa2 	bl	800eaa4 <PIDReset>

	PIDReset(A_VELO_PID);
 800bb60:	4620      	mov	r0, r4
 800bb62:	f002 ff9f 	bl	800eaa4 <PIDReset>
	PIDReset(L_WALL_PID);
 800bb66:	2002      	movs	r0, #2
 800bb68:	f002 ff9c 	bl	800eaa4 <PIDReset>
	PIDReset(R_WALL_PID);
 800bb6c:	2003      	movs	r0, #3
 800bb6e:	f002 ff99 	bl	800eaa4 <PIDReset>
	PIDReset(D_WALL_PID);
 800bb72:	2001      	movs	r0, #1
}
 800bb74:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	PIDReset(D_WALL_PID);
 800bb78:	f002 bf94 	b.w	800eaa4 <PIDReset>
 800bb7c:	08016e7c 	.word	0x08016e7c
 800bb80:	20001214 	.word	0x20001214
 800bb84:	43960000 	.word	0x43960000
 800bb88:	200012c8 	.word	0x200012c8
 800bb8c:	2000121c 	.word	0x2000121c
 800bb90:	08016e98 	.word	0x08016e98
 800bb94:	40000424 	.word	0x40000424
 800bb98:	40000824 	.word	0x40000824
 800bb9c:	20001f6c 	.word	0x20001f6c
 800bba0:	20001d24 	.word	0x20001d24
 800bba4:	2000151c 	.word	0x2000151c
 800bba8:	2000152c 	.word	0x2000152c
 800bbac:	2000154c 	.word	0x2000154c
 800bbb0:	200015b0 	.word	0x200015b0
 800bbb4:	43b90000 	.word	0x43b90000
 800bbb8:	20001540 	.word	0x20001540
 800bbbc:	428c0000 	.word	0x428c0000

0800bbc0 <InitFastest>:

void InitFastest()
{
 800bbc0:	b538      	push	{r3, r4, r5, lr}
	Motor_PWM_Start();
 800bbc2:	f002 fb99 	bl	800e2f8 <Motor_PWM_Start>
	EncoderStart(); //戻し忘れないように
 800bbc6:	f002 fb11 	bl	800e1ec <EncoderStart>
	EmitterON();
 800bbca:	f002 fb1f 	bl	800e20c <EmitterON>
	ADCStart();
 800bbce:	f002 f877 	bl	800dcc0 <ADCStart>

	uint8_t imu_check;
	imu_check = IMU_init();
 800bbd2:	f002 fac7 	bl	800e164 <IMU_init>
	printf("imu_check 1ならOK: %d\r\n",imu_check);
 800bbd6:	4c3a      	ldr	r4, [pc, #232]	; (800bcc0 <InitFastest+0x100>)

	//ここまででハードの準備はできた。
	//ここからはソフト的な準備

	TargetVelocity[BODY] = 0;
	TargetAngularV = 0;
 800bbd8:	4d3a      	ldr	r5, [pc, #232]	; (800bcc4 <InitFastest+0x104>)
	printf("imu_check 1ならOK: %d\r\n",imu_check);
 800bbda:	4601      	mov	r1, r0
 800bbdc:	4620      	mov	r0, r4
 800bbde:	f007 fbc7 	bl	8013370 <iprintf>
	imu_check =IMU_init();
 800bbe2:	f002 fabf 	bl	800e164 <IMU_init>
	printf("imu_check 1ならOK: %d\r\n",imu_check);
 800bbe6:	4601      	mov	r1, r0
 800bbe8:	4620      	mov	r0, r4
 800bbea:	f007 fbc1 	bl	8013370 <iprintf>
	HAL_Delay(100);
 800bbee:	2064      	movs	r0, #100	; 0x64
 800bbf0:	f003 f906 	bl	800ee00 <HAL_Delay>
	ZGyro = ReadIMU(0x37, 0x38);
 800bbf4:	2138      	movs	r1, #56	; 0x38
 800bbf6:	2037      	movs	r0, #55	; 0x37
 800bbf8:	f002 f994 	bl	800df24 <ReadIMU>
 800bbfc:	4b32      	ldr	r3, [pc, #200]	; (800bcc8 <InitFastest+0x108>)
	Acceleration = 0;
	AngularAcceleration = 0;
 800bbfe:	4c33      	ldr	r4, [pc, #204]	; (800bccc <InitFastest+0x10c>)
	ZGyro = ReadIMU(0x37, 0x38);
 800bc00:	ed83 0a00 	vstr	s0, [r3]
	printf("gyro : %f\r\n",ZGyro);
 800bc04:	6818      	ldr	r0, [r3, #0]
 800bc06:	f7fc fbd7 	bl	80083b8 <__aeabi_f2d>
 800bc0a:	4602      	mov	r2, r0
 800bc0c:	460b      	mov	r3, r1
 800bc0e:	4830      	ldr	r0, [pc, #192]	; (800bcd0 <InitFastest+0x110>)
 800bc10:	f007 fbae 	bl	8013370 <iprintf>
	PIDChangeFlag(L_VELO_PID, 0);
 800bc14:	2100      	movs	r1, #0
 800bc16:	2004      	movs	r0, #4
 800bc18:	f002 ff3c 	bl	800ea94 <PIDChangeFlag>
	PIDChangeFlag(R_VELO_PID, 0);
 800bc1c:	2100      	movs	r1, #0
 800bc1e:	2005      	movs	r0, #5
 800bc20:	f002 ff38 	bl	800ea94 <PIDChangeFlag>
	PIDChangeFlag(L_WALL_PID, 0);
 800bc24:	2100      	movs	r1, #0
 800bc26:	2002      	movs	r0, #2
 800bc28:	f002 ff34 	bl	800ea94 <PIDChangeFlag>
	PIDChangeFlag(R_WALL_PID, 0);
 800bc2c:	2100      	movs	r1, #0
 800bc2e:	2003      	movs	r0, #3
 800bc30:	f002 ff30 	bl	800ea94 <PIDChangeFlag>
	PIDChangeFlag(D_WALL_PID, 0);
 800bc34:	2100      	movs	r1, #0
 800bc36:	2001      	movs	r0, #1
 800bc38:	f002 ff2c 	bl	800ea94 <PIDChangeFlag>
	PIDChangeFlag(A_VELO_PID, 0);
 800bc3c:	2100      	movs	r1, #0
 800bc3e:	4608      	mov	r0, r1
 800bc40:	f002 ff28 	bl	800ea94 <PIDChangeFlag>
	InitPulse( (int*)(&(TIM3->CNT)),  INITIAL_PULSE);
 800bc44:	f247 512f 	movw	r1, #29999	; 0x752f
 800bc48:	4822      	ldr	r0, [pc, #136]	; (800bcd4 <InitFastest+0x114>)
 800bc4a:	f002 fbdf 	bl	800e40c <InitPulse>
	InitPulse( (int*)(&(TIM4->CNT)),  INITIAL_PULSE);
 800bc4e:	f247 512f 	movw	r1, #29999	; 0x752f
 800bc52:	4821      	ldr	r0, [pc, #132]	; (800bcd8 <InitFastest+0x118>)
 800bc54:	f002 fbda 	bl	800e40c <InitPulse>
	HAL_TIM_Base_Start_IT(&htim1);
 800bc58:	4820      	ldr	r0, [pc, #128]	; (800bcdc <InitFastest+0x11c>)
 800bc5a:	f004 fea9 	bl	80109b0 <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim8);
 800bc5e:	4820      	ldr	r0, [pc, #128]	; (800bce0 <InitFastest+0x120>)
 800bc60:	f004 fea6 	bl	80109b0 <HAL_TIM_Base_Start_IT>
	TargetVelocity[BODY] = 0;
 800bc64:	4b1f      	ldr	r3, [pc, #124]	; (800bce4 <InitFastest+0x124>)
	Acceleration = 0;
 800bc66:	4820      	ldr	r0, [pc, #128]	; (800bce8 <InitFastest+0x128>)
	TotalPulse[LEFT] = 0;
 800bc68:	4920      	ldr	r1, [pc, #128]	; (800bcec <InitFastest+0x12c>)
	TargetVelocity[BODY] = 0;
 800bc6a:	2200      	movs	r2, #0
 800bc6c:	609a      	str	r2, [r3, #8]
	TotalPulse[RIGHT] = 0;
	TotalPulse[BODY] = 0;

	//両壁の値を取得。それぞれの値と差分を制御目標に反映。
	TargetPhoto[SL] = 370;//Photo[SL];
 800bc6e:	4b20      	ldr	r3, [pc, #128]	; (800bcf0 <InitFastest+0x130>)
	TargetAngularV = 0;
 800bc70:	602a      	str	r2, [r5, #0]
	Acceleration = 0;
 800bc72:	6002      	str	r2, [r0, #0]
	TargetPhoto[SL] = 370;//Photo[SL];
 800bc74:	4d1f      	ldr	r5, [pc, #124]	; (800bcf4 <InitFastest+0x134>)
	AngularAcceleration = 0;
 800bc76:	6022      	str	r2, [r4, #0]
	TargetPhoto[SR] = 300;//Photo[SR];
 800bc78:	481f      	ldr	r0, [pc, #124]	; (800bcf8 <InitFastest+0x138>)
	TotalPulse[LEFT] = 0;
 800bc7a:	2400      	movs	r4, #0
 800bc7c:	600c      	str	r4, [r1, #0]
	TotalPulse[RIGHT] = 0;
 800bc7e:	604c      	str	r4, [r1, #4]
	TotalPulse[BODY] = 0;
 800bc80:	608c      	str	r4, [r1, #8]
	TargetPhoto[SL] = 370;//Photo[SL];
 800bc82:	609d      	str	r5, [r3, #8]
	TargetPhoto[SR] = 300;//Photo[SR];
 800bc84:	6058      	str	r0, [r3, #4]
	PhotoDiff = TargetPhoto[SL] - TargetPhoto[SR];
 800bc86:	edd3 7a02 	vldr	s15, [r3, #8]
 800bc8a:	ed93 7a01 	vldr	s14, [r3, #4]
 800bc8e:	4b1b      	ldr	r3, [pc, #108]	; (800bcfc <InitFastest+0x13c>)
 800bc90:	ee77 7ac7 	vsub.f32	s15, s15, s14

	PIDReset(L_VELO_PID);
 800bc94:	2004      	movs	r0, #4
	PhotoDiff = TargetPhoto[SL] - TargetPhoto[SR];
 800bc96:	edc3 7a00 	vstr	s15, [r3]
	PIDReset(L_VELO_PID);
 800bc9a:	f002 ff03 	bl	800eaa4 <PIDReset>
	PIDReset(R_VELO_PID);
 800bc9e:	2005      	movs	r0, #5
 800bca0:	f002 ff00 	bl	800eaa4 <PIDReset>
	PIDReset(A_VELO_PID);
 800bca4:	4620      	mov	r0, r4
 800bca6:	f002 fefd 	bl	800eaa4 <PIDReset>
	PIDReset(L_WALL_PID);
 800bcaa:	2002      	movs	r0, #2
 800bcac:	f002 fefa 	bl	800eaa4 <PIDReset>
	PIDReset(R_WALL_PID);
 800bcb0:	2003      	movs	r0, #3
 800bcb2:	f002 fef7 	bl	800eaa4 <PIDReset>
	PIDReset(D_WALL_PID);
 800bcb6:	2001      	movs	r0, #1
}
 800bcb8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	PIDReset(D_WALL_PID);
 800bcbc:	f002 bef2 	b.w	800eaa4 <PIDReset>
 800bcc0:	08016e7c 	.word	0x08016e7c
 800bcc4:	2000152c 	.word	0x2000152c
 800bcc8:	200012c8 	.word	0x200012c8
 800bccc:	2000121c 	.word	0x2000121c
 800bcd0:	08016e98 	.word	0x08016e98
 800bcd4:	40000424 	.word	0x40000424
 800bcd8:	40000824 	.word	0x40000824
 800bcdc:	20001f6c 	.word	0x20001f6c
 800bce0:	20001d24 	.word	0x20001d24
 800bce4:	2000151c 	.word	0x2000151c
 800bce8:	20001214 	.word	0x20001214
 800bcec:	2000154c 	.word	0x2000154c
 800bcf0:	200015b0 	.word	0x200015b0
 800bcf4:	43b90000 	.word	0x43b90000
 800bcf8:	43960000 	.word	0x43960000
 800bcfc:	20001540 	.word	0x20001540

0800bd00 <Debug>:
void Debug()
{
 800bd00:	b538      	push	{r3, r4, r5, lr}
	//テストする
	InitExplore();
	TotalPulse[RIGHT] = 0;
 800bd02:	4d17      	ldr	r5, [pc, #92]	; (800bd60 <Debug+0x60>)
	InitExplore();
 800bd04:	f7ff fec0 	bl	800ba88 <InitExplore>
	TotalPulse[RIGHT] = 0;
 800bd08:	2400      	movs	r4, #0
	TotalPulse[LEFT] = 0;
	TotalPulse[BODY] = 0;

	PIDChangeFlag(L_VELO_PID, 1);
 800bd0a:	2101      	movs	r1, #1
 800bd0c:	2004      	movs	r0, #4
	TotalPulse[RIGHT] = 0;
 800bd0e:	606c      	str	r4, [r5, #4]
	TotalPulse[LEFT] = 0;
 800bd10:	602c      	str	r4, [r5, #0]
	TotalPulse[BODY] = 0;
 800bd12:	60ac      	str	r4, [r5, #8]
	PIDChangeFlag(L_VELO_PID, 1);
 800bd14:	f002 febe 	bl	800ea94 <PIDChangeFlag>
	PIDChangeFlag(R_VELO_PID, 1);
 800bd18:	2101      	movs	r1, #1
 800bd1a:	2005      	movs	r0, #5
 800bd1c:	f002 feba 	bl	800ea94 <PIDChangeFlag>
	printf("パルスチェック: BODY %d, LEFT %d, RIGHT %d\r\n",TotalPulse[BODY],TotalPulse[LEFT],TotalPulse[RIGHT]);
 800bd20:	68a9      	ldr	r1, [r5, #8]
 800bd22:	4810      	ldr	r0, [pc, #64]	; (800bd64 <Debug+0x64>)
 800bd24:	682a      	ldr	r2, [r5, #0]
 800bd26:	686b      	ldr	r3, [r5, #4]
 800bd28:	f007 fb22 	bl	8013370 <iprintf>
	//PIDChangeFlagStraight(N_WALL_PID);
	PIDChangeFlag(D_WALL_PID, 0);
 800bd2c:	4621      	mov	r1, r4
 800bd2e:	2001      	movs	r0, #1
 800bd30:	f002 feb0 	bl	800ea94 <PIDChangeFlag>
	PIDChangeFlag(L_WALL_PID, 0);
 800bd34:	4621      	mov	r1, r4
 800bd36:	2002      	movs	r0, #2
 800bd38:	f002 feac 	bl	800ea94 <PIDChangeFlag>
	PIDChangeFlag(R_WALL_PID, 0);
 800bd3c:	4621      	mov	r1, r4
 800bd3e:	2003      	movs	r0, #3
 800bd40:	f002 fea8 	bl	800ea94 <PIDChangeFlag>
	PIDChangeFlag(A_VELO_PID, 1);
 800bd44:	4620      	mov	r0, r4
 800bd46:	2101      	movs	r1, #1
 800bd48:	f002 fea4 	bl	800ea94 <PIDChangeFlag>
	ExploreVelocity=0;
 800bd4c:	4b06      	ldr	r3, [pc, #24]	; (800bd68 <Debug+0x68>)
 800bd4e:	2200      	movs	r2, #0
	ChangeLED(3);
 800bd50:	2003      	movs	r0, #3
	ExploreVelocity=0;
 800bd52:	601a      	str	r2, [r3, #0]
	ChangeLED(3);
 800bd54:	f002 fa76 	bl	800e244 <ChangeLED>
	//HAL_Delay(500);

	//IT_mode = WRITINGFREE;
	IT_mode = EXPLORE;
 800bd58:	4b04      	ldr	r3, [pc, #16]	; (800bd6c <Debug+0x6c>)
 800bd5a:	2206      	movs	r2, #6
 800bd5c:	601a      	str	r2, [r3, #0]

}
 800bd5e:	bd38      	pop	{r3, r4, r5, pc}
 800bd60:	2000154c 	.word	0x2000154c
 800bd64:	08016dc4 	.word	0x08016dc4
 800bd68:	200015a0 	.word	0x200015a0
 800bd6c:	2000150c 	.word	0x2000150c

0800bd70 <ParameterSetting>:
void ParameterSetting()
{
 800bd70:	b508      	push	{r3, lr}
	Load_Gain();
 800bd72:	f002 fc1b 	bl	800e5ac <Load_Gain>
	Change_Gain();

}
 800bd76:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	Change_Gain();
 800bd7a:	f002 bcf1 	b.w	800e760 <Change_Gain>
 800bd7e:	bf00      	nop

0800bd80 <GainTestRWall>:
	{
		TargetVelocity[BODY] = 300;
	}
}
void GainTestRWall()
{
 800bd80:	b508      	push	{r3, lr}
	IT_mode = EXPLORE;
 800bd82:	4b14      	ldr	r3, [pc, #80]	; (800bdd4 <GainTestRWall+0x54>)
 800bd84:	2206      	movs	r2, #6
 800bd86:	601a      	str	r2, [r3, #0]
	InitExplore();
 800bd88:	f7ff fe7e 	bl	800ba88 <InitExplore>
	TotalPulse[RIGHT] = 0;
 800bd8c:	4b12      	ldr	r3, [pc, #72]	; (800bdd8 <GainTestRWall+0x58>)
 800bd8e:	2500      	movs	r5, #0
	TotalPulse[LEFT] = 0;
	TotalPulse[BODY] = 0;

	//PIDFlag = L_VELO_PID; のように直接どれにするか指定してはどうか. 必ずどれか一つ. どれか一つでなければビット操作で
	//char型のフラグ 8本のフラグ .最悪256パターン用意しないといけなくなる
	PIDChangeFlag(L_VELO_PID, 1);
 800bd90:	2101      	movs	r1, #1
 800bd92:	2004      	movs	r0, #4
	TotalPulse[RIGHT] = 0;
 800bd94:	605d      	str	r5, [r3, #4]
	TotalPulse[LEFT] = 0;
 800bd96:	601d      	str	r5, [r3, #0]
	TotalPulse[BODY] = 0;
 800bd98:	609d      	str	r5, [r3, #8]
	PIDChangeFlag(L_VELO_PID, 1);
 800bd9a:	f002 fe7b 	bl	800ea94 <PIDChangeFlag>
	PIDChangeFlag(R_VELO_PID, 1);
 800bd9e:	2101      	movs	r1, #1
 800bda0:	2005      	movs	r0, #5
 800bda2:	f002 fe77 	bl	800ea94 <PIDChangeFlag>
	//PIDChangeFlagStraight(R_WALL_PID);
	PIDChangeFlag(D_WALL_PID, 0);
 800bda6:	4629      	mov	r1, r5
 800bda8:	2001      	movs	r0, #1
 800bdaa:	f002 fe73 	bl	800ea94 <PIDChangeFlag>
	PIDChangeFlag(L_WALL_PID, 0);
 800bdae:	4629      	mov	r1, r5
 800bdb0:	2002      	movs	r0, #2
 800bdb2:	f002 fe6f 	bl	800ea94 <PIDChangeFlag>
	PIDChangeFlag(R_WALL_PID, 1);
 800bdb6:	2101      	movs	r1, #1
 800bdb8:	2003      	movs	r0, #3
 800bdba:	f002 fe6b 	bl	800ea94 <PIDChangeFlag>
	//PIDSetGain(D_WALL_PID, 10, 0, 0);
	ExploreVelocity=0;
 800bdbe:	4b07      	ldr	r3, [pc, #28]	; (800bddc <GainTestRWall+0x5c>)
 800bdc0:	2400      	movs	r4, #0
	ChangeLED(1);
 800bdc2:	2001      	movs	r0, #1
	ExploreVelocity=0;
 800bdc4:	601c      	str	r4, [r3, #0]
	ChangeLED(1);
 800bdc6:	f002 fa3d 	bl	800e244 <ChangeLED>
 800bdca:	4a05      	ldr	r2, [pc, #20]	; (800bde0 <GainTestRWall+0x60>)
	while(1)
	{
		TargetVelocity[BODY] = 0;
 800bdcc:	4623      	mov	r3, r4
 800bdce:	6093      	str	r3, [r2, #8]
 800bdd0:	e7fd      	b.n	800bdce <GainTestRWall+0x4e>
 800bdd2:	bf00      	nop
 800bdd4:	2000150c 	.word	0x2000150c
 800bdd8:	2000154c 	.word	0x2000154c
 800bddc:	200015a0 	.word	0x200015a0
 800bde0:	2000151c 	.word	0x2000151c

0800bde4 <GainTestDWall>:

	}
}
void GainTestDWall()
{
 800bde4:	e92d 4880 	stmdb	sp!, {r7, fp, lr}
	IT_mode = EXPLORE;
 800bde8:	4b26      	ldr	r3, [pc, #152]	; (800be84 <GainTestDWall+0xa0>)
	//PIDChangeFlagStraight(D_WALL_PID);
	PIDChangeFlag(D_WALL_PID, 1);
	PIDChangeFlag(L_WALL_PID, 0);
	PIDChangeFlag(R_WALL_PID, 0);
	//PIDSetGain(D_WALL_PID, 10, 0, 0);
	ExploreVelocity=0;
 800bdea:	ed9f 8a27 	vldr	s16, [pc, #156]	; 800be88 <GainTestDWall+0xa4>
 800bdee:	f8df b0a8 	ldr.w	fp, [pc, #168]	; 800be98 <GainTestDWall+0xb4>
 800bdf2:	4c26      	ldr	r4, [pc, #152]	; (800be8c <GainTestDWall+0xa8>)
	ChangeLED(2);
	while(1)
	{
		TargetVelocity[BODY] = 0;
		printf("前左: %f,前右: %f,横左: %f,横右: %f\r\n",Photo[FL],Photo[FR],Photo[SL],Photo[SR]);
 800bdf4:	f8df a0a4 	ldr.w	sl, [pc, #164]	; 800be9c <GainTestDWall+0xb8>
	IT_mode = EXPLORE;
 800bdf8:	2206      	movs	r2, #6
{
 800bdfa:	b087      	sub	sp, #28
	IT_mode = EXPLORE;
 800bdfc:	601a      	str	r2, [r3, #0]
	InitExplore();
 800bdfe:	f7ff fe43 	bl	800ba88 <InitExplore>
	TotalPulse[RIGHT] = 0;
 800be02:	4b23      	ldr	r3, [pc, #140]	; (800be90 <GainTestDWall+0xac>)
 800be04:	2500      	movs	r5, #0
	PIDChangeFlag(L_VELO_PID, 1);
 800be06:	2101      	movs	r1, #1
 800be08:	2004      	movs	r0, #4
	TotalPulse[RIGHT] = 0;
 800be0a:	605d      	str	r5, [r3, #4]
	TotalPulse[LEFT] = 0;
 800be0c:	601d      	str	r5, [r3, #0]
	TotalPulse[BODY] = 0;
 800be0e:	609d      	str	r5, [r3, #8]
	PIDChangeFlag(L_VELO_PID, 1);
 800be10:	f002 fe40 	bl	800ea94 <PIDChangeFlag>
	PIDChangeFlag(R_VELO_PID, 1);
 800be14:	2101      	movs	r1, #1
 800be16:	2005      	movs	r0, #5
 800be18:	f002 fe3c 	bl	800ea94 <PIDChangeFlag>
	PIDChangeFlag(D_WALL_PID, 1);
 800be1c:	2101      	movs	r1, #1
 800be1e:	4608      	mov	r0, r1
 800be20:	f002 fe38 	bl	800ea94 <PIDChangeFlag>
	PIDChangeFlag(L_WALL_PID, 0);
 800be24:	4629      	mov	r1, r5
 800be26:	2002      	movs	r0, #2
 800be28:	f002 fe34 	bl	800ea94 <PIDChangeFlag>
	PIDChangeFlag(R_WALL_PID, 0);
 800be2c:	2003      	movs	r0, #3
 800be2e:	4629      	mov	r1, r5
 800be30:	f002 fe30 	bl	800ea94 <PIDChangeFlag>
	ExploreVelocity=0;
 800be34:	4b17      	ldr	r3, [pc, #92]	; (800be94 <GainTestDWall+0xb0>)
	ChangeLED(2);
 800be36:	2002      	movs	r0, #2
	ExploreVelocity=0;
 800be38:	ed83 8a00 	vstr	s16, [r3]
	ChangeLED(2);
 800be3c:	f002 fa02 	bl	800e244 <ChangeLED>
		TargetVelocity[BODY] = 0;
 800be40:	ed8b 8a02 	vstr	s16, [fp, #8]
		printf("前左: %f,前右: %f,横左: %f,横右: %f\r\n",Photo[FL],Photo[FR],Photo[SL],Photo[SR]);
 800be44:	6820      	ldr	r0, [r4, #0]
 800be46:	68e5      	ldr	r5, [r4, #12]
 800be48:	f8d4 8008 	ldr.w	r8, [r4, #8]
 800be4c:	f8d4 9004 	ldr.w	r9, [r4, #4]
 800be50:	f7fc fab2 	bl	80083b8 <__aeabi_f2d>
 800be54:	4606      	mov	r6, r0
 800be56:	4648      	mov	r0, r9
 800be58:	460f      	mov	r7, r1
 800be5a:	f7fc faad 	bl	80083b8 <__aeabi_f2d>
 800be5e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800be62:	4640      	mov	r0, r8
 800be64:	f7fc faa8 	bl	80083b8 <__aeabi_f2d>
 800be68:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800be6c:	4628      	mov	r0, r5
 800be6e:	f7fc faa3 	bl	80083b8 <__aeabi_f2d>
 800be72:	4632      	mov	r2, r6
 800be74:	e9cd 0100 	strd	r0, r1, [sp]
 800be78:	463b      	mov	r3, r7
 800be7a:	4650      	mov	r0, sl
 800be7c:	f007 fa78 	bl	8013370 <iprintf>
 800be80:	e7de      	b.n	800be40 <GainTestDWall+0x5c>
 800be82:	bf00      	nop
 800be84:	2000150c 	.word	0x2000150c
 800be88:	00000000 	.word	0x00000000
 800be8c:	2000158c 	.word	0x2000158c
 800be90:	2000154c 	.word	0x2000154c
 800be94:	200015a0 	.word	0x200015a0
 800be98:	2000151c 	.word	0x2000151c
 800be9c:	08016e4c 	.word	0x08016e4c

0800bea0 <GainTestAVelo>:
	}
}

void GainTestAVelo()
{
 800bea0:	b508      	push	{r3, lr}
	IT_mode = EXPLORE;
 800bea2:	4b16      	ldr	r3, [pc, #88]	; (800befc <GainTestAVelo+0x5c>)
 800bea4:	2206      	movs	r2, #6
 800bea6:	601a      	str	r2, [r3, #0]
	InitExplore();
 800bea8:	f7ff fdee 	bl	800ba88 <InitExplore>
	TotalPulse[RIGHT] = 0;
 800beac:	4b14      	ldr	r3, [pc, #80]	; (800bf00 <GainTestAVelo+0x60>)
 800beae:	2400      	movs	r4, #0
	TotalPulse[LEFT] = 0;
	TotalPulse[BODY] = 0;

	PIDChangeFlag(L_VELO_PID, 1);
 800beb0:	2101      	movs	r1, #1
 800beb2:	2004      	movs	r0, #4
	TotalPulse[RIGHT] = 0;
 800beb4:	605c      	str	r4, [r3, #4]
	TotalPulse[LEFT] = 0;
 800beb6:	601c      	str	r4, [r3, #0]
	TotalPulse[BODY] = 0;
 800beb8:	609c      	str	r4, [r3, #8]
	PIDChangeFlag(L_VELO_PID, 1);
 800beba:	f002 fdeb 	bl	800ea94 <PIDChangeFlag>
	PIDChangeFlag(R_VELO_PID, 1);
 800bebe:	2101      	movs	r1, #1
 800bec0:	2005      	movs	r0, #5
 800bec2:	f002 fde7 	bl	800ea94 <PIDChangeFlag>
	//PIDChangeFlagStraight(A_VELO_PID);
	PIDChangeFlag(A_VELO_PID, 1);
 800bec6:	4620      	mov	r0, r4
 800bec8:	2101      	movs	r1, #1
 800beca:	f002 fde3 	bl	800ea94 <PIDChangeFlag>
	PIDChangeFlag(D_WALL_PID, 0);
 800bece:	4621      	mov	r1, r4
 800bed0:	2001      	movs	r0, #1
 800bed2:	f002 fddf 	bl	800ea94 <PIDChangeFlag>
	PIDChangeFlag(L_WALL_PID, 0);
 800bed6:	4621      	mov	r1, r4
 800bed8:	2002      	movs	r0, #2
 800beda:	f002 fddb 	bl	800ea94 <PIDChangeFlag>
	PIDChangeFlag(R_WALL_PID, 0);
 800bede:	4621      	mov	r1, r4
 800bee0:	2003      	movs	r0, #3
 800bee2:	f002 fdd7 	bl	800ea94 <PIDChangeFlag>
	//PIDSetGain(D_WALL_PID, 10, 0, 0);
	ExploreVelocity=0;
 800bee6:	4b07      	ldr	r3, [pc, #28]	; (800bf04 <GainTestAVelo+0x64>)
 800bee8:	2200      	movs	r2, #0
	ChangeLED(5);
 800beea:	2005      	movs	r0, #5
	ExploreVelocity=0;
 800beec:	601a      	str	r2, [r3, #0]
	ChangeLED(5);
 800beee:	f002 f9a9 	bl	800e244 <ChangeLED>
 800bef2:	4a05      	ldr	r2, [pc, #20]	; (800bf08 <GainTestAVelo+0x68>)
	while(1)
	{
		TargetVelocity[BODY] = 700;
 800bef4:	4b05      	ldr	r3, [pc, #20]	; (800bf0c <GainTestAVelo+0x6c>)
 800bef6:	6093      	str	r3, [r2, #8]
 800bef8:	e7fd      	b.n	800bef6 <GainTestAVelo+0x56>
 800befa:	bf00      	nop
 800befc:	2000150c 	.word	0x2000150c
 800bf00:	2000154c 	.word	0x2000154c
 800bf04:	200015a0 	.word	0x200015a0
 800bf08:	2000151c 	.word	0x2000151c
 800bf0c:	442f0000 	.word	0x442f0000

0800bf10 <WritingFree>:

	}
}
void WritingFree()
{
	IT_mode = WRITINGFREE;
 800bf10:	4e23      	ldr	r6, [pc, #140]	; (800bfa0 <WritingFree+0x90>)
	PIDChangeFlag(D_WALL_PID, 0);
	PIDChangeFlag(L_WALL_PID, 0);
	PIDChangeFlag(R_WALL_PID, 0);
	IT_mode = EXPLORE;
	PIDChangeFlag(A_VELO_PID, 1);
	ExploreVelocity=0;
 800bf12:	ed9f 8a24 	vldr	s16, [pc, #144]	; 800bfa4 <WritingFree+0x94>
{
 800bf16:	b508      	push	{r3, lr}
	IT_mode = WRITINGFREE;
 800bf18:	2507      	movs	r5, #7
 800bf1a:	6035      	str	r5, [r6, #0]
	InitExplore();
 800bf1c:	f7ff fdb4 	bl	800ba88 <InitExplore>
	printf("3\r\n");
 800bf20:	4821      	ldr	r0, [pc, #132]	; (800bfa8 <WritingFree+0x98>)
 800bf22:	f007 faad 	bl	8013480 <puts>
	printf("4\r\n");
 800bf26:	4821      	ldr	r0, [pc, #132]	; (800bfac <WritingFree+0x9c>)
 800bf28:	f007 faaa 	bl	8013480 <puts>
	TotalPulse[RIGHT] = 0;
 800bf2c:	4b20      	ldr	r3, [pc, #128]	; (800bfb0 <WritingFree+0xa0>)
 800bf2e:	2400      	movs	r4, #0
	PIDChangeFlag(L_VELO_PID, 1);
 800bf30:	2101      	movs	r1, #1
 800bf32:	2004      	movs	r0, #4
	TotalPulse[RIGHT] = 0;
 800bf34:	605c      	str	r4, [r3, #4]
	TotalPulse[LEFT] = 0;
 800bf36:	601c      	str	r4, [r3, #0]
	TotalPulse[BODY] = 0;
 800bf38:	609c      	str	r4, [r3, #8]
	PIDChangeFlag(L_VELO_PID, 1);
 800bf3a:	f002 fdab 	bl	800ea94 <PIDChangeFlag>
	PIDChangeFlag(R_VELO_PID, 1);
 800bf3e:	2101      	movs	r1, #1
 800bf40:	2005      	movs	r0, #5
 800bf42:	f002 fda7 	bl	800ea94 <PIDChangeFlag>
	PIDChangeFlag(D_WALL_PID, 0);
 800bf46:	4621      	mov	r1, r4
 800bf48:	2001      	movs	r0, #1
 800bf4a:	f002 fda3 	bl	800ea94 <PIDChangeFlag>
	PIDChangeFlag(L_WALL_PID, 0);
 800bf4e:	4621      	mov	r1, r4
 800bf50:	2002      	movs	r0, #2
 800bf52:	f002 fd9f 	bl	800ea94 <PIDChangeFlag>
	PIDChangeFlag(R_WALL_PID, 0);
 800bf56:	4621      	mov	r1, r4
 800bf58:	2003      	movs	r0, #3
 800bf5a:	f002 fd9b 	bl	800ea94 <PIDChangeFlag>
	IT_mode = EXPLORE;
 800bf5e:	2306      	movs	r3, #6
	PIDChangeFlag(A_VELO_PID, 1);
 800bf60:	2101      	movs	r1, #1
 800bf62:	4620      	mov	r0, r4
	IT_mode = EXPLORE;
 800bf64:	6033      	str	r3, [r6, #0]
	PIDChangeFlag(A_VELO_PID, 1);
 800bf66:	f002 fd95 	bl	800ea94 <PIDChangeFlag>
	ExploreVelocity=0;
 800bf6a:	4b12      	ldr	r3, [pc, #72]	; (800bfb4 <WritingFree+0xa4>)
	ChangeLED(7);
 800bf6c:	4628      	mov	r0, r5
	ExploreVelocity=0;
 800bf6e:	ed83 8a00 	vstr	s16, [r3]
	ChangeLED(7);
 800bf72:	f002 f967 	bl	800e244 <ChangeLED>
	FastStraight(0.5, 8, 1.0, -1.0, 4000, 0);
 800bf76:	eef0 2a48 	vmov.f32	s5, s16
 800bf7a:	ed9f 2a0f 	vldr	s4, [pc, #60]	; 800bfb8 <WritingFree+0xa8>
 800bf7e:	eeff 1a00 	vmov.f32	s3, #240	; 0xbf800000 -1.0
 800bf82:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 800bf86:	eef2 0a00 	vmov.f32	s1, #32	; 0x41000000  8.0
 800bf8a:	eeb6 0a00 	vmov.f32	s0, #96	; 0x3f000000  0.5
 800bf8e:	f000 fd37 	bl	800ca00 <FastStraight>
 800bf92:	4b0a      	ldr	r3, [pc, #40]	; (800bfbc <WritingFree+0xac>)
	while(1)
	{
		TargetVelocity[BODY] = 0;
 800bf94:	eef0 7a48 	vmov.f32	s15, s16
 800bf98:	edc3 7a02 	vstr	s15, [r3, #8]
 800bf9c:	e7fc      	b.n	800bf98 <WritingFree+0x88>
 800bf9e:	bf00      	nop
 800bfa0:	2000150c 	.word	0x2000150c
 800bfa4:	00000000 	.word	0x00000000
 800bfa8:	08016ea4 	.word	0x08016ea4
 800bfac:	08016ea8 	.word	0x08016ea8
 800bfb0:	2000154c 	.word	0x2000154c
 800bfb4:	200015a0 	.word	0x200015a0
 800bfb8:	457a0000 	.word	0x457a0000
 800bfbc:	2000151c 	.word	0x2000151c

0800bfc0 <FastestRun>:
	Sla.Theta1 = 30*M_PI/180;
	Sla.Theta2 = 60*M_PI/180;
	Sla.Theta3 = 90*M_PI/180;
}
void FastestRun()
{
 800bfc0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bfc4:	ed2d 8b02 	vpush	{d8}
	IT_mode = EXPLORE;
 800bfc8:	4b91      	ldr	r3, [pc, #580]	; (800c210 <FastestRun+0x250>)



//	wall_init();

	TotalPulse[RIGHT] = 0;
 800bfca:	4e92      	ldr	r6, [pc, #584]	; (800c214 <FastestRun+0x254>)
{
 800bfcc:	b084      	sub	sp, #16
	IT_mode = EXPLORE;
 800bfce:	2206      	movs	r2, #6
	HAL_Delay(100);
 800bfd0:	2064      	movs	r0, #100	; 0x64
	IT_mode = EXPLORE;
 800bfd2:	601a      	str	r2, [r3, #0]
	HAL_Delay(100);
 800bfd4:	f002 ff14 	bl	800ee00 <HAL_Delay>
	int8_t mode=1;
 800bfd8:	aa04      	add	r2, sp, #16
 800bfda:	2501      	movs	r5, #1
 800bfdc:	f802 5d02 	strb.w	r5, [r2, #-2]!
	  ModeSelect( 1, 2, &mode);
 800bfe0:	2102      	movs	r1, #2
 800bfe2:	4628      	mov	r0, r5
 800bfe4:	f002 fe30 	bl	800ec48 <ModeSelect>
	  Signal( mode );
 800bfe8:	f99d 000e 	ldrsb.w	r0, [sp, #14]
 800bfec:	f002 fdc0 	bl	800eb70 <Signal>
		HAL_Delay(100);
 800bff0:	2064      	movs	r0, #100	; 0x64
 800bff2:	f002 ff05 	bl	800ee00 <HAL_Delay>
		  int8_t mode2=1;
 800bff6:	aa04      	add	r2, sp, #16
		  ModeSelect( 1, 4, &mode2);
 800bff8:	2104      	movs	r1, #4
		  int8_t mode2=1;
 800bffa:	f802 5d01 	strb.w	r5, [r2, #-1]!
		  ModeSelect( 1, 4, &mode2);
 800bffe:	4628      	mov	r0, r5
 800c000:	f002 fe22 	bl	800ec48 <ModeSelect>
		  Signal( mode2 );
 800c004:	f99d 000f 	ldrsb.w	r0, [sp, #15]
	TotalPulse[RIGHT] = 0;
 800c008:	2400      	movs	r4, #0
		  Signal( mode2 );
 800c00a:	f002 fdb1 	bl	800eb70 <Signal>
		  PhotoSwitch();
 800c00e:	f002 fdf1 	bl	800ebf4 <PhotoSwitch>
	InitFastest();
 800c012:	f7ff fdd5 	bl	800bbc0 <InitFastest>
	TotalPulse[LEFT] = 0;
	TotalPulse[BODY] = 0;

	PIDChangeFlag(L_VELO_PID, 1);
 800c016:	4629      	mov	r1, r5
 800c018:	2004      	movs	r0, #4
	TotalPulse[RIGHT] = 0;
 800c01a:	6074      	str	r4, [r6, #4]
	TotalPulse[LEFT] = 0;
 800c01c:	6034      	str	r4, [r6, #0]
	TotalPulse[BODY] = 0;
 800c01e:	60b4      	str	r4, [r6, #8]
	PIDChangeFlag(L_VELO_PID, 1);
 800c020:	f002 fd38 	bl	800ea94 <PIDChangeFlag>
	PIDChangeFlag(R_VELO_PID, 1);
 800c024:	4629      	mov	r1, r5
 800c026:	2005      	movs	r0, #5
 800c028:	f002 fd34 	bl	800ea94 <PIDChangeFlag>
	printf("パルスチェック: BODY %d, LEFT %d, RIGHT %d\r\n",TotalPulse[BODY],TotalPulse[LEFT],TotalPulse[RIGHT]);
 800c02c:	68b1      	ldr	r1, [r6, #8]
 800c02e:	487a      	ldr	r0, [pc, #488]	; (800c218 <FastestRun+0x258>)
 800c030:	6832      	ldr	r2, [r6, #0]
 800c032:	6873      	ldr	r3, [r6, #4]
 800c034:	f007 f99c 	bl	8013370 <iprintf>
	//PIDChangeFlagStraight(N_WALL_PID);
	PIDChangeFlag(D_WALL_PID, 0);
 800c038:	4621      	mov	r1, r4
 800c03a:	4628      	mov	r0, r5
 800c03c:	f002 fd2a 	bl	800ea94 <PIDChangeFlag>
	PIDChangeFlag(L_WALL_PID, 0);
 800c040:	4621      	mov	r1, r4
 800c042:	2002      	movs	r0, #2
 800c044:	f002 fd26 	bl	800ea94 <PIDChangeFlag>
	PIDChangeFlag(R_WALL_PID, 0);
 800c048:	4621      	mov	r1, r4
 800c04a:	2003      	movs	r0, #3
 800c04c:	f002 fd22 	bl	800ea94 <PIDChangeFlag>
	PIDChangeFlag(A_VELO_PID, 0);
 800c050:	4621      	mov	r1, r4
 800c052:	4620      	mov	r0, r4
 800c054:	f002 fd1e 	bl	800ea94 <PIDChangeFlag>
	//PIDSetGain(D_WALL_PID, 10, 0, 0);

	char turn_mode = 'T';
	if(mode == 1)
 800c058:	f99d 300e 	ldrsb.w	r3, [sp, #14]
 800c05c:	42ab      	cmp	r3, r5
	{
		ExploreVelocity = 400;
 800c05e:	4b6f      	ldr	r3, [pc, #444]	; (800c21c <FastestRun+0x25c>)
 800c060:	bf04      	itt	eq
 800c062:	4a6f      	ldreq	r2, [pc, #444]	; (800c220 <FastestRun+0x260>)
 800c064:	601a      	streq	r2, [r3, #0]
	else if(mode == 2)
	{
		turn_mode = 'S';
	}

	switch(mode2)
 800c066:	f99d 200f 	ldrsb.w	r2, [sp, #15]
 800c06a:	3a01      	subs	r2, #1
 800c06c:	2a03      	cmp	r2, #3
 800c06e:	d803      	bhi.n	800c078 <FastestRun+0xb8>
 800c070:	e8df f002 	tbb	[pc, r2]
 800c074:	9da9b4bd 	.word	0x9da9b4bd
 800c078:	4d6a      	ldr	r5, [pc, #424]	; (800c224 <FastestRun+0x264>)
	Sla.Pre *=  2/MM_PER_PULSE;
 800c07a:	6828      	ldr	r0, [r5, #0]

	}
	initSlalomParam();
	ChangeLED(4);

	VelocityMax = false;
 800c07c:	4e6a      	ldr	r6, [pc, #424]	; (800c228 <FastestRun+0x268>)
	SearchOrFast = 1;
	Calc = SearchOrFast;
	//走る
	goal_edge_num = GOAL_SIZE_X;

	TargetVelocity[BODY] = 0;
 800c07e:	ed9f 8a6b 	vldr	s16, [pc, #428]	; 800c22c <FastestRun+0x26c>
 800c082:	4c6b      	ldr	r4, [pc, #428]	; (800c230 <FastestRun+0x270>)
 800c084:	f8df 8218 	ldr.w	r8, [pc, #536]	; 800c2a0 <FastestRun+0x2e0>
	//終了合図
	Signal(7);

	while(1)
	{
		printf("最短走行終了: かかった歩数: %d, スタートノードの重み: %d\r\n",Num_Nodes, my_map.RawNode[0][1].weight);
 800c088:	4f6a      	ldr	r7, [pc, #424]	; (800c234 <FastestRun+0x274>)
	Sla.Pre *=  2/MM_PER_PULSE;
 800c08a:	f7fc f995 	bl	80083b8 <__aeabi_f2d>
 800c08e:	a35e      	add	r3, pc, #376	; (adr r3, 800c208 <FastestRun+0x248>)
 800c090:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c094:	f7fc f9e8 	bl	8008468 <__aeabi_dmul>
 800c098:	f7fc fcde 	bl	8008a58 <__aeabi_d2f>
 800c09c:	6028      	str	r0, [r5, #0]
	Sla.Fol *=  2/MM_PER_PULSE;
 800c09e:	6868      	ldr	r0, [r5, #4]
 800c0a0:	f7fc f98a 	bl	80083b8 <__aeabi_f2d>
 800c0a4:	a358      	add	r3, pc, #352	; (adr r3, 800c208 <FastestRun+0x248>)
 800c0a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c0aa:	f7fc f9dd 	bl	8008468 <__aeabi_dmul>
 800c0ae:	f7fc fcd3 	bl	8008a58 <__aeabi_d2f>
	Sla.Theta1 = 30*M_PI/180;
 800c0b2:	4961      	ldr	r1, [pc, #388]	; (800c238 <FastestRun+0x278>)
	Sla.Theta2 = 60*M_PI/180;
 800c0b4:	4a61      	ldr	r2, [pc, #388]	; (800c23c <FastestRun+0x27c>)
	Sla.Theta3 = 90*M_PI/180;
 800c0b6:	4b62      	ldr	r3, [pc, #392]	; (800c240 <FastestRun+0x280>)
	Sla.Fol *=  2/MM_PER_PULSE;
 800c0b8:	6068      	str	r0, [r5, #4]
	ChangeLED(4);
 800c0ba:	2004      	movs	r0, #4
	VelocityMax = false;
 800c0bc:	f04f 0900 	mov.w	r9, #0
	Sla.Theta1 = 30*M_PI/180;
 800c0c0:	6129      	str	r1, [r5, #16]
	Sla.Theta2 = 60*M_PI/180;
 800c0c2:	616a      	str	r2, [r5, #20]
	Sla.Theta3 = 90*M_PI/180;
 800c0c4:	61ab      	str	r3, [r5, #24]
	ChangeLED(4);
 800c0c6:	f002 f8bd 	bl	800e244 <ChangeLED>
	SearchOrFast = 1;
 800c0ca:	4b5e      	ldr	r3, [pc, #376]	; (800c244 <FastestRun+0x284>)
	VelocityMax = false;
 800c0cc:	f886 9000 	strb.w	r9, [r6]
	SearchOrFast = 1;
 800c0d0:	2601      	movs	r6, #1
 800c0d2:	601e      	str	r6, [r3, #0]
	Calc = SearchOrFast;
 800c0d4:	495c      	ldr	r1, [pc, #368]	; (800c248 <FastestRun+0x288>)
	TargetVelocity[BODY] = 0;
 800c0d6:	4a5d      	ldr	r2, [pc, #372]	; (800c24c <FastestRun+0x28c>)
	Calc = SearchOrFast;
 800c0d8:	681b      	ldr	r3, [r3, #0]
	Acceleration = 0;
 800c0da:	4d5d      	ldr	r5, [pc, #372]	; (800c250 <FastestRun+0x290>)
	TargetAngularV = 0;
 800c0dc:	485d      	ldr	r0, [pc, #372]	; (800c254 <FastestRun+0x294>)
	Calc = SearchOrFast;
 800c0de:	600b      	str	r3, [r1, #0]
	Angle = 0;
 800c0e0:	4b5d      	ldr	r3, [pc, #372]	; (800c258 <FastestRun+0x298>)
	TargetAngle = 0;
 800c0e2:	495e      	ldr	r1, [pc, #376]	; (800c25c <FastestRun+0x29c>)
	TargetVelocity[BODY] = 0;
 800c0e4:	ed82 8a02 	vstr	s16, [r2, #8]
	goal_edge_num = GOAL_SIZE_X;
 800c0e8:	4a5d      	ldr	r2, [pc, #372]	; (800c260 <FastestRun+0x2a0>)
	Acceleration = 0;
 800c0ea:	ed85 8a00 	vstr	s16, [r5]
	goal_edge_num = GOAL_SIZE_X;
 800c0ee:	2502      	movs	r5, #2
	TargetAngularV = 0;
 800c0f0:	ed80 8a00 	vstr	s16, [r0]
	PIDReset(L_VELO_PID);
 800c0f4:	2004      	movs	r0, #4
	goal_edge_num = GOAL_SIZE_X;
 800c0f6:	7015      	strb	r5, [r2, #0]
	TargetAngle = 0;
 800c0f8:	ed81 8a00 	vstr	s16, [r1]
	Angle = 0;
 800c0fc:	ed83 8a00 	vstr	s16, [r3]
	PIDReset(L_VELO_PID);
 800c100:	f002 fcd0 	bl	800eaa4 <PIDReset>
	PIDReset(R_VELO_PID);
 800c104:	2005      	movs	r0, #5
 800c106:	f002 fccd 	bl	800eaa4 <PIDReset>
	PIDReset(A_VELO_PID);
 800c10a:	4648      	mov	r0, r9
 800c10c:	f002 fcca 	bl	800eaa4 <PIDReset>
	PIDReset(L_WALL_PID);
 800c110:	4628      	mov	r0, r5
 800c112:	f002 fcc7 	bl	800eaa4 <PIDReset>
	PIDReset(R_WALL_PID);
 800c116:	2003      	movs	r0, #3
 800c118:	f002 fcc4 	bl	800eaa4 <PIDReset>
	PIDReset(D_WALL_PID);
 800c11c:	4630      	mov	r0, r6
 800c11e:	f002 fcc1 	bl	800eaa4 <PIDReset>
	initSearchData(&my_map, &my_mouse);
 800c122:	4950      	ldr	r1, [pc, #320]	; (800c264 <FastestRun+0x2a4>)
		printAllWeight(&my_map, &(my_mouse.now.pos));
 800c124:	4e50      	ldr	r6, [pc, #320]	; (800c268 <FastestRun+0x2a8>)
	initSearchData(&my_map, &my_mouse);
 800c126:	4620      	mov	r0, r4
 800c128:	f7ff fa9e 	bl	800b668 <initSearchData>
	updateAllNodeWeight(&my_map, GOAL_X, GOAL_Y, GOAL_SIZE_X, GOAL_SIZE_Y, 0x03);
 800c12c:	f04f 0a03 	mov.w	sl, #3
	flashCopyNodesToRam(&my_map); //existenceだけ
 800c130:	4620      	mov	r0, r4
 800c132:	f000 fa35 	bl	800c5a0 <flashCopyNodesToRam>
	updateAllNodeWeight(&my_map, GOAL_X, GOAL_Y, GOAL_SIZE_X, GOAL_SIZE_Y, 0x03);
 800c136:	462b      	mov	r3, r5
 800c138:	464a      	mov	r2, r9
 800c13a:	9500      	str	r5, [sp, #0]
 800c13c:	2106      	movs	r1, #6
 800c13e:	4620      	mov	r0, r4
 800c140:	f8cd a004 	str.w	sl, [sp, #4]
 800c144:	f7fe fbf8 	bl	800a938 <updateAllNodeWeight>
	getPathNode(&my_map, &my_mouse);
 800c148:	4946      	ldr	r1, [pc, #280]	; (800c264 <FastestRun+0x2a4>)
 800c14a:	4620      	mov	r0, r4
 800c14c:	f7ff facc 	bl	800b6e8 <getPathNode>
	getPathAction(&my_mouse);
 800c150:	4844      	ldr	r0, [pc, #272]	; (800c264 <FastestRun+0x2a4>)
 800c152:	f7ff fbe9 	bl	800b928 <getPathAction>
	HAL_Delay(200);
 800c156:	20c8      	movs	r0, #200	; 0xc8
 800c158:	f002 fe52 	bl	800ee00 <HAL_Delay>
	initSearchData(&my_map, &my_mouse);
 800c15c:	4941      	ldr	r1, [pc, #260]	; (800c264 <FastestRun+0x2a4>)
 800c15e:	4620      	mov	r0, r4
 800c160:	f7ff fa82 	bl	800b668 <initSearchData>
	flashCopyNodesToRam(&my_map); //existenceだけ
 800c164:	4620      	mov	r0, r4
 800c166:	f000 fa1b 	bl	800c5a0 <flashCopyNodesToRam>
	updateAllNodeWeight(&my_map, GOAL_X, GOAL_Y, GOAL_SIZE_X, GOAL_SIZE_Y, 0x03);
 800c16a:	462b      	mov	r3, r5
 800c16c:	464a      	mov	r2, r9
 800c16e:	e9cd 5a00 	strd	r5, sl, [sp]
 800c172:	2106      	movs	r1, #6
 800c174:	4620      	mov	r0, r4
 800c176:	f7fe fbdf 	bl	800a938 <updateAllNodeWeight>
	MaxParaRunTest(&my_map, &my_mouse);
 800c17a:	f1a6 0108 	sub.w	r1, r6, #8
 800c17e:	4620      	mov	r0, r4
 800c180:	f000 fdba 	bl	800ccf8 <MaxParaRunTest>
	Decel(45,0);
 800c184:	eef0 0a48 	vmov.f32	s1, s16
 800c188:	ed9f 0a38 	vldr	s0, [pc, #224]	; 800c26c <FastestRun+0x2ac>
 800c18c:	f7fd fb94 	bl	80098b8 <Decel>
	Signal(7);
 800c190:	2007      	movs	r0, #7
 800c192:	f002 fced 	bl	800eb70 <Signal>
		printAllWeight(&my_map, &(my_mouse.now.pos));
 800c196:	4625      	mov	r5, r4
		printf("最短走行終了: かかった歩数: %d, スタートノードの重み: %d\r\n",Num_Nodes, my_map.RawNode[0][1].weight);
 800c198:	f8d8 1000 	ldr.w	r1, [r8]
 800c19c:	8962      	ldrh	r2, [r4, #10]
 800c19e:	4638      	mov	r0, r7
 800c1a0:	f007 f8e6 	bl	8013370 <iprintf>
		printAllWeight(&my_map, &(my_mouse.now.pos));
 800c1a4:	4631      	mov	r1, r6
 800c1a6:	4628      	mov	r0, r5
 800c1a8:	f7fe fd62 	bl	800ac70 <printAllWeight>
 800c1ac:	e7f4      	b.n	800c198 <FastestRun+0x1d8>
		Sla.Pre = 2;
 800c1ae:	4d1d      	ldr	r5, [pc, #116]	; (800c224 <FastestRun+0x264>)
		ExploreVelocity=240;
 800c1b0:	492f      	ldr	r1, [pc, #188]	; (800c270 <FastestRun+0x2b0>)
 800c1b2:	6019      	str	r1, [r3, #0]
		Sla.Alpha = 0.078;
 800c1b4:	4a2f      	ldr	r2, [pc, #188]	; (800c274 <FastestRun+0x2b4>)
 800c1b6:	60aa      	str	r2, [r5, #8]
		Sla.Pre = 2;
 800c1b8:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
		Sla.Fol = 16;
 800c1bc:	f04f 4383 	mov.w	r3, #1098907648	; 0x41800000
		Sla.Pre = 2;
 800c1c0:	6029      	str	r1, [r5, #0]
		Sla.Fol = 16;
 800c1c2:	606b      	str	r3, [r5, #4]
		break;
 800c1c4:	e759      	b.n	800c07a <FastestRun+0xba>
		Sla.Pre = 2;
 800c1c6:	4d17      	ldr	r5, [pc, #92]	; (800c224 <FastestRun+0x264>)
		ExploreVelocity=180;
 800c1c8:	492b      	ldr	r1, [pc, #172]	; (800c278 <FastestRun+0x2b8>)
 800c1ca:	6019      	str	r1, [r3, #0]
		Sla.Alpha = 0.04;
 800c1cc:	4a2b      	ldr	r2, [pc, #172]	; (800c27c <FastestRun+0x2bc>)
		Sla.Fol = 3.5;
 800c1ce:	4b2c      	ldr	r3, [pc, #176]	; (800c280 <FastestRun+0x2c0>)
 800c1d0:	606b      	str	r3, [r5, #4]
		Sla.Pre = 2;
 800c1d2:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 800c1d6:	6029      	str	r1, [r5, #0]
		Sla.Alpha = 0.04;
 800c1d8:	60aa      	str	r2, [r5, #8]
		break;
 800c1da:	e74e      	b.n	800c07a <FastestRun+0xba>
		Sla.Pre = 5;
 800c1dc:	4d11      	ldr	r5, [pc, #68]	; (800c224 <FastestRun+0x264>)
		ExploreVelocity=135;
 800c1de:	4929      	ldr	r1, [pc, #164]	; (800c284 <FastestRun+0x2c4>)
		Sla.Alpha = 0.0273;
 800c1e0:	4a29      	ldr	r2, [pc, #164]	; (800c288 <FastestRun+0x2c8>)
		ExploreVelocity=135;
 800c1e2:	6019      	str	r1, [r3, #0]
		Sla.Pre = 5;
 800c1e4:	4b29      	ldr	r3, [pc, #164]	; (800c28c <FastestRun+0x2cc>)
		Sla.Alpha = 0.0273;
 800c1e6:	60aa      	str	r2, [r5, #8]
		Sla.Pre = 5;
 800c1e8:	602b      	str	r3, [r5, #0]
		Sla.Fol = 5;
 800c1ea:	606b      	str	r3, [r5, #4]
		break;
 800c1ec:	e745      	b.n	800c07a <FastestRun+0xba>
		Sla.Pre = 7;//9;
 800c1ee:	4d0d      	ldr	r5, [pc, #52]	; (800c224 <FastestRun+0x264>)
		ExploreVelocity=90;
 800c1f0:	4927      	ldr	r1, [pc, #156]	; (800c290 <FastestRun+0x2d0>)
 800c1f2:	6019      	str	r1, [r3, #0]
		Sla.Alpha = 0.014;
 800c1f4:	4a27      	ldr	r2, [pc, #156]	; (800c294 <FastestRun+0x2d4>)
		Sla.Pre = 7;//9;
 800c1f6:	4928      	ldr	r1, [pc, #160]	; (800c298 <FastestRun+0x2d8>)
		Sla.Fol = 11;//13;
 800c1f8:	4b28      	ldr	r3, [pc, #160]	; (800c29c <FastestRun+0x2dc>)
		Sla.Pre = 7;//9;
 800c1fa:	6029      	str	r1, [r5, #0]
		Sla.Fol = 11;//13;
 800c1fc:	606b      	str	r3, [r5, #4]
		Sla.Alpha = 0.014;
 800c1fe:	60aa      	str	r2, [r5, #8]
		break;
 800c200:	e73b      	b.n	800c07a <FastestRun+0xba>
 800c202:	bf00      	nop
 800c204:	f3af 8000 	nop.w
 800c208:	e4b6c58e 	.word	0xe4b6c58e
 800c20c:	409fb8f9 	.word	0x409fb8f9
 800c210:	2000150c 	.word	0x2000150c
 800c214:	2000154c 	.word	0x2000154c
 800c218:	08016dc4 	.word	0x08016dc4
 800c21c:	200015a0 	.word	0x200015a0
 800c220:	43c80000 	.word	0x43c80000
 800c224:	20001564 	.word	0x20001564
 800c228:	2000159c 	.word	0x2000159c
 800c22c:	00000000 	.word	0x00000000
 800c230:	20001784 	.word	0x20001784
 800c234:	08016df8 	.word	0x08016df8
 800c238:	3f060a92 	.word	0x3f060a92
 800c23c:	3f860a92 	.word	0x3f860a92
 800c240:	3fc90fdb 	.word	0x3fc90fdb
 800c244:	200015a8 	.word	0x200015a8
 800c248:	200015c8 	.word	0x200015c8
 800c24c:	2000151c 	.word	0x2000151c
 800c250:	20001214 	.word	0x20001214
 800c254:	2000152c 	.word	0x2000152c
 800c258:	20001218 	.word	0x20001218
 800c25c:	20001228 	.word	0x20001228
 800c260:	20001548 	.word	0x20001548
 800c264:	200015d8 	.word	0x200015d8
 800c268:	200015e0 	.word	0x200015e0
 800c26c:	42340000 	.word	0x42340000
 800c270:	43700000 	.word	0x43700000
 800c274:	3d9fbe77 	.word	0x3d9fbe77
 800c278:	43340000 	.word	0x43340000
 800c27c:	3d23d70a 	.word	0x3d23d70a
 800c280:	40600000 	.word	0x40600000
 800c284:	43070000 	.word	0x43070000
 800c288:	3cdfa440 	.word	0x3cdfa440
 800c28c:	40a00000 	.word	0x40a00000
 800c290:	42b40000 	.word	0x42b40000
 800c294:	3c656042 	.word	0x3c656042
 800c298:	40e00000 	.word	0x40e00000
 800c29c:	41300000 	.word	0x41300000
 800c2a0:	2000120c 	.word	0x2000120c
 800c2a4:	00000000 	.word	0x00000000

0800c2a8 <Explore>:
	}
}
void Explore()
{
 800c2a8:	b5f0      	push	{r4, r5, r6, r7, lr}
	IT_mode = EXPLORE;
 800c2aa:	4b81      	ldr	r3, [pc, #516]	; (800c4b0 <Explore+0x208>)
{
 800c2ac:	b083      	sub	sp, #12
	IT_mode = EXPLORE;
 800c2ae:	2206      	movs	r2, #6
	//IT_mode = WRITINGFREE;
	//7で探索へ、0~6でデータ操作。マップを消す、マップをRAMに移す、マップを初期化する。
	//一回目で失敗していたら、flash消してram初期化
	//一回目で成功したら、flashをramに移す

	HAL_Delay(100);
 800c2b0:	2064      	movs	r0, #100	; 0x64
	IT_mode = EXPLORE;
 800c2b2:	601a      	str	r2, [r3, #0]
	HAL_Delay(100);
 800c2b4:	f002 fda4 	bl	800ee00 <HAL_Delay>
	int8_t mode=1;
 800c2b8:	aa02      	add	r2, sp, #8
 800c2ba:	2501      	movs	r5, #1
 800c2bc:	f802 5d02 	strb.w	r5, [r2, #-2]!
	ModeSelect( 1, 2, &mode);
 800c2c0:	2102      	movs	r1, #2
 800c2c2:	4628      	mov	r0, r5
 800c2c4:	f002 fcc0 	bl	800ec48 <ModeSelect>
	Signal( mode );
 800c2c8:	f99d 0006 	ldrsb.w	r0, [sp, #6]
 800c2cc:	f002 fc50 	bl	800eb70 <Signal>
	HAL_Delay(100);
 800c2d0:	2064      	movs	r0, #100	; 0x64
 800c2d2:	f002 fd95 	bl	800ee00 <HAL_Delay>

	int8_t mode2=1;
 800c2d6:	aa02      	add	r2, sp, #8
	ModeSelect( 1, 4, &mode2);
 800c2d8:	2104      	movs	r1, #4
	int8_t mode2=1;
 800c2da:	f802 5d01 	strb.w	r5, [r2, #-1]!
	ModeSelect( 1, 4, &mode2);
 800c2de:	4628      	mov	r0, r5
 800c2e0:	f002 fcb2 	bl	800ec48 <ModeSelect>
	Signal( mode2 );
 800c2e4:	f99d 0007 	ldrsb.w	r0, [sp, #7]
 800c2e8:	f002 fc42 	bl	800eb70 <Signal>
	PhotoSwitch();
 800c2ec:	f002 fc82 	bl	800ebf4 <PhotoSwitch>
	//printf("test\r\n");
	//HAL_Delay(2000);

	InitExplore();
 800c2f0:	f7ff fbca 	bl	800ba88 <InitExplore>

	TotalPulse[RIGHT] = 0;
 800c2f4:	4b6f      	ldr	r3, [pc, #444]	; (800c4b4 <Explore+0x20c>)
 800c2f6:	2400      	movs	r4, #0
	TotalPulse[LEFT] = 0;
	TotalPulse[BODY] = 0;

	PIDChangeFlag(L_VELO_PID, 1);
 800c2f8:	4629      	mov	r1, r5
 800c2fa:	2004      	movs	r0, #4
	TotalPulse[RIGHT] = 0;
 800c2fc:	605c      	str	r4, [r3, #4]
	TotalPulse[LEFT] = 0;
 800c2fe:	601c      	str	r4, [r3, #0]
	TotalPulse[BODY] = 0;
 800c300:	609c      	str	r4, [r3, #8]
	PIDChangeFlag(L_VELO_PID, 1);
 800c302:	f002 fbc7 	bl	800ea94 <PIDChangeFlag>
	PIDChangeFlag(R_VELO_PID, 1);
 800c306:	4629      	mov	r1, r5
 800c308:	2005      	movs	r0, #5
 800c30a:	f002 fbc3 	bl	800ea94 <PIDChangeFlag>

	//PIDChangeFlagStraight(N_WALL_PID);
	PIDChangeFlag(D_WALL_PID, 0);
 800c30e:	4621      	mov	r1, r4
 800c310:	4628      	mov	r0, r5
 800c312:	f002 fbbf 	bl	800ea94 <PIDChangeFlag>
	PIDChangeFlag(L_WALL_PID, 0);
 800c316:	4621      	mov	r1, r4
 800c318:	2002      	movs	r0, #2
 800c31a:	f002 fbbb 	bl	800ea94 <PIDChangeFlag>
	PIDChangeFlag(R_WALL_PID, 0);
 800c31e:	4621      	mov	r1, r4
 800c320:	2003      	movs	r0, #3
 800c322:	f002 fbb7 	bl	800ea94 <PIDChangeFlag>
	PIDChangeFlag(A_VELO_PID, 0);
 800c326:	4621      	mov	r1, r4
 800c328:	4620      	mov	r0, r4
 800c32a:	f002 fbb3 	bl	800ea94 <PIDChangeFlag>
	//PIDSetGain(D_WALL_PID, 10, 0, 0);

	//スラロームか、一区画ずつかを選ぶ。
	char turn_mode = 'T';
	if(mode == 1)
 800c32e:	f99d 3006 	ldrsb.w	r3, [sp, #6]
 800c332:	42ab      	cmp	r3, r5
 800c334:	d00e      	beq.n	800c354 <Explore+0xac>
		turn_mode = 'T';
		ExploreVelocity=300;
	}
	else if(mode == 2)
	{
		turn_mode = 'S';
 800c336:	2b02      	cmp	r3, #2
 800c338:	4e5f      	ldr	r6, [pc, #380]	; (800c4b8 <Explore+0x210>)
 800c33a:	bf14      	ite	ne
 800c33c:	2754      	movne	r7, #84	; 0x54
 800c33e:	2753      	moveq	r7, #83	; 0x53
	}

	switch(mode2)
 800c340:	f99d 3007 	ldrsb.w	r3, [sp, #7]
 800c344:	3b01      	subs	r3, #1
 800c346:	2b03      	cmp	r3, #3
 800c348:	f200 80ac 	bhi.w	800c4a4 <Explore+0x1fc>
 800c34c:	e8df f003 	tbb	[pc, r3]
 800c350:	078995a0 	.word	0x078995a0
		ExploreVelocity=300;
 800c354:	4e58      	ldr	r6, [pc, #352]	; (800c4b8 <Explore+0x210>)
 800c356:	4b59      	ldr	r3, [pc, #356]	; (800c4bc <Explore+0x214>)
 800c358:	6033      	str	r3, [r6, #0]
		turn_mode = 'T';
 800c35a:	2754      	movs	r7, #84	; 0x54
 800c35c:	e7f0      	b.n	800c340 <Explore+0x98>
		Sla.Theta2 = 60;
		Sla.Theta3 = 90;
		break;
	case 4:
		ExploreVelocity=300;
		Sla.Pre = 3;
 800c35e:	4c58      	ldr	r4, [pc, #352]	; (800c4c0 <Explore+0x218>)
		ExploreVelocity=300;
 800c360:	4a56      	ldr	r2, [pc, #344]	; (800c4bc <Explore+0x214>)
		Sla.Fol = 5;
		Sla.Alpha = 0.117;
 800c362:	4b58      	ldr	r3, [pc, #352]	; (800c4c4 <Explore+0x21c>)
		ExploreVelocity=300;
 800c364:	6032      	str	r2, [r6, #0]
		Sla.Pre = 3;
 800c366:	4958      	ldr	r1, [pc, #352]	; (800c4c8 <Explore+0x220>)
		Sla.Fol = 5;
 800c368:	4a58      	ldr	r2, [pc, #352]	; (800c4cc <Explore+0x224>)
		Sla.Pre = 3;
 800c36a:	6021      	str	r1, [r4, #0]
		Sla.Fol = 5;
 800c36c:	6062      	str	r2, [r4, #4]
		Sla.Alpha = 0.117;
 800c36e:	60a3      	str	r3, [r4, #8]
	Sla.Pre *=  2/MM_PER_PULSE;
 800c370:	6820      	ldr	r0, [r4, #0]
 800c372:	4d57      	ldr	r5, [pc, #348]	; (800c4d0 <Explore+0x228>)
 800c374:	f7fc f820 	bl	80083b8 <__aeabi_f2d>
 800c378:	a34b      	add	r3, pc, #300	; (adr r3, 800c4a8 <Explore+0x200>)
 800c37a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c37e:	f7fc f873 	bl	8008468 <__aeabi_dmul>
 800c382:	f7fc fb69 	bl	8008a58 <__aeabi_d2f>
 800c386:	6020      	str	r0, [r4, #0]
	Sla.Fol *=  2/MM_PER_PULSE;
 800c388:	6860      	ldr	r0, [r4, #4]
 800c38a:	f7fc f815 	bl	80083b8 <__aeabi_f2d>
 800c38e:	a346      	add	r3, pc, #280	; (adr r3, 800c4a8 <Explore+0x200>)
 800c390:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c394:	f7fc f868 	bl	8008468 <__aeabi_dmul>
 800c398:	f7fc fb5e 	bl	8008a58 <__aeabi_d2f>

		break;
	}
	initSlalomParam();
	goal_edge_num = two;
	VelocityMax = false;
 800c39c:	f8df c184 	ldr.w	ip, [pc, #388]	; 800c524 <Explore+0x27c>
	SearchOrFast = 0;
 800c3a0:	494c      	ldr	r1, [pc, #304]	; (800c4d4 <Explore+0x22c>)
	Calc = 0;
 800c3a2:	4a4d      	ldr	r2, [pc, #308]	; (800c4d8 <Explore+0x230>)
	Sla.Fol *=  2/MM_PER_PULSE;
 800c3a4:	6060      	str	r0, [r4, #4]
	VelocityMax = false;
 800c3a6:	2300      	movs	r3, #0
 800c3a8:	f88c 3000 	strb.w	r3, [ip]
	Sla.Theta2 = 60*M_PI/180;
 800c3ac:	484b      	ldr	r0, [pc, #300]	; (800c4dc <Explore+0x234>)
	SearchOrFast = 0;
 800c3ae:	600b      	str	r3, [r1, #0]
	Sla.Theta1 = 30*M_PI/180;
 800c3b0:	f8df c174 	ldr.w	ip, [pc, #372]	; 800c528 <Explore+0x280>
	Calc = 0;
 800c3b4:	6013      	str	r3, [r2, #0]
	Sla.Theta3 = 90*M_PI/180;
 800c3b6:	494a      	ldr	r1, [pc, #296]	; (800c4e0 <Explore+0x238>)
	goal_edge_num = two;
 800c3b8:	4a4a      	ldr	r2, [pc, #296]	; (800c4e4 <Explore+0x23c>)

//	Control_Mode=A_VELO_PID; //初期値が0. 減速時に
	Pid[A_VELO_PID].flag = 1;
 800c3ba:	4b4b      	ldr	r3, [pc, #300]	; (800c4e8 <Explore+0x240>)
	Sla.Theta1 = 30*M_PI/180;
 800c3bc:	f8c4 c010 	str.w	ip, [r4, #16]
	Sla.Theta2 = 60*M_PI/180;
 800c3c0:	6160      	str	r0, [r4, #20]
	Sla.Theta3 = 90*M_PI/180;
 800c3c2:	61a1      	str	r1, [r4, #24]
	goal_edge_num = two;
 800c3c4:	2002      	movs	r0, #2
	Pid[A_VELO_PID].flag = 1;
 800c3c6:	2401      	movs	r4, #1
	goal_edge_num = two;
 800c3c8:	7010      	strb	r0, [r2, #0]
	Pid[A_VELO_PID].flag = 1;
 800c3ca:	629c      	str	r4, [r3, #40]	; 0x28
	initSearchData(&my_map, &my_mouse);
 800c3cc:	4629      	mov	r1, r5
 800c3ce:	4847      	ldr	r0, [pc, #284]	; (800c4ec <Explore+0x244>)
 800c3d0:	f7ff f94a 	bl	800b668 <initSearchData>
//	printGoal(&my_mouse);
//	printAllWeight(&my_map, &(my_mouse.goal_lesser)); //この時点で右上が0スタート.　合ってる
	dbc = 1;
 800c3d4:	4b46      	ldr	r3, [pc, #280]	; (800c4f0 <Explore+0x248>)
	Accel(61.5, ExploreVelocity, &my_map, &my_mouse);
 800c3d6:	edd6 0a00 	vldr	s1, [r6]
 800c3da:	4844      	ldr	r0, [pc, #272]	; (800c4ec <Explore+0x244>)
 800c3dc:	ed9f 0a45 	vldr	s0, [pc, #276]	; 800c4f4 <Explore+0x24c>
	dbc = 1;
 800c3e0:	601c      	str	r4, [r3, #0]
	Accel(61.5, ExploreVelocity, &my_map, &my_mouse);
 800c3e2:	4629      	mov	r1, r5

//		//ChangeLED(Pos.Car);
//		KyushinJudge();
//		SelectAction(turn_mode);
//		shiftPos();
		getNextDirection(&my_map, &my_mouse, turn_mode);
 800c3e4:	462e      	mov	r6, r5
	Accel(61.5, ExploreVelocity, &my_map, &my_mouse);
 800c3e6:	f7fd f9b3 	bl	8009750 <Accel>
		getNextDirection(&my_map, &my_mouse, turn_mode);
 800c3ea:	4c40      	ldr	r4, [pc, #256]	; (800c4ec <Explore+0x244>)
	while( ! ((my_mouse.goal_lesser.x <= my_mouse.now.pos.x && my_mouse.now.pos.x <= my_mouse.goal_larger.x) && (my_mouse.goal_lesser.y <= my_mouse.now.pos.y && my_mouse.now.pos.y <= my_mouse.goal_larger.y))  ) //&&  (1/*ゴール座標の壁をすべて知っているフラグが0)*/ //ゴール区画内に入っていてかつゴールの区画をすべて知っていれば。
 800c3ec:	e001      	b.n	800c3f2 <Explore+0x14a>
		getNextDirection(&my_map, &my_mouse, turn_mode);
 800c3ee:	f000 fa05 	bl	800c7fc <getNextDirection>
	while( ! ((my_mouse.goal_lesser.x <= my_mouse.now.pos.x && my_mouse.now.pos.x <= my_mouse.goal_larger.x) && (my_mouse.goal_lesser.y <= my_mouse.now.pos.y && my_mouse.now.pos.y <= my_mouse.goal_larger.y))  ) //&&  (1/*ゴール座標の壁をすべて知っているフラグが0)*/ //ゴール区画内に入っていてかつゴールの区画をすべて知っていれば。
 800c3f2:	782a      	ldrb	r2, [r5, #0]
 800c3f4:	7a2b      	ldrb	r3, [r5, #8]
 800c3f6:	429a      	cmp	r2, r3
		getNextDirection(&my_map, &my_mouse, turn_mode);
 800c3f8:	4631      	mov	r1, r6
 800c3fa:	463a      	mov	r2, r7
 800c3fc:	4620      	mov	r0, r4
	while( ! ((my_mouse.goal_lesser.x <= my_mouse.now.pos.x && my_mouse.now.pos.x <= my_mouse.goal_larger.x) && (my_mouse.goal_lesser.y <= my_mouse.now.pos.y && my_mouse.now.pos.y <= my_mouse.goal_larger.y))  ) //&&  (1/*ゴール座標の壁をすべて知っているフラグが0)*/ //ゴール区画内に入っていてかつゴールの区画をすべて知っていれば。
 800c3fe:	d8f6      	bhi.n	800c3ee <Explore+0x146>
 800c400:	f895 c002 	ldrb.w	ip, [r5, #2]
 800c404:	459c      	cmp	ip, r3
 800c406:	d3f2      	bcc.n	800c3ee <Explore+0x146>
 800c408:	7a6b      	ldrb	r3, [r5, #9]
 800c40a:	f895 c001 	ldrb.w	ip, [r5, #1]
 800c40e:	459c      	cmp	ip, r3
 800c410:	d8ed      	bhi.n	800c3ee <Explore+0x146>
 800c412:	f895 c003 	ldrb.w	ip, [r5, #3]
 800c416:	459c      	cmp	ip, r3
 800c418:	d3e9      	bcc.n	800c3ee <Explore+0x146>
		}
#else
		//break;
#endif
	}
	Decel(45, 0);
 800c41a:	eddf 0a37 	vldr	s1, [pc, #220]	; 800c4f8 <Explore+0x250>
 800c41e:	ed9f 0a37 	vldr	s0, [pc, #220]	; 800c4fc <Explore+0x254>


while(1)
{
	//迷路データの出力
	printAllNodeExistence(&my_map);
 800c422:	4c32      	ldr	r4, [pc, #200]	; (800c4ec <Explore+0x244>)
	Decel(45, 0);
 800c424:	f7fd fa48 	bl	80098b8 <Decel>
	WaitStopAndReset();//これがないとガクンとなる.
 800c428:	f7fc fd4c 	bl	8008ec4 <WaitStopAndReset>
	shiftState(&my_mouse);
 800c42c:	4828      	ldr	r0, [pc, #160]	; (800c4d0 <Explore+0x228>)
 800c42e:	f7fe fd5d 	bl	800aeec <shiftState>
	PIDChangeFlag(A_VELO_PID, 0);
 800c432:	2100      	movs	r1, #0
 800c434:	4608      	mov	r0, r1
 800c436:	f002 fb2d 	bl	800ea94 <PIDChangeFlag>
	Flash_clear_sector1();
 800c43a:	f001 fd27 	bl	800de8c <Flash_clear_sector1>
	flashStoreNodes(&my_map);
 800c43e:	4620      	mov	r0, r4
 800c440:	f000 f874 	bl	800c52c <flashStoreNodes>
	Signal(7);
 800c444:	2007      	movs	r0, #7
 800c446:	f002 fb93 	bl	800eb70 <Signal>
	printAllNodeExistence(&my_map);
 800c44a:	4620      	mov	r0, r4
 800c44c:	f7fe fcbc 	bl	800adc8 <printAllNodeExistence>
	//printAllNode(&my_map); //drawを読み出す
	printMatrix16ValueFromNode(&my_map);
 800c450:	4620      	mov	r0, r4
 800c452:	f7fe fcfb 	bl	800ae4c <printMatrix16ValueFromNode>
	printAllWeight(&my_map, &(my_mouse.now.node->pos) );
 800c456:	6929      	ldr	r1, [r5, #16]
 800c458:	4620      	mov	r0, r4
 800c45a:	3106      	adds	r1, #6
 800c45c:	f7fe fc08 	bl	800ac70 <printAllWeight>
 800c460:	e7f3      	b.n	800c44a <Explore+0x1a2>
		Sla.Pre = 2;
 800c462:	4c17      	ldr	r4, [pc, #92]	; (800c4c0 <Explore+0x218>)
		ExploreVelocity=240;
 800c464:	4a26      	ldr	r2, [pc, #152]	; (800c500 <Explore+0x258>)
		Sla.Alpha = 0.078;
 800c466:	4b27      	ldr	r3, [pc, #156]	; (800c504 <Explore+0x25c>)
		ExploreVelocity=240;
 800c468:	6032      	str	r2, [r6, #0]
		Sla.Pre = 2;
 800c46a:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
		Sla.Fol = 16;
 800c46e:	f04f 4283 	mov.w	r2, #1098907648	; 0x41800000
		Sla.Pre = 2;
 800c472:	6021      	str	r1, [r4, #0]
		Sla.Fol = 16;
 800c474:	6062      	str	r2, [r4, #4]
		Sla.Alpha = 0.078;
 800c476:	60a3      	str	r3, [r4, #8]
		break;
 800c478:	e77a      	b.n	800c370 <Explore+0xc8>
		Sla.Pre = 2;
 800c47a:	4c11      	ldr	r4, [pc, #68]	; (800c4c0 <Explore+0x218>)
		ExploreVelocity=180;
 800c47c:	4922      	ldr	r1, [pc, #136]	; (800c508 <Explore+0x260>)
		Sla.Fol = 16.5;
 800c47e:	4a23      	ldr	r2, [pc, #140]	; (800c50c <Explore+0x264>)
		Sla.Alpha = 0.043;
 800c480:	4b23      	ldr	r3, [pc, #140]	; (800c510 <Explore+0x268>)
		ExploreVelocity=180;
 800c482:	6031      	str	r1, [r6, #0]
		Sla.Pre = 2;
 800c484:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 800c488:	6021      	str	r1, [r4, #0]
		Sla.Fol = 16.5;
 800c48a:	6062      	str	r2, [r4, #4]
		Sla.Alpha = 0.043;
 800c48c:	60a3      	str	r3, [r4, #8]
		break;
 800c48e:	e76f      	b.n	800c370 <Explore+0xc8>
		Sla.Pre = 9;
 800c490:	4c0b      	ldr	r4, [pc, #44]	; (800c4c0 <Explore+0x218>)
		ExploreVelocity=90;
 800c492:	4a20      	ldr	r2, [pc, #128]	; (800c514 <Explore+0x26c>)
		Sla.Alpha = 0.014;
 800c494:	4b20      	ldr	r3, [pc, #128]	; (800c518 <Explore+0x270>)
		ExploreVelocity=90;
 800c496:	6032      	str	r2, [r6, #0]
		Sla.Pre = 9;
 800c498:	4920      	ldr	r1, [pc, #128]	; (800c51c <Explore+0x274>)
		Sla.Fol = 20;
 800c49a:	4a21      	ldr	r2, [pc, #132]	; (800c520 <Explore+0x278>)
		Sla.Pre = 9;
 800c49c:	6021      	str	r1, [r4, #0]
		Sla.Fol = 20;
 800c49e:	6062      	str	r2, [r4, #4]
		Sla.Alpha = 0.014;
 800c4a0:	60a3      	str	r3, [r4, #8]
		break;
 800c4a2:	e765      	b.n	800c370 <Explore+0xc8>
 800c4a4:	4c06      	ldr	r4, [pc, #24]	; (800c4c0 <Explore+0x218>)
 800c4a6:	e763      	b.n	800c370 <Explore+0xc8>
 800c4a8:	e4b6c58e 	.word	0xe4b6c58e
 800c4ac:	409fb8f9 	.word	0x409fb8f9
 800c4b0:	2000150c 	.word	0x2000150c
 800c4b4:	2000154c 	.word	0x2000154c
 800c4b8:	200015a0 	.word	0x200015a0
 800c4bc:	43960000 	.word	0x43960000
 800c4c0:	20001564 	.word	0x20001564
 800c4c4:	3def9db2 	.word	0x3def9db2
 800c4c8:	40400000 	.word	0x40400000
 800c4cc:	40a00000 	.word	0x40a00000
 800c4d0:	200015d8 	.word	0x200015d8
 800c4d4:	200015a8 	.word	0x200015a8
 800c4d8:	200015c8 	.word	0x200015c8
 800c4dc:	3f860a92 	.word	0x3f860a92
 800c4e0:	3fc90fdb 	.word	0x3fc90fdb
 800c4e4:	20001548 	.word	0x20001548
 800c4e8:	20001318 	.word	0x20001318
 800c4ec:	20001784 	.word	0x20001784
 800c4f0:	20000204 	.word	0x20000204
 800c4f4:	42760000 	.word	0x42760000
 800c4f8:	00000000 	.word	0x00000000
 800c4fc:	42340000 	.word	0x42340000
 800c500:	43700000 	.word	0x43700000
 800c504:	3d9fbe77 	.word	0x3d9fbe77
 800c508:	43340000 	.word	0x43340000
 800c50c:	41840000 	.word	0x41840000
 800c510:	3d3020c5 	.word	0x3d3020c5
 800c514:	42b40000 	.word	0x42b40000
 800c518:	3c656042 	.word	0x3c656042
 800c51c:	41100000 	.word	0x41100000
 800c520:	41a00000 	.word	0x41a00000
 800c524:	2000159c 	.word	0x2000159c
 800c528:	3f060a92 	.word	0x3f060a92

0800c52c <flashStoreNodes>:
//マップデータをフラッシュに書き込む処理
#include "Flash.h"
#include "MazeLib.h"
void flashStoreNodes(maze_node *maze)
{
	uint32_t address=start_adress_sector1;
 800c52c:	4b1b      	ldr	r3, [pc, #108]	; (800c59c <flashStoreNodes+0x70>)
{
 800c52e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	uint32_t address=start_adress_sector1;
 800c532:	f8d3 8000 	ldr.w	r8, [r3]
 800c536:	ebc8 7ac8 	rsb	sl, r8, r8, lsl #31
{
 800c53a:	4607      	mov	r7, r0
 800c53c:	ea4f 0a4a 	mov.w	sl, sl, lsl #1
	uint32_t address=start_adress_sector1;
 800c540:	4644      	mov	r4, r8
 800c542:	f04f 0900 	mov.w	r9, #0
 800c546:	eb09 050a 	add.w	r5, r9, sl

	for(int i=0; i < NUMBER_OF_SQUARES_X; i++)
	{
			for(int j=0; j < NUMBER_OF_SQUARES_Y+1; j++)
			{
				FLASH_Write_Word(address+0, maze->RawNode[i][j].existence);
 800c54a:	443d      	add	r5, r7
 800c54c:	f104 0628 	add.w	r6, r4, #40	; 0x28
 800c550:	f815 1014 	ldrb.w	r1, [r5, r4, lsl #1]
 800c554:	4620      	mov	r0, r4
				address += 4;
 800c556:	3404      	adds	r4, #4
				FLASH_Write_Word(address+0, maze->RawNode[i][j].existence);
 800c558:	f001 fbfa 	bl	800dd50 <FLASH_Write_Word>
			for(int j=0; j < NUMBER_OF_SQUARES_Y+1; j++)
 800c55c:	42b4      	cmp	r4, r6
 800c55e:	d1f7      	bne.n	800c550 <flashStoreNodes+0x24>
 800c560:	f109 0950 	add.w	r9, r9, #80	; 0x50
	for(int i=0; i < NUMBER_OF_SQUARES_X; i++)
 800c564:	f5b9 7f34 	cmp.w	r9, #720	; 0x2d0
 800c568:	f1aa 0a50 	sub.w	sl, sl, #80	; 0x50
 800c56c:	d1eb      	bne.n	800c546 <flashStoreNodes+0x1a>
 800c56e:	f508 74b4 	add.w	r4, r8, #360	; 0x168
 800c572:	f508 7834 	add.w	r8, r8, #720	; 0x2d0
 800c576:	f104 0624 	add.w	r6, r4, #36	; 0x24
	uint32_t address=start_adress_sector1;
 800c57a:	463d      	mov	r5, r7
	//列
	for(int i=0; i < NUMBER_OF_SQUARES_X+1; i++)
	{
			for(int j=0; j < NUMBER_OF_SQUARES_Y; j++)
			{
				FLASH_Write_Word(address+0, maze->ColumnNode[i][j].existence);
 800c57c:	f895 12d0 	ldrb.w	r1, [r5, #720]	; 0x2d0
 800c580:	4620      	mov	r0, r4
				address += 4;
 800c582:	3404      	adds	r4, #4
				FLASH_Write_Word(address+0, maze->ColumnNode[i][j].existence);
 800c584:	f001 fbe4 	bl	800dd50 <FLASH_Write_Word>
			for(int j=0; j < NUMBER_OF_SQUARES_Y; j++)
 800c588:	42a6      	cmp	r6, r4
 800c58a:	f105 0508 	add.w	r5, r5, #8
 800c58e:	d1f5      	bne.n	800c57c <flashStoreNodes+0x50>
	for(int i=0; i < NUMBER_OF_SQUARES_X+1; i++)
 800c590:	4546      	cmp	r6, r8
 800c592:	f107 0748 	add.w	r7, r7, #72	; 0x48
 800c596:	d1ee      	bne.n	800c576 <flashStoreNodes+0x4a>
			}
	}
}
 800c598:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c59c:	08016ee4 	.word	0x08016ee4

0800c5a0 <flashCopyNodesToRam>:
	printf("\r\n");

}
//評価値マップ生成。
void flashCopyNodesToRam(maze_node *maze)
{
 800c5a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint32_t address=start_adress_sector1;
 800c5a4:	4b1f      	ldr	r3, [pc, #124]	; (800c624 <flashCopyNodesToRam+0x84>)
 800c5a6:	f8d3 a000 	ldr.w	sl, [r3]
 800c5aa:	f04f 0900 	mov.w	r9, #0
 800c5ae:	ebca 7bca 	rsb	fp, sl, sl, lsl #31
{
 800c5b2:	b083      	sub	sp, #12
 800c5b4:	4680      	mov	r8, r0
 800c5b6:	ea4f 0b4b 	mov.w	fp, fp, lsl #1
	uint32_t address=start_adress_sector1;
 800c5ba:	4654      	mov	r4, sl

	for(int i=0; i < NUMBER_OF_SQUARES_X; i++)
	{
			for(int j=0; j < NUMBER_OF_SQUARES_Y+1; j++)
			{
				uint32_t wall_data=0;
 800c5bc:	464f      	mov	r7, r9
 800c5be:	eb09 050b 	add.w	r5, r9, fp
				FLASH_Read_Word(address, &wall_data);
				maze->RawNode[i][j].existence = wall_data;
 800c5c2:	4445      	add	r5, r8
 800c5c4:	f104 0628 	add.w	r6, r4, #40	; 0x28
				FLASH_Read_Word(address, &wall_data);
 800c5c8:	4620      	mov	r0, r4
 800c5ca:	a901      	add	r1, sp, #4
				uint32_t wall_data=0;
 800c5cc:	9701      	str	r7, [sp, #4]
				FLASH_Read_Word(address, &wall_data);
 800c5ce:	f001 fbe7 	bl	800dda0 <FLASH_Read_Word>
				maze->RawNode[i][j].existence = wall_data;
 800c5d2:	9b01      	ldr	r3, [sp, #4]
 800c5d4:	f805 3014 	strb.w	r3, [r5, r4, lsl #1]
				address += sizeof(wall_data);
 800c5d8:	3404      	adds	r4, #4
			for(int j=0; j < NUMBER_OF_SQUARES_Y+1; j++)
 800c5da:	42b4      	cmp	r4, r6
 800c5dc:	d1f4      	bne.n	800c5c8 <flashCopyNodesToRam+0x28>
 800c5de:	f109 0950 	add.w	r9, r9, #80	; 0x50
	for(int i=0; i < NUMBER_OF_SQUARES_X; i++)
 800c5e2:	f5b9 7f34 	cmp.w	r9, #720	; 0x2d0
 800c5e6:	f1ab 0b50 	sub.w	fp, fp, #80	; 0x50
 800c5ea:	d1e8      	bne.n	800c5be <flashCopyNodesToRam+0x1e>
 800c5ec:	f50a 74b4 	add.w	r4, sl, #360	; 0x168
	}
	for(int i=0; i < NUMBER_OF_SQUARES_X+1; i++)
	{
			for(int j=0; j < NUMBER_OF_SQUARES_Y; j++)
			{
				uint32_t wall_data=0;
 800c5f0:	2700      	movs	r7, #0
 800c5f2:	f50a 7a34 	add.w	sl, sl, #720	; 0x2d0
 800c5f6:	f104 0624 	add.w	r6, r4, #36	; 0x24
	uint32_t address=start_adress_sector1;
 800c5fa:	4645      	mov	r5, r8
				FLASH_Read_Word(address, &wall_data);
 800c5fc:	4620      	mov	r0, r4
 800c5fe:	a901      	add	r1, sp, #4
				maze->ColumnNode[i][j].existence = wall_data;
				address += sizeof(wall_data);
 800c600:	3404      	adds	r4, #4
				uint32_t wall_data=0;
 800c602:	9701      	str	r7, [sp, #4]
				FLASH_Read_Word(address, &wall_data);
 800c604:	f001 fbcc 	bl	800dda0 <FLASH_Read_Word>
				maze->ColumnNode[i][j].existence = wall_data;
 800c608:	9b01      	ldr	r3, [sp, #4]
 800c60a:	f885 32d0 	strb.w	r3, [r5, #720]	; 0x2d0
			for(int j=0; j < NUMBER_OF_SQUARES_Y; j++)
 800c60e:	42a6      	cmp	r6, r4
 800c610:	f105 0508 	add.w	r5, r5, #8
 800c614:	d1f2      	bne.n	800c5fc <flashCopyNodesToRam+0x5c>
	for(int i=0; i < NUMBER_OF_SQUARES_X+1; i++)
 800c616:	4556      	cmp	r6, sl
 800c618:	f108 0848 	add.w	r8, r8, #72	; 0x48
 800c61c:	d1eb      	bne.n	800c5f6 <flashCopyNodesToRam+0x56>
			}
	}
}
 800c61e:	b003      	add	sp, #12
 800c620:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c624:	08016ee4 	.word	0x08016ee4

0800c628 <updateRealSearch>:

//探索及び最短走行のロジック（制御ロジックは考慮しない）
//後ろの方にはActionを含めた処理も. MazeSimulationでActionっぽい処理が書ければそれを入れてtestへ

void updateRealSearch(maze_node *maze, profile *mouse)
{
 800c628:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c62a:	460c      	mov	r4, r1
 800c62c:	b083      	sub	sp, #12
 800c62e:	4605      	mov	r5, r0
	//wall_state wall_st[4]={0};

	//壁センサ値を読んで、各方角の壁の有無を判定
		//区画進入直前なので、更新予定の方角と座標がNextに入っているはず
		//前後左右の値として入れる
	shiftState(mouse);
 800c630:	4608      	mov	r0, r1
 800c632:	f7fe fc5b 	bl	800aeec <shiftState>

    switch (mouse->now.car)
 800c636:	7aa3      	ldrb	r3, [r4, #10]
 800c638:	2b06      	cmp	r3, #6
 800c63a:	f200 80d1 	bhi.w	800c7e0 <updateRealSearch+0x1b8>
 800c63e:	e8df f003 	tbb	[pc, r3]
 800c642:	cfa3      	.short	0xcfa3
 800c644:	cf4bcf77 	.word	0xcf4bcf77
 800c648:	04          	.byte	0x04
 800c649:	00          	.byte	0x00
    	wall_dir[3] = Photo[SR] > RIGHT_WALL  ?  WALL :  NOWALL;
    	wall_dir[0] = NOWALL;
    	wall_dir[1] = Photo[SL] > LEFT_WALL ?  WALL :  NOWALL;
        break;
    case west:
    	wall_dir[3] = ((Photo[FL] + Photo[FR])/2 > FRONT_WALL)  ?   WALL : NOWALL;	//70超えたら壁あり。
 800c64a:	4b68      	ldr	r3, [pc, #416]	; (800c7ec <updateRealSearch+0x1c4>)
    	wall_dir[0] = Photo[SR] > RIGHT_WALL  ?  WALL :  NOWALL;
 800c64c:	eddf 5a68 	vldr	s11, [pc, #416]	; 800c7f0 <updateRealSearch+0x1c8>
    	wall_dir[3] = ((Photo[FL] + Photo[FR])/2 > FRONT_WALL)  ?   WALL : NOWALL;	//70超えたら壁あり。
 800c650:	edd3 7a00 	vldr	s15, [r3]
 800c654:	edd3 4a03 	vldr	s9, [r3, #12]
    	wall_dir[0] = Photo[SR] > RIGHT_WALL  ?  WALL :  NOWALL;
 800c658:	ed93 5a01 	vldr	s10, [r3, #4]
    	wall_dir[1] = NOWALL;
    	wall_dir[2] = Photo[SL] > LEFT_WALL ?  WALL :  NOWALL;
 800c65c:	eddf 6a65 	vldr	s13, [pc, #404]	; 800c7f4 <updateRealSearch+0x1cc>
 800c660:	ed93 6a02 	vldr	s12, [r3, #8]
    	wall_dir[3] = ((Photo[FL] + Photo[FR])/2 > FRONT_WALL)  ?   WALL : NOWALL;	//70超えたら壁あり。
 800c664:	ed9f 7a64 	vldr	s14, [pc, #400]	; 800c7f8 <updateRealSearch+0x1d0>
 800c668:	ee77 7aa4 	vadd.f32	s15, s15, s9
 800c66c:	eef6 4a00 	vmov.f32	s9, #96	; 0x3f000000  0.5
    	wall_dir[0] = Photo[SR] > RIGHT_WALL  ?  WALL :  NOWALL;
 800c670:	eeb4 5ae5 	vcmpe.f32	s10, s11
    	wall_dir[3] = ((Photo[FL] + Photo[FR])/2 > FRONT_WALL)  ?   WALL : NOWALL;	//70超えたら壁あり。
 800c674:	ee67 7aa4 	vmul.f32	s15, s15, s9
    	wall_dir[0] = Photo[SR] > RIGHT_WALL  ?  WALL :  NOWALL;
 800c678:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    	wall_dir[2] = Photo[SL] > LEFT_WALL ?  WALL :  NOWALL;
 800c67c:	eeb4 6ae6 	vcmpe.f32	s12, s13
 800c680:	bfcc      	ite	gt
 800c682:	2701      	movgt	r7, #1
 800c684:	2700      	movle	r7, #0
 800c686:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    	wall_dir[3] = ((Photo[FL] + Photo[FR])/2 > FRONT_WALL)  ?   WALL : NOWALL;	//70超えたら壁あり。
 800c68a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800c68e:	bfcc      	ite	gt
 800c690:	2001      	movgt	r0, #1
 800c692:	2000      	movle	r0, #0
 800c694:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c698:	bfcc      	ite	gt
 800c69a:	2101      	movgt	r1, #1
 800c69c:	2100      	movle	r1, #0
        break;
 800c69e:	2600      	movs	r6, #0
//	Wall[Pos.NextX][Pos.NextY].north = wall_dir[0];
//	Wall[Pos.NextX][Pos.NextY].east = wall_dir[1];
//	Wall[Pos.NextX][Pos.NextY].south = wall_dir[2];
//	Wall[Pos.NextX][Pos.NextY].west = wall_dir[3];
    //アクションが終わるときがノードの上にいる状態なので、状態シフト済みとする（この関数はアクション中に呼び出される想定）
    mouse->now.wall.north = wall_dir[0];
 800c6a0:	7b22      	ldrb	r2, [r4, #12]

	//getWallNow(&(my_mouse->now), &wall[0]);

    //現在方角、壁は、合ってる。座標とノードは？
    //ここで壁の存在を反映
	updateNodeThree(maze, &(mouse->now), mouse->now.pos.x, mouse->now.pos.y);
 800c6a2:	7a63      	ldrb	r3, [r4, #9]
    mouse->now.wall.north = wall_dir[0];
 800c6a4:	f367 0201 	bfi	r2, r7, #0, #2
    mouse->now.wall.east = wall_dir[1];
 800c6a8:	f366 0283 	bfi	r2, r6, #2, #2
    mouse->now.wall.south = wall_dir[2];
 800c6ac:	f360 1205 	bfi	r2, r0, #4, #2
    mouse->now.wall.west = wall_dir[3];
 800c6b0:	f361 1287 	bfi	r2, r1, #6, #2
	updateNodeThree(maze, &(mouse->now), mouse->now.pos.x, mouse->now.pos.y);
 800c6b4:	4621      	mov	r1, r4
    mouse->now.wall.west = wall_dir[3];
 800c6b6:	7322      	strb	r2, [r4, #12]
	updateNodeThree(maze, &(mouse->now), mouse->now.pos.x, mouse->now.pos.y);
 800c6b8:	f811 2f08 	ldrb.w	r2, [r1, #8]!
 800c6bc:	4628      	mov	r0, r5
 800c6be:	f7fe fa5d 	bl	800ab7c <updateNodeThree>

	//壁の存在を基に重みマップを更新
	updateAllNodeWeight(maze, mouse->goal_lesser.x, mouse->goal_lesser.y, GOAL_SIZE_X, GOAL_SIZE_Y, 0x01);
 800c6c2:	7862      	ldrb	r2, [r4, #1]
 800c6c4:	7821      	ldrb	r1, [r4, #0]
 800c6c6:	2302      	movs	r3, #2
 800c6c8:	2401      	movs	r4, #1
 800c6ca:	4628      	mov	r0, r5
 800c6cc:	e9cd 3400 	strd	r3, r4, [sp]
 800c6d0:	f7fe f932 	bl	800a938 <updateAllNodeWeight>
}
 800c6d4:	b003      	add	sp, #12
 800c6d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    	wall_dir[2] = ((Photo[FL] + Photo[FR])/2 > FRONT_WALL)  ?   WALL : NOWALL;	//70超えたら壁あり。
 800c6d8:	4b44      	ldr	r3, [pc, #272]	; (800c7ec <updateRealSearch+0x1c4>)
    	wall_dir[1] = Photo[SL] > LEFT_WALL ?  WALL :  NOWALL;
 800c6da:	eddf 5a46 	vldr	s11, [pc, #280]	; 800c7f4 <updateRealSearch+0x1cc>
    	wall_dir[2] = ((Photo[FL] + Photo[FR])/2 > FRONT_WALL)  ?   WALL : NOWALL;	//70超えたら壁あり。
 800c6de:	edd3 7a00 	vldr	s15, [r3]
 800c6e2:	edd3 4a03 	vldr	s9, [r3, #12]
    	wall_dir[3] = Photo[SR] > RIGHT_WALL  ?  WALL :  NOWALL;
 800c6e6:	edd3 6a01 	vldr	s13, [r3, #4]
    	wall_dir[1] = Photo[SL] > LEFT_WALL ?  WALL :  NOWALL;
 800c6ea:	ed93 5a02 	vldr	s10, [r3, #8]
    	wall_dir[2] = ((Photo[FL] + Photo[FR])/2 > FRONT_WALL)  ?   WALL : NOWALL;	//70超えたら壁あり。
 800c6ee:	ed9f 6a42 	vldr	s12, [pc, #264]	; 800c7f8 <updateRealSearch+0x1d0>
    	wall_dir[3] = Photo[SR] > RIGHT_WALL  ?  WALL :  NOWALL;
 800c6f2:	ed9f 7a3f 	vldr	s14, [pc, #252]	; 800c7f0 <updateRealSearch+0x1c8>
    	wall_dir[2] = ((Photo[FL] + Photo[FR])/2 > FRONT_WALL)  ?   WALL : NOWALL;	//70超えたら壁あり。
 800c6f6:	ee77 7aa4 	vadd.f32	s15, s15, s9
 800c6fa:	eef6 4a00 	vmov.f32	s9, #96	; 0x3f000000  0.5
 800c6fe:	ee67 7aa4 	vmul.f32	s15, s15, s9
    	wall_dir[1] = Photo[SL] > LEFT_WALL ?  WALL :  NOWALL;
 800c702:	eeb4 5ae5 	vcmpe.f32	s10, s11
 800c706:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    	wall_dir[2] = ((Photo[FL] + Photo[FR])/2 > FRONT_WALL)  ?   WALL : NOWALL;	//70超えたら壁あり。
 800c70a:	eef4 7ac6 	vcmpe.f32	s15, s12
 800c70e:	bfcc      	ite	gt
 800c710:	2601      	movgt	r6, #1
 800c712:	2600      	movle	r6, #0
 800c714:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    	wall_dir[3] = Photo[SR] > RIGHT_WALL  ?  WALL :  NOWALL;
 800c718:	eef4 6ac7 	vcmpe.f32	s13, s14
 800c71c:	bfcc      	ite	gt
 800c71e:	2001      	movgt	r0, #1
 800c720:	2000      	movle	r0, #0
 800c722:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c726:	bfcc      	ite	gt
 800c728:	2101      	movgt	r1, #1
 800c72a:	2100      	movle	r1, #0
        break;
 800c72c:	2700      	movs	r7, #0
 800c72e:	e7b7      	b.n	800c6a0 <updateRealSearch+0x78>
    	wall_dir[1] = ((Photo[FL] + Photo[FR])/2 > FRONT_WALL)  ?   WALL : NOWALL;	//70超えたら壁あり。
 800c730:	4b2e      	ldr	r3, [pc, #184]	; (800c7ec <updateRealSearch+0x1c4>)
    	wall_dir[0] = Photo[SL] > LEFT_WALL ?  WALL :  NOWALL;
 800c732:	eddf 5a30 	vldr	s11, [pc, #192]	; 800c7f4 <updateRealSearch+0x1cc>
    	wall_dir[1] = ((Photo[FL] + Photo[FR])/2 > FRONT_WALL)  ?   WALL : NOWALL;	//70超えたら壁あり。
 800c736:	edd3 7a00 	vldr	s15, [r3]
 800c73a:	edd3 4a03 	vldr	s9, [r3, #12]
    	wall_dir[2] = Photo[SR] > RIGHT_WALL  ?  WALL :  NOWALL;
 800c73e:	edd3 6a01 	vldr	s13, [r3, #4]
    	wall_dir[0] = Photo[SL] > LEFT_WALL ?  WALL :  NOWALL;
 800c742:	ed93 5a02 	vldr	s10, [r3, #8]
    	wall_dir[1] = ((Photo[FL] + Photo[FR])/2 > FRONT_WALL)  ?   WALL : NOWALL;	//70超えたら壁あり。
 800c746:	ed9f 6a2c 	vldr	s12, [pc, #176]	; 800c7f8 <updateRealSearch+0x1d0>
    	wall_dir[2] = Photo[SR] > RIGHT_WALL  ?  WALL :  NOWALL;
 800c74a:	ed9f 7a29 	vldr	s14, [pc, #164]	; 800c7f0 <updateRealSearch+0x1c8>
    	wall_dir[1] = ((Photo[FL] + Photo[FR])/2 > FRONT_WALL)  ?   WALL : NOWALL;	//70超えたら壁あり。
 800c74e:	ee77 7aa4 	vadd.f32	s15, s15, s9
 800c752:	eef6 4a00 	vmov.f32	s9, #96	; 0x3f000000  0.5
 800c756:	ee67 7aa4 	vmul.f32	s15, s15, s9
    	wall_dir[0] = Photo[SL] > LEFT_WALL ?  WALL :  NOWALL;
 800c75a:	eeb4 5ae5 	vcmpe.f32	s10, s11
 800c75e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    	wall_dir[1] = ((Photo[FL] + Photo[FR])/2 > FRONT_WALL)  ?   WALL : NOWALL;	//70超えたら壁あり。
 800c762:	eef4 7ac6 	vcmpe.f32	s15, s12
 800c766:	bfcc      	ite	gt
 800c768:	2701      	movgt	r7, #1
 800c76a:	2700      	movle	r7, #0
 800c76c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    	wall_dir[2] = Photo[SR] > RIGHT_WALL  ?  WALL :  NOWALL;
 800c770:	eef4 6ac7 	vcmpe.f32	s13, s14
 800c774:	bfcc      	ite	gt
 800c776:	2601      	movgt	r6, #1
 800c778:	2600      	movle	r6, #0
 800c77a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c77e:	bfcc      	ite	gt
 800c780:	2001      	movgt	r0, #1
 800c782:	2000      	movle	r0, #0
        break;
 800c784:	2100      	movs	r1, #0
 800c786:	e78b      	b.n	800c6a0 <updateRealSearch+0x78>
    	wall_dir[0] = ((Photo[FL] + Photo[FR])/2 > FRONT_WALL)  ?   WALL : NOWALL;	//70超えたら壁あり。
 800c788:	4b18      	ldr	r3, [pc, #96]	; (800c7ec <updateRealSearch+0x1c4>)
 800c78a:	ed9f 5a1b 	vldr	s10, [pc, #108]	; 800c7f8 <updateRealSearch+0x1d0>
 800c78e:	edd3 7a00 	vldr	s15, [r3]
 800c792:	edd3 4a03 	vldr	s9, [r3, #12]
    	wall_dir[1] = Photo[SR] > RIGHT_WALL  ?  WALL :  NOWALL;
 800c796:	ed9f 6a16 	vldr	s12, [pc, #88]	; 800c7f0 <updateRealSearch+0x1c8>
 800c79a:	edd3 5a01 	vldr	s11, [r3, #4]
    	wall_dir[3] = Photo[SL] > LEFT_WALL ?  WALL :  NOWALL;
 800c79e:	ed9f 7a15 	vldr	s14, [pc, #84]	; 800c7f4 <updateRealSearch+0x1cc>
 800c7a2:	edd3 6a02 	vldr	s13, [r3, #8]
    	wall_dir[0] = ((Photo[FL] + Photo[FR])/2 > FRONT_WALL)  ?   WALL : NOWALL;	//70超えたら壁あり。
 800c7a6:	ee77 7aa4 	vadd.f32	s15, s15, s9
 800c7aa:	eef6 4a00 	vmov.f32	s9, #96	; 0x3f000000  0.5
 800c7ae:	ee67 7aa4 	vmul.f32	s15, s15, s9
        break;
 800c7b2:	2000      	movs	r0, #0
    	wall_dir[0] = ((Photo[FL] + Photo[FR])/2 > FRONT_WALL)  ?   WALL : NOWALL;	//70超えたら壁あり。
 800c7b4:	eef4 7ac5 	vcmpe.f32	s15, s10
 800c7b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    	wall_dir[1] = Photo[SR] > RIGHT_WALL  ?  WALL :  NOWALL;
 800c7bc:	eef4 5ac6 	vcmpe.f32	s11, s12
 800c7c0:	bfcc      	ite	gt
 800c7c2:	2701      	movgt	r7, #1
 800c7c4:	4607      	movle	r7, r0
 800c7c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    	wall_dir[3] = Photo[SL] > LEFT_WALL ?  WALL :  NOWALL;
 800c7ca:	eef4 6ac7 	vcmpe.f32	s13, s14
 800c7ce:	bfcc      	ite	gt
 800c7d0:	2601      	movgt	r6, #1
 800c7d2:	4606      	movle	r6, r0
 800c7d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c7d8:	bfcc      	ite	gt
 800c7da:	2101      	movgt	r1, #1
 800c7dc:	4601      	movle	r1, r0
        break;
 800c7de:	e75f      	b.n	800c6a0 <updateRealSearch+0x78>
    switch (mouse->now.car)
 800c7e0:	2100      	movs	r1, #0
 800c7e2:	4608      	mov	r0, r1
 800c7e4:	460e      	mov	r6, r1
 800c7e6:	460f      	mov	r7, r1
 800c7e8:	e75a      	b.n	800c6a0 <updateRealSearch+0x78>
 800c7ea:	bf00      	nop
 800c7ec:	2000158c 	.word	0x2000158c
 800c7f0:	42b40000 	.word	0x42b40000
 800c7f4:	42c80000 	.word	0x42c80000
 800c7f8:	42340000 	.word	0x42340000

0800c7fc <getNextDirection>:
//↑と↓は新ノードに来た時の処理なので、アクションの区切りをずらせばよさそう。
//現情報と次情報から次の進行方向を得る処理

void getNextDirection(maze_node *maze, profile *Mouse, char turn_mode)
{
 800c7fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c800:	460c      	mov	r4, r1
	//選ぶノードがおかしい
	//重みが、壁がある方が小さくなってしまっている.
	//

	//メインでノード選択
	Mouse->next.node = getNextNode(maze, Mouse->now.car, Mouse->now.node, 0x01);
 800c802:	2301      	movs	r3, #1
 800c804:	7a89      	ldrb	r1, [r1, #10]
	getNextState(&(Mouse->now), &(Mouse->next), Mouse->next.node);

	//既知区間加速このswitch文中で書くかも
		//コマンドキューのときはここでコマンドを発行してキューに渡す
	AddVelocity = 0;
 800c806:	4e74      	ldr	r6, [pc, #464]	; (800c9d8 <getNextDirection+0x1dc>)
{
 800c808:	4617      	mov	r7, r2
	Mouse->next.node = getNextNode(maze, Mouse->now.car, Mouse->now.node, 0x01);
 800c80a:	6922      	ldr	r2, [r4, #16]
{
 800c80c:	4605      	mov	r5, r0
	Mouse->next.node = getNextNode(maze, Mouse->now.car, Mouse->now.node, 0x01);
 800c80e:	f7fe fb8b 	bl	800af28 <getNextNode>
	getNextState(&(Mouse->now), &(Mouse->next), Mouse->next.node);
 800c812:	f104 0114 	add.w	r1, r4, #20
	Mouse->next.node = getNextNode(maze, Mouse->now.car, Mouse->now.node, 0x01);
 800c816:	4602      	mov	r2, r0
 800c818:	61e0      	str	r0, [r4, #28]
	getNextState(&(Mouse->now), &(Mouse->next), Mouse->next.node);
 800c81a:	f104 0008 	add.w	r0, r4, #8
 800c81e:	f7fe fddd 	bl	800b3dc <getNextState>
	//2つのアクションを組み合わせたときに壁とマップの更新が入ってしまわないようにする
	_Bool accel_or_not = false;
	int accel_or_decel = 0;
	switch(Mouse->now.dir%8) //次の方角からアクションを選択
 800c822:	7ae3      	ldrb	r3, [r4, #11]
	AddVelocity = 0;
 800c824:	2200      	movs	r2, #0
	switch(Mouse->now.dir%8) //次の方角からアクションを選択
 800c826:	f003 0307 	and.w	r3, r3, #7
	AddVelocity = 0;
 800c82a:	6032      	str	r2, [r6, #0]
	switch(Mouse->now.dir%8) //次の方角からアクションを選択
 800c82c:	2b06      	cmp	r3, #6
 800c82e:	d87d      	bhi.n	800c92c <getNextDirection+0x130>
 800c830:	e8df f003 	tbb	[pc, r3]
 800c834:	68297c12 	.word	0x68297c12
 800c838:	5437      	.short	0x5437
 800c83a:	04          	.byte	0x04
 800c83b:	00          	.byte	0x00
		GoBack(maze, Mouse);
		Calc = SearchOrFast;
		TurnLeft(turn_mode, maze, Mouse);
		break;
	case left:
		ChangeLED(0);
 800c83c:	2000      	movs	r0, #0
 800c83e:	f001 fd01 	bl	800e244 <ChangeLED>
		//左旋回
		Calc = SearchOrFast;
 800c842:	4a66      	ldr	r2, [pc, #408]	; (800c9dc <getNextDirection+0x1e0>)
 800c844:	4b66      	ldr	r3, [pc, #408]	; (800c9e0 <getNextDirection+0x1e4>)
 800c846:	6812      	ldr	r2, [r2, #0]
 800c848:	601a      	str	r2, [r3, #0]
//		ChangeLED(4);
		TurnLeft(turn_mode, maze, Mouse);
 800c84a:	4629      	mov	r1, r5
 800c84c:	4622      	mov	r2, r4
 800c84e:	4638      	mov	r0, r7
		break;
	}

}
 800c850:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		TurnLeft(turn_mode, maze, Mouse);
 800c854:	f7fd bc3c 	b.w	800a0d0 <TurnLeft>
		accel_or_not = judgeAccelorNot(maze, Mouse->next.car, Mouse->next.node);
 800c858:	69e2      	ldr	r2, [r4, #28]
 800c85a:	7da1      	ldrb	r1, [r4, #22]
 800c85c:	4628      	mov	r0, r5
 800c85e:	f7fe fcd9 	bl	800b214 <judgeAccelorNot>
		if(accel_or_not == true) //既知で.直進
 800c862:	2800      	cmp	r0, #0
 800c864:	d064      	beq.n	800c930 <getNextDirection+0x134>
 800c866:	4a5f      	ldr	r2, [pc, #380]	; (800c9e4 <getNextDirection+0x1e8>)
			if(VelocityMax == true)
 800c868:	4b5f      	ldr	r3, [pc, #380]	; (800c9e8 <getNextDirection+0x1ec>)
 800c86a:	edd2 0a00 	vldr	s1, [r2]
 800c86e:	781b      	ldrb	r3, [r3, #0]
 800c870:	eef7 7a08 	vmov.f32	s15, #120	; 0x3fc00000  1.5
 800c874:	ee60 7aa7 	vmul.f32	s15, s1, s15
				AddVelocity = ExploreVelocity*1.5f;
 800c878:	edc6 7a00 	vstr	s15, [r6]
			if(VelocityMax == true)
 800c87c:	2b00      	cmp	r3, #0
 800c87e:	f000 80a8 	beq.w	800c9d2 <getNextDirection+0x1d6>
				accel_or_decel = 0; //そのまま
 800c882:	2000      	movs	r0, #0
 800c884:	e063      	b.n	800c94e <getNextDirection+0x152>
		ChangeLED(0);
 800c886:	2000      	movs	r0, #0
 800c888:	f001 fcdc 	bl	800e244 <ChangeLED>
		Calc = SearchOrFast;
 800c88c:	4a53      	ldr	r2, [pc, #332]	; (800c9dc <getNextDirection+0x1e0>)
 800c88e:	4b54      	ldr	r3, [pc, #336]	; (800c9e0 <getNextDirection+0x1e4>)
 800c890:	6812      	ldr	r2, [r2, #0]
 800c892:	601a      	str	r2, [r3, #0]
		TurnRight(turn_mode, maze, Mouse);
 800c894:	4629      	mov	r1, r5
 800c896:	4622      	mov	r2, r4
 800c898:	4638      	mov	r0, r7
}
 800c89a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		TurnRight(turn_mode, maze, Mouse);
 800c89e:	f7fd bbd5 	b.w	800a04c <TurnRight>
		ChangeLED(0);
 800c8a2:	2000      	movs	r0, #0
		Calc = 1;//マップ更新したくないときは1を代入。
 800c8a4:	f8df 8138 	ldr.w	r8, [pc, #312]	; 800c9e0 <getNextDirection+0x1e4>
		ChangeLED(0);
 800c8a8:	f001 fccc 	bl	800e244 <ChangeLED>
		Calc = 1;//マップ更新したくないときは1を代入。
 800c8ac:	2701      	movs	r7, #1
		GoBack(maze, Mouse);
 800c8ae:	4621      	mov	r1, r4
 800c8b0:	4628      	mov	r0, r5
		Calc = 1;//マップ更新したくないときは1を代入。
 800c8b2:	f8c8 7000 	str.w	r7, [r8]
		GoBack(maze, Mouse);
 800c8b6:	f7fd fc51 	bl	800a15c <GoBack>
				accel_or_not = judgeAccelorNot(maze, Mouse->next.car, Mouse->next.node);
 800c8ba:	69e2      	ldr	r2, [r4, #28]
 800c8bc:	7da1      	ldrb	r1, [r4, #22]
 800c8be:	4628      	mov	r0, r5
 800c8c0:	f7fe fca8 	bl	800b214 <judgeAccelorNot>
					if(VelocityMax == true)
 800c8c4:	4b48      	ldr	r3, [pc, #288]	; (800c9e8 <getNextDirection+0x1ec>)
 800c8c6:	781b      	ldrb	r3, [r3, #0]
				if(accel_or_not == true) //既知で.直進
 800c8c8:	2800      	cmp	r0, #0
 800c8ca:	d04e      	beq.n	800c96a <getNextDirection+0x16e>
						AddVelocity = 245;
 800c8cc:	eddf 7a47 	vldr	s15, [pc, #284]	; 800c9ec <getNextDirection+0x1f0>
					if(VelocityMax == true)
 800c8d0:	2b00      	cmp	r3, #0
 800c8d2:	d07a      	beq.n	800c9ca <getNextDirection+0x1ce>
						accel_or_decel = 0; //そのまま
 800c8d4:	2000      	movs	r0, #0
						AddVelocity = 245;
 800c8d6:	edc6 7a00 	vstr	s15, [r6]
 800c8da:	e04f      	b.n	800c97c <getNextDirection+0x180>
		Calc = 1;//マップ更新したくないときは1を代入。
 800c8dc:	4e40      	ldr	r6, [pc, #256]	; (800c9e0 <getNextDirection+0x1e4>)
		ChangeLED(0);
 800c8de:	2000      	movs	r0, #0
 800c8e0:	f001 fcb0 	bl	800e244 <ChangeLED>
		Calc = 1;//マップ更新したくないときは1を代入。
 800c8e4:	2301      	movs	r3, #1
		GoBack(maze, Mouse);
 800c8e6:	4621      	mov	r1, r4
 800c8e8:	4628      	mov	r0, r5
		Calc = 1;//マップ更新したくないときは1を代入。
 800c8ea:	6033      	str	r3, [r6, #0]
		GoBack(maze, Mouse);
 800c8ec:	f7fd fc36 	bl	800a15c <GoBack>
		Calc = SearchOrFast;
 800c8f0:	4b3a      	ldr	r3, [pc, #232]	; (800c9dc <getNextDirection+0x1e0>)
 800c8f2:	681b      	ldr	r3, [r3, #0]
 800c8f4:	6033      	str	r3, [r6, #0]
		TurnLeft(turn_mode, maze, Mouse);
 800c8f6:	4622      	mov	r2, r4
 800c8f8:	4629      	mov	r1, r5
 800c8fa:	4638      	mov	r0, r7
}
 800c8fc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		TurnLeft(turn_mode, maze, Mouse);
 800c900:	f7fd bbe6 	b.w	800a0d0 <TurnLeft>
		Calc = 1;//マップ更新したくないときは1を代入。
 800c904:	4e36      	ldr	r6, [pc, #216]	; (800c9e0 <getNextDirection+0x1e4>)
		ChangeLED(0);
 800c906:	2000      	movs	r0, #0
 800c908:	f001 fc9c 	bl	800e244 <ChangeLED>
		Calc = 1;//マップ更新したくないときは1を代入。
 800c90c:	2301      	movs	r3, #1
		GoBack(maze, Mouse); //間の座標変動を
 800c90e:	4621      	mov	r1, r4
 800c910:	4628      	mov	r0, r5
		Calc = 1;//マップ更新したくないときは1を代入。
 800c912:	6033      	str	r3, [r6, #0]
		GoBack(maze, Mouse); //間の座標変動を
 800c914:	f7fd fc22 	bl	800a15c <GoBack>
		Calc = SearchOrFast;
 800c918:	4b30      	ldr	r3, [pc, #192]	; (800c9dc <getNextDirection+0x1e0>)
 800c91a:	681b      	ldr	r3, [r3, #0]
 800c91c:	6033      	str	r3, [r6, #0]
		TurnRight(turn_mode, maze, Mouse);
 800c91e:	4622      	mov	r2, r4
 800c920:	4629      	mov	r1, r5
 800c922:	4638      	mov	r0, r7
}
 800c924:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		TurnRight(turn_mode, maze, Mouse);
 800c928:	f7fd bb90 	b.w	800a04c <TurnRight>
}
 800c92c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if(VelocityMax == true)
 800c930:	4b2d      	ldr	r3, [pc, #180]	; (800c9e8 <getNextDirection+0x1ec>)
 800c932:	4a2c      	ldr	r2, [pc, #176]	; (800c9e4 <getNextDirection+0x1e8>)
 800c934:	781b      	ldrb	r3, [r3, #0]
 800c936:	edd2 0a00 	vldr	s1, [r2]
 800c93a:	f003 00ff 	and.w	r0, r3, #255	; 0xff
 800c93e:	2b00      	cmp	r3, #0
 800c940:	d138      	bne.n	800c9b4 <getNextDirection+0x1b8>
				AddVelocity = 0;
 800c942:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 800c9f0 <getNextDirection+0x1f4>
 800c946:	eef0 7a47 	vmov.f32	s15, s14
 800c94a:	ed86 7a00 	vstr	s14, [r6]
		Calc = SearchOrFast;
 800c94e:	4a23      	ldr	r2, [pc, #140]	; (800c9dc <getNextDirection+0x1e0>)
 800c950:	4b23      	ldr	r3, [pc, #140]	; (800c9e0 <getNextDirection+0x1e4>)
 800c952:	6812      	ldr	r2, [r2, #0]
 800c954:	601a      	str	r2, [r3, #0]
		GoStraight(90, ExploreVelocity +AddVelocity, accel_or_decel, maze, Mouse);
 800c956:	4629      	mov	r1, r5
 800c958:	4622      	mov	r2, r4
		GoStraight(90, ExploreVelocity +AddVelocity , accel_or_decel, maze, Mouse);
 800c95a:	ed9f 0a26 	vldr	s0, [pc, #152]	; 800c9f4 <getNextDirection+0x1f8>
		GoStraight(90, ExploreVelocity +AddVelocity, accel_or_decel, maze, Mouse);
 800c95e:	ee77 0aa0 	vadd.f32	s1, s15, s1
}
 800c962:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		GoStraight(90, ExploreVelocity +AddVelocity, accel_or_decel, maze, Mouse);
 800c966:	f7fd ba27 	b.w	8009db8 <GoStraight>
					if(VelocityMax == true)
 800c96a:	f003 00ff 	and.w	r0, r3, #255	; 0xff
 800c96e:	b9b3      	cbnz	r3, 800c99e <getNextDirection+0x1a2>
						AddVelocity = 0;
 800c970:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 800c9f0 <getNextDirection+0x1f4>
 800c974:	eef0 7a47 	vmov.f32	s15, s14
 800c978:	ed86 7a00 	vstr	s14, [r6]
		GoStraight(90, ExploreVelocity +AddVelocity, accel_or_decel, maze, Mouse);
 800c97c:	4a19      	ldr	r2, [pc, #100]	; (800c9e4 <getNextDirection+0x1e8>)
		Calc = SearchOrFast;
 800c97e:	4b17      	ldr	r3, [pc, #92]	; (800c9dc <getNextDirection+0x1e0>)
		GoStraight(90, ExploreVelocity +AddVelocity, accel_or_decel, maze, Mouse);
 800c980:	edd2 0a00 	vldr	s1, [r2]
		Calc = SearchOrFast;
 800c984:	681b      	ldr	r3, [r3, #0]
 800c986:	f8c8 3000 	str.w	r3, [r8]
		GoStraight(90, ExploreVelocity +AddVelocity, accel_or_decel, maze, Mouse);
 800c98a:	4622      	mov	r2, r4
 800c98c:	4629      	mov	r1, r5
 800c98e:	ed9f 0a19 	vldr	s0, [pc, #100]	; 800c9f4 <getNextDirection+0x1f8>
 800c992:	ee77 0aa0 	vadd.f32	s1, s15, s1
}
 800c996:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		GoStraight(90, ExploreVelocity +AddVelocity, accel_or_decel, maze, Mouse);
 800c99a:	f7fd ba0d 	b.w	8009db8 <GoStraight>
						cnt += 2;
 800c99e:	4a16      	ldr	r2, [pc, #88]	; (800c9f8 <getNextDirection+0x1fc>)
						AddVelocity = 0;
 800c9a0:	eddf 7a13 	vldr	s15, [pc, #76]	; 800c9f0 <getNextDirection+0x1f4>
						cnt += 2;
 800c9a4:	6813      	ldr	r3, [r2, #0]
						AddVelocity = 0;
 800c9a6:	edc6 7a00 	vstr	s15, [r6]
						cnt += 2;
 800c9aa:	3302      	adds	r3, #2
 800c9ac:	6013      	str	r3, [r2, #0]
						accel_or_decel = -1; //減速
 800c9ae:	f04f 30ff 	mov.w	r0, #4294967295
 800c9b2:	e7e3      	b.n	800c97c <getNextDirection+0x180>
				cnt += 2;
 800c9b4:	4a11      	ldr	r2, [pc, #68]	; (800c9fc <getNextDirection+0x200>)
				AddVelocity = 0;
 800c9b6:	eddf 7a0e 	vldr	s15, [pc, #56]	; 800c9f0 <getNextDirection+0x1f4>
				cnt += 2;
 800c9ba:	6813      	ldr	r3, [r2, #0]
				AddVelocity = 0;
 800c9bc:	edc6 7a00 	vstr	s15, [r6]
				cnt += 2;
 800c9c0:	3302      	adds	r3, #2
 800c9c2:	6013      	str	r3, [r2, #0]
				accel_or_decel = -1; //減速
 800c9c4:	f04f 30ff 	mov.w	r0, #4294967295
 800c9c8:	e7c1      	b.n	800c94e <getNextDirection+0x152>
						accel_or_decel = 1; //加速
 800c9ca:	4638      	mov	r0, r7
						AddVelocity = 245;
 800c9cc:	edc6 7a00 	vstr	s15, [r6]
 800c9d0:	e7d4      	b.n	800c97c <getNextDirection+0x180>
				accel_or_decel = 1; //加速
 800c9d2:	2001      	movs	r0, #1
 800c9d4:	e7bb      	b.n	800c94e <getNextDirection+0x152>
 800c9d6:	bf00      	nop
 800c9d8:	20001528 	.word	0x20001528
 800c9dc:	200015a8 	.word	0x200015a8
 800c9e0:	200015c8 	.word	0x200015c8
 800c9e4:	200015a0 	.word	0x200015a0
 800c9e8:	2000159c 	.word	0x2000159c
 800c9ec:	43750000 	.word	0x43750000
 800c9f0:	00000000 	.word	0x00000000
 800c9f4:	42b40000 	.word	0x42b40000
 800c9f8:	20000008 	.word	0x20000008
 800c9fc:	20000004 	.word	0x20000004

0800ca00 <FastStraight>:

const float conv_pul = 2/MM_PER_PULSE;
void FastStraight(float cut, float num, float accel, float decel, float top_speed, float end_speed)//加減速を切り替える割合と、マス数の指定
{
 800ca00:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ca04:	ed2d 8b08 	vpush	{d8-d11}
		float add_distance = cut*90*num;//スタート時の加速では61.5になるようにnumをかける
 800ca08:	eddf aaae 	vldr	s21, [pc, #696]	; 800ccc4 <FastStraight+0x2c4>
		TargetAngularV = 0;
		int target_pulse = (int)(add_distance*conv_pul);
 800ca0c:	ed9f 7aae 	vldr	s14, [pc, #696]	; 800ccc8 <FastStraight+0x2c8>
		TargetAngularV = 0;
 800ca10:	4bae      	ldr	r3, [pc, #696]	; (800cccc <FastStraight+0x2cc>)
 800ca12:	f8df 92dc 	ldr.w	r9, [pc, #732]	; 800ccf0 <FastStraight+0x2f0>
 800ca16:	4dae      	ldr	r5, [pc, #696]	; (800ccd0 <FastStraight+0x2d0>)
 800ca18:	4cae      	ldr	r4, [pc, #696]	; (800ccd4 <FastStraight+0x2d4>)
 800ca1a:	4faf      	ldr	r7, [pc, #700]	; (800ccd8 <FastStraight+0x2d8>)
 800ca1c:	f8df 82d4 	ldr.w	r8, [pc, #724]	; 800ccf4 <FastStraight+0x2f4>
			}
			//壁の値を見て一瞬だけ制御オン
				//90mm毎に左右を見る

			if(  ( (TotalPulse[BODY] ) >= ( KeepPulse[BODY] + (int)(0.95f*90.0f*conv_pul)*section_num)) && (( TotalPulse[BODY] ) <= ( KeepPulse[BODY] + (int)(1.05*90.0f*conv_pul)*section_num) ) ){ //90 mm毎に一回だけ壁を見る
				if(Photo[SL] >= LEFT_WALL && Photo[SR] >= RIGHT_WALL){
 800ca20:	ed9f baae 	vldr	s22, [pc, #696]	; 800ccdc <FastStraight+0x2dc>
		float add_distance = cut*90*num;//スタート時の加速では61.5になるようにnumをかける
 800ca24:	ee60 7a2a 	vmul.f32	s15, s0, s21
		TargetAngularV = 0;
 800ca28:	f04f 0a00 	mov.w	sl, #0
		float add_distance = cut*90*num;//スタート時の加速では61.5になるようにnumをかける
 800ca2c:	ee67 7aa0 	vmul.f32	s15, s15, s1
{
 800ca30:	eeb0 aa40 	vmov.f32	s20, s0
		int target_pulse = (int)(add_distance*conv_pul);
 800ca34:	ee67 7a87 	vmul.f32	s15, s15, s14
		TargetAngularV = 0;
 800ca38:	f8c3 a000 	str.w	sl, [r3]
		int target_pulse = (int)(add_distance*conv_pul);
 800ca3c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
{
 800ca40:	eeb0 9a60 	vmov.f32	s18, s1
		int target_pulse = (int)(add_distance*conv_pul);
 800ca44:	ee17 6a90 	vmov	r6, s15
{
 800ca48:	eef0 ba41 	vmov.f32	s23, s2
 800ca4c:	eef0 8a61 	vmov.f32	s17, s3
 800ca50:	eef0 9a42 	vmov.f32	s19, s4
 800ca54:	eeb0 8a62 	vmov.f32	s16, s5
		while( ( TotalPulse[BODY] )  < ( KeepPulse[BODY] + target_pulse) )
 800ca58:	68aa      	ldr	r2, [r5, #8]
 800ca5a:	68a3      	ldr	r3, [r4, #8]
 800ca5c:	4433      	add	r3, r6
 800ca5e:	429a      	cmp	r2, r3
 800ca60:	da54      	bge.n	800cb0c <FastStraight+0x10c>
			if(TargetVelocity[BODY] >= top_speed) //直線の加速時は、充分大きな値を設定
 800ca62:	4b9f      	ldr	r3, [pc, #636]	; (800cce0 <FastStraight+0x2e0>)
			if(  ( (TotalPulse[BODY] ) >= ( KeepPulse[BODY] + (int)(0.95f*90.0f*conv_pul)*section_num)) && (( TotalPulse[BODY] ) <= ( KeepPulse[BODY] + (int)(1.05*90.0f*conv_pul)*section_num) ) ){ //90 mm毎に一回だけ壁を見る
 800ca64:	4a9f      	ldr	r2, [pc, #636]	; (800cce4 <FastStraight+0x2e4>)
			if(TargetVelocity[BODY] >= top_speed) //直線の加速時は、充分大きな値を設定
 800ca66:	edd3 7a02 	vldr	s15, [r3, #8]
			if(  ( (TotalPulse[BODY] ) >= ( KeepPulse[BODY] + (int)(0.95f*90.0f*conv_pul)*section_num)) && (( TotalPulse[BODY] ) <= ( KeepPulse[BODY] + (int)(1.05*90.0f*conv_pul)*section_num) ) ){ //90 mm毎に一回だけ壁を見る
 800ca6a:	683b      	ldr	r3, [r7, #0]
			if(TargetVelocity[BODY] >= top_speed) //直線の加速時は、充分大きな値を設定
 800ca6c:	eef4 7ae9 	vcmpe.f32	s15, s19
 800ca70:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
				Acceleration = 0;
 800ca74:	bfac      	ite	ge
 800ca76:	f8c9 a000 	strge.w	sl, [r9]
				Acceleration = accel;//2.89000f; //2.70f;//1.0000f;//
 800ca7a:	edc9 ba00 	vstrlt	s23, [r9]
			if(  ( (TotalPulse[BODY] ) >= ( KeepPulse[BODY] + (int)(0.95f*90.0f*conv_pul)*section_num)) && (( TotalPulse[BODY] ) <= ( KeepPulse[BODY] + (int)(1.05*90.0f*conv_pul)*section_num) ) ){ //90 mm毎に一回だけ壁を見る
 800ca7e:	68a9      	ldr	r1, [r5, #8]
 800ca80:	68a0      	ldr	r0, [r4, #8]
 800ca82:	fb02 0203 	mla	r2, r2, r3, r0
 800ca86:	4291      	cmp	r1, r2
 800ca88:	f2c0 80cb 	blt.w	800cc22 <FastStraight+0x222>
 800ca8c:	68a9      	ldr	r1, [r5, #8]
 800ca8e:	4a96      	ldr	r2, [pc, #600]	; (800cce8 <FastStraight+0x2e8>)
 800ca90:	68a0      	ldr	r0, [r4, #8]
 800ca92:	fb02 0203 	mla	r2, r2, r3, r0
 800ca96:	4291      	cmp	r1, r2
 800ca98:	f300 80c3 	bgt.w	800cc22 <FastStraight+0x222>
				if(Photo[SL] >= LEFT_WALL && Photo[SR] >= RIGHT_WALL){
 800ca9c:	edd8 7a02 	vldr	s15, [r8, #8]
 800caa0:	eef4 7acb 	vcmpe.f32	s15, s22
 800caa4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800caa8:	db07      	blt.n	800caba <FastStraight+0xba>
 800caaa:	edd8 7a01 	vldr	s15, [r8, #4]
 800caae:	eef4 7aea 	vcmpe.f32	s15, s21
 800cab2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cab6:	f280 80f1 	bge.w	800cc9c <FastStraight+0x29c>
					PIDChangeFlag(A_VELO_PID, 0);
					PIDChangeFlag(R_WALL_PID, 0);
					PIDChangeFlag(L_WALL_PID, 0);
					ChangeLED(5);
				}
				else if(Photo[SL] >= LEFT_WALL ){
 800caba:	edd8 7a02 	vldr	s15, [r8, #8]
 800cabe:	eef4 7acb 	vcmpe.f32	s15, s22
 800cac2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cac6:	f280 80d5 	bge.w	800cc74 <FastStraight+0x274>
					PIDChangeFlag(R_WALL_PID, 0);
					PIDChangeFlag(D_WALL_PID, 0);
					ChangeLED(4);

				}
				else if(Photo[SR] >= RIGHT_WALL){
 800caca:	edd8 7a01 	vldr	s15, [r8, #4]
 800cace:	eef4 7aea 	vcmpe.f32	s15, s21
 800cad2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
					PIDChangeFlag(R_WALL_PID, 1);
 800cad6:	f04f 0101 	mov.w	r1, #1
				else if(Photo[SR] >= RIGHT_WALL){
 800cada:	f2c0 80b8 	blt.w	800cc4e <FastStraight+0x24e>
					PIDChangeFlag(R_WALL_PID, 1);
 800cade:	2003      	movs	r0, #3
 800cae0:	f001 ffd8 	bl	800ea94 <PIDChangeFlag>
					PIDChangeFlag(A_VELO_PID,0);
 800cae4:	2100      	movs	r1, #0
 800cae6:	4608      	mov	r0, r1
 800cae8:	f001 ffd4 	bl	800ea94 <PIDChangeFlag>
					PIDChangeFlag(D_WALL_PID, 0);
 800caec:	2100      	movs	r1, #0
 800caee:	2001      	movs	r0, #1
 800caf0:	f001 ffd0 	bl	800ea94 <PIDChangeFlag>
					PIDChangeFlag(L_WALL_PID, 0);
 800caf4:	2100      	movs	r1, #0
 800caf6:	2002      	movs	r0, #2
 800caf8:	f001 ffcc 	bl	800ea94 <PIDChangeFlag>
					ChangeLED(1);
 800cafc:	2001      	movs	r0, #1
 800cafe:	f001 fba1 	bl	800e244 <ChangeLED>
		while( ( TotalPulse[BODY] )  < ( KeepPulse[BODY] + target_pulse) )
 800cb02:	68aa      	ldr	r2, [r5, #8]
 800cb04:	68a3      	ldr	r3, [r4, #8]
 800cb06:	4433      	add	r3, r6
 800cb08:	429a      	cmp	r2, r3
 800cb0a:	dbaa      	blt.n	800ca62 <FastStraight+0x62>
				//3パターンに該当すれば壁制御を一瞬だけ入れる
				//割込みのタイマを使ってタイミングを決める. （また複雑に...）


		}
		PIDChangeFlag(D_WALL_PID, 0);
 800cb0c:	2100      	movs	r1, #0
 800cb0e:	2001      	movs	r0, #1
 800cb10:	f001 ffc0 	bl	800ea94 <PIDChangeFlag>
		PIDChangeFlag(R_WALL_PID, 0);
 800cb14:	2100      	movs	r1, #0
 800cb16:	2003      	movs	r0, #3
 800cb18:	f001 ffbc 	bl	800ea94 <PIDChangeFlag>
		PIDChangeFlag(L_WALL_PID, 0);
 800cb1c:	2100      	movs	r1, #0
 800cb1e:	2002      	movs	r0, #2
 800cb20:	f001 ffb8 	bl	800ea94 <PIDChangeFlag>
		PIDChangeFlag(A_VELO_PID, 1);
 800cb24:	2101      	movs	r1, #1
 800cb26:	2000      	movs	r0, #0
 800cb28:	f001 ffb4 	bl	800ea94 <PIDChangeFlag>
		ChangeLED(0);
 800cb2c:	2000      	movs	r0, #0
 800cb2e:	f001 fb89 	bl	800e244 <ChangeLED>
		section_num = 0;
		Acceleration = 0;
 800cb32:	2300      	movs	r3, #0
 800cb34:	f8c9 3000 	str.w	r3, [r9]
		KeepPulse[BODY] += target_pulse;
 800cb38:	68a2      	ldr	r2, [r4, #8]
		KeepPulse[LEFT] += target_pulse*0.5f;
		KeepPulse[RIGHT] += target_pulse*0.5f;

		float dec_distance = (1-cut)*90*num;
 800cb3a:	ed9f 5a62 	vldr	s10, [pc, #392]	; 800ccc4 <FastStraight+0x2c4>
		target_pulse = (int)(dec_distance *conv_pul);
 800cb3e:	eddf 5a62 	vldr	s11, [pc, #392]	; 800ccc8 <FastStraight+0x2c8>

		while( 	((Photo[FR]+Photo[FL]) < 3800) && ( KeepPulse[BODY] + target_pulse) > ( TotalPulse[BODY]) )
 800cb42:	eddf 6a6a 	vldr	s13, [pc, #424]	; 800ccec <FastStraight+0x2ec>
		{
			if(TargetVelocity[BODY] <= end_speed) //
 800cb46:	4866      	ldr	r0, [pc, #408]	; (800cce0 <FastStraight+0x2e0>)
		KeepPulse[BODY] += target_pulse;
 800cb48:	4432      	add	r2, r6
 800cb4a:	60a2      	str	r2, [r4, #8]
		KeepPulse[LEFT] += target_pulse*0.5f;
 800cb4c:	ed94 7a00 	vldr	s14, [r4]
 800cb50:	ee07 6a90 	vmov	s15, r6
 800cb54:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800cb58:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800cb5c:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 800cb60:	eea7 7a86 	vfma.f32	s14, s15, s12
		section_num = 0;
 800cb64:	2200      	movs	r2, #0
 800cb66:	603a      	str	r2, [r7, #0]
		float dec_distance = (1-cut)*90*num;
 800cb68:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
		KeepPulse[LEFT] += target_pulse*0.5f;
 800cb6c:	eebd 7ac7 	vcvt.s32.f32	s14, s14
		float dec_distance = (1-cut)*90*num;
 800cb70:	ee70 0aca 	vsub.f32	s1, s1, s20
		KeepPulse[LEFT] += target_pulse*0.5f;
 800cb74:	ed84 7a00 	vstr	s14, [r4]
		KeepPulse[RIGHT] += target_pulse*0.5f;
 800cb78:	ed94 7a01 	vldr	s14, [r4, #4]
 800cb7c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
		float dec_distance = (1-cut)*90*num;
 800cb80:	ee60 0a85 	vmul.f32	s1, s1, s10
		KeepPulse[RIGHT] += target_pulse*0.5f;
 800cb84:	eea7 7a86 	vfma.f32	s14, s15, s12
			{
				Acceleration = 0;
 800cb88:	461e      	mov	r6, r3
		float dec_distance = (1-cut)*90*num;
 800cb8a:	ee60 0a89 	vmul.f32	s1, s1, s18
		KeepPulse[RIGHT] += target_pulse*0.5f;
 800cb8e:	eefd 7ac7 	vcvt.s32.f32	s15, s14
		target_pulse = (int)(dec_distance *conv_pul);
 800cb92:	ee60 0aa5 	vmul.f32	s1, s1, s11
		KeepPulse[RIGHT] += target_pulse*0.5f;
 800cb96:	edc4 7a01 	vstr	s15, [r4, #4]
		target_pulse = (int)(dec_distance *conv_pul);
 800cb9a:	eefd 7ae0 	vcvt.s32.f32	s15, s1
 800cb9e:	ee17 2a90 	vmov	r2, s15
		while( 	((Photo[FR]+Photo[FL]) < 3800) && ( KeepPulse[BODY] + target_pulse) > ( TotalPulse[BODY]) )
 800cba2:	e00f      	b.n	800cbc4 <FastStraight+0x1c4>
 800cba4:	68a3      	ldr	r3, [r4, #8]
 800cba6:	68a9      	ldr	r1, [r5, #8]
 800cba8:	4413      	add	r3, r2
 800cbaa:	428b      	cmp	r3, r1
 800cbac:	dd15      	ble.n	800cbda <FastStraight+0x1da>
			if(TargetVelocity[BODY] <= end_speed) //
 800cbae:	edd0 7a02 	vldr	s15, [r0, #8]
 800cbb2:	eef4 7ac8 	vcmpe.f32	s15, s16
 800cbb6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
				Acceleration = 0;
 800cbba:	bf94      	ite	ls
 800cbbc:	f8c9 6000 	strls.w	r6, [r9]
//				TargetVelocity[BODY] = end_speed;
			}
			else
			{
				Acceleration = decel;//2.89000f; //2.70f;//1.0000f;//
 800cbc0:	edc9 8a00 	vstrhi	s17, [r9]
		while( 	((Photo[FR]+Photo[FL]) < 3800) && ( KeepPulse[BODY] + target_pulse) > ( TotalPulse[BODY]) )
 800cbc4:	edd8 7a03 	vldr	s15, [r8, #12]
 800cbc8:	ed98 7a00 	vldr	s14, [r8]
 800cbcc:	ee77 7a87 	vadd.f32	s15, s15, s14
 800cbd0:	eef4 7ae6 	vcmpe.f32	s15, s13
 800cbd4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cbd8:	d4e4      	bmi.n	800cba4 <FastStraight+0x1a4>
			}
			//Acceleration = decel;//-2.89;//1.0000f;//
//			if(TargetVelocity[BODY] <= 240)
//				Acceleration = 0;
		}
		Acceleration = 0;
 800cbda:	2300      	movs	r3, #0
 800cbdc:	f8c9 3000 	str.w	r3, [r9]
//		TargetVelocity[BODY] = end_speed;
		KeepPulse[BODY] += target_pulse;
 800cbe0:	68a3      	ldr	r3, [r4, #8]
 800cbe2:	4413      	add	r3, r2
 800cbe4:	60a3      	str	r3, [r4, #8]
		KeepPulse[LEFT] += target_pulse*0.5f;
 800cbe6:	ed94 7a00 	vldr	s14, [r4]
 800cbea:	ee07 2a90 	vmov	s15, r2
 800cbee:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800cbf2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800cbf6:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 800cbfa:	eea7 7aa6 	vfma.f32	s14, s15, s13
		KeepPulse[RIGHT] += target_pulse*0.5f;

}
 800cbfe:	ecbd 8b08 	vpop	{d8-d11}
		KeepPulse[LEFT] += target_pulse*0.5f;
 800cc02:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 800cc06:	ed84 7a00 	vstr	s14, [r4]
		KeepPulse[RIGHT] += target_pulse*0.5f;
 800cc0a:	ed94 7a01 	vldr	s14, [r4, #4]
 800cc0e:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800cc12:	eea7 7aa6 	vfma.f32	s14, s15, s13
 800cc16:	eefd 7ac7 	vcvt.s32.f32	s15, s14
 800cc1a:	edc4 7a01 	vstr	s15, [r4, #4]
}
 800cc1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
				section_num++;
 800cc22:	3301      	adds	r3, #1
				PIDChangeFlag(D_WALL_PID, 0);
 800cc24:	2100      	movs	r1, #0
 800cc26:	2001      	movs	r0, #1
				section_num++;
 800cc28:	603b      	str	r3, [r7, #0]
				PIDChangeFlag(D_WALL_PID, 0);
 800cc2a:	f001 ff33 	bl	800ea94 <PIDChangeFlag>
				PIDChangeFlag(R_WALL_PID, 0);
 800cc2e:	2100      	movs	r1, #0
 800cc30:	2003      	movs	r0, #3
 800cc32:	f001 ff2f 	bl	800ea94 <PIDChangeFlag>
				PIDChangeFlag(L_WALL_PID, 0);
 800cc36:	2100      	movs	r1, #0
 800cc38:	2002      	movs	r0, #2
 800cc3a:	f001 ff2b 	bl	800ea94 <PIDChangeFlag>
				PIDChangeFlag(A_VELO_PID, 1);
 800cc3e:	2101      	movs	r1, #1
 800cc40:	2000      	movs	r0, #0
 800cc42:	f001 ff27 	bl	800ea94 <PIDChangeFlag>
				ChangeLED(0);
 800cc46:	2000      	movs	r0, #0
 800cc48:	f001 fafc 	bl	800e244 <ChangeLED>
 800cc4c:	e704      	b.n	800ca58 <FastStraight+0x58>
					PIDChangeFlag(A_VELO_PID, 1);
 800cc4e:	2000      	movs	r0, #0
 800cc50:	f001 ff20 	bl	800ea94 <PIDChangeFlag>
					PIDChangeFlag(R_WALL_PID, 0);
 800cc54:	2100      	movs	r1, #0
 800cc56:	2003      	movs	r0, #3
 800cc58:	f001 ff1c 	bl	800ea94 <PIDChangeFlag>
					PIDChangeFlag(L_WALL_PID, 0);
 800cc5c:	2100      	movs	r1, #0
 800cc5e:	2002      	movs	r0, #2
 800cc60:	f001 ff18 	bl	800ea94 <PIDChangeFlag>
					PIDChangeFlag(D_WALL_PID, 0);
 800cc64:	2100      	movs	r1, #0
 800cc66:	2001      	movs	r0, #1
 800cc68:	f001 ff14 	bl	800ea94 <PIDChangeFlag>
					ChangeLED(2);
 800cc6c:	2002      	movs	r0, #2
 800cc6e:	f001 fae9 	bl	800e244 <ChangeLED>
 800cc72:	e6f1      	b.n	800ca58 <FastStraight+0x58>
					PIDChangeFlag(L_WALL_PID, 1);
 800cc74:	2101      	movs	r1, #1
 800cc76:	2002      	movs	r0, #2
 800cc78:	f001 ff0c 	bl	800ea94 <PIDChangeFlag>
					PIDChangeFlag(A_VELO_PID, 0);
 800cc7c:	2100      	movs	r1, #0
 800cc7e:	4608      	mov	r0, r1
 800cc80:	f001 ff08 	bl	800ea94 <PIDChangeFlag>
					PIDChangeFlag(R_WALL_PID, 0);
 800cc84:	2100      	movs	r1, #0
 800cc86:	2003      	movs	r0, #3
 800cc88:	f001 ff04 	bl	800ea94 <PIDChangeFlag>
					PIDChangeFlag(D_WALL_PID, 0);
 800cc8c:	2100      	movs	r1, #0
 800cc8e:	2001      	movs	r0, #1
 800cc90:	f001 ff00 	bl	800ea94 <PIDChangeFlag>
					ChangeLED(4);
 800cc94:	2004      	movs	r0, #4
 800cc96:	f001 fad5 	bl	800e244 <ChangeLED>
 800cc9a:	e6dd      	b.n	800ca58 <FastStraight+0x58>
					PIDChangeFlag(D_WALL_PID, 1);
 800cc9c:	2101      	movs	r1, #1
 800cc9e:	4608      	mov	r0, r1
 800cca0:	f001 fef8 	bl	800ea94 <PIDChangeFlag>
					PIDChangeFlag(A_VELO_PID, 0);
 800cca4:	2100      	movs	r1, #0
 800cca6:	4608      	mov	r0, r1
 800cca8:	f001 fef4 	bl	800ea94 <PIDChangeFlag>
					PIDChangeFlag(R_WALL_PID, 0);
 800ccac:	2100      	movs	r1, #0
 800ccae:	2003      	movs	r0, #3
 800ccb0:	f001 fef0 	bl	800ea94 <PIDChangeFlag>
					PIDChangeFlag(L_WALL_PID, 0);
 800ccb4:	2100      	movs	r1, #0
 800ccb6:	2002      	movs	r0, #2
 800ccb8:	f001 feec 	bl	800ea94 <PIDChangeFlag>
					ChangeLED(5);
 800ccbc:	2005      	movs	r0, #5
 800ccbe:	f001 fac1 	bl	800e244 <ChangeLED>
 800ccc2:	e6c9      	b.n	800ca58 <FastStraight+0x58>
 800ccc4:	42b40000 	.word	0x42b40000
 800ccc8:	44fdc7cf 	.word	0x44fdc7cf
 800cccc:	2000152c 	.word	0x2000152c
 800ccd0:	2000154c 	.word	0x2000154c
 800ccd4:	20001580 	.word	0x20001580
 800ccd8:	2000122c 	.word	0x2000122c
 800ccdc:	42c80000 	.word	0x42c80000
 800cce0:	2000151c 	.word	0x2000151c
 800cce4:	0002a611 	.word	0x0002a611
 800cce8:	0002ed72 	.word	0x0002ed72
 800ccec:	456d8000 	.word	0x456d8000
 800ccf0:	20001214 	.word	0x20001214
 800ccf4:	2000158c 	.word	0x2000158c

0800ccf8 <MaxParaRunTest>:
void MaxParaRunTest(maze_node *maze, profile *mouse)
{
 800ccf8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	int start_cnt=0;
	float straight_num = 0;
	//ノードの数だけループ
	int num_nodes = Num_Nodes;
 800ccfc:	4b60      	ldr	r3, [pc, #384]	; (800ce80 <MaxParaRunTest+0x188>)
 800ccfe:	681c      	ldr	r4, [r3, #0]
{
 800cd00:	ed2d 8b04 	vpush	{d8-d9}
 800cd04:	4680      	mov	r8, r0
	ChangeLED(0);
 800cd06:	2000      	movs	r0, #0
{
 800cd08:	4689      	mov	r9, r1
	ChangeLED(0);
 800cd0a:	f001 fa9b 	bl	800e244 <ChangeLED>
	for(int count=0; count <= num_nodes; count++)
 800cd0e:	2c00      	cmp	r4, #0
 800cd10:	db2b      	blt.n	800cd6a <MaxParaRunTest+0x72>
			{
				count ++;
			}
			straight_num = (float)(count - start_cnt);
			if(start_cnt == 0){
				straight_num -= ((90-61.5)/90);
 800cd12:	a759      	add	r7, pc, #356	; (adr r7, 800ce78 <MaxParaRunTest+0x180>)
 800cd14:	e9d7 6700 	ldrd	r6, r7, [r7]
 800cd18:	4d5a      	ldr	r5, [pc, #360]	; (800ce84 <MaxParaRunTest+0x18c>)
//			FastPath[start_cnt].path_state.pos.x
			PIDChangeFlag(A_VELO_PID, 1);
			PIDChangeFlag(R_WALL_PID, 0);
			PIDChangeFlag(L_WALL_PID, 0);
			PIDChangeFlag(D_WALL_PID, 0);
			FastStraight(0.5, straight_num,1.00, -1.00/*2.89, -2.89*/, 4000, ExploreVelocity);
 800cd1a:	ed9f 9a5b 	vldr	s18, [pc, #364]	; 800ce88 <MaxParaRunTest+0x190>
			FastStraight(1, 61.5/90, 1.00, -1.00/*2.89, -2.89*/, ExploreVelocity, ExploreVelocity);
 800cd1e:	eddf 8a5b 	vldr	s17, [pc, #364]	; 800ce8c <MaxParaRunTest+0x194>
	for(int count=0; count <= num_nodes; count++)
 800cd22:	2200      	movs	r2, #0
		switch(FastPath[count].path_action)
 800cd24:	0113      	lsls	r3, r2, #4
 800cd26:	18e9      	adds	r1, r5, r3
 800cd28:	f102 0a01 	add.w	sl, r2, #1
 800cd2c:	7b09      	ldrb	r1, [r1, #12]
 800cd2e:	2903      	cmp	r1, #3
 800cd30:	f200 809f 	bhi.w	800ce72 <MaxParaRunTest+0x17a>
 800cd34:	e8df f001 	tbb	[pc, r1]
 800cd38:	021d336c 	.word	0x021d336c
			PIDChangeFlag(D_WALL_PID, 0);
			SlalomLeft(maze, mouse);
			break;
		case R_90_SEARCH:
//			ChangeLED(3);
			PIDChangeFlag(A_VELO_PID, 0);
 800cd3c:	2100      	movs	r1, #0
 800cd3e:	4608      	mov	r0, r1
 800cd40:	f001 fea8 	bl	800ea94 <PIDChangeFlag>
			PIDChangeFlag(R_WALL_PID, 0);
 800cd44:	2100      	movs	r1, #0
 800cd46:	2003      	movs	r0, #3
 800cd48:	f001 fea4 	bl	800ea94 <PIDChangeFlag>
			PIDChangeFlag(L_WALL_PID, 0);
 800cd4c:	2100      	movs	r1, #0
 800cd4e:	2002      	movs	r0, #2
 800cd50:	f001 fea0 	bl	800ea94 <PIDChangeFlag>
			PIDChangeFlag(D_WALL_PID, 0);
 800cd54:	2100      	movs	r1, #0
 800cd56:	2001      	movs	r0, #1
 800cd58:	f001 fe9c 	bl	800ea94 <PIDChangeFlag>
			SlalomRight(maze, mouse);
 800cd5c:	4649      	mov	r1, r9
 800cd5e:	4640      	mov	r0, r8
 800cd60:	f7fc fa26 	bl	80091b0 <SlalomRight>
			break;
 800cd64:	4652      	mov	r2, sl
	for(int count=0; count <= num_nodes; count++)
 800cd66:	4294      	cmp	r4, r2
 800cd68:	dadc      	bge.n	800cd24 <MaxParaRunTest+0x2c>
		default :
			break;
		}
	}
}
 800cd6a:	ecbd 8b04 	vpop	{d8-d9}
 800cd6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			PIDChangeFlag(A_VELO_PID, 0);
 800cd72:	2100      	movs	r1, #0
 800cd74:	4608      	mov	r0, r1
 800cd76:	f001 fe8d 	bl	800ea94 <PIDChangeFlag>
			PIDChangeFlag(R_WALL_PID, 0);
 800cd7a:	2100      	movs	r1, #0
 800cd7c:	2003      	movs	r0, #3
 800cd7e:	f001 fe89 	bl	800ea94 <PIDChangeFlag>
			PIDChangeFlag(L_WALL_PID, 0);
 800cd82:	2100      	movs	r1, #0
 800cd84:	2002      	movs	r0, #2
 800cd86:	f001 fe85 	bl	800ea94 <PIDChangeFlag>
			PIDChangeFlag(D_WALL_PID, 0);
 800cd8a:	2100      	movs	r1, #0
 800cd8c:	2001      	movs	r0, #1
 800cd8e:	f001 fe81 	bl	800ea94 <PIDChangeFlag>
			SlalomLeft(maze, mouse);
 800cd92:	4649      	mov	r1, r9
 800cd94:	4640      	mov	r0, r8
 800cd96:	f7fc fb7b 	bl	8009490 <SlalomLeft>
			break;
 800cd9a:	4652      	mov	r2, sl
 800cd9c:	e7e3      	b.n	800cd66 <MaxParaRunTest+0x6e>
 800cd9e:	442b      	add	r3, r5
		switch(FastPath[count].path_action)
 800cda0:	4692      	mov	sl, r2
 800cda2:	3310      	adds	r3, #16
			while(FastPath[count].path_action == ACC_DEC)
 800cda4:	7b19      	ldrb	r1, [r3, #12]
 800cda6:	2901      	cmp	r1, #1
				count ++;
 800cda8:	f10a 0a01 	add.w	sl, sl, #1
			while(FastPath[count].path_action == ACC_DEC)
 800cdac:	d0f9      	beq.n	800cda2 <MaxParaRunTest+0xaa>
			straight_num = (float)(count - start_cnt);
 800cdae:	ebaa 0302 	sub.w	r3, sl, r2
 800cdb2:	ee08 3a10 	vmov	s16, r3
 800cdb6:	eeb8 8ac8 	vcvt.f32.s32	s16, s16
			if(start_cnt == 0){
 800cdba:	b95a      	cbnz	r2, 800cdd4 <MaxParaRunTest+0xdc>
				straight_num -= ((90-61.5)/90);
 800cdbc:	ee18 0a10 	vmov	r0, s16
 800cdc0:	f7fb fafa 	bl	80083b8 <__aeabi_f2d>
 800cdc4:	4632      	mov	r2, r6
 800cdc6:	463b      	mov	r3, r7
 800cdc8:	f7fb f996 	bl	80080f8 <__aeabi_dsub>
 800cdcc:	f7fb fe44 	bl	8008a58 <__aeabi_d2f>
 800cdd0:	ee08 0a10 	vmov	s16, r0
			PIDChangeFlag(A_VELO_PID, 1);
 800cdd4:	2101      	movs	r1, #1
 800cdd6:	2000      	movs	r0, #0
 800cdd8:	f001 fe5c 	bl	800ea94 <PIDChangeFlag>
			PIDChangeFlag(R_WALL_PID, 0);
 800cddc:	2100      	movs	r1, #0
 800cdde:	2003      	movs	r0, #3
 800cde0:	f001 fe58 	bl	800ea94 <PIDChangeFlag>
			PIDChangeFlag(L_WALL_PID, 0);
 800cde4:	2100      	movs	r1, #0
 800cde6:	2002      	movs	r0, #2
 800cde8:	f001 fe54 	bl	800ea94 <PIDChangeFlag>
			PIDChangeFlag(D_WALL_PID, 0);
 800cdec:	2100      	movs	r1, #0
 800cdee:	2001      	movs	r0, #1
 800cdf0:	f001 fe50 	bl	800ea94 <PIDChangeFlag>
			FastStraight(0.5, straight_num,1.00, -1.00/*2.89, -2.89*/, 4000, ExploreVelocity);
 800cdf4:	4b26      	ldr	r3, [pc, #152]	; (800ce90 <MaxParaRunTest+0x198>)
 800cdf6:	eef0 0a48 	vmov.f32	s1, s16
 800cdfa:	edd3 2a00 	vldr	s5, [r3]
 800cdfe:	eeb0 2a49 	vmov.f32	s4, s18
 800ce02:	eeff 1a00 	vmov.f32	s3, #240	; 0xbf800000 -1.0
 800ce06:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 800ce0a:	eeb6 0a00 	vmov.f32	s0, #96	; 0x3f000000  0.5
 800ce0e:	e01c      	b.n	800ce4a <MaxParaRunTest+0x152>
			PIDChangeFlag(A_VELO_PID, 1);
 800ce10:	2101      	movs	r1, #1
 800ce12:	2000      	movs	r0, #0
 800ce14:	f001 fe3e 	bl	800ea94 <PIDChangeFlag>
			PIDChangeFlag(R_WALL_PID, 0);
 800ce18:	2100      	movs	r1, #0
 800ce1a:	2003      	movs	r0, #3
 800ce1c:	f001 fe3a 	bl	800ea94 <PIDChangeFlag>
			PIDChangeFlag(L_WALL_PID, 0);
 800ce20:	2100      	movs	r1, #0
 800ce22:	2002      	movs	r0, #2
 800ce24:	f001 fe36 	bl	800ea94 <PIDChangeFlag>
			PIDChangeFlag(D_WALL_PID, 0);
 800ce28:	2100      	movs	r1, #0
 800ce2a:	2001      	movs	r0, #1
 800ce2c:	f001 fe32 	bl	800ea94 <PIDChangeFlag>
			FastStraight(1, 61.5/90, 1.00, -1.00/*2.89, -2.89*/, ExploreVelocity, ExploreVelocity);
 800ce30:	4b17      	ldr	r3, [pc, #92]	; (800ce90 <MaxParaRunTest+0x198>)
 800ce32:	edd3 2a00 	vldr	s5, [r3]
 800ce36:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 800ce3a:	eeb0 2a62 	vmov.f32	s4, s5
 800ce3e:	eeb0 0a41 	vmov.f32	s0, s2
 800ce42:	eeff 1a00 	vmov.f32	s3, #240	; 0xbf800000 -1.0
 800ce46:	eef0 0a68 	vmov.f32	s1, s17
			FastStraight(0.5, straight_num,1.00, -1.00/*2.89, -2.89*/, 4000, ExploreVelocity);
 800ce4a:	f7ff fdd9 	bl	800ca00 <FastStraight>
			PIDChangeFlag(A_VELO_PID, 0);
 800ce4e:	2100      	movs	r1, #0
 800ce50:	4608      	mov	r0, r1
 800ce52:	f001 fe1f 	bl	800ea94 <PIDChangeFlag>
			PIDChangeFlag(R_WALL_PID, 0);
 800ce56:	2100      	movs	r1, #0
 800ce58:	2003      	movs	r0, #3
 800ce5a:	f001 fe1b 	bl	800ea94 <PIDChangeFlag>
			PIDChangeFlag(L_WALL_PID, 0);
 800ce5e:	2100      	movs	r1, #0
 800ce60:	2002      	movs	r0, #2
 800ce62:	f001 fe17 	bl	800ea94 <PIDChangeFlag>
			PIDChangeFlag(D_WALL_PID, 0);
 800ce66:	2100      	movs	r1, #0
 800ce68:	2001      	movs	r0, #1
 800ce6a:	f001 fe13 	bl	800ea94 <PIDChangeFlag>
				count ++;
 800ce6e:	4652      	mov	r2, sl
			break;
 800ce70:	e779      	b.n	800cd66 <MaxParaRunTest+0x6e>
		switch(FastPath[count].path_action)
 800ce72:	4652      	mov	r2, sl
 800ce74:	e777      	b.n	800cd66 <MaxParaRunTest+0x6e>
 800ce76:	bf00      	nop
 800ce78:	44444444 	.word	0x44444444
 800ce7c:	3fd44444 	.word	0x3fd44444
 800ce80:	2000120c 	.word	0x2000120c
 800ce84:	2000020c 	.word	0x2000020c
 800ce88:	457a0000 	.word	0x457a0000
 800ce8c:	3f2eeeef 	.word	0x3f2eeeef
 800ce90:	200015a0 	.word	0x200015a0

0800ce94 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800ce94:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800ce98:	2400      	movs	r4, #0
{
 800ce9a:	b08b      	sub	sp, #44	; 0x2c
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800ce9c:	e9cd 4405 	strd	r4, r4, [sp, #20]
 800cea0:	e9cd 4407 	strd	r4, r4, [sp, #28]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800cea4:	4b45      	ldr	r3, [pc, #276]	; (800cfbc <MX_GPIO_Init+0x128>)
 800cea6:	9400      	str	r4, [sp, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800cea8:	9409      	str	r4, [sp, #36]	; 0x24
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800ceaa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();
  __HAL_RCC_GPIOD_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0|GPIO_PIN_2, GPIO_PIN_RESET);
 800ceac:	f8df 911c 	ldr.w	r9, [pc, #284]	; 800cfcc <MX_GPIO_Init+0x138>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);
 800ceb0:	f8df 811c 	ldr.w	r8, [pc, #284]	; 800cfd0 <MX_GPIO_Init+0x13c>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, GPIO_PIN_RESET);
 800ceb4:	4f42      	ldr	r7, [pc, #264]	; (800cfc0 <MX_GPIO_Init+0x12c>)

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_RESET);
 800ceb6:	4e43      	ldr	r6, [pc, #268]	; (800cfc4 <MX_GPIO_Init+0x130>)
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800ceb8:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800cebc:	631a      	str	r2, [r3, #48]	; 0x30
 800cebe:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800cec0:	f002 0280 	and.w	r2, r2, #128	; 0x80
 800cec4:	9200      	str	r2, [sp, #0]
 800cec6:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800cec8:	9401      	str	r4, [sp, #4]
 800ceca:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800cecc:	f042 0204 	orr.w	r2, r2, #4
 800ced0:	631a      	str	r2, [r3, #48]	; 0x30
 800ced2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ced4:	f002 0204 	and.w	r2, r2, #4
 800ced8:	9201      	str	r2, [sp, #4]
 800ceda:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800cedc:	9402      	str	r4, [sp, #8]
 800cede:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800cee0:	f042 0201 	orr.w	r2, r2, #1
 800cee4:	631a      	str	r2, [r3, #48]	; 0x30
 800cee6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800cee8:	f002 0201 	and.w	r2, r2, #1
 800ceec:	9202      	str	r2, [sp, #8]
 800ceee:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800cef0:	9403      	str	r4, [sp, #12]
 800cef2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800cef4:	f042 0202 	orr.w	r2, r2, #2
 800cef8:	631a      	str	r2, [r3, #48]	; 0x30
 800cefa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800cefc:	f002 0202 	and.w	r2, r2, #2
 800cf00:	9203      	str	r2, [sp, #12]
 800cf02:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800cf04:	9404      	str	r4, [sp, #16]
 800cf06:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800cf08:	f042 0208 	orr.w	r2, r2, #8
 800cf0c:	631a      	str	r2, [r3, #48]	; 0x30
 800cf0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cf10:	f003 0308 	and.w	r3, r3, #8
 800cf14:	9304      	str	r3, [sp, #16]
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0|GPIO_PIN_2, GPIO_PIN_RESET);
 800cf16:	4622      	mov	r2, r4
 800cf18:	4648      	mov	r0, r9
 800cf1a:	2105      	movs	r1, #5
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800cf1c:	9b04      	ldr	r3, [sp, #16]
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0|GPIO_PIN_2, GPIO_PIN_RESET);
 800cf1e:	f002 fe9d 	bl	800fc5c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);
 800cf22:	4622      	mov	r2, r4
 800cf24:	4640      	mov	r0, r8
 800cf26:	f44f 7140 	mov.w	r1, #768	; 0x300
 800cf2a:	f002 fe97 	bl	800fc5c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, GPIO_PIN_RESET);
 800cf2e:	4622      	mov	r2, r4
 800cf30:	4638      	mov	r0, r7
 800cf32:	2104      	movs	r1, #4
 800cf34:	f002 fe92 	bl	800fc5c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_RESET);
 800cf38:	4622      	mov	r2, r4
 800cf3a:	4630      	mov	r0, r6
 800cf3c:	f44f 7100 	mov.w	r1, #512	; 0x200
 800cf40:	f002 fe8c 	bl	800fc5c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA0 PA2 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_2;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800cf44:	2501      	movs	r5, #1
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800cf46:	4648      	mov	r0, r9
 800cf48:	a905      	add	r1, sp, #20
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_2;
 800cf4a:	2305      	movs	r3, #5
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800cf4c:	e9cd 3505 	strd	r3, r5, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800cf50:	e9cd 4407 	strd	r4, r4, [sp, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800cf54:	f002 fd7e 	bl	800fa54 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800cf58:	4b1b      	ldr	r3, [pc, #108]	; (800cfc8 <MX_GPIO_Init+0x134>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800cf5a:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 800cf5c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800cf60:	a905      	add	r1, sp, #20
 800cf62:	4630      	mov	r0, r6
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800cf64:	e9cd 2305 	strd	r2, r3, [sp, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800cf68:	f002 fd74 	bl	800fa54 <HAL_GPIO_Init>
  /*Configure GPIO pins : PC8 PC9 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800cf6c:	4640      	mov	r0, r8
 800cf6e:	a905      	add	r1, sp, #20
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800cf70:	f44f 7340 	mov.w	r3, #768	; 0x300
 800cf74:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800cf76:	e9cd 5406 	strd	r5, r4, [sp, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800cf7a:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800cf7c:	f002 fd6a 	bl	800fa54 <HAL_GPIO_Init>
  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800cf80:	4638      	mov	r0, r7
 800cf82:	a905      	add	r1, sp, #20
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 800cf84:	2304      	movs	r3, #4
 800cf86:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800cf88:	e9cd 5406 	strd	r5, r4, [sp, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800cf8c:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800cf8e:	f002 fd61 	bl	800fa54 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 800cf92:	f44f 7300 	mov.w	r3, #512	; 0x200
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800cf96:	a905      	add	r1, sp, #20
 800cf98:	4630      	mov	r0, r6
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 800cf9a:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800cf9c:	e9cd 5406 	strd	r5, r4, [sp, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800cfa0:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800cfa2:	f002 fd57 	bl	800fa54 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800cfa6:	4622      	mov	r2, r4
 800cfa8:	4621      	mov	r1, r4
 800cfaa:	2028      	movs	r0, #40	; 0x28
 800cfac:	f002 f9c6 	bl	800f33c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800cfb0:	2028      	movs	r0, #40	; 0x28
 800cfb2:	f002 f9f9 	bl	800f3a8 <HAL_NVIC_EnableIRQ>

}
 800cfb6:	b00b      	add	sp, #44	; 0x2c
 800cfb8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800cfbc:	40023800 	.word	0x40023800
 800cfc0:	40020c00 	.word	0x40020c00
 800cfc4:	40020400 	.word	0x40020400
 800cfc8:	10110000 	.word	0x10110000
 800cfcc:	40020000 	.word	0x40020000
 800cfd0:	40020800 	.word	0x40020800

0800cfd4 <MX_DMA_Init>:
{
 800cfd4:	b510      	push	{r4, lr}
 800cfd6:	b082      	sub	sp, #8
  __HAL_RCC_DMA2_CLK_ENABLE();
 800cfd8:	2400      	movs	r4, #0
 800cfda:	4b0f      	ldr	r3, [pc, #60]	; (800d018 <MX_DMA_Init+0x44>)
 800cfdc:	9401      	str	r4, [sp, #4]
 800cfde:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800cfe0:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 800cfe4:	631a      	str	r2, [r3, #48]	; 0x30
 800cfe6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cfe8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 800cfec:	4622      	mov	r2, r4
 800cfee:	4621      	mov	r1, r4
  __HAL_RCC_DMA2_CLK_ENABLE();
 800cff0:	9301      	str	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 800cff2:	2038      	movs	r0, #56	; 0x38
  __HAL_RCC_DMA2_CLK_ENABLE();
 800cff4:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 800cff6:	f002 f9a1 	bl	800f33c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 800cffa:	2038      	movs	r0, #56	; 0x38
 800cffc:	f002 f9d4 	bl	800f3a8 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 800d000:	4622      	mov	r2, r4
 800d002:	4621      	mov	r1, r4
 800d004:	203a      	movs	r0, #58	; 0x3a
 800d006:	f002 f999 	bl	800f33c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 800d00a:	203a      	movs	r0, #58	; 0x3a
}
 800d00c:	b002      	add	sp, #8
 800d00e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 800d012:	f002 b9c9 	b.w	800f3a8 <HAL_NVIC_EnableIRQ>
 800d016:	bf00      	nop
 800d018:	40023800 	.word	0x40023800

0800d01c <MX_ADC1_Init>:
{
 800d01c:	b570      	push	{r4, r5, r6, lr}
  hadc1.Instance = ADC1;
 800d01e:	4c21      	ldr	r4, [pc, #132]	; (800d0a4 <MX_ADC1_Init+0x88>)
 800d020:	4b21      	ldr	r3, [pc, #132]	; (800d0a8 <MX_ADC1_Init+0x8c>)
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800d022:	4a22      	ldr	r2, [pc, #136]	; (800d0ac <MX_ADC1_Init+0x90>)
  hadc1.Instance = ADC1;
 800d024:	6023      	str	r3, [r4, #0]
{
 800d026:	b084      	sub	sp, #16
  ADC_ChannelConfTypeDef sConfig = {0};
 800d028:	2300      	movs	r3, #0
  hadc1.Init.ScanConvMode = ENABLE;
 800d02a:	2501      	movs	r5, #1
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV6;
 800d02c:	f44f 3100 	mov.w	r1, #131072	; 0x20000
  hadc1.Init.NbrOfConversion = 3;
 800d030:	2603      	movs	r6, #3
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800d032:	4620      	mov	r0, r4
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV6;
 800d034:	6061      	str	r1, [r4, #4]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800d036:	62a2      	str	r2, [r4, #40]	; 0x28
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800d038:	60a3      	str	r3, [r4, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800d03a:	9300      	str	r3, [sp, #0]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800d03c:	f884 3020 	strb.w	r3, [r4, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800d040:	62e3      	str	r3, [r4, #44]	; 0x2c
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800d042:	60e3      	str	r3, [r4, #12]
  ADC_ChannelConfTypeDef sConfig = {0};
 800d044:	e9cd 3301 	strd	r3, r3, [sp, #4]
 800d048:	9303      	str	r3, [sp, #12]
  hadc1.Init.ScanConvMode = ENABLE;
 800d04a:	6125      	str	r5, [r4, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800d04c:	7625      	strb	r5, [r4, #24]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 800d04e:	f884 5030 	strb.w	r5, [r4, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800d052:	6165      	str	r5, [r4, #20]
  hadc1.Init.NbrOfConversion = 3;
 800d054:	61e6      	str	r6, [r4, #28]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800d056:	f001 fee5 	bl	800ee24 <HAL_ADC_Init>
 800d05a:	b108      	cbz	r0, 800d060 <MX_ADC1_Init+0x44>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800d05c:	b672      	cpsid	i
 800d05e:	e7fe      	b.n	800d05e <MX_ADC1_Init+0x42>
  sConfig.Channel = ADC_CHANNEL_10;
 800d060:	230a      	movs	r3, #10
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800d062:	4669      	mov	r1, sp
 800d064:	4620      	mov	r0, r4
  sConfig.Rank = 1;
 800d066:	9501      	str	r5, [sp, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_56CYCLES;
 800d068:	9602      	str	r6, [sp, #8]
  sConfig.Channel = ADC_CHANNEL_10;
 800d06a:	9300      	str	r3, [sp, #0]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800d06c:	f002 f8ac 	bl	800f1c8 <HAL_ADC_ConfigChannel>
 800d070:	b108      	cbz	r0, 800d076 <MX_ADC1_Init+0x5a>
 800d072:	b672      	cpsid	i
 800d074:	e7fe      	b.n	800d074 <MX_ADC1_Init+0x58>
  sConfig.Channel = ADC_CHANNEL_14;
 800d076:	220e      	movs	r2, #14
  sConfig.Rank = 2;
 800d078:	2302      	movs	r3, #2
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800d07a:	4669      	mov	r1, sp
 800d07c:	4620      	mov	r0, r4
  sConfig.Channel = ADC_CHANNEL_14;
 800d07e:	9200      	str	r2, [sp, #0]
  sConfig.Rank = 2;
 800d080:	9301      	str	r3, [sp, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800d082:	f002 f8a1 	bl	800f1c8 <HAL_ADC_ConfigChannel>
 800d086:	b108      	cbz	r0, 800d08c <MX_ADC1_Init+0x70>
 800d088:	b672      	cpsid	i
 800d08a:	e7fe      	b.n	800d08a <MX_ADC1_Init+0x6e>
  sConfig.Channel = ADC_CHANNEL_9;
 800d08c:	2309      	movs	r3, #9
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800d08e:	4669      	mov	r1, sp
 800d090:	4620      	mov	r0, r4
  sConfig.Channel = ADC_CHANNEL_9;
 800d092:	e9cd 3600 	strd	r3, r6, [sp]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800d096:	f002 f897 	bl	800f1c8 <HAL_ADC_ConfigChannel>
 800d09a:	b108      	cbz	r0, 800d0a0 <MX_ADC1_Init+0x84>
 800d09c:	b672      	cpsid	i
 800d09e:	e7fe      	b.n	800d09e <MX_ADC1_Init+0x82>
}
 800d0a0:	b004      	add	sp, #16
 800d0a2:	bd70      	pop	{r4, r5, r6, pc}
 800d0a4:	20001e84 	.word	0x20001e84
 800d0a8:	40012000 	.word	0x40012000
 800d0ac:	0f000001 	.word	0x0f000001

0800d0b0 <MX_ADC2_Init>:
{
 800d0b0:	b570      	push	{r4, r5, r6, lr}
  hadc2.Instance = ADC2;
 800d0b2:	4c1c      	ldr	r4, [pc, #112]	; (800d124 <MX_ADC2_Init+0x74>)
 800d0b4:	4b1c      	ldr	r3, [pc, #112]	; (800d128 <MX_ADC2_Init+0x78>)
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800d0b6:	4a1d      	ldr	r2, [pc, #116]	; (800d12c <MX_ADC2_Init+0x7c>)
  hadc2.Instance = ADC2;
 800d0b8:	6023      	str	r3, [r4, #0]
{
 800d0ba:	b084      	sub	sp, #16
  ADC_ChannelConfTypeDef sConfig = {0};
 800d0bc:	2300      	movs	r3, #0
  hadc2.Init.ScanConvMode = ENABLE;
 800d0be:	2501      	movs	r5, #1
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV6;
 800d0c0:	f44f 3100 	mov.w	r1, #131072	; 0x20000
  hadc2.Init.NbrOfConversion = 2;
 800d0c4:	2602      	movs	r6, #2
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 800d0c6:	4620      	mov	r0, r4
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV6;
 800d0c8:	6061      	str	r1, [r4, #4]
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800d0ca:	62a2      	str	r2, [r4, #40]	; 0x28
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 800d0cc:	60a3      	str	r3, [r4, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800d0ce:	9300      	str	r3, [sp, #0]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 800d0d0:	f884 3020 	strb.w	r3, [r4, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800d0d4:	62e3      	str	r3, [r4, #44]	; 0x2c
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800d0d6:	60e3      	str	r3, [r4, #12]
  ADC_ChannelConfTypeDef sConfig = {0};
 800d0d8:	e9cd 3301 	strd	r3, r3, [sp, #4]
 800d0dc:	9303      	str	r3, [sp, #12]
  hadc2.Init.ScanConvMode = ENABLE;
 800d0de:	6125      	str	r5, [r4, #16]
  hadc2.Init.ContinuousConvMode = ENABLE;
 800d0e0:	7625      	strb	r5, [r4, #24]
  hadc2.Init.DMAContinuousRequests = ENABLE;
 800d0e2:	f884 5030 	strb.w	r5, [r4, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800d0e6:	6165      	str	r5, [r4, #20]
  hadc2.Init.NbrOfConversion = 2;
 800d0e8:	61e6      	str	r6, [r4, #28]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 800d0ea:	f001 fe9b 	bl	800ee24 <HAL_ADC_Init>
 800d0ee:	b108      	cbz	r0, 800d0f4 <MX_ADC2_Init+0x44>
 800d0f0:	b672      	cpsid	i
 800d0f2:	e7fe      	b.n	800d0f2 <MX_ADC2_Init+0x42>
  sConfig.Channel = ADC_CHANNEL_11;
 800d0f4:	220b      	movs	r2, #11
  sConfig.SamplingTime = ADC_SAMPLETIME_56CYCLES;
 800d0f6:	2303      	movs	r3, #3
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800d0f8:	4669      	mov	r1, sp
 800d0fa:	4620      	mov	r0, r4
  sConfig.Rank = 1;
 800d0fc:	9501      	str	r5, [sp, #4]
  sConfig.Channel = ADC_CHANNEL_11;
 800d0fe:	9200      	str	r2, [sp, #0]
  sConfig.SamplingTime = ADC_SAMPLETIME_56CYCLES;
 800d100:	9302      	str	r3, [sp, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800d102:	f002 f861 	bl	800f1c8 <HAL_ADC_ConfigChannel>
 800d106:	b108      	cbz	r0, 800d10c <MX_ADC2_Init+0x5c>
 800d108:	b672      	cpsid	i
 800d10a:	e7fe      	b.n	800d10a <MX_ADC2_Init+0x5a>
  sConfig.Channel = ADC_CHANNEL_15;
 800d10c:	230f      	movs	r3, #15
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800d10e:	4669      	mov	r1, sp
 800d110:	4620      	mov	r0, r4
  sConfig.Channel = ADC_CHANNEL_15;
 800d112:	e9cd 3600 	strd	r3, r6, [sp]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800d116:	f002 f857 	bl	800f1c8 <HAL_ADC_ConfigChannel>
 800d11a:	b108      	cbz	r0, 800d120 <MX_ADC2_Init+0x70>
 800d11c:	b672      	cpsid	i
 800d11e:	e7fe      	b.n	800d11e <MX_ADC2_Init+0x6e>
}
 800d120:	b004      	add	sp, #16
 800d122:	bd70      	pop	{r4, r5, r6, pc}
 800d124:	20001da4 	.word	0x20001da4
 800d128:	40012100 	.word	0x40012100
 800d12c:	0f000001 	.word	0x0f000001

0800d130 <MX_TIM3_Init>:
{
 800d130:	b530      	push	{r4, r5, lr}
 800d132:	b08d      	sub	sp, #52	; 0x34
  htim3.Instance = TIM3;
 800d134:	4c14      	ldr	r4, [pc, #80]	; (800d188 <MX_TIM3_Init+0x58>)
  TIM_Encoder_InitTypeDef sConfig = {0};
 800d136:	2220      	movs	r2, #32
 800d138:	2100      	movs	r1, #0
 800d13a:	a804      	add	r0, sp, #16
 800d13c:	f004 fe19 	bl	8011d72 <memset>
  htim3.Instance = TIM3;
 800d140:	4b12      	ldr	r3, [pc, #72]	; (800d18c <MX_TIM3_Init+0x5c>)
 800d142:	6023      	str	r3, [r4, #0]
  htim3.Init.Period = 60000-1;
 800d144:	f64e 225f 	movw	r2, #59999	; 0xea5f
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800d148:	2300      	movs	r3, #0
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800d14a:	2503      	movs	r5, #3
  htim3.Init.Period = 60000-1;
 800d14c:	60e2      	str	r2, [r4, #12]
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 800d14e:	4620      	mov	r0, r4
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800d150:	2201      	movs	r2, #1
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 800d152:	a903      	add	r1, sp, #12
  htim3.Init.Prescaler = 0;
 800d154:	6063      	str	r3, [r4, #4]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800d156:	9301      	str	r3, [sp, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800d158:	60a3      	str	r3, [r4, #8]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800d15a:	6123      	str	r3, [r4, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800d15c:	61a3      	str	r3, [r4, #24]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800d15e:	9302      	str	r3, [sp, #8]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800d160:	9503      	str	r5, [sp, #12]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800d162:	9205      	str	r2, [sp, #20]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800d164:	9209      	str	r2, [sp, #36]	; 0x24
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 800d166:	f003 ffbb 	bl	80110e0 <HAL_TIM_Encoder_Init>
 800d16a:	b108      	cbz	r0, 800d170 <MX_TIM3_Init+0x40>
 800d16c:	b672      	cpsid	i
 800d16e:	e7fe      	b.n	800d16e <MX_TIM3_Init+0x3e>
 800d170:	4603      	mov	r3, r0
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800d172:	a901      	add	r1, sp, #4
 800d174:	4620      	mov	r0, r4
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800d176:	e9cd 3301 	strd	r3, r3, [sp, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800d17a:	f004 f961 	bl	8011440 <HAL_TIMEx_MasterConfigSynchronization>
 800d17e:	b108      	cbz	r0, 800d184 <MX_TIM3_Init+0x54>
 800d180:	b672      	cpsid	i
 800d182:	e7fe      	b.n	800d182 <MX_TIM3_Init+0x52>
}
 800d184:	b00d      	add	sp, #52	; 0x34
 800d186:	bd30      	pop	{r4, r5, pc}
 800d188:	20001dec 	.word	0x20001dec
 800d18c:	40000400 	.word	0x40000400

0800d190 <MX_USART1_UART_Init>:
  huart1.Instance = USART1;
 800d190:	4b0a      	ldr	r3, [pc, #40]	; (800d1bc <MX_USART1_UART_Init+0x2c>)
 800d192:	4a0b      	ldr	r2, [pc, #44]	; (800d1c0 <MX_USART1_UART_Init+0x30>)
{
 800d194:	b510      	push	{r4, lr}
  huart1.Init.Mode = UART_MODE_TX_RX;
 800d196:	210c      	movs	r1, #12
  huart1.Instance = USART1;
 800d198:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 800d19a:	f44f 5416 	mov.w	r4, #9600	; 0x2580
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800d19e:	2200      	movs	r2, #0
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800d1a0:	4618      	mov	r0, r3
  huart1.Init.BaudRate = 9600;
 800d1a2:	605c      	str	r4, [r3, #4]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800d1a4:	6159      	str	r1, [r3, #20]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800d1a6:	e9c3 2202 	strd	r2, r2, [r3, #8]
  huart1.Init.Parity = UART_PARITY_NONE;
 800d1aa:	611a      	str	r2, [r3, #16]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800d1ac:	e9c3 2206 	strd	r2, r2, [r3, #24]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800d1b0:	f004 fa5e 	bl	8011670 <HAL_UART_Init>
 800d1b4:	b108      	cbz	r0, 800d1ba <MX_USART1_UART_Init+0x2a>
 800d1b6:	b672      	cpsid	i
 800d1b8:	e7fe      	b.n	800d1b8 <MX_USART1_UART_Init+0x28>
}
 800d1ba:	bd10      	pop	{r4, pc}
 800d1bc:	20001ecc 	.word	0x20001ecc
 800d1c0:	40011000 	.word	0x40011000

0800d1c4 <__io_putchar>:
PUTCHAR_PROTOTYPE {
 800d1c4:	b500      	push	{lr}
 800d1c6:	b083      	sub	sp, #12
 800d1c8:	a902      	add	r1, sp, #8
	HAL_UART_Transmit(&huart1, (uint8_t*)&ch, 1, 0xFFFF);
 800d1ca:	f64f 73ff 	movw	r3, #65535	; 0xffff
PUTCHAR_PROTOTYPE {
 800d1ce:	f841 0d04 	str.w	r0, [r1, #-4]!
	HAL_UART_Transmit(&huart1, (uint8_t*)&ch, 1, 0xFFFF);
 800d1d2:	2201      	movs	r2, #1
 800d1d4:	4803      	ldr	r0, [pc, #12]	; (800d1e4 <__io_putchar+0x20>)
 800d1d6:	f004 fa7b 	bl	80116d0 <HAL_UART_Transmit>
}
 800d1da:	9801      	ldr	r0, [sp, #4]
 800d1dc:	b003      	add	sp, #12
 800d1de:	f85d fb04 	ldr.w	pc, [sp], #4
 800d1e2:	bf00      	nop
 800d1e4:	20001ecc 	.word	0x20001ecc

0800d1e8 <__io_getchar>:
int __io_getchar(void) {
 800d1e8:	b510      	push	{r4, lr}
Status = HAL_UART_Receive(&huart1, &Data, sizeof(Data), 10);
 800d1ea:	4c07      	ldr	r4, [pc, #28]	; (800d208 <__io_getchar+0x20>)
int __io_getchar(void) {
 800d1ec:	b082      	sub	sp, #8
Status = HAL_UART_Receive(&huart1, &Data, sizeof(Data), 10);
 800d1ee:	230a      	movs	r3, #10
 800d1f0:	2201      	movs	r2, #1
 800d1f2:	f10d 0107 	add.w	r1, sp, #7
 800d1f6:	4620      	mov	r0, r4
 800d1f8:	f004 fac8 	bl	801178c <HAL_UART_Receive>
while(Status != HAL_OK)
 800d1fc:	2800      	cmp	r0, #0
 800d1fe:	d1f6      	bne.n	800d1ee <__io_getchar+0x6>
}
 800d200:	f89d 0007 	ldrb.w	r0, [sp, #7]
 800d204:	b002      	add	sp, #8
 800d206:	bd10      	pop	{r4, pc}
 800d208:	20001ecc 	.word	0x20001ecc

0800d20c <SystemClock_Config>:
{
 800d20c:	b570      	push	{r4, r5, r6, lr}
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800d20e:	2300      	movs	r3, #0
{
 800d210:	b094      	sub	sp, #80	; 0x50
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800d212:	e9cd 330a 	strd	r3, r3, [sp, #40]	; 0x28
 800d216:	e9cd 330c 	strd	r3, r3, [sp, #48]	; 0x30
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800d21a:	e9cd 3304 	strd	r3, r3, [sp, #16]
 800d21e:	e9cd 3306 	strd	r3, r3, [sp, #24]
  __HAL_RCC_PWR_CLK_ENABLE();
 800d222:	4920      	ldr	r1, [pc, #128]	; (800d2a4 <SystemClock_Config+0x98>)
 800d224:	9301      	str	r3, [sp, #4]
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800d226:	9303      	str	r3, [sp, #12]
  __HAL_RCC_PWR_CLK_ENABLE();
 800d228:	6c08      	ldr	r0, [r1, #64]	; 0x40
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800d22a:	4a1f      	ldr	r2, [pc, #124]	; (800d2a8 <SystemClock_Config+0x9c>)
  __HAL_RCC_PWR_CLK_ENABLE();
 800d22c:	f040 5080 	orr.w	r0, r0, #268435456	; 0x10000000
 800d230:	6408      	str	r0, [r1, #64]	; 0x40
 800d232:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800d234:	f001 5180 	and.w	r1, r1, #268435456	; 0x10000000
 800d238:	9101      	str	r1, [sp, #4]
 800d23a:	9901      	ldr	r1, [sp, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800d23c:	9302      	str	r3, [sp, #8]
 800d23e:	6813      	ldr	r3, [r2, #0]
 800d240:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800d244:	6013      	str	r3, [r2, #0]
 800d246:	6813      	ldr	r3, [r2, #0]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800d248:	f44f 3080 	mov.w	r0, #65536	; 0x10000
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800d24c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800d250:	2201      	movs	r2, #1
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800d252:	9302      	str	r3, [sp, #8]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800d254:	2402      	movs	r4, #2
  RCC_OscInitStruct.PLL.PLLM = 4;
 800d256:	2304      	movs	r3, #4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800d258:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800d25c:	9208      	str	r2, [sp, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800d25e:	9009      	str	r0, [sp, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLN = 168;
 800d260:	22a8      	movs	r2, #168	; 0xa8
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800d262:	a808      	add	r0, sp, #32
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800d264:	9d02      	ldr	r5, [sp, #8]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800d266:	940e      	str	r4, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800d268:	9412      	str	r4, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLM = 4;
 800d26a:	e9cd 130f 	strd	r1, r3, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800d26e:	9313      	str	r3, [sp, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLN = 168;
 800d270:	9211      	str	r2, [sp, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800d272:	f002 fd03 	bl	800fc7c <HAL_RCC_OscConfig>
 800d276:	b108      	cbz	r0, 800d27c <SystemClock_Config+0x70>
 800d278:	b672      	cpsid	i
 800d27a:	e7fe      	b.n	800d27a <SystemClock_Config+0x6e>
 800d27c:	4603      	mov	r3, r0
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800d27e:	260f      	movs	r6, #15
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800d280:	f44f 55a0 	mov.w	r5, #5120	; 0x1400
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800d284:	f44f 5280 	mov.w	r2, #4096	; 0x1000
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800d288:	a803      	add	r0, sp, #12
 800d28a:	2105      	movs	r1, #5
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800d28c:	9404      	str	r4, [sp, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800d28e:	9305      	str	r3, [sp, #20]
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800d290:	9603      	str	r6, [sp, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800d292:	e9cd 5206 	strd	r5, r2, [sp, #24]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800d296:	f002 ff05 	bl	80100a4 <HAL_RCC_ClockConfig>
 800d29a:	b108      	cbz	r0, 800d2a0 <SystemClock_Config+0x94>
 800d29c:	b672      	cpsid	i
 800d29e:	e7fe      	b.n	800d29e <SystemClock_Config+0x92>
}
 800d2a0:	b014      	add	sp, #80	; 0x50
 800d2a2:	bd70      	pop	{r4, r5, r6, pc}
 800d2a4:	40023800 	.word	0x40023800
 800d2a8:	40007000 	.word	0x40007000

0800d2ac <main>:
{
 800d2ac:	b580      	push	{r7, lr}
 800d2ae:	b098      	sub	sp, #96	; 0x60
  HAL_Init();
 800d2b0:	f001 fd7a 	bl	800eda8 <HAL_Init>
  MX_GPIO_Init();
 800d2b4:	f7ff fdee 	bl	800ce94 <MX_GPIO_Init>
  MX_DMA_Init();
 800d2b8:	f7ff fe8c 	bl	800cfd4 <MX_DMA_Init>
  MX_ADC1_Init();
 800d2bc:	f7ff feae 	bl	800d01c <MX_ADC1_Init>
  MX_ADC2_Init();
 800d2c0:	f7ff fef6 	bl	800d0b0 <MX_ADC2_Init>
  MX_USART1_UART_Init();
 800d2c4:	f7ff ff64 	bl	800d190 <MX_USART1_UART_Init>
	ADCStart();
 800d2c8:	f000 fcfa 	bl	800dcc0 <ADCStart>
	MX_TIM3_Init();
 800d2cc:	f7ff ff30 	bl	800d130 <MX_TIM3_Init>
	BatteryCheck( (int)adc1[2] );
 800d2d0:	4ba0      	ldr	r3, [pc, #640]	; (800d554 <main+0x2a8>)
  htim2.Instance = TIM2;
 800d2d2:	4ca1      	ldr	r4, [pc, #644]	; (800d558 <main+0x2ac>)
	BatteryCheck( (int)adc1[2] );
 800d2d4:	6898      	ldr	r0, [r3, #8]
 800d2d6:	f001 fc5d 	bl	800eb94 <BatteryCheck>
	ADCStop();
 800d2da:	f000 fd0f 	bl	800dcfc <ADCStop>
	ModeSelect(0, 7, &startup_mode);
 800d2de:	f10d 0207 	add.w	r2, sp, #7
 800d2e2:	2107      	movs	r1, #7
 800d2e4:	2000      	movs	r0, #0
 800d2e6:	f001 fcaf 	bl	800ec48 <ModeSelect>
	Signal( startup_mode );
 800d2ea:	f99d 0007 	ldrsb.w	r0, [sp, #7]
 800d2ee:	f001 fc3f 	bl	800eb70 <Signal>
  htim2.Init.Period = 4200-1;
 800d2f2:	f241 0667 	movw	r6, #4199	; 0x1067
  SystemClock_Config();
 800d2f6:	f7ff ff89 	bl	800d20c <SystemClock_Config>
  MX_GPIO_Init();
 800d2fa:	f7ff fdcb 	bl	800ce94 <MX_GPIO_Init>
  MX_DMA_Init();
 800d2fe:	f7ff fe69 	bl	800cfd4 <MX_DMA_Init>
  MX_ADC1_Init();
 800d302:	f7ff fe8b 	bl	800d01c <MX_ADC1_Init>
  MX_ADC2_Init();
 800d306:	f7ff fed3 	bl	800d0b0 <MX_ADC2_Init>
  MX_TIM3_Init();
 800d30a:	f7ff ff11 	bl	800d130 <MX_TIM3_Init>
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800d30e:	2300      	movs	r3, #0
  htim2.Instance = TIM2;
 800d310:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800d314:	4620      	mov	r0, r4
  htim2.Instance = TIM2;
 800d316:	6022      	str	r2, [r4, #0]
  htim2.Init.Prescaler = 0;
 800d318:	6063      	str	r3, [r4, #4]
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800d31a:	9308      	str	r3, [sp, #32]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800d31c:	9304      	str	r3, [sp, #16]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800d31e:	930f      	str	r3, [sp, #60]	; 0x3c
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800d320:	60a3      	str	r3, [r4, #8]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800d322:	6123      	str	r3, [r4, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800d324:	61a3      	str	r3, [r4, #24]
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800d326:	e9cd 3309 	strd	r3, r3, [sp, #36]	; 0x24
 800d32a:	930b      	str	r3, [sp, #44]	; 0x2c
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800d32c:	9305      	str	r3, [sp, #20]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800d32e:	e9cd 3310 	strd	r3, r3, [sp, #64]	; 0x40
 800d332:	e9cd 3312 	strd	r3, r3, [sp, #72]	; 0x48
 800d336:	e9cd 3314 	strd	r3, r3, [sp, #80]	; 0x50
  htim2.Init.Period = 4200-1;
 800d33a:	60e6      	str	r6, [r4, #12]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800d33c:	f003 fe7c 	bl	8011038 <HAL_TIM_Base_Init>
 800d340:	b108      	cbz	r0, 800d346 <main+0x9a>
 800d342:	b672      	cpsid	i
 800d344:	e7fe      	b.n	800d344 <main+0x98>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800d346:	f44f 5780 	mov.w	r7, #4096	; 0x1000
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800d34a:	a908      	add	r1, sp, #32
 800d34c:	4620      	mov	r0, r4
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800d34e:	9708      	str	r7, [sp, #32]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800d350:	f003 fca8 	bl	8010ca4 <HAL_TIM_ConfigClockSource>
 800d354:	b108      	cbz	r0, 800d35a <main+0xae>
 800d356:	b672      	cpsid	i
 800d358:	e7fe      	b.n	800d358 <main+0xac>
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800d35a:	4620      	mov	r0, r4
 800d35c:	f003 fea4 	bl	80110a8 <HAL_TIM_PWM_Init>
 800d360:	4603      	mov	r3, r0
 800d362:	b108      	cbz	r0, 800d368 <main+0xbc>
 800d364:	b672      	cpsid	i
 800d366:	e7fe      	b.n	800d366 <main+0xba>
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800d368:	a904      	add	r1, sp, #16
 800d36a:	4620      	mov	r0, r4
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800d36c:	e9cd 3304 	strd	r3, r3, [sp, #16]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800d370:	f004 f866 	bl	8011440 <HAL_TIMEx_MasterConfigSynchronization>
 800d374:	b108      	cbz	r0, 800d37a <main+0xce>
 800d376:	b672      	cpsid	i
 800d378:	e7fe      	b.n	800d378 <main+0xcc>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800d37a:	2360      	movs	r3, #96	; 0x60
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800d37c:	e9cd 0010 	strd	r0, r0, [sp, #64]	; 0x40
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800d380:	9013      	str	r0, [sp, #76]	; 0x4c
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800d382:	220c      	movs	r2, #12
 800d384:	a90f      	add	r1, sp, #60	; 0x3c
 800d386:	4620      	mov	r0, r4
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800d388:	930f      	str	r3, [sp, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800d38a:	f003 ff5f 	bl	801124c <HAL_TIM_PWM_ConfigChannel>
 800d38e:	4605      	mov	r5, r0
 800d390:	b108      	cbz	r0, 800d396 <main+0xea>
 800d392:	b672      	cpsid	i
 800d394:	e7fe      	b.n	800d394 <main+0xe8>
  HAL_TIM_MspPostInit(&htim2);
 800d396:	4620      	mov	r0, r4
 800d398:	f000 fb5a 	bl	800da50 <HAL_TIM_MspPostInit>
  hspi3.Instance = SPI3;
 800d39c:	4b6f      	ldr	r3, [pc, #444]	; (800d55c <main+0x2b0>)
 800d39e:	4a70      	ldr	r2, [pc, #448]	; (800d560 <main+0x2b4>)
 800d3a0:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 800d3a2:	f44f 7182 	mov.w	r1, #260	; 0x104
  hspi3.Init.CLKPolarity = SPI_POLARITY_HIGH;
 800d3a6:	2202      	movs	r2, #2
  hspi3.Init.Mode = SPI_MODE_MASTER;
 800d3a8:	6059      	str	r1, [r3, #4]
  hspi3.Init.CLKPolarity = SPI_POLARITY_HIGH;
 800d3aa:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_2EDGE;
 800d3ac:	2101      	movs	r1, #1
  hspi3.Init.NSS = SPI_NSS_SOFT;
 800d3ae:	f44f 7200 	mov.w	r2, #512	; 0x200
  hspi3.Init.CLKPhase = SPI_PHASE_2EDGE;
 800d3b2:	6159      	str	r1, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 800d3b4:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 800d3b6:	2128      	movs	r1, #40	; 0x28
  hspi3.Init.CRCPolynomial = 10;
 800d3b8:	220a      	movs	r2, #10
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 800d3ba:	4618      	mov	r0, r3
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 800d3bc:	e9c3 5502 	strd	r5, r5, [r3, #8]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 800d3c0:	e9c3 5508 	strd	r5, r5, [r3, #32]
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800d3c4:	629d      	str	r5, [r3, #40]	; 0x28
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 800d3c6:	61d9      	str	r1, [r3, #28]
  hspi3.Init.CRCPolynomial = 10;
 800d3c8:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 800d3ca:	f003 f8c1 	bl	8010550 <HAL_SPI_Init>
 800d3ce:	4604      	mov	r4, r0
 800d3d0:	b108      	cbz	r0, 800d3d6 <main+0x12a>
 800d3d2:	b672      	cpsid	i
 800d3d4:	e7fe      	b.n	800d3d4 <main+0x128>
  htim5.Instance = TIM5;
 800d3d6:	4d63      	ldr	r5, [pc, #396]	; (800d564 <main+0x2b8>)
  MX_USART1_UART_Init();
 800d3d8:	f7ff feda 	bl	800d190 <MX_USART1_UART_Init>
  htim5.Instance = TIM5;
 800d3dc:	4b62      	ldr	r3, [pc, #392]	; (800d568 <main+0x2bc>)
  TIM_OC_InitTypeDef sConfigOC = {0};
 800d3de:	9415      	str	r4, [sp, #84]	; 0x54
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 800d3e0:	4628      	mov	r0, r5
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800d3e2:	e9cd 4408 	strd	r4, r4, [sp, #32]
 800d3e6:	e9cd 440a 	strd	r4, r4, [sp, #40]	; 0x28
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800d3ea:	e9cd 4404 	strd	r4, r4, [sp, #16]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800d3ee:	e9cd 440f 	strd	r4, r4, [sp, #60]	; 0x3c
 800d3f2:	e9cd 4411 	strd	r4, r4, [sp, #68]	; 0x44
 800d3f6:	e9cd 4413 	strd	r4, r4, [sp, #76]	; 0x4c
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 800d3fa:	e9c5 4401 	strd	r4, r4, [r5, #4]
  htim5.Init.Period = 4200-1;
 800d3fe:	60ee      	str	r6, [r5, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800d400:	612c      	str	r4, [r5, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800d402:	61ac      	str	r4, [r5, #24]
  htim5.Instance = TIM5;
 800d404:	602b      	str	r3, [r5, #0]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 800d406:	f003 fe17 	bl	8011038 <HAL_TIM_Base_Init>
 800d40a:	b108      	cbz	r0, 800d410 <main+0x164>
 800d40c:	b672      	cpsid	i
 800d40e:	e7fe      	b.n	800d40e <main+0x162>
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 800d410:	a908      	add	r1, sp, #32
 800d412:	4628      	mov	r0, r5
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800d414:	9708      	str	r7, [sp, #32]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 800d416:	f003 fc45 	bl	8010ca4 <HAL_TIM_ConfigClockSource>
 800d41a:	b108      	cbz	r0, 800d420 <main+0x174>
 800d41c:	b672      	cpsid	i
 800d41e:	e7fe      	b.n	800d41e <main+0x172>
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 800d420:	4628      	mov	r0, r5
 800d422:	f003 fe41 	bl	80110a8 <HAL_TIM_PWM_Init>
 800d426:	4603      	mov	r3, r0
 800d428:	b108      	cbz	r0, 800d42e <main+0x182>
 800d42a:	b672      	cpsid	i
 800d42c:	e7fe      	b.n	800d42c <main+0x180>
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 800d42e:	4628      	mov	r0, r5
 800d430:	a904      	add	r1, sp, #16
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800d432:	e9cd 3304 	strd	r3, r3, [sp, #16]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 800d436:	f004 f803 	bl	8011440 <HAL_TIMEx_MasterConfigSynchronization>
 800d43a:	b108      	cbz	r0, 800d440 <main+0x194>
 800d43c:	b672      	cpsid	i
 800d43e:	e7fe      	b.n	800d43e <main+0x192>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800d440:	2060      	movs	r0, #96	; 0x60
  sConfigOC.Pulse = 0;
 800d442:	2300      	movs	r3, #0
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800d444:	900f      	str	r0, [sp, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800d446:	2204      	movs	r2, #4
 800d448:	a90f      	add	r1, sp, #60	; 0x3c
 800d44a:	4846      	ldr	r0, [pc, #280]	; (800d564 <main+0x2b8>)
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800d44c:	9313      	str	r3, [sp, #76]	; 0x4c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800d44e:	e9cd 3310 	strd	r3, r3, [sp, #64]	; 0x40
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800d452:	f003 fefb 	bl	801124c <HAL_TIM_PWM_ConfigChannel>
 800d456:	4605      	mov	r5, r0
 800d458:	b108      	cbz	r0, 800d45e <main+0x1b2>
 800d45a:	b672      	cpsid	i
 800d45c:	e7fe      	b.n	800d45c <main+0x1b0>
  HAL_TIM_MspPostInit(&htim5);
 800d45e:	4841      	ldr	r0, [pc, #260]	; (800d564 <main+0x2b8>)
  htim4.Instance = TIM4;
 800d460:	4c42      	ldr	r4, [pc, #264]	; (800d56c <main+0x2c0>)
  HAL_TIM_MspPostInit(&htim5);
 800d462:	f000 faf5 	bl	800da50 <HAL_TIM_MspPostInit>
  TIM_Encoder_InitTypeDef sConfig = {0};
 800d466:	2220      	movs	r2, #32
 800d468:	4629      	mov	r1, r5
 800d46a:	a810      	add	r0, sp, #64	; 0x40
 800d46c:	f004 fc81 	bl	8011d72 <memset>
  htim4.Instance = TIM4;
 800d470:	4b3f      	ldr	r3, [pc, #252]	; (800d570 <main+0x2c4>)
 800d472:	6023      	str	r3, [r4, #0]
  htim4.Init.Period = 60000-1;
 800d474:	f64e 215f 	movw	r1, #59999	; 0xea5f
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800d478:	2301      	movs	r3, #1
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800d47a:	2203      	movs	r2, #3
  htim4.Init.Period = 60000-1;
 800d47c:	60e1      	str	r1, [r4, #12]
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 800d47e:	4620      	mov	r0, r4
 800d480:	a90f      	add	r1, sp, #60	; 0x3c
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800d482:	9311      	str	r3, [sp, #68]	; 0x44
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800d484:	9315      	str	r3, [sp, #84]	; 0x54
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800d486:	9508      	str	r5, [sp, #32]
 800d488:	9509      	str	r5, [sp, #36]	; 0x24
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800d48a:	e9c4 5501 	strd	r5, r5, [r4, #4]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800d48e:	6125      	str	r5, [r4, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800d490:	61a5      	str	r5, [r4, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800d492:	920f      	str	r2, [sp, #60]	; 0x3c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 800d494:	f003 fe24 	bl	80110e0 <HAL_TIM_Encoder_Init>
 800d498:	4603      	mov	r3, r0
 800d49a:	b108      	cbz	r0, 800d4a0 <main+0x1f4>
 800d49c:	b672      	cpsid	i
 800d49e:	e7fe      	b.n	800d49e <main+0x1f2>
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800d4a0:	4620      	mov	r0, r4
 800d4a2:	a908      	add	r1, sp, #32
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800d4a4:	e9cd 3308 	strd	r3, r3, [sp, #32]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800d4a8:	f003 ffca 	bl	8011440 <HAL_TIMEx_MasterConfigSynchronization>
 800d4ac:	4604      	mov	r4, r0
 800d4ae:	b108      	cbz	r0, 800d4b4 <main+0x208>
 800d4b0:	b672      	cpsid	i
 800d4b2:	e7fe      	b.n	800d4b2 <main+0x206>
  htim8.Instance = TIM8;
 800d4b4:	4d2f      	ldr	r5, [pc, #188]	; (800d574 <main+0x2c8>)
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800d4b6:	9004      	str	r0, [sp, #16]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800d4b8:	4601      	mov	r1, r0
 800d4ba:	2220      	movs	r2, #32
 800d4bc:	a80f      	add	r0, sp, #60	; 0x3c
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800d4be:	e9cd 4405 	strd	r4, r4, [sp, #20]
 800d4c2:	9407      	str	r4, [sp, #28]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800d4c4:	9402      	str	r4, [sp, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800d4c6:	e9cd 4408 	strd	r4, r4, [sp, #32]
 800d4ca:	e9cd 440a 	strd	r4, r4, [sp, #40]	; 0x28
 800d4ce:	e9cd 440c 	strd	r4, r4, [sp, #48]	; 0x30
 800d4d2:	940e      	str	r4, [sp, #56]	; 0x38
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800d4d4:	9403      	str	r4, [sp, #12]
  htim8.Init.Prescaler = 168-1;
 800d4d6:	26a7      	movs	r6, #167	; 0xa7
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800d4d8:	f004 fc4b 	bl	8011d72 <memset>
  htim8.Instance = TIM8;
 800d4dc:	4926      	ldr	r1, [pc, #152]	; (800d578 <main+0x2cc>)
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 800d4de:	60ac      	str	r4, [r5, #8]
  htim8.Init.Period = 50-1;
 800d4e0:	2231      	movs	r2, #49	; 0x31
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800d4e2:	2380      	movs	r3, #128	; 0x80
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 800d4e4:	4628      	mov	r0, r5
  htim8.Init.RepetitionCounter = 0;
 800d4e6:	e9c5 4404 	strd	r4, r4, [r5, #16]
  htim8.Instance = TIM8;
 800d4ea:	6029      	str	r1, [r5, #0]
  htim8.Init.Period = 50-1;
 800d4ec:	60ea      	str	r2, [r5, #12]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800d4ee:	61ab      	str	r3, [r5, #24]
  htim8.Init.Prescaler = 168-1;
 800d4f0:	606e      	str	r6, [r5, #4]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 800d4f2:	f003 fda1 	bl	8011038 <HAL_TIM_Base_Init>
 800d4f6:	b108      	cbz	r0, 800d4fc <main+0x250>
 800d4f8:	b672      	cpsid	i
 800d4fa:	e7fe      	b.n	800d4fa <main+0x24e>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800d4fc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 800d500:	a904      	add	r1, sp, #16
 800d502:	4628      	mov	r0, r5
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800d504:	9304      	str	r3, [sp, #16]
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 800d506:	f003 fbcd 	bl	8010ca4 <HAL_TIM_ConfigClockSource>
 800d50a:	b108      	cbz	r0, 800d510 <main+0x264>
 800d50c:	b672      	cpsid	i
 800d50e:	e7fe      	b.n	800d50e <main+0x262>
  if (HAL_TIM_OC_Init(&htim8) != HAL_OK)
 800d510:	4628      	mov	r0, r5
 800d512:	f003 fdad 	bl	8011070 <HAL_TIM_OC_Init>
 800d516:	4603      	mov	r3, r0
 800d518:	b108      	cbz	r0, 800d51e <main+0x272>
 800d51a:	b672      	cpsid	i
 800d51c:	e7fe      	b.n	800d51c <main+0x270>
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 800d51e:	a902      	add	r1, sp, #8
 800d520:	4628      	mov	r0, r5
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800d522:	e9cd 3302 	strd	r3, r3, [sp, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 800d526:	f003 ff8b 	bl	8011440 <HAL_TIMEx_MasterConfigSynchronization>
 800d52a:	b108      	cbz	r0, 800d530 <main+0x284>
 800d52c:	b672      	cpsid	i
 800d52e:	e7fe      	b.n	800d52e <main+0x282>
  sConfigOC.Pulse = 25-1;
 800d530:	2318      	movs	r3, #24
  if (HAL_TIM_OC_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800d532:	4602      	mov	r2, r0
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800d534:	e9cd 000a 	strd	r0, r0, [sp, #40]	; 0x28
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800d538:	e9cd 000c 	strd	r0, r0, [sp, #48]	; 0x30
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800d53c:	900e      	str	r0, [sp, #56]	; 0x38
  sConfigOC.OCMode = TIM_OCMODE_TOGGLE;
 800d53e:	2430      	movs	r4, #48	; 0x30
  if (HAL_TIM_OC_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800d540:	a908      	add	r1, sp, #32
 800d542:	4628      	mov	r0, r5
  sConfigOC.Pulse = 25-1;
 800d544:	9309      	str	r3, [sp, #36]	; 0x24
  sConfigOC.OCMode = TIM_OCMODE_TOGGLE;
 800d546:	9408      	str	r4, [sp, #32]
  if (HAL_TIM_OC_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800d548:	f003 fe50 	bl	80111ec <HAL_TIM_OC_ConfigChannel>
 800d54c:	4603      	mov	r3, r0
 800d54e:	b1a8      	cbz	r0, 800d57c <main+0x2d0>
 800d550:	b672      	cpsid	i
 800d552:	e7fe      	b.n	800d552 <main+0x2a6>
 800d554:	200012b4 	.word	0x200012b4
 800d558:	20001234 	.word	0x20001234
 800d55c:	20001e2c 	.word	0x20001e2c
 800d560:	40003c00 	.word	0x40003c00
 800d564:	20001274 	.word	0x20001274
 800d568:	40000c00 	.word	0x40000c00
 800d56c:	20001d64 	.word	0x20001d64
 800d570:	40000800 	.word	0x40000800
 800d574:	20001d24 	.word	0x20001d24
 800d578:	40010400 	.word	0x40010400
  __HAL_TIM_ENABLE_OCxPRELOAD(&htim8, TIM_CHANNEL_1);
 800d57c:	6829      	ldr	r1, [r5, #0]
 800d57e:	698a      	ldr	r2, [r1, #24]
 800d580:	f042 0208 	orr.w	r2, r2, #8
 800d584:	618a      	str	r2, [r1, #24]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 800d586:	4628      	mov	r0, r5
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800d588:	f44f 5200 	mov.w	r2, #8192	; 0x2000
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 800d58c:	a90f      	add	r1, sp, #60	; 0x3c
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800d58e:	e9cd 330f 	strd	r3, r3, [sp, #60]	; 0x3c
  sBreakDeadTimeConfig.DeadTime = 0;
 800d592:	e9cd 3311 	strd	r3, r3, [sp, #68]	; 0x44
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800d596:	9313      	str	r3, [sp, #76]	; 0x4c
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800d598:	9316      	str	r3, [sp, #88]	; 0x58
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800d59a:	9214      	str	r2, [sp, #80]	; 0x50
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 800d59c:	f003 ff96 	bl	80114cc <HAL_TIMEx_ConfigBreakDeadTime>
 800d5a0:	4604      	mov	r4, r0
 800d5a2:	b108      	cbz	r0, 800d5a8 <main+0x2fc>
 800d5a4:	b672      	cpsid	i
 800d5a6:	e7fe      	b.n	800d5a6 <main+0x2fa>
  HAL_TIM_MspPostInit(&htim8);
 800d5a8:	4628      	mov	r0, r5
 800d5aa:	f000 fa51 	bl	800da50 <HAL_TIM_MspPostInit>
  htim1.Instance = TIM1;
 800d5ae:	4b46      	ldr	r3, [pc, #280]	; (800d6c8 <main+0x41c>)
 800d5b0:	4946      	ldr	r1, [pc, #280]	; (800d6cc <main+0x420>)
  htim1.Init.Prescaler = 168-1;
 800d5b2:	605e      	str	r6, [r3, #4]
  htim1.Init.Period = 1000-1;
 800d5b4:	f240 32e7 	movw	r2, #999	; 0x3e7
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800d5b8:	4618      	mov	r0, r3
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800d5ba:	e9cd 440f 	strd	r4, r4, [sp, #60]	; 0x3c
 800d5be:	e9cd 4411 	strd	r4, r4, [sp, #68]	; 0x44
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800d5c2:	e9cd 4408 	strd	r4, r4, [sp, #32]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800d5c6:	609c      	str	r4, [r3, #8]
  htim1.Init.RepetitionCounter = 0;
 800d5c8:	e9c3 4404 	strd	r4, r4, [r3, #16]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800d5cc:	619c      	str	r4, [r3, #24]
  htim1.Instance = TIM1;
 800d5ce:	6019      	str	r1, [r3, #0]
  htim1.Init.Period = 1000-1;
 800d5d0:	60da      	str	r2, [r3, #12]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800d5d2:	f003 fd31 	bl	8011038 <HAL_TIM_Base_Init>
 800d5d6:	b108      	cbz	r0, 800d5dc <main+0x330>
 800d5d8:	b672      	cpsid	i
 800d5da:	e7fe      	b.n	800d5da <main+0x32e>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800d5dc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800d5e0:	a90f      	add	r1, sp, #60	; 0x3c
 800d5e2:	4839      	ldr	r0, [pc, #228]	; (800d6c8 <main+0x41c>)
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800d5e4:	930f      	str	r3, [sp, #60]	; 0x3c
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800d5e6:	f003 fb5d 	bl	8010ca4 <HAL_TIM_ConfigClockSource>
 800d5ea:	4603      	mov	r3, r0
 800d5ec:	b108      	cbz	r0, 800d5f2 <main+0x346>
 800d5ee:	b672      	cpsid	i
 800d5f0:	e7fe      	b.n	800d5f0 <main+0x344>
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800d5f2:	a908      	add	r1, sp, #32
 800d5f4:	4834      	ldr	r0, [pc, #208]	; (800d6c8 <main+0x41c>)
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800d5f6:	e9cd 3308 	strd	r3, r3, [sp, #32]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800d5fa:	f003 ff21 	bl	8011440 <HAL_TIMEx_MasterConfigSynchronization>
 800d5fe:	4604      	mov	r4, r0
 800d600:	b108      	cbz	r0, 800d606 <main+0x35a>
 800d602:	b672      	cpsid	i
 800d604:	e7fe      	b.n	800d604 <main+0x358>
  PIDSetGain(L_VELO_PID, 14.6, 2800,0.001);
 800d606:	ed9f 1a32 	vldr	s2, [pc, #200]	; 800d6d0 <main+0x424>
 800d60a:	eddf 0a32 	vldr	s1, [pc, #200]	; 800d6d4 <main+0x428>
 800d60e:	ed9f 0a32 	vldr	s0, [pc, #200]	; 800d6d8 <main+0x42c>
 800d612:	2004      	movs	r0, #4
 800d614:	f001 fa30 	bl	800ea78 <PIDSetGain>
  		  PIDSetGain(R_VELO_PID, 14.6, 2800,0.001);
 800d618:	ed9f 1a2d 	vldr	s2, [pc, #180]	; 800d6d0 <main+0x424>
 800d61c:	eddf 0a2d 	vldr	s1, [pc, #180]	; 800d6d4 <main+0x428>
 800d620:	ed9f 0a2d 	vldr	s0, [pc, #180]	; 800d6d8 <main+0x42c>
 800d624:	2005      	movs	r0, #5
 800d626:	f001 fa27 	bl	800ea78 <PIDSetGain>
  		  PIDSetGain(A_VELO_PID, 14.6,0,0);//P=14.6
 800d62a:	ed9f 1a2c 	vldr	s2, [pc, #176]	; 800d6dc <main+0x430>
 800d62e:	ed9f 0a2a 	vldr	s0, [pc, #168]	; 800d6d8 <main+0x42c>
 800d632:	eef0 0a41 	vmov.f32	s1, s2
 800d636:	4620      	mov	r0, r4
 800d638:	f001 fa1e 	bl	800ea78 <PIDSetGain>
  		  PIDSetGain(F_WALL_PID, 14.6,0,0);
 800d63c:	ed9f 1a27 	vldr	s2, [pc, #156]	; 800d6dc <main+0x430>
 800d640:	ed9f 0a25 	vldr	s0, [pc, #148]	; 800d6d8 <main+0x42c>
 800d644:	eef0 0a41 	vmov.f32	s1, s2
 800d648:	2008      	movs	r0, #8
 800d64a:	f001 fa15 	bl	800ea78 <PIDSetGain>
  		  PIDSetGain(D_WALL_PID, 6, 4, 0	);//3.2,0,0);/4.5,1.5,0.003);//3.6, 20, 0);//5.2//速度制御
 800d64e:	ed9f 1a23 	vldr	s2, [pc, #140]	; 800d6dc <main+0x430>
 800d652:	eef1 0a00 	vmov.f32	s1, #16	; 0x40800000  4.0
 800d656:	eeb1 0a08 	vmov.f32	s0, #24	; 0x40c00000  6.0
 800d65a:	2001      	movs	r0, #1
 800d65c:	f001 fa0c 	bl	800ea78 <PIDSetGain>
  		  PIDSetGain(L_WALL_PID, 12,8,0);//6.4,0,0);//9,3,0.006);//1.8, 10, 0);
 800d660:	ed9f 1a1e 	vldr	s2, [pc, #120]	; 800d6dc <main+0x430>
 800d664:	eef2 0a00 	vmov.f32	s1, #32	; 0x41000000  8.0
 800d668:	eeb2 0a08 	vmov.f32	s0, #40	; 0x41400000  12.0
 800d66c:	2002      	movs	r0, #2
 800d66e:	f001 fa03 	bl	800ea78 <PIDSetGain>
  		  PIDSetGain(R_WALL_PID, 12,8,0);//6.4,0,0);//9,3,0.0s06);//1.8, 10, 0);
 800d672:	ed9f 1a1a 	vldr	s2, [pc, #104]	; 800d6dc <main+0x430>
 800d676:	eef2 0a00 	vmov.f32	s1, #32	; 0x41000000  8.0
 800d67a:	eeb2 0a08 	vmov.f32	s0, #40	; 0x41400000  12.0
 800d67e:	2003      	movs	r0, #3
 800d680:	f001 f9fa 	bl	800ea78 <PIDSetGain>
	  switch( startup_mode )
 800d684:	f99d 3007 	ldrsb.w	r3, [sp, #7]
 800d688:	2b07      	cmp	r3, #7
 800d68a:	d8fd      	bhi.n	800d688 <main+0x3dc>
 800d68c:	e8df f003 	tbb	[pc, r3]
 800d690:	13161904 	.word	0x13161904
 800d694:	070a0d10 	.word	0x070a0d10
		  ParameterSetting();
 800d698:	f7fe fb6a 	bl	800bd70 <ParameterSetting>
		  break;
 800d69c:	e7f2      	b.n	800d684 <main+0x3d8>
		  WritingFree();
 800d69e:	f7fe fc37 	bl	800bf10 <WritingFree>
		  break;
 800d6a2:	e7ef      	b.n	800d684 <main+0x3d8>
		  Explore();
 800d6a4:	f7fe fe00 	bl	800c2a8 <Explore>
		  break;
 800d6a8:	e7ec      	b.n	800d684 <main+0x3d8>
		  GainTestAVelo();
 800d6aa:	f7fe fbf9 	bl	800bea0 <GainTestAVelo>
		  break;
 800d6ae:	e7e9      	b.n	800d684 <main+0x3d8>
		  FastestRun();
 800d6b0:	f7fe fc86 	bl	800bfc0 <FastestRun>
		  break;
 800d6b4:	e7e6      	b.n	800d684 <main+0x3d8>
		  Debug();
 800d6b6:	f7fe fb23 	bl	800bd00 <Debug>
		  break;
 800d6ba:	e7e3      	b.n	800d684 <main+0x3d8>
		  GainTestDWall();
 800d6bc:	f7fe fb92 	bl	800bde4 <GainTestDWall>
		  break;
 800d6c0:	e7e0      	b.n	800d684 <main+0x3d8>
		  GainTestRWall();
 800d6c2:	f7fe fb5d 	bl	800bd80 <GainTestRWall>
		  break;
 800d6c6:	e7dd      	b.n	800d684 <main+0x3d8>
 800d6c8:	20001f6c 	.word	0x20001f6c
 800d6cc:	40010000 	.word	0x40010000
 800d6d0:	3a83126f 	.word	0x3a83126f
 800d6d4:	452f0000 	.word	0x452f0000
 800d6d8:	4169999a 	.word	0x4169999a
 800d6dc:	00000000 	.word	0x00000000

0800d6e0 <Error_Handler>:
 800d6e0:	b672      	cpsid	i
 800d6e2:	e7fe      	b.n	800d6e2 <Error_Handler+0x2>

0800d6e4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800d6e4:	b082      	sub	sp, #8
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800d6e6:	4b0c      	ldr	r3, [pc, #48]	; (800d718 <HAL_MspInit+0x34>)
 800d6e8:	2100      	movs	r1, #0
 800d6ea:	9100      	str	r1, [sp, #0]
 800d6ec:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800d6ee:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800d6f2:	645a      	str	r2, [r3, #68]	; 0x44
 800d6f4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800d6f6:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 800d6fa:	9200      	str	r2, [sp, #0]
 800d6fc:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 800d6fe:	9101      	str	r1, [sp, #4]
 800d700:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800d702:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800d706:	641a      	str	r2, [r3, #64]	; 0x40
 800d708:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d70a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800d70e:	9301      	str	r3, [sp, #4]
 800d710:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800d712:	b002      	add	sp, #8
 800d714:	4770      	bx	lr
 800d716:	bf00      	nop
 800d718:	40023800 	.word	0x40023800

0800d71c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800d71c:	b5f0      	push	{r4, r5, r6, r7, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(hadc->Instance==ADC1)
 800d71e:	6803      	ldr	r3, [r0, #0]
 800d720:	4a47      	ldr	r2, [pc, #284]	; (800d840 <HAL_ADC_MspInit+0x124>)
{
 800d722:	b08b      	sub	sp, #44	; 0x2c
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800d724:	2400      	movs	r4, #0
  if(hadc->Instance==ADC1)
 800d726:	4293      	cmp	r3, r2
{
 800d728:	4605      	mov	r5, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800d72a:	e9cd 4405 	strd	r4, r4, [sp, #20]
 800d72e:	e9cd 4407 	strd	r4, r4, [sp, #28]
 800d732:	9409      	str	r4, [sp, #36]	; 0x24
  if(hadc->Instance==ADC1)
 800d734:	d004      	beq.n	800d740 <HAL_ADC_MspInit+0x24>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
  else if(hadc->Instance==ADC2)
 800d736:	4a43      	ldr	r2, [pc, #268]	; (800d844 <HAL_ADC_MspInit+0x128>)
 800d738:	4293      	cmp	r3, r2
 800d73a:	d04e      	beq.n	800d7da <HAL_ADC_MspInit+0xbe>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 800d73c:	b00b      	add	sp, #44	; 0x2c
 800d73e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_RCC_ADC1_CLK_ENABLE();
 800d740:	4b41      	ldr	r3, [pc, #260]	; (800d848 <HAL_ADC_MspInit+0x12c>)
 800d742:	9400      	str	r4, [sp, #0]
 800d744:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    hdma_adc1.Instance = DMA2_Stream0;
 800d746:	4e41      	ldr	r6, [pc, #260]	; (800d84c <HAL_ADC_MspInit+0x130>)
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800d748:	4841      	ldr	r0, [pc, #260]	; (800d850 <HAL_ADC_MspInit+0x134>)
    __HAL_RCC_ADC1_CLK_ENABLE();
 800d74a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800d74e:	645a      	str	r2, [r3, #68]	; 0x44
 800d750:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800d752:	f402 7280 	and.w	r2, r2, #256	; 0x100
 800d756:	9200      	str	r2, [sp, #0]
 800d758:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800d75a:	9401      	str	r4, [sp, #4]
 800d75c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800d75e:	f042 0204 	orr.w	r2, r2, #4
 800d762:	631a      	str	r2, [r3, #48]	; 0x30
 800d764:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800d766:	f002 0204 	and.w	r2, r2, #4
 800d76a:	9201      	str	r2, [sp, #4]
 800d76c:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800d76e:	9402      	str	r4, [sp, #8]
 800d770:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800d772:	f042 0202 	orr.w	r2, r2, #2
 800d776:	631a      	str	r2, [r3, #48]	; 0x30
 800d778:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d77a:	f003 0302 	and.w	r3, r3, #2
 800d77e:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800d780:	2703      	movs	r7, #3
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_4;
 800d782:	2311      	movs	r3, #17
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800d784:	a905      	add	r1, sp, #20
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800d786:	9a02      	ldr	r2, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_4;
 800d788:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800d78a:	9706      	str	r7, [sp, #24]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800d78c:	f002 f962 	bl	800fa54 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 800d790:	2302      	movs	r3, #2
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800d792:	a905      	add	r1, sp, #20
 800d794:	482f      	ldr	r0, [pc, #188]	; (800d854 <HAL_ADC_MspInit+0x138>)
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 800d796:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d798:	e9cd 7406 	strd	r7, r4, [sp, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800d79c:	f002 f95a 	bl	800fa54 <HAL_GPIO_Init>
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800d7a0:	e9c6 4402 	strd	r4, r4, [r6, #8]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800d7a4:	e9c6 4408 	strd	r4, r4, [r6, #32]
    hdma_adc1.Instance = DMA2_Stream0;
 800d7a8:	482b      	ldr	r0, [pc, #172]	; (800d858 <HAL_ADC_MspInit+0x13c>)
 800d7aa:	6030      	str	r0, [r6, #0]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800d7ac:	f44f 6780 	mov.w	r7, #1024	; 0x400
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 800d7b0:	6074      	str	r4, [r6, #4]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800d7b2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800d7b6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800d7ba:	f44f 7380 	mov.w	r3, #256	; 0x100
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800d7be:	4630      	mov	r0, r6
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800d7c0:	6137      	str	r7, [r6, #16]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800d7c2:	e9c6 1205 	strd	r1, r2, [r6, #20]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 800d7c6:	61f3      	str	r3, [r6, #28]
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 800d7c8:	f001 fe16 	bl	800f3f8 <HAL_DMA_Init>
 800d7cc:	b108      	cbz	r0, 800d7d2 <HAL_ADC_MspInit+0xb6>
      Error_Handler();
 800d7ce:	f7ff ff87 	bl	800d6e0 <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc2);
 800d7d2:	63ae      	str	r6, [r5, #56]	; 0x38
 800d7d4:	63b5      	str	r5, [r6, #56]	; 0x38
}
 800d7d6:	b00b      	add	sp, #44	; 0x2c
 800d7d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_RCC_ADC2_CLK_ENABLE();
 800d7da:	4b1b      	ldr	r3, [pc, #108]	; (800d848 <HAL_ADC_MspInit+0x12c>)
 800d7dc:	9403      	str	r4, [sp, #12]
 800d7de:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    hdma_adc2.Instance = DMA2_Stream2;
 800d7e0:	4e1e      	ldr	r6, [pc, #120]	; (800d85c <HAL_ADC_MspInit+0x140>)
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800d7e2:	481b      	ldr	r0, [pc, #108]	; (800d850 <HAL_ADC_MspInit+0x134>)
    __HAL_RCC_ADC2_CLK_ENABLE();
 800d7e4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800d7e8:	645a      	str	r2, [r3, #68]	; 0x44
 800d7ea:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800d7ec:	f402 7200 	and.w	r2, r2, #512	; 0x200
 800d7f0:	9203      	str	r2, [sp, #12]
 800d7f2:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800d7f4:	9404      	str	r4, [sp, #16]
 800d7f6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800d7f8:	f042 0204 	orr.w	r2, r2, #4
 800d7fc:	631a      	str	r2, [r3, #48]	; 0x30
 800d7fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d800:	f003 0304 	and.w	r3, r3, #4
 800d804:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_5;
 800d806:	2322      	movs	r3, #34	; 0x22
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800d808:	a905      	add	r1, sp, #20
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_5;
 800d80a:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800d80c:	2303      	movs	r3, #3
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800d80e:	9a04      	ldr	r2, [sp, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800d810:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800d812:	f002 f91f 	bl	800fa54 <HAL_GPIO_Init>
    hdma_adc2.Instance = DMA2_Stream2;
 800d816:	4a12      	ldr	r2, [pc, #72]	; (800d860 <HAL_ADC_MspInit+0x144>)
 800d818:	6032      	str	r2, [r6, #0]
    hdma_adc2.Init.Channel = DMA_CHANNEL_1;
 800d81a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 800d81e:	f44f 6080 	mov.w	r0, #1024	; 0x400
    hdma_adc2.Init.Channel = DMA_CHANNEL_1;
 800d822:	6073      	str	r3, [r6, #4]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 800d824:	6130      	str	r0, [r6, #16]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800d826:	60b4      	str	r4, [r6, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 800d828:	60f4      	str	r4, [r6, #12]
    hdma_adc2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800d82a:	e9c6 4408 	strd	r4, r4, [r6, #32]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800d82e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800d832:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 800d836:	f44f 7380 	mov.w	r3, #256	; 0x100
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 800d83a:	4630      	mov	r0, r6
 800d83c:	e7c1      	b.n	800d7c2 <HAL_ADC_MspInit+0xa6>
 800d83e:	bf00      	nop
 800d840:	40012000 	.word	0x40012000
 800d844:	40012100 	.word	0x40012100
 800d848:	40023800 	.word	0x40023800
 800d84c:	20001f0c 	.word	0x20001f0c
 800d850:	40020800 	.word	0x40020800
 800d854:	40020400 	.word	0x40020400
 800d858:	40026410 	.word	0x40026410
 800d85c:	20001fac 	.word	0x20001fac
 800d860:	40026440 	.word	0x40026440

0800d864 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800d864:	b570      	push	{r4, r5, r6, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(hspi->Instance==SPI3)
 800d866:	6801      	ldr	r1, [r0, #0]
 800d868:	4a18      	ldr	r2, [pc, #96]	; (800d8cc <HAL_SPI_MspInit+0x68>)
{
 800d86a:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800d86c:	2300      	movs	r3, #0
  if(hspi->Instance==SPI3)
 800d86e:	4291      	cmp	r1, r2
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800d870:	e9cd 3303 	strd	r3, r3, [sp, #12]
 800d874:	e9cd 3305 	strd	r3, r3, [sp, #20]
 800d878:	9307      	str	r3, [sp, #28]
  if(hspi->Instance==SPI3)
 800d87a:	d001      	beq.n	800d880 <HAL_SPI_MspInit+0x1c>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 800d87c:	b008      	add	sp, #32
 800d87e:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_SPI3_CLK_ENABLE();
 800d880:	f502 32fe 	add.w	r2, r2, #130048	; 0x1fc00
 800d884:	9301      	str	r3, [sp, #4]
 800d886:	6c11      	ldr	r1, [r2, #64]	; 0x40
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800d888:	4811      	ldr	r0, [pc, #68]	; (800d8d0 <HAL_SPI_MspInit+0x6c>)
    __HAL_RCC_SPI3_CLK_ENABLE();
 800d88a:	f441 4100 	orr.w	r1, r1, #32768	; 0x8000
 800d88e:	6411      	str	r1, [r2, #64]	; 0x40
 800d890:	6c11      	ldr	r1, [r2, #64]	; 0x40
 800d892:	f401 4100 	and.w	r1, r1, #32768	; 0x8000
 800d896:	9101      	str	r1, [sp, #4]
 800d898:	9901      	ldr	r1, [sp, #4]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800d89a:	9302      	str	r3, [sp, #8]
 800d89c:	6b13      	ldr	r3, [r2, #48]	; 0x30
 800d89e:	f043 0304 	orr.w	r3, r3, #4
 800d8a2:	6313      	str	r3, [r2, #48]	; 0x30
 800d8a4:	6b13      	ldr	r3, [r2, #48]	; 0x30
 800d8a6:	f003 0304 	and.w	r3, r3, #4
 800d8aa:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800d8ac:	2203      	movs	r2, #3
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800d8ae:	2306      	movs	r3, #6
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800d8b0:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 800d8b2:	f44f 55e0 	mov.w	r5, #7168	; 0x1c00
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d8b6:	2402      	movs	r4, #2
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800d8b8:	9e02      	ldr	r6, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d8ba:	e9cd 5403 	strd	r5, r4, [sp, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800d8be:	e9cd 2306 	strd	r2, r3, [sp, #24]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800d8c2:	f002 f8c7 	bl	800fa54 <HAL_GPIO_Init>
}
 800d8c6:	b008      	add	sp, #32
 800d8c8:	bd70      	pop	{r4, r5, r6, pc}
 800d8ca:	bf00      	nop
 800d8cc:	40003c00 	.word	0x40003c00
 800d8d0:	40020800 	.word	0x40020800

0800d8d4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800d8d4:	b500      	push	{lr}
  if(htim_base->Instance==TIM1)
 800d8d6:	6803      	ldr	r3, [r0, #0]
 800d8d8:	4a2b      	ldr	r2, [pc, #172]	; (800d988 <HAL_TIM_Base_MspInit+0xb4>)
 800d8da:	4293      	cmp	r3, r2
{
 800d8dc:	b085      	sub	sp, #20
  if(htim_base->Instance==TIM1)
 800d8de:	d02a      	beq.n	800d936 <HAL_TIM_Base_MspInit+0x62>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
  else if(htim_base->Instance==TIM2)
 800d8e0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d8e4:	d008      	beq.n	800d8f8 <HAL_TIM_Base_MspInit+0x24>
    __HAL_RCC_TIM2_CLK_ENABLE();
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
  else if(htim_base->Instance==TIM5)
 800d8e6:	4a29      	ldr	r2, [pc, #164]	; (800d98c <HAL_TIM_Base_MspInit+0xb8>)
 800d8e8:	4293      	cmp	r3, r2
 800d8ea:	d015      	beq.n	800d918 <HAL_TIM_Base_MspInit+0x44>
    __HAL_RCC_TIM5_CLK_ENABLE();
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }
  else if(htim_base->Instance==TIM8)
 800d8ec:	4a28      	ldr	r2, [pc, #160]	; (800d990 <HAL_TIM_Base_MspInit+0xbc>)
 800d8ee:	4293      	cmp	r3, r2
 800d8f0:	d037      	beq.n	800d962 <HAL_TIM_Base_MspInit+0x8e>
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 800d8f2:	b005      	add	sp, #20
 800d8f4:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_TIM2_CLK_ENABLE();
 800d8f8:	f503 330e 	add.w	r3, r3, #145408	; 0x23800
 800d8fc:	2200      	movs	r2, #0
 800d8fe:	9201      	str	r2, [sp, #4]
 800d900:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800d902:	f042 0201 	orr.w	r2, r2, #1
 800d906:	641a      	str	r2, [r3, #64]	; 0x40
 800d908:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d90a:	f003 0301 	and.w	r3, r3, #1
 800d90e:	9301      	str	r3, [sp, #4]
 800d910:	9b01      	ldr	r3, [sp, #4]
}
 800d912:	b005      	add	sp, #20
 800d914:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_TIM5_CLK_ENABLE();
 800d918:	4b1e      	ldr	r3, [pc, #120]	; (800d994 <HAL_TIM_Base_MspInit+0xc0>)
 800d91a:	2200      	movs	r2, #0
 800d91c:	9202      	str	r2, [sp, #8]
 800d91e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800d920:	f042 0208 	orr.w	r2, r2, #8
 800d924:	641a      	str	r2, [r3, #64]	; 0x40
 800d926:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d928:	f003 0308 	and.w	r3, r3, #8
 800d92c:	9302      	str	r3, [sp, #8]
 800d92e:	9b02      	ldr	r3, [sp, #8]
}
 800d930:	b005      	add	sp, #20
 800d932:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_TIM1_CLK_ENABLE();
 800d936:	2200      	movs	r2, #0
 800d938:	4b16      	ldr	r3, [pc, #88]	; (800d994 <HAL_TIM_Base_MspInit+0xc0>)
 800d93a:	9200      	str	r2, [sp, #0]
 800d93c:	6c59      	ldr	r1, [r3, #68]	; 0x44
 800d93e:	f041 0101 	orr.w	r1, r1, #1
 800d942:	6459      	str	r1, [r3, #68]	; 0x44
 800d944:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d946:	f003 0301 	and.w	r3, r3, #1
 800d94a:	9300      	str	r3, [sp, #0]
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 800d94c:	2019      	movs	r0, #25
 800d94e:	4611      	mov	r1, r2
    __HAL_RCC_TIM1_CLK_ENABLE();
 800d950:	9b00      	ldr	r3, [sp, #0]
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 800d952:	f001 fcf3 	bl	800f33c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 800d956:	2019      	movs	r0, #25
}
 800d958:	b005      	add	sp, #20
 800d95a:	f85d eb04 	ldr.w	lr, [sp], #4
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 800d95e:	f001 bd23 	b.w	800f3a8 <HAL_NVIC_EnableIRQ>
    __HAL_RCC_TIM8_CLK_ENABLE();
 800d962:	4b0c      	ldr	r3, [pc, #48]	; (800d994 <HAL_TIM_Base_MspInit+0xc0>)
 800d964:	2200      	movs	r2, #0
 800d966:	9203      	str	r2, [sp, #12]
 800d968:	6c59      	ldr	r1, [r3, #68]	; 0x44
 800d96a:	f041 0102 	orr.w	r1, r1, #2
 800d96e:	6459      	str	r1, [r3, #68]	; 0x44
 800d970:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d972:	f003 0302 	and.w	r3, r3, #2
 800d976:	9303      	str	r3, [sp, #12]
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 1, 0);
 800d978:	202c      	movs	r0, #44	; 0x2c
 800d97a:	2101      	movs	r1, #1
    __HAL_RCC_TIM8_CLK_ENABLE();
 800d97c:	9b03      	ldr	r3, [sp, #12]
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 1, 0);
 800d97e:	f001 fcdd 	bl	800f33c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 800d982:	202c      	movs	r0, #44	; 0x2c
 800d984:	e7e8      	b.n	800d958 <HAL_TIM_Base_MspInit+0x84>
 800d986:	bf00      	nop
 800d988:	40010000 	.word	0x40010000
 800d98c:	40000c00 	.word	0x40000c00
 800d990:	40010400 	.word	0x40010400
 800d994:	40023800 	.word	0x40023800

0800d998 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 800d998:	b510      	push	{r4, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(htim_encoder->Instance==TIM3)
 800d99a:	6802      	ldr	r2, [r0, #0]
 800d99c:	4927      	ldr	r1, [pc, #156]	; (800da3c <HAL_TIM_Encoder_MspInit+0xa4>)
{
 800d99e:	b08a      	sub	sp, #40	; 0x28
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800d9a0:	2300      	movs	r3, #0
  if(htim_encoder->Instance==TIM3)
 800d9a2:	428a      	cmp	r2, r1
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800d9a4:	e9cd 3305 	strd	r3, r3, [sp, #20]
 800d9a8:	e9cd 3307 	strd	r3, r3, [sp, #28]
 800d9ac:	9309      	str	r3, [sp, #36]	; 0x24
  if(htim_encoder->Instance==TIM3)
 800d9ae:	d024      	beq.n	800d9fa <HAL_TIM_Encoder_MspInit+0x62>

  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
  else if(htim_encoder->Instance==TIM4)
 800d9b0:	4923      	ldr	r1, [pc, #140]	; (800da40 <HAL_TIM_Encoder_MspInit+0xa8>)
 800d9b2:	428a      	cmp	r2, r1
 800d9b4:	d001      	beq.n	800d9ba <HAL_TIM_Encoder_MspInit+0x22>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 800d9b6:	b00a      	add	sp, #40	; 0x28
 800d9b8:	bd10      	pop	{r4, pc}
    __HAL_RCC_TIM4_CLK_ENABLE();
 800d9ba:	4a22      	ldr	r2, [pc, #136]	; (800da44 <HAL_TIM_Encoder_MspInit+0xac>)
 800d9bc:	9303      	str	r3, [sp, #12]
 800d9be:	6c11      	ldr	r1, [r2, #64]	; 0x40
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800d9c0:	4821      	ldr	r0, [pc, #132]	; (800da48 <HAL_TIM_Encoder_MspInit+0xb0>)
    __HAL_RCC_TIM4_CLK_ENABLE();
 800d9c2:	f041 0104 	orr.w	r1, r1, #4
 800d9c6:	6411      	str	r1, [r2, #64]	; 0x40
 800d9c8:	6c11      	ldr	r1, [r2, #64]	; 0x40
 800d9ca:	f001 0104 	and.w	r1, r1, #4
 800d9ce:	9103      	str	r1, [sp, #12]
 800d9d0:	9903      	ldr	r1, [sp, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800d9d2:	9304      	str	r3, [sp, #16]
 800d9d4:	6b13      	ldr	r3, [r2, #48]	; 0x30
 800d9d6:	f043 0302 	orr.w	r3, r3, #2
 800d9da:	6313      	str	r3, [r2, #48]	; 0x30
 800d9dc:	6b13      	ldr	r3, [r2, #48]	; 0x30
 800d9de:	f003 0302 	and.w	r3, r3, #2
 800d9e2:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800d9e4:	22c0      	movs	r2, #192	; 0xc0
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d9e6:	2302      	movs	r3, #2
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800d9e8:	a905      	add	r1, sp, #20
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800d9ea:	9c04      	ldr	r4, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 800d9ec:	9309      	str	r3, [sp, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d9ee:	e9cd 2305 	strd	r2, r3, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800d9f2:	f002 f82f 	bl	800fa54 <HAL_GPIO_Init>
}
 800d9f6:	b00a      	add	sp, #40	; 0x28
 800d9f8:	bd10      	pop	{r4, pc}
    __HAL_RCC_TIM3_CLK_ENABLE();
 800d9fa:	4a12      	ldr	r2, [pc, #72]	; (800da44 <HAL_TIM_Encoder_MspInit+0xac>)
 800d9fc:	9301      	str	r3, [sp, #4]
 800d9fe:	6c11      	ldr	r1, [r2, #64]	; 0x40
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800da00:	4812      	ldr	r0, [pc, #72]	; (800da4c <HAL_TIM_Encoder_MspInit+0xb4>)
    __HAL_RCC_TIM3_CLK_ENABLE();
 800da02:	f041 0102 	orr.w	r1, r1, #2
 800da06:	6411      	str	r1, [r2, #64]	; 0x40
 800da08:	6c11      	ldr	r1, [r2, #64]	; 0x40
 800da0a:	f001 0102 	and.w	r1, r1, #2
 800da0e:	9101      	str	r1, [sp, #4]
 800da10:	9901      	ldr	r1, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800da12:	9302      	str	r3, [sp, #8]
 800da14:	6b13      	ldr	r3, [r2, #48]	; 0x30
 800da16:	f043 0301 	orr.w	r3, r3, #1
 800da1a:	6313      	str	r3, [r2, #48]	; 0x30
 800da1c:	6b13      	ldr	r3, [r2, #48]	; 0x30
 800da1e:	f003 0301 	and.w	r3, r3, #1
 800da22:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800da24:	22c0      	movs	r2, #192	; 0xc0
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800da26:	2302      	movs	r3, #2
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800da28:	a905      	add	r1, sp, #20
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800da2a:	9c02      	ldr	r4, [sp, #8]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800da2c:	9309      	str	r3, [sp, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800da2e:	e9cd 2305 	strd	r2, r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800da32:	f002 f80f 	bl	800fa54 <HAL_GPIO_Init>
}
 800da36:	b00a      	add	sp, #40	; 0x28
 800da38:	bd10      	pop	{r4, pc}
 800da3a:	bf00      	nop
 800da3c:	40000400 	.word	0x40000400
 800da40:	40000800 	.word	0x40000800
 800da44:	40023800 	.word	0x40023800
 800da48:	40020400 	.word	0x40020400
 800da4c:	40020000 	.word	0x40020000

0800da50 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800da50:	b570      	push	{r4, r5, r6, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(htim->Instance==TIM2)
 800da52:	6803      	ldr	r3, [r0, #0]
{
 800da54:	b08a      	sub	sp, #40	; 0x28
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800da56:	2400      	movs	r4, #0
  if(htim->Instance==TIM2)
 800da58:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800da5c:	e9cd 4405 	strd	r4, r4, [sp, #20]
 800da60:	e9cd 4407 	strd	r4, r4, [sp, #28]
 800da64:	9409      	str	r4, [sp, #36]	; 0x24
  if(htim->Instance==TIM2)
 800da66:	d007      	beq.n	800da78 <HAL_TIM_MspPostInit+0x28>

  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }
  else if(htim->Instance==TIM5)
 800da68:	4a30      	ldr	r2, [pc, #192]	; (800db2c <HAL_TIM_MspPostInit+0xdc>)
 800da6a:	4293      	cmp	r3, r2
 800da6c:	d049      	beq.n	800db02 <HAL_TIM_MspPostInit+0xb2>

  /* USER CODE BEGIN TIM5_MspPostInit 1 */

  /* USER CODE END TIM5_MspPostInit 1 */
  }
  else if(htim->Instance==TIM8)
 800da6e:	4a30      	ldr	r2, [pc, #192]	; (800db30 <HAL_TIM_MspPostInit+0xe0>)
 800da70:	4293      	cmp	r3, r2
 800da72:	d01b      	beq.n	800daac <HAL_TIM_MspPostInit+0x5c>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 800da74:	b00a      	add	sp, #40	; 0x28
 800da76:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800da78:	f503 330e 	add.w	r3, r3, #145408	; 0x23800
 800da7c:	9401      	str	r4, [sp, #4]
 800da7e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800da80:	482c      	ldr	r0, [pc, #176]	; (800db34 <HAL_TIM_MspPostInit+0xe4>)
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800da82:	f042 0201 	orr.w	r2, r2, #1
 800da86:	631a      	str	r2, [r3, #48]	; 0x30
 800da88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800da8a:	f003 0301 	and.w	r3, r3, #1
 800da8e:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800da90:	2203      	movs	r2, #3
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800da92:	2301      	movs	r3, #1
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800da94:	a905      	add	r1, sp, #20
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800da96:	2508      	movs	r5, #8
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800da98:	2402      	movs	r4, #2
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800da9a:	9e01      	ldr	r6, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800da9c:	e9cd 5405 	strd	r5, r4, [sp, #20]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800daa0:	e9cd 2308 	strd	r2, r3, [sp, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800daa4:	f001 ffd6 	bl	800fa54 <HAL_GPIO_Init>
}
 800daa8:	b00a      	add	sp, #40	; 0x28
 800daaa:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800daac:	4b22      	ldr	r3, [pc, #136]	; (800db38 <HAL_TIM_MspPostInit+0xe8>)
 800daae:	9403      	str	r4, [sp, #12]
 800dab0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800dab2:	4820      	ldr	r0, [pc, #128]	; (800db34 <HAL_TIM_MspPostInit+0xe4>)
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800dab4:	f042 0201 	orr.w	r2, r2, #1
 800dab8:	631a      	str	r2, [r3, #48]	; 0x30
 800daba:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800dabc:	f002 0201 	and.w	r2, r2, #1
 800dac0:	9203      	str	r2, [sp, #12]
 800dac2:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800dac4:	9404      	str	r4, [sp, #16]
 800dac6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800dac8:	f042 0204 	orr.w	r2, r2, #4
 800dacc:	631a      	str	r2, [r3, #48]	; 0x30
 800dace:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dad0:	f003 0304 	and.w	r3, r3, #4
 800dad4:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800dad6:	2602      	movs	r6, #2
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 800dad8:	2320      	movs	r3, #32
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 800dada:	2503      	movs	r5, #3
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800dadc:	a905      	add	r1, sp, #20
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800dade:	9a04      	ldr	r2, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 800dae0:	9509      	str	r5, [sp, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800dae2:	e9cd 3605 	strd	r3, r6, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800dae6:	f001 ffb5 	bl	800fa54 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800daea:	2340      	movs	r3, #64	; 0x40
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800daec:	a905      	add	r1, sp, #20
 800daee:	4813      	ldr	r0, [pc, #76]	; (800db3c <HAL_TIM_MspPostInit+0xec>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800daf0:	9606      	str	r6, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 800daf2:	9509      	str	r5, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800daf4:	e9cd 4407 	strd	r4, r4, [sp, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800daf8:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800dafa:	f001 ffab 	bl	800fa54 <HAL_GPIO_Init>
}
 800dafe:	b00a      	add	sp, #40	; 0x28
 800db00:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800db02:	4b0d      	ldr	r3, [pc, #52]	; (800db38 <HAL_TIM_MspPostInit+0xe8>)
 800db04:	9402      	str	r4, [sp, #8]
 800db06:	6b1a      	ldr	r2, [r3, #48]	; 0x30
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800db08:	480a      	ldr	r0, [pc, #40]	; (800db34 <HAL_TIM_MspPostInit+0xe4>)
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800db0a:	f042 0201 	orr.w	r2, r2, #1
 800db0e:	631a      	str	r2, [r3, #48]	; 0x30
 800db10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800db12:	f003 0301 	and.w	r3, r3, #1
 800db16:	9302      	str	r3, [sp, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800db18:	a905      	add	r1, sp, #20
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 800db1a:	2302      	movs	r3, #2
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800db1c:	9a02      	ldr	r2, [sp, #8]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 800db1e:	9309      	str	r3, [sp, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800db20:	e9cd 3305 	strd	r3, r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800db24:	f001 ff96 	bl	800fa54 <HAL_GPIO_Init>
}
 800db28:	b00a      	add	sp, #40	; 0x28
 800db2a:	bd70      	pop	{r4, r5, r6, pc}
 800db2c:	40000c00 	.word	0x40000c00
 800db30:	40010400 	.word	0x40010400
 800db34:	40020000 	.word	0x40020000
 800db38:	40023800 	.word	0x40023800
 800db3c:	40020800 	.word	0x40020800

0800db40 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800db40:	b570      	push	{r4, r5, r6, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(huart->Instance==USART1)
 800db42:	6801      	ldr	r1, [r0, #0]
 800db44:	4a18      	ldr	r2, [pc, #96]	; (800dba8 <HAL_UART_MspInit+0x68>)
{
 800db46:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800db48:	2300      	movs	r3, #0
  if(huart->Instance==USART1)
 800db4a:	4291      	cmp	r1, r2
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800db4c:	e9cd 3303 	strd	r3, r3, [sp, #12]
 800db50:	e9cd 3305 	strd	r3, r3, [sp, #20]
 800db54:	9307      	str	r3, [sp, #28]
  if(huart->Instance==USART1)
 800db56:	d001      	beq.n	800db5c <HAL_UART_MspInit+0x1c>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800db58:	b008      	add	sp, #32
 800db5a:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_USART1_CLK_ENABLE();
 800db5c:	f502 3294 	add.w	r2, r2, #75776	; 0x12800
 800db60:	9301      	str	r3, [sp, #4]
 800db62:	6c51      	ldr	r1, [r2, #68]	; 0x44
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800db64:	4811      	ldr	r0, [pc, #68]	; (800dbac <HAL_UART_MspInit+0x6c>)
    __HAL_RCC_USART1_CLK_ENABLE();
 800db66:	f041 0110 	orr.w	r1, r1, #16
 800db6a:	6451      	str	r1, [r2, #68]	; 0x44
 800db6c:	6c51      	ldr	r1, [r2, #68]	; 0x44
 800db6e:	f001 0110 	and.w	r1, r1, #16
 800db72:	9101      	str	r1, [sp, #4]
 800db74:	9901      	ldr	r1, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800db76:	9302      	str	r3, [sp, #8]
 800db78:	6b13      	ldr	r3, [r2, #48]	; 0x30
 800db7a:	f043 0301 	orr.w	r3, r3, #1
 800db7e:	6313      	str	r3, [r2, #48]	; 0x30
 800db80:	6b13      	ldr	r3, [r2, #48]	; 0x30
 800db82:	f003 0301 	and.w	r3, r3, #1
 800db86:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800db88:	2203      	movs	r2, #3
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800db8a:	2307      	movs	r3, #7
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800db8c:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800db8e:	f44f 65c0 	mov.w	r5, #1536	; 0x600
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800db92:	2402      	movs	r4, #2
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800db94:	9e02      	ldr	r6, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800db96:	e9cd 5403 	strd	r5, r4, [sp, #12]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800db9a:	e9cd 2306 	strd	r2, r3, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800db9e:	f001 ff59 	bl	800fa54 <HAL_GPIO_Init>
}
 800dba2:	b008      	add	sp, #32
 800dba4:	bd70      	pop	{r4, r5, r6, pc}
 800dba6:	bf00      	nop
 800dba8:	40011000 	.word	0x40011000
 800dbac:	40020000 	.word	0x40020000

0800dbb0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800dbb0:	e7fe      	b.n	800dbb0 <NMI_Handler>
 800dbb2:	bf00      	nop

0800dbb4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800dbb4:	e7fe      	b.n	800dbb4 <HardFault_Handler>
 800dbb6:	bf00      	nop

0800dbb8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800dbb8:	e7fe      	b.n	800dbb8 <MemManage_Handler>
 800dbba:	bf00      	nop

0800dbbc <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800dbbc:	e7fe      	b.n	800dbbc <BusFault_Handler>
 800dbbe:	bf00      	nop

0800dbc0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800dbc0:	e7fe      	b.n	800dbc0 <UsageFault_Handler>
 800dbc2:	bf00      	nop

0800dbc4 <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800dbc4:	4770      	bx	lr
 800dbc6:	bf00      	nop

0800dbc8 <DebugMon_Handler>:
 800dbc8:	4770      	bx	lr
 800dbca:	bf00      	nop

0800dbcc <PendSV_Handler>:
 800dbcc:	4770      	bx	lr
 800dbce:	bf00      	nop

0800dbd0 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800dbd0:	f001 b904 	b.w	800eddc <HAL_IncTick>

0800dbd4 <TIM1_UP_TIM10_IRQHandler>:
void TIM1_UP_TIM10_IRQHandler(void)
{
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800dbd4:	4801      	ldr	r0, [pc, #4]	; (800dbdc <TIM1_UP_TIM10_IRQHandler+0x8>)
 800dbd6:	f003 b913 	b.w	8010e00 <HAL_TIM_IRQHandler>
 800dbda:	bf00      	nop
 800dbdc:	20001f6c 	.word	0x20001f6c

0800dbe0 <EXTI15_10_IRQHandler>:
void EXTI15_10_IRQHandler(void)
{
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_12);
 800dbe0:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 800dbe4:	f002 b83e 	b.w	800fc64 <HAL_GPIO_EXTI_IRQHandler>

0800dbe8 <TIM8_UP_TIM13_IRQHandler>:
void TIM8_UP_TIM13_IRQHandler(void)
{
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 0 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 800dbe8:	4801      	ldr	r0, [pc, #4]	; (800dbf0 <TIM8_UP_TIM13_IRQHandler+0x8>)
 800dbea:	f003 b909 	b.w	8010e00 <HAL_TIM_IRQHandler>
 800dbee:	bf00      	nop
 800dbf0:	20001d24 	.word	0x20001d24

0800dbf4 <DMA2_Stream0_IRQHandler>:
void DMA2_Stream0_IRQHandler(void)
{
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 800dbf4:	4801      	ldr	r0, [pc, #4]	; (800dbfc <DMA2_Stream0_IRQHandler+0x8>)
 800dbf6:	f001 bd1f 	b.w	800f638 <HAL_DMA_IRQHandler>
 800dbfa:	bf00      	nop
 800dbfc:	20001f0c 	.word	0x20001f0c

0800dc00 <DMA2_Stream2_IRQHandler>:
void DMA2_Stream2_IRQHandler(void)
{
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 800dc00:	4801      	ldr	r0, [pc, #4]	; (800dc08 <DMA2_Stream2_IRQHandler+0x8>)
 800dc02:	f001 bd19 	b.w	800f638 <HAL_DMA_IRQHandler>
 800dc06:	bf00      	nop
 800dc08:	20001fac 	.word	0x20001fac

0800dc0c <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800dc0c:	4b05      	ldr	r3, [pc, #20]	; (800dc24 <SystemInit+0x18>)
 800dc0e:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800dc12:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800dc16:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 800dc1a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800dc1e:	6099      	str	r1, [r3, #8]
#endif
}
 800dc20:	4770      	bx	lr
 800dc22:	bf00      	nop
 800dc24:	e000ed00 	.word	0xe000ed00

0800dc28 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800dc28:	b570      	push	{r4, r5, r6, lr}
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800dc2a:	1e16      	subs	r6, r2, #0
 800dc2c:	dd07      	ble.n	800dc3e <_read+0x16>
 800dc2e:	460c      	mov	r4, r1
 800dc30:	198d      	adds	r5, r1, r6
	{
		*ptr++ = __io_getchar();
 800dc32:	f7ff fad9 	bl	800d1e8 <__io_getchar>
 800dc36:	f804 0b01 	strb.w	r0, [r4], #1
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800dc3a:	42a5      	cmp	r5, r4
 800dc3c:	d1f9      	bne.n	800dc32 <_read+0xa>
	}

return len;
}
 800dc3e:	4630      	mov	r0, r6
 800dc40:	bd70      	pop	{r4, r5, r6, pc}
 800dc42:	bf00      	nop

0800dc44 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800dc44:	b570      	push	{r4, r5, r6, lr}
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800dc46:	1e16      	subs	r6, r2, #0
 800dc48:	dd07      	ble.n	800dc5a <_write+0x16>
 800dc4a:	460c      	mov	r4, r1
 800dc4c:	198d      	adds	r5, r1, r6
	{
		__io_putchar(*ptr++);
 800dc4e:	f814 0b01 	ldrb.w	r0, [r4], #1
 800dc52:	f7ff fab7 	bl	800d1c4 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800dc56:	42a5      	cmp	r5, r4
 800dc58:	d1f9      	bne.n	800dc4e <_write+0xa>
	}
	return len;
}
 800dc5a:	4630      	mov	r0, r6
 800dc5c:	bd70      	pop	{r4, r5, r6, pc}
 800dc5e:	bf00      	nop

0800dc60 <_close>:

int _close(int file)
{
	return -1;
}
 800dc60:	f04f 30ff 	mov.w	r0, #4294967295
 800dc64:	4770      	bx	lr
 800dc66:	bf00      	nop

0800dc68 <_fstat>:


int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
 800dc68:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800dc6c:	604b      	str	r3, [r1, #4]
	return 0;
}
 800dc6e:	2000      	movs	r0, #0
 800dc70:	4770      	bx	lr
 800dc72:	bf00      	nop

0800dc74 <_isatty>:

int _isatty(int file)
{
	return 1;
}
 800dc74:	2001      	movs	r0, #1
 800dc76:	4770      	bx	lr

0800dc78 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
	return 0;
}
 800dc78:	2000      	movs	r0, #0
 800dc7a:	4770      	bx	lr

0800dc7c <_sbrk>:
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800dc7c:	490c      	ldr	r1, [pc, #48]	; (800dcb0 <_sbrk+0x34>)
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800dc7e:	4a0d      	ldr	r2, [pc, #52]	; (800dcb4 <_sbrk+0x38>)
  if (NULL == __sbrk_heap_end)
 800dc80:	680b      	ldr	r3, [r1, #0]
{
 800dc82:	b510      	push	{r4, lr}
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800dc84:	4c0c      	ldr	r4, [pc, #48]	; (800dcb8 <_sbrk+0x3c>)
 800dc86:	1b12      	subs	r2, r2, r4
  if (NULL == __sbrk_heap_end)
 800dc88:	b12b      	cbz	r3, 800dc96 <_sbrk+0x1a>
  {
    __sbrk_heap_end = &_end;
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800dc8a:	4418      	add	r0, r3
 800dc8c:	4290      	cmp	r0, r2
 800dc8e:	d807      	bhi.n	800dca0 <_sbrk+0x24>
    errno = ENOMEM;
    return (void *)-1;
  }

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;
 800dc90:	6008      	str	r0, [r1, #0]

  return (void *)prev_heap_end;
}
 800dc92:	4618      	mov	r0, r3
 800dc94:	bd10      	pop	{r4, pc}
    __sbrk_heap_end = &_end;
 800dc96:	4b09      	ldr	r3, [pc, #36]	; (800dcbc <_sbrk+0x40>)
 800dc98:	600b      	str	r3, [r1, #0]
  if (__sbrk_heap_end + incr > max_heap)
 800dc9a:	4418      	add	r0, r3
 800dc9c:	4290      	cmp	r0, r2
 800dc9e:	d9f7      	bls.n	800dc90 <_sbrk+0x14>
    errno = ENOMEM;
 800dca0:	f003 fe26 	bl	80118f0 <__errno>
 800dca4:	230c      	movs	r3, #12
 800dca6:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 800dca8:	f04f 33ff 	mov.w	r3, #4294967295
}
 800dcac:	4618      	mov	r0, r3
 800dcae:	bd10      	pop	{r4, pc}
 800dcb0:	20001230 	.word	0x20001230
 800dcb4:	20020000 	.word	0x20020000
 800dcb8:	00000400 	.word	0x00000400
 800dcbc:	20002048 	.word	0x20002048

0800dcc0 <ADCStart>:
#include <stdio.h>
uint32_t adc1[3]={0};
uint32_t adc2[2]={0};

void ADCStart()
{  //AD値のDMA
 800dcc0:	b508      	push	{r3, lr}
	if (HAL_ADC_Start_DMA(&hadc1, (uint32_t *) adc1, 3) != HAL_OK)
 800dcc2:	2203      	movs	r2, #3
 800dcc4:	4909      	ldr	r1, [pc, #36]	; (800dcec <ADCStart+0x2c>)
 800dcc6:	480a      	ldr	r0, [pc, #40]	; (800dcf0 <ADCStart+0x30>)
 800dcc8:	f001 f95e 	bl	800ef88 <HAL_ADC_Start_DMA>
 800dccc:	b950      	cbnz	r0, 800dce4 <ADCStart+0x24>
	{
		Error_Handler();
	}
	if (HAL_ADC_Start_DMA(&hadc2, (uint32_t *) adc2, 2) != HAL_OK)
 800dcce:	2202      	movs	r2, #2
 800dcd0:	4908      	ldr	r1, [pc, #32]	; (800dcf4 <ADCStart+0x34>)
 800dcd2:	4809      	ldr	r0, [pc, #36]	; (800dcf8 <ADCStart+0x38>)
 800dcd4:	f001 f958 	bl	800ef88 <HAL_ADC_Start_DMA>
 800dcd8:	b900      	cbnz	r0, 800dcdc <ADCStart+0x1c>
	{
		Error_Handler();
	}

}
 800dcda:	bd08      	pop	{r3, pc}
 800dcdc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		Error_Handler();
 800dce0:	f7ff bcfe 	b.w	800d6e0 <Error_Handler>
		Error_Handler();
 800dce4:	f7ff fcfc 	bl	800d6e0 <Error_Handler>
 800dce8:	e7f1      	b.n	800dcce <ADCStart+0xe>
 800dcea:	bf00      	nop
 800dcec:	200012b4 	.word	0x200012b4
 800dcf0:	20001e84 	.word	0x20001e84
 800dcf4:	200012c0 	.word	0x200012c0
 800dcf8:	20001da4 	.word	0x20001da4

0800dcfc <ADCStop>:
void ADCStop()
{
 800dcfc:	b508      	push	{r3, lr}
	if (HAL_ADC_Stop_DMA(&hadc1) != HAL_OK)
 800dcfe:	480e      	ldr	r0, [pc, #56]	; (800dd38 <ADCStop+0x3c>)
 800dd00:	f001 f9e4 	bl	800f0cc <HAL_ADC_Stop_DMA>
 800dd04:	b970      	cbnz	r0, 800dd24 <ADCStop+0x28>
	{
		printf("な\r\n");
		Error_Handler();
		printf("に\r\n");
	}
	if (HAL_ADC_Stop_DMA(&hadc2) != HAL_OK)
 800dd06:	480d      	ldr	r0, [pc, #52]	; (800dd3c <ADCStop+0x40>)
 800dd08:	f001 f9e0 	bl	800f0cc <HAL_ADC_Stop_DMA>
 800dd0c:	b900      	cbnz	r0, 800dd10 <ADCStop+0x14>
	{
		printf("ぬ\r\n");
		Error_Handler();
		printf("ね\r\n");
	}
}
 800dd0e:	bd08      	pop	{r3, pc}
		printf("ぬ\r\n");
 800dd10:	480b      	ldr	r0, [pc, #44]	; (800dd40 <ADCStop+0x44>)
 800dd12:	f005 fbb5 	bl	8013480 <puts>
		Error_Handler();
 800dd16:	f7ff fce3 	bl	800d6e0 <Error_Handler>
		printf("ね\r\n");
 800dd1a:	480a      	ldr	r0, [pc, #40]	; (800dd44 <ADCStop+0x48>)
}
 800dd1c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		printf("ね\r\n");
 800dd20:	f005 bbae 	b.w	8013480 <puts>
		printf("な\r\n");
 800dd24:	4808      	ldr	r0, [pc, #32]	; (800dd48 <ADCStop+0x4c>)
 800dd26:	f005 fbab 	bl	8013480 <puts>
		Error_Handler();
 800dd2a:	f7ff fcd9 	bl	800d6e0 <Error_Handler>
		printf("に\r\n");
 800dd2e:	4807      	ldr	r0, [pc, #28]	; (800dd4c <ADCStop+0x50>)
 800dd30:	f005 fba6 	bl	8013480 <puts>
 800dd34:	e7e7      	b.n	800dd06 <ADCStop+0xa>
 800dd36:	bf00      	nop
 800dd38:	20001e84 	.word	0x20001e84
 800dd3c:	20001da4 	.word	0x20001da4
 800dd40:	08016ed4 	.word	0x08016ed4
 800dd44:	08016edc 	.word	0x08016edc
 800dd48:	08016ec4 	.word	0x08016ec4
 800dd4c:	08016ecc 	.word	0x08016ecc

0800dd50 <FLASH_Write_Word>:
uint32_t run_log_address;


inline static void FLASH_Unlock(void)
{
	FLASH->KEYR =  0x45670123;
 800dd50:	4b10      	ldr	r3, [pc, #64]	; (800dd94 <FLASH_Write_Word+0x44>)
	FLASH->KEYR =  0xCDEF89AB;
 800dd52:	4a11      	ldr	r2, [pc, #68]	; (800dd98 <FLASH_Write_Word+0x48>)

	FLASH_Lock();
}

void FLASH_Write_Word(uint32_t address, uint32_t data)
{
 800dd54:	b410      	push	{r4}
	FLASH->KEYR =  0x45670123;
 800dd56:	4c11      	ldr	r4, [pc, #68]	; (800dd9c <FLASH_Write_Word+0x4c>)
 800dd58:	605c      	str	r4, [r3, #4]
	FLASH->KEYR =  0xCDEF89AB;
 800dd5a:	605a      	str	r2, [r3, #4]
	while(FLASH->SR & FLASH_SR_BSY);//BSYがクリアされるまで待機
 800dd5c:	68da      	ldr	r2, [r3, #12]
 800dd5e:	03d2      	lsls	r2, r2, #15
 800dd60:	d4fc      	bmi.n	800dd5c <FLASH_Write_Word+0xc>
	FLASH_Unlock();

	FLASH_WaitBusy();

	FLASH->CR |= FLASH_PSIZE_WORD;
 800dd62:	691c      	ldr	r4, [r3, #16]
	while(FLASH->SR & FLASH_SR_BSY);//BSYがクリアされるまで待機
 800dd64:	4a0b      	ldr	r2, [pc, #44]	; (800dd94 <FLASH_Write_Word+0x44>)
	FLASH->CR |= FLASH_PSIZE_WORD;
 800dd66:	f444 7400 	orr.w	r4, r4, #512	; 0x200
 800dd6a:	611c      	str	r4, [r3, #16]
	FLASH->CR |= FLASH_CR_PG;
 800dd6c:	691c      	ldr	r4, [r3, #16]
 800dd6e:	f044 0401 	orr.w	r4, r4, #1
 800dd72:	611c      	str	r4, [r3, #16]

	*(__IO uint32_t*)address = data;
 800dd74:	6001      	str	r1, [r0, #0]
	while(FLASH->SR & FLASH_SR_BSY);//BSYがクリアされるまで待機
 800dd76:	68d3      	ldr	r3, [r2, #12]
 800dd78:	03db      	lsls	r3, r3, #15
 800dd7a:	d4fc      	bmi.n	800dd76 <FLASH_Write_Word+0x26>

	FLASH_WaitBusy();

	FLASH->CR &= ~FLASH_CR_PG;
 800dd7c:	6913      	ldr	r3, [r2, #16]

	FLASH_Lock();
}
 800dd7e:	f85d 4b04 	ldr.w	r4, [sp], #4
	FLASH->CR &= ~FLASH_CR_PG;
 800dd82:	f023 0301 	bic.w	r3, r3, #1
 800dd86:	6113      	str	r3, [r2, #16]
	FLASH->CR |= FLASH_CR_LOCK;
 800dd88:	6913      	ldr	r3, [r2, #16]
 800dd8a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800dd8e:	6113      	str	r3, [r2, #16]
}
 800dd90:	4770      	bx	lr
 800dd92:	bf00      	nop
 800dd94:	40023c00 	.word	0x40023c00
 800dd98:	cdef89ab 	.word	0xcdef89ab
 800dd9c:	45670123 	.word	0x45670123

0800dda0 <FLASH_Read_Word>:
	FLASH->KEYR =  0x45670123;
 800dda0:	4b10      	ldr	r3, [pc, #64]	; (800dde4 <FLASH_Read_Word+0x44>)
	FLASH->KEYR =  0xCDEF89AB;
 800dda2:	4a11      	ldr	r2, [pc, #68]	; (800dde8 <FLASH_Read_Word+0x48>)
void FLASH_Read_Word(uint32_t address, uint32_t * data)
{
 800dda4:	b410      	push	{r4}
	FLASH->KEYR =  0x45670123;
 800dda6:	4c11      	ldr	r4, [pc, #68]	; (800ddec <FLASH_Read_Word+0x4c>)
 800dda8:	605c      	str	r4, [r3, #4]
	FLASH->KEYR =  0xCDEF89AB;
 800ddaa:	605a      	str	r2, [r3, #4]
	while(FLASH->SR & FLASH_SR_BSY);//BSYがクリアされるまで待機
 800ddac:	68da      	ldr	r2, [r3, #12]
 800ddae:	03d2      	lsls	r2, r2, #15
 800ddb0:	d4fc      	bmi.n	800ddac <FLASH_Read_Word+0xc>
	FLASH_Unlock();

	FLASH_WaitBusy();

	FLASH->CR |= FLASH_PSIZE_WORD;
 800ddb2:	691c      	ldr	r4, [r3, #16]
	while(FLASH->SR & FLASH_SR_BSY);//BSYがクリアされるまで待機
 800ddb4:	4a0b      	ldr	r2, [pc, #44]	; (800dde4 <FLASH_Read_Word+0x44>)
	FLASH->CR |= FLASH_PSIZE_WORD;
 800ddb6:	f444 7400 	orr.w	r4, r4, #512	; 0x200
 800ddba:	611c      	str	r4, [r3, #16]
	FLASH->CR |= FLASH_CR_PG;
 800ddbc:	691c      	ldr	r4, [r3, #16]
 800ddbe:	f044 0401 	orr.w	r4, r4, #1
 800ddc2:	611c      	str	r4, [r3, #16]

	* data = *(__IO uint32_t*)address;
 800ddc4:	6803      	ldr	r3, [r0, #0]
 800ddc6:	600b      	str	r3, [r1, #0]
	while(FLASH->SR & FLASH_SR_BSY);//BSYがクリアされるまで待機
 800ddc8:	68d3      	ldr	r3, [r2, #12]
 800ddca:	03db      	lsls	r3, r3, #15
 800ddcc:	d4fc      	bmi.n	800ddc8 <FLASH_Read_Word+0x28>

	FLASH_WaitBusy();

	FLASH->CR &= ~FLASH_CR_PG;
 800ddce:	6913      	ldr	r3, [r2, #16]

	FLASH_Lock();
}
 800ddd0:	f85d 4b04 	ldr.w	r4, [sp], #4
	FLASH->CR &= ~FLASH_CR_PG;
 800ddd4:	f023 0301 	bic.w	r3, r3, #1
 800ddd8:	6113      	str	r3, [r2, #16]
	FLASH->CR |= FLASH_CR_LOCK;
 800ddda:	6913      	ldr	r3, [r2, #16]
 800dddc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800dde0:	6113      	str	r3, [r2, #16]
}
 800dde2:	4770      	bx	lr
 800dde4:	40023c00 	.word	0x40023c00
 800dde8:	cdef89ab 	.word	0xcdef89ab
 800ddec:	45670123 	.word	0x45670123

0800ddf0 <FLASH_Write_Word_F>:
	FLASH->KEYR =  0x45670123;
 800ddf0:	4b0f      	ldr	r3, [pc, #60]	; (800de30 <FLASH_Write_Word_F+0x40>)
 800ddf2:	4910      	ldr	r1, [pc, #64]	; (800de34 <FLASH_Write_Word_F+0x44>)
	FLASH->KEYR =  0xCDEF89AB;
 800ddf4:	4a10      	ldr	r2, [pc, #64]	; (800de38 <FLASH_Write_Word_F+0x48>)
	FLASH->KEYR =  0x45670123;
 800ddf6:	6059      	str	r1, [r3, #4]
	FLASH->KEYR =  0xCDEF89AB;
 800ddf8:	605a      	str	r2, [r3, #4]
	while(FLASH->SR & FLASH_SR_BSY);//BSYがクリアされるまで待機
 800ddfa:	68da      	ldr	r2, [r3, #12]
 800ddfc:	03d2      	lsls	r2, r2, #15
 800ddfe:	d4fc      	bmi.n	800ddfa <FLASH_Write_Word_F+0xa>
{
	FLASH_Unlock();

	FLASH_WaitBusy();

	FLASH->CR |= FLASH_PSIZE_WORD;
 800de00:	6919      	ldr	r1, [r3, #16]
	while(FLASH->SR & FLASH_SR_BSY);//BSYがクリアされるまで待機
 800de02:	4a0b      	ldr	r2, [pc, #44]	; (800de30 <FLASH_Write_Word_F+0x40>)
	FLASH->CR |= FLASH_PSIZE_WORD;
 800de04:	f441 7100 	orr.w	r1, r1, #512	; 0x200
 800de08:	6119      	str	r1, [r3, #16]
	FLASH->CR |= FLASH_CR_PG;
 800de0a:	6919      	ldr	r1, [r3, #16]
 800de0c:	f041 0101 	orr.w	r1, r1, #1
 800de10:	6119      	str	r1, [r3, #16]

	*(__IO float*)address = data;
 800de12:	ed80 0a00 	vstr	s0, [r0]
	while(FLASH->SR & FLASH_SR_BSY);//BSYがクリアされるまで待機
 800de16:	68d3      	ldr	r3, [r2, #12]
 800de18:	03db      	lsls	r3, r3, #15
 800de1a:	d4fc      	bmi.n	800de16 <FLASH_Write_Word_F+0x26>

	FLASH_WaitBusy();

	FLASH->CR &= ~FLASH_CR_PG;
 800de1c:	6913      	ldr	r3, [r2, #16]
 800de1e:	f023 0301 	bic.w	r3, r3, #1
 800de22:	6113      	str	r3, [r2, #16]
	FLASH->CR |= FLASH_CR_LOCK;
 800de24:	6913      	ldr	r3, [r2, #16]
 800de26:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800de2a:	6113      	str	r3, [r2, #16]

	FLASH_Lock();
}
 800de2c:	4770      	bx	lr
 800de2e:	bf00      	nop
 800de30:	40023c00 	.word	0x40023c00
 800de34:	45670123 	.word	0x45670123
 800de38:	cdef89ab 	.word	0xcdef89ab

0800de3c <FLASH_Read_Word_F>:
	FLASH->KEYR =  0x45670123;
 800de3c:	4b10      	ldr	r3, [pc, #64]	; (800de80 <FLASH_Read_Word_F+0x44>)
	FLASH->KEYR =  0xCDEF89AB;
 800de3e:	4a11      	ldr	r2, [pc, #68]	; (800de84 <FLASH_Read_Word_F+0x48>)
void FLASH_Read_Word_F(uint32_t address, float * data)
{
 800de40:	b410      	push	{r4}
	FLASH->KEYR =  0x45670123;
 800de42:	4c11      	ldr	r4, [pc, #68]	; (800de88 <FLASH_Read_Word_F+0x4c>)
 800de44:	605c      	str	r4, [r3, #4]
	FLASH->KEYR =  0xCDEF89AB;
 800de46:	605a      	str	r2, [r3, #4]
	while(FLASH->SR & FLASH_SR_BSY);//BSYがクリアされるまで待機
 800de48:	68da      	ldr	r2, [r3, #12]
 800de4a:	03d2      	lsls	r2, r2, #15
 800de4c:	d4fc      	bmi.n	800de48 <FLASH_Read_Word_F+0xc>
	FLASH_Unlock();

	FLASH_WaitBusy();

	FLASH->CR |= FLASH_PSIZE_WORD;
 800de4e:	691c      	ldr	r4, [r3, #16]
	while(FLASH->SR & FLASH_SR_BSY);//BSYがクリアされるまで待機
 800de50:	4a0b      	ldr	r2, [pc, #44]	; (800de80 <FLASH_Read_Word_F+0x44>)
	FLASH->CR |= FLASH_PSIZE_WORD;
 800de52:	f444 7400 	orr.w	r4, r4, #512	; 0x200
 800de56:	611c      	str	r4, [r3, #16]
	FLASH->CR |= FLASH_CR_PG;
 800de58:	691c      	ldr	r4, [r3, #16]
 800de5a:	f044 0401 	orr.w	r4, r4, #1
 800de5e:	611c      	str	r4, [r3, #16]

	* data = *(__IO float*)address;
 800de60:	6803      	ldr	r3, [r0, #0]
 800de62:	600b      	str	r3, [r1, #0]
	while(FLASH->SR & FLASH_SR_BSY);//BSYがクリアされるまで待機
 800de64:	68d3      	ldr	r3, [r2, #12]
 800de66:	03db      	lsls	r3, r3, #15
 800de68:	d4fc      	bmi.n	800de64 <FLASH_Read_Word_F+0x28>

	FLASH_WaitBusy();

	FLASH->CR &= ~FLASH_CR_PG;
 800de6a:	6913      	ldr	r3, [r2, #16]

	FLASH_Lock();
}
 800de6c:	f85d 4b04 	ldr.w	r4, [sp], #4
	FLASH->CR &= ~FLASH_CR_PG;
 800de70:	f023 0301 	bic.w	r3, r3, #1
 800de74:	6113      	str	r3, [r2, #16]
	FLASH->CR |= FLASH_CR_LOCK;
 800de76:	6913      	ldr	r3, [r2, #16]
 800de78:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800de7c:	6113      	str	r3, [r2, #16]
}
 800de7e:	4770      	bx	lr
 800de80:	40023c00 	.word	0x40023c00
 800de84:	cdef89ab 	.word	0xcdef89ab
 800de88:	45670123 	.word	0x45670123

0800de8c <Flash_clear_sector1>:
//char _backup_flash_start_3;
//char _backup_flash_start_11;
// 配置と定義はリンカスクリプトで行う

bool Flash_clear_sector1()// Flashのsectoe1を消去
{
 800de8c:	b530      	push	{r4, r5, lr}
 800de8e:	b087      	sub	sp, #28
    HAL_FLASH_Unlock();
 800de90:	f001 fce4 	bl	800f85c <HAL_FLASH_Unlock>

    FLASH_EraseInitTypeDef EraseInitStruct;
    EraseInitStruct.TypeErase = FLASH_TYPEERASE_SECTORS;
 800de94:	2400      	movs	r4, #0
    EraseInitStruct.Sector = BACKUP_FLASH_SECTOR_NUM_1;
 800de96:	2301      	movs	r3, #1
    EraseInitStruct.VoltageRange = FLASH_VOLTAGE_RANGE_3;
 800de98:	2202      	movs	r2, #2
    EraseInitStruct.NbSectors = 1;

    // Eraseに失敗したsector番号がerror_sectorに入
    // 正常にEraseができたと??��?��?
    uint32_t error_sector;
    HAL_StatusTypeDef result = HAL_FLASHEx_Erase(&EraseInitStruct, &error_sector);
 800de9a:	4669      	mov	r1, sp
 800de9c:	a801      	add	r0, sp, #4
    EraseInitStruct.TypeErase = FLASH_TYPEERASE_SECTORS;
 800de9e:	9401      	str	r4, [sp, #4]
    EraseInitStruct.NbSectors = 1;
 800dea0:	e9cd 3303 	strd	r3, r3, [sp, #12]
    EraseInitStruct.VoltageRange = FLASH_VOLTAGE_RANGE_3;
 800dea4:	9205      	str	r2, [sp, #20]
    HAL_StatusTypeDef result = HAL_FLASHEx_Erase(&EraseInitStruct, &error_sector);
 800dea6:	f001 fd73 	bl	800f990 <HAL_FLASHEx_Erase>
 800deaa:	4605      	mov	r5, r0

    HAL_FLASH_Lock();
 800deac:	f001 fcea 	bl	800f884 <HAL_FLASH_Lock>

    return result == HAL_OK && error_sector == 0xFFFFFFFF;
 800deb0:	b93d      	cbnz	r5, 800dec2 <Flash_clear_sector1+0x36>
 800deb2:	9800      	ldr	r0, [sp, #0]
 800deb4:	f1a0 30ff 	sub.w	r0, r0, #4294967295
 800deb8:	fab0 f080 	clz	r0, r0
 800debc:	0940      	lsrs	r0, r0, #5
}
 800debe:	b007      	add	sp, #28
 800dec0:	bd30      	pop	{r4, r5, pc}
 800dec2:	4620      	mov	r0, r4
 800dec4:	b007      	add	sp, #28
 800dec6:	bd30      	pop	{r4, r5, pc}

0800dec8 <Flash_clear_sector9>:
//    HAL_FLASH_Lock();
//
//    return result_3 == HAL_OK;
//}
bool Flash_clear_sector9()// Flashのsectoe1を消去
{
 800dec8:	b530      	push	{r4, r5, lr}
 800deca:	b087      	sub	sp, #28
    HAL_FLASH_Unlock();
 800decc:	f001 fcc6 	bl	800f85c <HAL_FLASH_Unlock>

    //printf("\r\nはか1?\r\n");
    FLASH_EraseInitTypeDef EraseInitStruct;
    EraseInitStruct.TypeErase = FLASH_TYPEERASE_SECTORS;
    EraseInitStruct.Sector = BACKUP_FLASH_SECTOR_NUM_9;
 800ded0:	2509      	movs	r5, #9
    EraseInitStruct.VoltageRange = FLASH_VOLTAGE_RANGE_3;
 800ded2:	2202      	movs	r2, #2
    EraseInitStruct.NbSectors = 1;
 800ded4:	2301      	movs	r3, #1
    EraseInitStruct.TypeErase = FLASH_TYPEERASE_SECTORS;
 800ded6:	2400      	movs	r4, #0

    //printf("\r\nはか12?\r\n");
    // Eraseに失敗したsector番号がerror_sectorに入
    // 正常にEraseができたと??��?��?
    uint32_t error_sector;
    HAL_StatusTypeDef result = HAL_FLASHEx_Erase(&EraseInitStruct, &error_sector);
 800ded8:	4669      	mov	r1, sp
 800deda:	a801      	add	r0, sp, #4
    EraseInitStruct.Sector = BACKUP_FLASH_SECTOR_NUM_9;
 800dedc:	9503      	str	r5, [sp, #12]
    EraseInitStruct.TypeErase = FLASH_TYPEERASE_SECTORS;
 800dede:	9401      	str	r4, [sp, #4]
    EraseInitStruct.NbSectors = 1;
 800dee0:	e9cd 3204 	strd	r3, r2, [sp, #16]
    HAL_StatusTypeDef result = HAL_FLASHEx_Erase(&EraseInitStruct, &error_sector);
 800dee4:	f001 fd54 	bl	800f990 <HAL_FLASHEx_Erase>
 800dee8:	4605      	mov	r5, r0

    //printf("\r\nはか3?\r\n");
    HAL_FLASH_Lock();
 800deea:	f001 fccb 	bl	800f884 <HAL_FLASH_Lock>

    return result == HAL_OK && error_sector == 0xFFFFFFFF;
 800deee:	b93d      	cbnz	r5, 800df00 <Flash_clear_sector9+0x38>
 800def0:	9800      	ldr	r0, [sp, #0]
 800def2:	f1a0 30ff 	sub.w	r0, r0, #4294967295
 800def6:	fab0 f080 	clz	r0, r0
 800defa:	0940      	lsrs	r0, r0, #5
}
 800defc:	b007      	add	sp, #28
 800defe:	bd30      	pop	{r4, r5, pc}
 800df00:	4620      	mov	r0, r4
 800df02:	b007      	add	sp, #28
 800df04:	bd30      	pop	{r4, r5, pc}
 800df06:	bf00      	nop

0800df08 <compare_num>:
}


int compare_num(const void * n1, const void * n2)
{
	if (*(int16_t *)n1 > *(int16_t *)n2)
 800df08:	f9b0 2000 	ldrsh.w	r2, [r0]
 800df0c:	f9b1 3000 	ldrsh.w	r3, [r1]
 800df10:	429a      	cmp	r2, r3
 800df12:	dc04      	bgt.n	800df1e <compare_num+0x16>
	{
		return 1;
	}
	else if (*(int16_t *)n1 < *(int16_t *)n2)
 800df14:	bfb4      	ite	lt
 800df16:	f04f 30ff 	movlt.w	r0, #4294967295
 800df1a:	2000      	movge	r0, #0
 800df1c:	4770      	bx	lr
		return 1;
 800df1e:	2001      	movs	r0, #1
	}
	else
	{
		return 0;
	}
}
 800df20:	4770      	bx	lr
 800df22:	bf00      	nop

0800df24 <ReadIMU>:
inline float ReadIMU(uint8_t a, uint8_t b) {
 800df24:	b570      	push	{r4, r5, r6, lr}
	CS_RESET;
 800df26:	4c23      	ldr	r4, [pc, #140]	; (800dfb4 <ReadIMU+0x90>)
	HAL_SPI_Transmit(&hspi3,&ret1,1,100);
 800df28:	4d23      	ldr	r5, [pc, #140]	; (800dfb8 <ReadIMU+0x94>)
inline float ReadIMU(uint8_t a, uint8_t b) {
 800df2a:	b082      	sub	sp, #8
	ret2 = ret[1] | 0x80;
 800df2c:	f061 037f 	orn	r3, r1, #127	; 0x7f
	ret1 = ret[0] | 0x80;
 800df30:	f060 067f 	orn	r6, r0, #127	; 0x7f
	CS_RESET;
 800df34:	2200      	movs	r2, #0
 800df36:	4620      	mov	r0, r4
 800df38:	2104      	movs	r1, #4
	ret2 = ret[1] | 0x80;
 800df3a:	f88d 3005 	strb.w	r3, [sp, #5]
	ret1 = ret[0] | 0x80;
 800df3e:	f88d 6004 	strb.w	r6, [sp, #4]
	CS_RESET;
 800df42:	f001 fe8b 	bl	800fc5c <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi3,&ret1,1,100);
 800df46:	a901      	add	r1, sp, #4
 800df48:	4628      	mov	r0, r5
 800df4a:	2364      	movs	r3, #100	; 0x64
 800df4c:	2201      	movs	r2, #1
 800df4e:	f002 fb3f 	bl	80105d0 <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi3,&val1,1,100);
 800df52:	2364      	movs	r3, #100	; 0x64
 800df54:	f10d 0106 	add.w	r1, sp, #6
 800df58:	4628      	mov	r0, r5
 800df5a:	2201      	movs	r2, #1
 800df5c:	f002 fbf6 	bl	801074c <HAL_SPI_Receive>
	CS_SET;
 800df60:	4620      	mov	r0, r4
 800df62:	2201      	movs	r2, #1
 800df64:	2104      	movs	r1, #4
 800df66:	f001 fe79 	bl	800fc5c <HAL_GPIO_WritePin>
	CS_RESET;
 800df6a:	4620      	mov	r0, r4
 800df6c:	2200      	movs	r2, #0
 800df6e:	2104      	movs	r1, #4
 800df70:	f001 fe74 	bl	800fc5c <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi3,&ret2,1,100);
 800df74:	f10d 0105 	add.w	r1, sp, #5
 800df78:	4628      	mov	r0, r5
 800df7a:	2364      	movs	r3, #100	; 0x64
 800df7c:	2201      	movs	r2, #1
 800df7e:	f002 fb27 	bl	80105d0 <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi3,&val2,1,100);
 800df82:	2364      	movs	r3, #100	; 0x64
 800df84:	f10d 0107 	add.w	r1, sp, #7
 800df88:	4628      	mov	r0, r5
 800df8a:	2201      	movs	r2, #1
 800df8c:	f002 fbde 	bl	801074c <HAL_SPI_Receive>
	CS_SET;
 800df90:	4620      	mov	r0, r4
 800df92:	2201      	movs	r2, #1
 800df94:	2104      	movs	r1, #4
 800df96:	f001 fe61 	bl	800fc5c <HAL_GPIO_WritePin>
	law_data = ( ((uint16_t)val1 << 8) | ((uint16_t)val2) );//何で8bitシフトかというと、ローバイトとハイバイトにわかれているものを一つにしたいから。16bitADCで得た値を二つに分けて出力しているのを元に戻す。
 800df9a:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800df9e:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800dfa2:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
	res = (float)law_data;
 800dfa6:	b21b      	sxth	r3, r3
 800dfa8:	ee00 3a10 	vmov	s0, r3
}
 800dfac:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
 800dfb0:	b002      	add	sp, #8
 800dfb2:	bd70      	pop	{r4, r5, r6, pc}
 800dfb4:	40020c00 	.word	0x40020c00
 800dfb8:	20001e2c 	.word	0x20001e2c

0800dfbc <median_filter>:
int16_t median_filter(int16_t *new_data) //中身変更しないが、値のコピーを避けて速度維持のためにアドレス
{
 800dfbc:	b530      	push	{r4, r5, lr}
	filter[cnt+1] = filter[cnt+2];
	filter[cnt+2] = filter[cnt+3];
	filter[cnt+3] = filter[cnt+4];
	filter[cnt+4] = new_data;
#else
	filter[0] = filter[1];
 800dfbe:	4c0d      	ldr	r4, [pc, #52]	; (800dff4 <median_filter+0x38>)
	filter[1] = filter[2];
	filter[2] = *new_data;//filter[3];
 800dfc0:	f9b0 1000 	ldrsh.w	r1, [r0]
	filter[1] = filter[2];
 800dfc4:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
	filter[0] = filter[1];
 800dfc8:	f9b4 5002 	ldrsh.w	r5, [r4, #2]
	filter[2] = *new_data;//filter[3];
 800dfcc:	80a1      	strh	r1, [r4, #4]
{
 800dfce:	b083      	sub	sp, #12
	filter[1] = filter[2];
 800dfd0:	8060      	strh	r0, [r4, #2]
//	filter[3] = filter[4];
//	filter[4] = *new_data;

	sorted[0] = filter[0];
	sorted[1] = filter[1];
	sorted[2] = *new_data;//filter[2];
 800dfd2:	f8ad 1004 	strh.w	r1, [sp, #4]
	sorted[1] = filter[1];
 800dfd6:	f8ad 0002 	strh.w	r0, [sp, #2]
//	sorted[4] = filter[4];
#endif


	//ソートする
	qsort(sorted, sizeof(sorted) / sizeof(sorted[0]), sizeof(int16_t),compare_num);
 800dfda:	4b07      	ldr	r3, [pc, #28]	; (800dff8 <median_filter+0x3c>)
	filter[0] = filter[1];
 800dfdc:	8025      	strh	r5, [r4, #0]
	qsort(sorted, sizeof(sorted) / sizeof(sorted[0]), sizeof(int16_t),compare_num);
 800dfde:	4668      	mov	r0, sp
 800dfe0:	2202      	movs	r2, #2
 800dfe2:	2103      	movs	r1, #3
	sorted[0] = filter[0];
 800dfe4:	f8ad 5000 	strh.w	r5, [sp]
	qsort(sorted, sizeof(sorted) / sizeof(sorted[0]), sizeof(int16_t),compare_num);
 800dfe8:	f005 fa8a 	bl	8013500 <qsort>
	//qsort(sorted, sizeof(sorted) / sizeof(sorted[0]), sizeof(int),compare_num);
	//中央値を返す
	return sorted[1];
}
 800dfec:	f9bd 0002 	ldrsh.w	r0, [sp, #2]
 800dff0:	b003      	add	sp, #12
 800dff2:	bd30      	pop	{r4, r5, pc}
 800dff4:	200012cc 	.word	0x200012cc
 800dff8:	0800df09 	.word	0x0800df09
 800dffc:	00000000 	.word	0x00000000

0800e000 <Update_IMU>:
//割込み内で呼ぶセット
void Update_IMU(float *angv, float *angle )
{
 800e000:	b5f0      	push	{r4, r5, r6, r7, lr}
				0x38,
		};
		int16_t law_data;
		ret1 = ret[0] | 0x80;
		ret2 = ret[1] | 0x80;
		CS_RESET;
 800e002:	4c3f      	ldr	r4, [pc, #252]	; (800e100 <Update_IMU+0x100>)
		HAL_SPI_Transmit(&hspi3,&ret1,1,100);
 800e004:	4d3f      	ldr	r5, [pc, #252]	; (800e104 <Update_IMU+0x104>)
{
 800e006:	b083      	sub	sp, #12
		ret1 = ret[0] | 0x80;
 800e008:	f04f 0cb7 	mov.w	ip, #183	; 0xb7
{
 800e00c:	460e      	mov	r6, r1
 800e00e:	4607      	mov	r7, r0
		ret2 = ret[1] | 0x80;
 800e010:	23b8      	movs	r3, #184	; 0xb8
		CS_RESET;
 800e012:	4620      	mov	r0, r4
 800e014:	2200      	movs	r2, #0
 800e016:	2104      	movs	r1, #4
		ret1 = ret[0] | 0x80;
 800e018:	f88d c002 	strb.w	ip, [sp, #2]
		ret2 = ret[1] | 0x80;
 800e01c:	f88d 3003 	strb.w	r3, [sp, #3]
		CS_RESET;
 800e020:	f001 fe1c 	bl	800fc5c <HAL_GPIO_WritePin>
		HAL_SPI_Transmit(&hspi3,&ret1,1,100);
 800e024:	f10d 0102 	add.w	r1, sp, #2
 800e028:	4628      	mov	r0, r5
 800e02a:	2364      	movs	r3, #100	; 0x64
 800e02c:	2201      	movs	r2, #1
 800e02e:	f002 facf 	bl	80105d0 <HAL_SPI_Transmit>
		HAL_SPI_Receive(&hspi3,&val1,1,100);
 800e032:	2364      	movs	r3, #100	; 0x64
 800e034:	a901      	add	r1, sp, #4
 800e036:	4628      	mov	r0, r5
 800e038:	2201      	movs	r2, #1
 800e03a:	f002 fb87 	bl	801074c <HAL_SPI_Receive>
		CS_SET;
 800e03e:	4620      	mov	r0, r4
 800e040:	2201      	movs	r2, #1
 800e042:	2104      	movs	r1, #4
 800e044:	f001 fe0a 	bl	800fc5c <HAL_GPIO_WritePin>

		CS_RESET;
 800e048:	4620      	mov	r0, r4
 800e04a:	2200      	movs	r2, #0
 800e04c:	2104      	movs	r1, #4
 800e04e:	f001 fe05 	bl	800fc5c <HAL_GPIO_WritePin>
		HAL_SPI_Transmit(&hspi3,&ret2,1,100);
 800e052:	f10d 0103 	add.w	r1, sp, #3
 800e056:	4628      	mov	r0, r5
 800e058:	2364      	movs	r3, #100	; 0x64
 800e05a:	2201      	movs	r2, #1
 800e05c:	f002 fab8 	bl	80105d0 <HAL_SPI_Transmit>
		HAL_SPI_Receive(&hspi3,&val2,1,100);
 800e060:	2364      	movs	r3, #100	; 0x64
 800e062:	f10d 0105 	add.w	r1, sp, #5
 800e066:	4628      	mov	r0, r5
 800e068:	2201      	movs	r2, #1
 800e06a:	f002 fb6f 	bl	801074c <HAL_SPI_Receive>
		CS_SET;
 800e06e:	4620      	mov	r0, r4
 800e070:	2104      	movs	r1, #4
 800e072:	2201      	movs	r2, #1
 800e074:	f001 fdf2 	bl	800fc5c <HAL_GPIO_WritePin>
		law_data = ( ((uint16_t)val1 << 8) | ((uint16_t)val2) );
 800e078:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800e07c:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800e080:	a802      	add	r0, sp, #8
 800e082:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800e086:	f820 3d02 	strh.w	r3, [r0, #-2]!

		//static int16_t zg_last=0;
		int16_t zg_median;

		//2000回目で0.17
		zg_median = median_filter(&law_data);
 800e08a:	f7ff ff97 	bl	800dfbc <median_filter>
		ZGFilterd = zg_median;
		ZGyro = (float)zg_median * convert_to_imu_angv;
 800e08e:	ee07 0a90 	vmov	s15, r0
 800e092:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 800e108 <Update_IMU+0x108>
 800e096:	4b1d      	ldr	r3, [pc, #116]	; (800e10c <Update_IMU+0x10c>)
		ZGFilterd = zg_median;
 800e098:	4a1d      	ldr	r2, [pc, #116]	; (800e110 <Update_IMU+0x110>)
		ZGyro = (float)zg_median * convert_to_imu_angv;
 800e09a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
		ZGFilterd = zg_median;
 800e09e:	8010      	strh	r0, [r2, #0]
		ZGyro = (float)zg_median * convert_to_imu_angv;
 800e0a0:	ee67 7a87 	vmul.f32	s15, s15, s14
 800e0a4:	edc3 7a00 	vstr	s15, [r3]
		*angv = -((0.01*ZGyro) + (0.99)* (zg_last));
		zg_last = ZGyro;
		//Angle;
		*angle += *angv *0.001;
#else
		*angv = -ZGyro; //角速度 rad / s
 800e0a8:	edd3 7a00 	vldr	s15, [r3]
 800e0ac:	eef1 7a67 	vneg.f32	s15, s15
 800e0b0:	edc7 7a00 	vstr	s15, [r7]

		//Angle;
		*angle += *angv * 0.001  - 0.000001784;//- 0.0000018432; //角度 rad
 800e0b4:	ee17 0a90 	vmov	r0, s15
 800e0b8:	f7fa f97e 	bl	80083b8 <__aeabi_f2d>
 800e0bc:	a30c      	add	r3, pc, #48	; (adr r3, 800e0f0 <Update_IMU+0xf0>)
 800e0be:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e0c2:	f7fa f9d1 	bl	8008468 <__aeabi_dmul>
 800e0c6:	a30c      	add	r3, pc, #48	; (adr r3, 800e0f8 <Update_IMU+0xf8>)
 800e0c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e0cc:	f7fa f814 	bl	80080f8 <__aeabi_dsub>
 800e0d0:	4604      	mov	r4, r0
 800e0d2:	6830      	ldr	r0, [r6, #0]
 800e0d4:	460d      	mov	r5, r1
 800e0d6:	f7fa f96f 	bl	80083b8 <__aeabi_f2d>
 800e0da:	4602      	mov	r2, r0
 800e0dc:	460b      	mov	r3, r1
 800e0de:	4620      	mov	r0, r4
 800e0e0:	4629      	mov	r1, r5
 800e0e2:	f7fa f80b 	bl	80080fc <__adddf3>
 800e0e6:	f7fa fcb7 	bl	8008a58 <__aeabi_d2f>
 800e0ea:	6030      	str	r0, [r6, #0]
	//*angv = -((0.01*zg_law) + (0.99)* (zg_last));
	zg_last = zg_law;
	//Angle;
	*angle += *angv *0.001;
#endif
}
 800e0ec:	b003      	add	sp, #12
 800e0ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e0f0:	d2f1a9fc 	.word	0xd2f1a9fc
 800e0f4:	3f50624d 	.word	0x3f50624d
 800e0f8:	be73a9d7 	.word	0xbe73a9d7
 800e0fc:	3ebdee38 	.word	0x3ebdee38
 800e100:	40020c00 	.word	0x40020c00
 800e104:	20001e2c 	.word	0x20001e2c
 800e108:	3a8b7d78 	.word	0x3a8b7d78
 800e10c:	200012c8 	.word	0x200012c8
 800e110:	20002014 	.word	0x20002014

0800e114 <write_byte>:

void write_byte( uint8_t reg, uint8_t val )  {
 800e114:	b570      	push	{r4, r5, r6, lr}
 800e116:	b084      	sub	sp, #16
	uint8_t ret;

	ret = reg & 0x7F;
 800e118:	ac04      	add	r4, sp, #16
	CS_RESET;
 800e11a:	4d10      	ldr	r5, [pc, #64]	; (800e15c <write_byte+0x48>)
	HAL_SPI_Transmit(&hspi3,&ret,1,100);
 800e11c:	4e10      	ldr	r6, [pc, #64]	; (800e160 <write_byte+0x4c>)
void write_byte( uint8_t reg, uint8_t val )  {
 800e11e:	f88d 1007 	strb.w	r1, [sp, #7]
	ret = reg & 0x7F;
 800e122:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 800e126:	f804 0d01 	strb.w	r0, [r4, #-1]!
	CS_RESET;
 800e12a:	2200      	movs	r2, #0
 800e12c:	4628      	mov	r0, r5
 800e12e:	2104      	movs	r1, #4
 800e130:	f001 fd94 	bl	800fc5c <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi3,&ret,1,100);
 800e134:	4621      	mov	r1, r4
 800e136:	4630      	mov	r0, r6
 800e138:	2364      	movs	r3, #100	; 0x64
 800e13a:	2201      	movs	r2, #1
 800e13c:	f002 fa48 	bl	80105d0 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspi3,&val,1,100);
 800e140:	2364      	movs	r3, #100	; 0x64
 800e142:	f10d 0107 	add.w	r1, sp, #7
 800e146:	4630      	mov	r0, r6
 800e148:	2201      	movs	r2, #1
 800e14a:	f002 fa41 	bl	80105d0 <HAL_SPI_Transmit>
	CS_SET;
 800e14e:	4628      	mov	r0, r5
 800e150:	2201      	movs	r2, #1
 800e152:	2104      	movs	r1, #4
 800e154:	f001 fd82 	bl	800fc5c <HAL_GPIO_WritePin>
}
 800e158:	b004      	add	sp, #16
 800e15a:	bd70      	pop	{r4, r5, r6, pc}
 800e15c:	40020c00 	.word	0x40020c00
 800e160:	20001e2c 	.word	0x20001e2c

0800e164 <IMU_init>:

uint8_t IMU_init() {
 800e164:	b510      	push	{r4, lr}
 800e166:	b082      	sub	sp, #8
	ret = reg | 0x80;
 800e168:	ac02      	add	r4, sp, #8
 800e16a:	2380      	movs	r3, #128	; 0x80
 800e16c:	f804 3d02 	strb.w	r3, [r4, #-2]!
	CS_RESET;
 800e170:	2200      	movs	r2, #0
 800e172:	2104      	movs	r1, #4
 800e174:	481b      	ldr	r0, [pc, #108]	; (800e1e4 <IMU_init+0x80>)
 800e176:	f001 fd71 	bl	800fc5c <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi3,&ret,1,100);
 800e17a:	4621      	mov	r1, r4
 800e17c:	2364      	movs	r3, #100	; 0x64
 800e17e:	2201      	movs	r2, #1
 800e180:	4819      	ldr	r0, [pc, #100]	; (800e1e8 <IMU_init+0x84>)
 800e182:	f002 fa25 	bl	80105d0 <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi3,&val,1,100);
 800e186:	2364      	movs	r3, #100	; 0x64
 800e188:	2201      	movs	r2, #1
 800e18a:	f10d 0107 	add.w	r1, sp, #7
 800e18e:	4816      	ldr	r0, [pc, #88]	; (800e1e8 <IMU_init+0x84>)
 800e190:	f002 fadc 	bl	801074c <HAL_SPI_Receive>
	CS_SET;
 800e194:	2201      	movs	r2, #1
 800e196:	2104      	movs	r1, #4
 800e198:	4812      	ldr	r0, [pc, #72]	; (800e1e4 <IMU_init+0x80>)
 800e19a:	f001 fd5f 	bl	800fc5c <HAL_GPIO_WritePin>
	return val;
 800e19e:	f89d 3007 	ldrb.w	r3, [sp, #7]
	uint8_t who_am_i,ret;

	who_am_i = read_byte(0x00);	//IMU動作確認　0xE0が送られてくればおｋ
	if ( who_am_i == 0xE0 ) {
 800e1a2:	2be0      	cmp	r3, #224	; 0xe0
 800e1a4:	d002      	beq.n	800e1ac <IMU_init+0x48>
		write_byte(0x7F,0x00);	//USER_BANK0
	}
	return ret;
	//0x14, 0x7F : 0000 1110, 0111 1111
	//retはregのまま。
}
 800e1a6:	2001      	movs	r0, #1
 800e1a8:	b002      	add	sp, #8
 800e1aa:	bd10      	pop	{r4, pc}
		write_byte(0x06,0x01);	//PWR_MGMT_1	スリープﾓｰﾄﾞ解除
 800e1ac:	2101      	movs	r1, #1
 800e1ae:	2006      	movs	r0, #6
 800e1b0:	f7ff ffb0 	bl	800e114 <write_byte>
		write_byte(0x03,0x10);	//USER_CTRL	諸々機能無効　SPIonly
 800e1b4:	2110      	movs	r1, #16
 800e1b6:	2003      	movs	r0, #3
 800e1b8:	f7ff ffac 	bl	800e114 <write_byte>
		write_byte(0x7F,0x20);	//USER_BANK2
 800e1bc:	2120      	movs	r1, #32
 800e1be:	207f      	movs	r0, #127	; 0x7f
 800e1c0:	f7ff ffa8 	bl	800e114 <write_byte>
		write_byte(0x01,0x17);	//range±2000dps DLPF enable DLPFCFG = 2
 800e1c4:	2117      	movs	r1, #23
 800e1c6:	2001      	movs	r0, #1
 800e1c8:	f7ff ffa4 	bl	800e114 <write_byte>
		write_byte(0x14,0x17);	//	レンジ±16g 0x06
 800e1cc:	2117      	movs	r1, #23
 800e1ce:	2014      	movs	r0, #20
 800e1d0:	f7ff ffa0 	bl	800e114 <write_byte>
		write_byte(0x7F,0x00);	//USER_BANK0
 800e1d4:	2100      	movs	r1, #0
 800e1d6:	207f      	movs	r0, #127	; 0x7f
 800e1d8:	f7ff ff9c 	bl	800e114 <write_byte>
}
 800e1dc:	2001      	movs	r0, #1
 800e1de:	b002      	add	sp, #8
 800e1e0:	bd10      	pop	{r4, pc}
 800e1e2:	bf00      	nop
 800e1e4:	40020c00 	.word	0x40020c00
 800e1e8:	20001e2c 	.word	0x20001e2c

0800e1ec <EncoderStart>:
#include "IEH2_4096.h"

//TIM3_Left, TIM4_Right

void EncoderStart()
{
 800e1ec:	b508      	push	{r3, lr}
	  HAL_TIM_Encoder_Start(&htim3,TIM_CHANNEL_ALL);
 800e1ee:	213c      	movs	r1, #60	; 0x3c
 800e1f0:	4804      	ldr	r0, [pc, #16]	; (800e204 <EncoderStart+0x18>)
 800e1f2:	f002 fd0b 	bl	8010c0c <HAL_TIM_Encoder_Start>
	  HAL_TIM_Encoder_Start(&htim4,TIM_CHANNEL_ALL);
 800e1f6:	213c      	movs	r1, #60	; 0x3c
 800e1f8:	4803      	ldr	r0, [pc, #12]	; (800e208 <EncoderStart+0x1c>)
}
 800e1fa:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	  HAL_TIM_Encoder_Start(&htim4,TIM_CHANNEL_ALL);
 800e1fe:	f002 bd05 	b.w	8010c0c <HAL_TIM_Encoder_Start>
 800e202:	bf00      	nop
 800e204:	20001dec 	.word	0x20001dec
 800e208:	20001d64 	.word	0x20001d64

0800e20c <EmitterON>:
 */

#include "IR_Emitter.h"

void EmitterON()
{
 800e20c:	b510      	push	{r4, lr}
	  HAL_TIM_OC_Start_IT(&htim8,TIM_CHANNEL_1);
 800e20e:	4c05      	ldr	r4, [pc, #20]	; (800e224 <EmitterON+0x18>)
 800e210:	2100      	movs	r1, #0
 800e212:	4620      	mov	r0, r4
 800e214:	f002 fc1e 	bl	8010a54 <HAL_TIM_OC_Start_IT>
	  HAL_TIMEx_OCN_Start_IT(&htim8, TIM_CHANNEL_1); // 位相
 800e218:	4620      	mov	r0, r4
 800e21a:	2100      	movs	r1, #0

}
 800e21c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	  HAL_TIMEx_OCN_Start_IT(&htim8, TIM_CHANNEL_1); // 位相
 800e220:	f003 b890 	b.w	8011344 <HAL_TIMEx_OCN_Start_IT>
 800e224:	20001d24 	.word	0x20001d24

0800e228 <EmitterOFF>:
void EmitterOFF()
{
 800e228:	b510      	push	{r4, lr}
	  HAL_TIM_OC_Stop_IT(&htim8,TIM_CHANNEL_1);
 800e22a:	4c05      	ldr	r4, [pc, #20]	; (800e240 <EmitterOFF+0x18>)
 800e22c:	2100      	movs	r1, #0
 800e22e:	4620      	mov	r0, r4
 800e230:	f002 fc58 	bl	8010ae4 <HAL_TIM_OC_Stop_IT>
	  HAL_TIMEx_OCN_Stop_IT(&htim8, TIM_CHANNEL_1); // 位相
 800e234:	4620      	mov	r0, r4
 800e236:	2100      	movs	r1, #0

}
 800e238:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	  HAL_TIMEx_OCN_Stop_IT(&htim8, TIM_CHANNEL_1); // 位相
 800e23c:	f003 b8b6 	b.w	80113ac <HAL_TIMEx_OCN_Stop_IT>
 800e240:	20001d24 	.word	0x20001d24

0800e244 <ChangeLED>:

#include "LED_Driver.h"
//ハードウェア層
//必要に応じてマクロ定義
void ChangeLED(int mode)
{
 800e244:	b508      	push	{r3, lr}
	//Switch
	switch(mode){
 800e246:	2807      	cmp	r0, #7
 800e248:	d851      	bhi.n	800e2ee <ChangeLED+0xaa>
 800e24a:	e8df f000 	tbb	[pc, r0]
 800e24e:	2c18      	.short	0x2c18
 800e250:	463e362e 	.word	0x463e362e
 800e254:	044e      	.short	0x044e
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_SET);
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_SET);

		break;
	case 7:
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_SET);
 800e256:	2201      	movs	r2, #1
 800e258:	f44f 7100 	mov.w	r1, #512	; 0x200
 800e25c:	4824      	ldr	r0, [pc, #144]	; (800e2f0 <ChangeLED+0xac>)
 800e25e:	f001 fcfd 	bl	800fc5c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_SET);
 800e262:	2201      	movs	r2, #1
 800e264:	f44f 7180 	mov.w	r1, #256	; 0x100
 800e268:	4821      	ldr	r0, [pc, #132]	; (800e2f0 <ChangeLED+0xac>)
 800e26a:	f001 fcf7 	bl	800fc5c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_SET);
 800e26e:	2201      	movs	r2, #1
 800e270:	f44f 7100 	mov.w	r1, #512	; 0x200
 800e274:	481f      	ldr	r0, [pc, #124]	; (800e2f4 <ChangeLED+0xb0>)

		break;
	default: break;

	}
}
 800e276:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_SET);
 800e27a:	f001 bcef 	b.w	800fc5c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_RESET);
 800e27e:	2200      	movs	r2, #0
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_SET);
 800e280:	f44f 7100 	mov.w	r1, #512	; 0x200
 800e284:	481a      	ldr	r0, [pc, #104]	; (800e2f0 <ChangeLED+0xac>)
 800e286:	f001 fce9 	bl	800fc5c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_RESET);
 800e28a:	2200      	movs	r2, #0
 800e28c:	f44f 7180 	mov.w	r1, #256	; 0x100
 800e290:	4817      	ldr	r0, [pc, #92]	; (800e2f0 <ChangeLED+0xac>)
 800e292:	f001 fce3 	bl	800fc5c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_RESET);
 800e296:	2200      	movs	r2, #0
 800e298:	f44f 7100 	mov.w	r1, #512	; 0x200
 800e29c:	4815      	ldr	r0, [pc, #84]	; (800e2f4 <ChangeLED+0xb0>)
}
 800e29e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_RESET);
 800e2a2:	f001 bcdb 	b.w	800fc5c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_SET);
 800e2a6:	2201      	movs	r2, #1
 800e2a8:	e7ea      	b.n	800e280 <ChangeLED+0x3c>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_RESET);
 800e2aa:	2200      	movs	r2, #0
 800e2ac:	f44f 7100 	mov.w	r1, #512	; 0x200
 800e2b0:	480f      	ldr	r0, [pc, #60]	; (800e2f0 <ChangeLED+0xac>)
 800e2b2:	f001 fcd3 	bl	800fc5c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_SET);
 800e2b6:	2201      	movs	r2, #1
 800e2b8:	e7e8      	b.n	800e28c <ChangeLED+0x48>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_SET);
 800e2ba:	2201      	movs	r2, #1
 800e2bc:	f44f 7100 	mov.w	r1, #512	; 0x200
 800e2c0:	480b      	ldr	r0, [pc, #44]	; (800e2f0 <ChangeLED+0xac>)
 800e2c2:	f001 fccb 	bl	800fc5c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_SET);
 800e2c6:	2201      	movs	r2, #1
 800e2c8:	e7e0      	b.n	800e28c <ChangeLED+0x48>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_RESET);
 800e2ca:	2200      	movs	r2, #0
 800e2cc:	f44f 7100 	mov.w	r1, #512	; 0x200
 800e2d0:	4807      	ldr	r0, [pc, #28]	; (800e2f0 <ChangeLED+0xac>)
 800e2d2:	f001 fcc3 	bl	800fc5c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_RESET);
 800e2d6:	2200      	movs	r2, #0
 800e2d8:	e7c4      	b.n	800e264 <ChangeLED+0x20>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_SET);
 800e2da:	2201      	movs	r2, #1
 800e2dc:	f44f 7100 	mov.w	r1, #512	; 0x200
 800e2e0:	4803      	ldr	r0, [pc, #12]	; (800e2f0 <ChangeLED+0xac>)
 800e2e2:	f001 fcbb 	bl	800fc5c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_RESET);
 800e2e6:	2200      	movs	r2, #0
 800e2e8:	e7bc      	b.n	800e264 <ChangeLED+0x20>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_RESET);
 800e2ea:	2200      	movs	r2, #0
 800e2ec:	e7b4      	b.n	800e258 <ChangeLED+0x14>
}
 800e2ee:	bd08      	pop	{r3, pc}
 800e2f0:	40020800 	.word	0x40020800
 800e2f4:	40020400 	.word	0x40020400

0800e2f8 <Motor_PWM_Start>:

#include "Motor_Driver.h"


//そういえばHALのエラーハンドラ関数ってどういう処理だろう。
void Motor_PWM_Start(){ // モータPWMの開始とCCR値の
 800e2f8:	b508      	push	{r3, lr}
#if 1
  if (HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4) != HAL_OK)
 800e2fa:	210c      	movs	r1, #12
 800e2fc:	4808      	ldr	r0, [pc, #32]	; (800e320 <Motor_PWM_Start+0x28>)
 800e2fe:	f002 fc49 	bl	8010b94 <HAL_TIM_PWM_Start>
 800e302:	b948      	cbnz	r0, 800e318 <Motor_PWM_Start+0x20>
  {
	  Error_Handler();
  }
  if (HAL_TIM_PWM_Start(&htim5, TIM_CHANNEL_2) != HAL_OK)
 800e304:	2104      	movs	r1, #4
 800e306:	4807      	ldr	r0, [pc, #28]	; (800e324 <Motor_PWM_Start+0x2c>)
 800e308:	f002 fc44 	bl	8010b94 <HAL_TIM_PWM_Start>
 800e30c:	b900      	cbnz	r0, 800e310 <Motor_PWM_Start+0x18>
  {
	  Error_Handler();
  }
#endif
}
 800e30e:	bd08      	pop	{r3, pc}
 800e310:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	  Error_Handler();
 800e314:	f7ff b9e4 	b.w	800d6e0 <Error_Handler>
	  Error_Handler();
 800e318:	f7ff f9e2 	bl	800d6e0 <Error_Handler>
 800e31c:	e7f2      	b.n	800e304 <Motor_PWM_Start+0xc>
 800e31e:	bf00      	nop
 800e320:	20001234 	.word	0x20001234
 800e324:	20001274 	.word	0x20001274

0800e328 <Motor_PWM_Stop>:

void Motor_PWM_Stop(){ // モータPWMの開始とCCR値の設
 800e328:	b508      	push	{r3, lr}
#if 1
  if (HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_4) != HAL_OK)
 800e32a:	210c      	movs	r1, #12
 800e32c:	4808      	ldr	r0, [pc, #32]	; (800e350 <Motor_PWM_Stop+0x28>)
 800e32e:	f002 fc33 	bl	8010b98 <HAL_TIM_PWM_Stop>
 800e332:	b948      	cbnz	r0, 800e348 <Motor_PWM_Stop+0x20>
  {
	  Error_Handler();
  }
  if (HAL_TIM_PWM_Stop(&htim5, TIM_CHANNEL_2) != HAL_OK)
 800e334:	2104      	movs	r1, #4
 800e336:	4807      	ldr	r0, [pc, #28]	; (800e354 <Motor_PWM_Stop+0x2c>)
 800e338:	f002 fc2e 	bl	8010b98 <HAL_TIM_PWM_Stop>
 800e33c:	b900      	cbnz	r0, 800e340 <Motor_PWM_Stop+0x18>
  {
	  Error_Handler();
  }
#endif
}
 800e33e:	bd08      	pop	{r3, pc}
 800e340:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	  Error_Handler();
 800e344:	f7ff b9cc 	b.w	800d6e0 <Error_Handler>
	  Error_Handler();
 800e348:	f7ff f9ca 	bl	800d6e0 <Error_Handler>
 800e34c:	e7f2      	b.n	800e334 <Motor_PWM_Stop+0xc>
 800e34e:	bf00      	nop
 800e350:	20001234 	.word	0x20001234
 800e354:	20001274 	.word	0x20001274

0800e358 <Motor_Switch>:
inline void Motor_Switch(int left, int right){
 800e358:	b570      	push	{r4, r5, r6, lr}
	if (left > 0 ){
 800e35a:	1e05      	subs	r5, r0, #0
inline void Motor_Switch(int left, int right){
 800e35c:	460c      	mov	r4, r1
	if (left > 0 ){
 800e35e:	dc35      	bgt.n	800e3cc <Motor_Switch+0x74>
		//to -
		HAL_GPIO_WritePin(GPIO_LEFT, GPIO_L_PIN_NUM, GPIO_PIN_SET); //A2が左SET:1で正転

	}
	else  if (left < 0){
 800e360:	d141      	bne.n	800e3e6 <Motor_Switch+0x8e>
		//to +
		HAL_GPIO_WritePin(GPIO_LEFT, GPIO_L_PIN_NUM, GPIO_PIN_RESET); //A2が左,RESET:0で転
		left = -left;
	}
	if (right > 0){
 800e362:	2c00      	cmp	r4, #0
 800e364:	dc14      	bgt.n	800e390 <Motor_Switch+0x38>
		//to -
		HAL_GPIO_WritePin(GPIO_RIGHT, GPIO_R_PIN_NUM, GPIO_PIN_RESET); //A0が右,RESET:0で転

	}

	else if (right < 0){
 800e366:	d137      	bne.n	800e3d8 <Motor_Switch+0x80>
	  	HAL_GPIO_WritePin(GPIO_RIGHT, GPIO_R_PIN_NUM, GPIO_PIN_SET); //A0が右,SET:1で正転
	  	right = -right;
	}

	//上限はマクロで設定
	if(left > 4200*0.6) left = 4200*0.6;
 800e368:	4628      	mov	r0, r5
 800e36a:	f7fa f813 	bl	8008394 <__aeabi_i2d>
 800e36e:	a322      	add	r3, pc, #136	; (adr r3, 800e3f8 <Motor_Switch+0xa0>)
 800e370:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e374:	f7fa fb08 	bl	8008988 <__aeabi_dcmpgt>
 800e378:	f640 13d8 	movw	r3, #2520	; 0x9d8
 800e37c:	2800      	cmp	r0, #0
 800e37e:	bf18      	it	ne
 800e380:	461d      	movne	r5, r3
	if(right > 4200*0.6) right = 4200*0.6;


	  __HAL_TIM_SET_COMPARE(&htim5, TIM_CHANNEL_2, right); //tim5ch2が右
 800e382:	4a1f      	ldr	r2, [pc, #124]	; (800e400 <Motor_Switch+0xa8>)
	  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_4, left); //tim2ch4が左
 800e384:	4b1f      	ldr	r3, [pc, #124]	; (800e404 <Motor_Switch+0xac>)
	  __HAL_TIM_SET_COMPARE(&htim5, TIM_CHANNEL_2, right); //tim5ch2が右
 800e386:	6812      	ldr	r2, [r2, #0]
	  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_4, left); //tim2ch4が左
 800e388:	681b      	ldr	r3, [r3, #0]
	  __HAL_TIM_SET_COMPARE(&htim5, TIM_CHANNEL_2, right); //tim5ch2が右
 800e38a:	6394      	str	r4, [r2, #56]	; 0x38
	  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_4, left); //tim2ch4が左
 800e38c:	641d      	str	r5, [r3, #64]	; 0x40
}
 800e38e:	bd70      	pop	{r4, r5, r6, pc}
		HAL_GPIO_WritePin(GPIO_RIGHT, GPIO_R_PIN_NUM, GPIO_PIN_RESET); //A0が右,RESET:0で転
 800e390:	2200      	movs	r2, #0
 800e392:	2101      	movs	r1, #1
 800e394:	481c      	ldr	r0, [pc, #112]	; (800e408 <Motor_Switch+0xb0>)
 800e396:	f001 fc61 	bl	800fc5c <HAL_GPIO_WritePin>
	if(left > 4200*0.6) left = 4200*0.6;
 800e39a:	4628      	mov	r0, r5
 800e39c:	f7f9 fffa 	bl	8008394 <__aeabi_i2d>
 800e3a0:	a315      	add	r3, pc, #84	; (adr r3, 800e3f8 <Motor_Switch+0xa0>)
 800e3a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e3a6:	f7fa faef 	bl	8008988 <__aeabi_dcmpgt>
 800e3aa:	f640 16d8 	movw	r6, #2520	; 0x9d8
 800e3ae:	2800      	cmp	r0, #0
 800e3b0:	bf18      	it	ne
 800e3b2:	4635      	movne	r5, r6
	if(right > 4200*0.6) right = 4200*0.6;
 800e3b4:	4620      	mov	r0, r4
 800e3b6:	f7f9 ffed 	bl	8008394 <__aeabi_i2d>
 800e3ba:	a30f      	add	r3, pc, #60	; (adr r3, 800e3f8 <Motor_Switch+0xa0>)
 800e3bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e3c0:	f7fa fae2 	bl	8008988 <__aeabi_dcmpgt>
 800e3c4:	2800      	cmp	r0, #0
 800e3c6:	bf18      	it	ne
 800e3c8:	4634      	movne	r4, r6
 800e3ca:	e7da      	b.n	800e382 <Motor_Switch+0x2a>
		HAL_GPIO_WritePin(GPIO_LEFT, GPIO_L_PIN_NUM, GPIO_PIN_SET); //A2が左SET:1で正転
 800e3cc:	2201      	movs	r2, #1
 800e3ce:	2104      	movs	r1, #4
 800e3d0:	480d      	ldr	r0, [pc, #52]	; (800e408 <Motor_Switch+0xb0>)
 800e3d2:	f001 fc43 	bl	800fc5c <HAL_GPIO_WritePin>
 800e3d6:	e7c4      	b.n	800e362 <Motor_Switch+0xa>
	  	HAL_GPIO_WritePin(GPIO_RIGHT, GPIO_R_PIN_NUM, GPIO_PIN_SET); //A0が右,SET:1で正転
 800e3d8:	2201      	movs	r2, #1
 800e3da:	4611      	mov	r1, r2
 800e3dc:	480a      	ldr	r0, [pc, #40]	; (800e408 <Motor_Switch+0xb0>)
 800e3de:	f001 fc3d 	bl	800fc5c <HAL_GPIO_WritePin>
	  	right = -right;
 800e3e2:	4264      	negs	r4, r4
 800e3e4:	e7d9      	b.n	800e39a <Motor_Switch+0x42>
		HAL_GPIO_WritePin(GPIO_LEFT, GPIO_L_PIN_NUM, GPIO_PIN_RESET); //A2が左,RESET:0で転
 800e3e6:	2200      	movs	r2, #0
 800e3e8:	2104      	movs	r1, #4
 800e3ea:	4807      	ldr	r0, [pc, #28]	; (800e408 <Motor_Switch+0xb0>)
 800e3ec:	f001 fc36 	bl	800fc5c <HAL_GPIO_WritePin>
		left = -left;
 800e3f0:	426d      	negs	r5, r5
 800e3f2:	e7b6      	b.n	800e362 <Motor_Switch+0xa>
 800e3f4:	f3af 8000 	nop.w
 800e3f8:	00000000 	.word	0x00000000
 800e3fc:	40a3b000 	.word	0x40a3b000
 800e400:	20001274 	.word	0x20001274
 800e404:	20001234 	.word	0x20001234
 800e408:	40020000 	.word	0x40020000

0800e40c <InitPulse>:
//引数 : カウンタのアドレス、パルス初期値
//戻り値 : なし
//-------------------------//
void InitPulse(int *timer_counter, int initial_pulse)
{
	* timer_counter = initial_pulse;
 800e40c:	6001      	str	r1, [r0, #0]
	//printf("timer_counter : %d\r\n", *timer_counter);
}
 800e40e:	4770      	bx	lr

0800e410 <GetWallDataAverage>:
//目的 : 2個連続した受光データの差分値のn回平均を取る。
//引数 : n回平均、 adcの生データ、 受光デバイスのナンバ0~割り振っておく。
//戻り値 : なし
//-------------------------//
float GetWallDataAverage(int average_of_n_times, int adc_data, int receiver_num)
{
 800e410:	b4f0      	push	{r4, r5, r6, r7}
	static int count[4] = {0}, last[4]={0}, integrate[4]={0};
	int raw, error;
	static float average[4]={0};

	raw = adc_data;
	error = abs( last[receiver_num] - raw );
 800e412:	4e1a      	ldr	r6, [pc, #104]	; (800e47c <GetWallDataAverage+0x6c>)
	last[receiver_num] = raw;
	integrate[receiver_num] += error;

	count[receiver_num]++;
 800e414:	4c1a      	ldr	r4, [pc, #104]	; (800e480 <GetWallDataAverage+0x70>)
	error = abs( last[receiver_num] - raw );
 800e416:	f856 3022 	ldr.w	r3, [r6, r2, lsl #2]
	integrate[receiver_num] += error;
 800e41a:	4d1a      	ldr	r5, [pc, #104]	; (800e484 <GetWallDataAverage+0x74>)
	last[receiver_num] = raw;
 800e41c:	f846 1022 	str.w	r1, [r6, r2, lsl #2]
	error = abs( last[receiver_num] - raw );
 800e420:	1a5b      	subs	r3, r3, r1
	count[receiver_num]++;
 800e422:	f854 1022 	ldr.w	r1, [r4, r2, lsl #2]
	integrate[receiver_num] += error;
 800e426:	f855 7022 	ldr.w	r7, [r5, r2, lsl #2]
	error = abs( last[receiver_num] - raw );
 800e42a:	2b00      	cmp	r3, #0
 800e42c:	bfb8      	it	lt
 800e42e:	425b      	neglt	r3, r3
	count[receiver_num]++;
 800e430:	3101      	adds	r1, #1
	integrate[receiver_num] += error;
 800e432:	443b      	add	r3, r7
	if(count[receiver_num] == average_of_n_times)
 800e434:	4281      	cmp	r1, r0
	integrate[receiver_num] += error;
 800e436:	f845 3022 	str.w	r3, [r5, r2, lsl #2]
	count[receiver_num]++;
 800e43a:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
	if(count[receiver_num] == average_of_n_times)
 800e43e:	d006      	beq.n	800e44e <GetWallDataAverage+0x3e>
 800e440:	4b11      	ldr	r3, [pc, #68]	; (800e488 <GetWallDataAverage+0x78>)
 800e442:	eb03 0282 	add.w	r2, r3, r2, lsl #2
 800e446:	ed92 0a00 	vldr	s0, [r2]
		average[receiver_num] = (float)integrate[receiver_num] / count[receiver_num];
		integrate[receiver_num] = 0;
		count[receiver_num] = 0;
	}
	return average[receiver_num];
}
 800e44a:	bcf0      	pop	{r4, r5, r6, r7}
 800e44c:	4770      	bx	lr
		average[receiver_num] = (float)integrate[receiver_num] / count[receiver_num];
 800e44e:	ee07 3a90 	vmov	s15, r3
 800e452:	ee07 1a10 	vmov	s14, r1
 800e456:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800e45a:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800e45e:	4b0a      	ldr	r3, [pc, #40]	; (800e488 <GetWallDataAverage+0x78>)
 800e460:	ee87 0a87 	vdiv.f32	s0, s15, s14
		integrate[receiver_num] = 0;
 800e464:	2100      	movs	r1, #0
		average[receiver_num] = (float)integrate[receiver_num] / count[receiver_num];
 800e466:	eb03 0382 	add.w	r3, r3, r2, lsl #2
		integrate[receiver_num] = 0;
 800e46a:	f845 1022 	str.w	r1, [r5, r2, lsl #2]
		count[receiver_num] = 0;
 800e46e:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
}
 800e472:	bcf0      	pop	{r4, r5, r6, r7}
		average[receiver_num] = (float)integrate[receiver_num] / count[receiver_num];
 800e474:	ed83 0a00 	vstr	s0, [r3]
}
 800e478:	4770      	bx	lr
 800e47a:	bf00      	nop
 800e47c:	20001308 	.word	0x20001308
 800e480:	200012e8 	.word	0x200012e8
 800e484:	200012f8 	.word	0x200012f8
 800e488:	200012d8 	.word	0x200012d8

0800e48c <ADCToBatteryVoltage>:
//戻り値 : バッテリ電圧値
//-------------------------//
float ADCToBatteryVoltage(int adc_data, float split, float pin_v_max, float adc_resolution)	//adcを使っていない場合は別の方法
{
	float battery_voltage = 0;
	battery_voltage =  adc_data * split* pin_v_max / adc_resolution;//V_SPLIT_NUM * PIN_V_MAX / ADC_RESOLUTION;	//ピンの特性に関するものは引数で。
 800e48c:	ee07 0a90 	vmov	s15, r0
 800e490:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800e494:	ee27 0a80 	vmul.f32	s0, s15, s0
 800e498:	ee20 0a20 	vmul.f32	s0, s0, s1
	return battery_voltage;
}
 800e49c:	ee80 0a01 	vdiv.f32	s0, s0, s2
 800e4a0:	4770      	bx	lr
 800e4a2:	bf00      	nop

0800e4a4 <IntegerPower>:
//-------------------------//

int IntegerPower(int integer, int exponential)
{
	int pattern_num = 1;
	for(int i=0; i < exponential ; i++)
 800e4a4:	2900      	cmp	r1, #0
 800e4a6:	dd08      	ble.n	800e4ba <IntegerPower+0x16>
 800e4a8:	2300      	movs	r3, #0
	int pattern_num = 1;
 800e4aa:	2201      	movs	r2, #1
	for(int i=0; i < exponential ; i++)
 800e4ac:	3301      	adds	r3, #1
 800e4ae:	4299      	cmp	r1, r3
	{
		pattern_num *= integer;
 800e4b0:	fb00 f202 	mul.w	r2, r0, r2
	for(int i=0; i < exponential ; i++)
 800e4b4:	d1fa      	bne.n	800e4ac <IntegerPower+0x8>
	}
	return pattern_num;
}
 800e4b6:	4610      	mov	r0, r2
 800e4b8:	4770      	bx	lr
	int pattern_num = 1;
 800e4ba:	2201      	movs	r2, #1
}
 800e4bc:	4610      	mov	r0, r2
 800e4be:	4770      	bx	lr

0800e4c0 <GetBatteryLevel>:

//残量レベルを返す
int GetBatteryLevel(float current_voltage, float battery_min, float battery_max, int level_num)	//だいぶ汎用的
{
	float current_percentage = current_voltage / battery_max;
	float lowest_percentage =  battery_min / battery_max;
 800e4c0:	eec0 0a81 	vdiv.f32	s1, s1, s2

	float percentage_per_pattern = (1 - lowest_percentage) / (float) level_num;

	int pattern = 0;
	for(int i=0; i < level_num; i++)
 800e4c4:	2800      	cmp	r0, #0
	float percentage_per_pattern = (1 - lowest_percentage) / (float) level_num;
 800e4c6:	ee07 0a10 	vmov	s14, r0
 800e4ca:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800e4ce:	ee77 7ae0 	vsub.f32	s15, s15, s1
 800e4d2:	eef8 6ac7 	vcvt.f32.s32	s13, s14
	float current_percentage = current_voltage / battery_max;
 800e4d6:	ee80 0a01 	vdiv.f32	s0, s0, s2
	float percentage_per_pattern = (1 - lowest_percentage) / (float) level_num;
 800e4da:	ee87 7aa6 	vdiv.f32	s14, s15, s13
	for(int i=0; i < level_num; i++)
 800e4de:	dd14      	ble.n	800e50a <GetBatteryLevel+0x4a>
 800e4e0:	2300      	movs	r3, #0
	int pattern = 0;
 800e4e2:	461a      	mov	r2, r3
	{
		if( ( lowest_percentage + (percentage_per_pattern* i) )  <= current_percentage )
 800e4e4:	ee07 3a90 	vmov	s15, r3
 800e4e8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800e4ec:	eef0 6a60 	vmov.f32	s13, s1
 800e4f0:	eee7 6a87 	vfma.f32	s13, s15, s14
 800e4f4:	eef4 6a40 	vcmp.f32	s13, s0
 800e4f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e4fc:	bf98      	it	ls
 800e4fe:	461a      	movls	r2, r3
	for(int i=0; i < level_num; i++)
 800e500:	3301      	adds	r3, #1
 800e502:	4298      	cmp	r0, r3
 800e504:	d1ee      	bne.n	800e4e4 <GetBatteryLevel+0x24>
		{
			pattern = i;
		}
	}
	return pattern;
}
 800e506:	4610      	mov	r0, r2
 800e508:	4770      	bx	lr
	int pattern = 0;
 800e50a:	2200      	movs	r2, #0
}
 800e50c:	4610      	mov	r0, r2
 800e50e:	4770      	bx	lr

0800e510 <Buffering>:
//{
//	Photo[SL];
//	FLASH_Write_Word_F(address, data);
//}
void Buffering()
{
 800e510:	b510      	push	{r4, lr}
	  setbuf(stdout,NULL);
 800e512:	4c06      	ldr	r4, [pc, #24]	; (800e52c <Buffering+0x1c>)
 800e514:	6823      	ldr	r3, [r4, #0]
 800e516:	2100      	movs	r1, #0
 800e518:	6898      	ldr	r0, [r3, #8]
 800e51a:	f005 fa07 	bl	801392c <setbuf>
	  setbuf(stdin,NULL);
 800e51e:	6823      	ldr	r3, [r4, #0]
 800e520:	2100      	movs	r1, #0
 800e522:	6858      	ldr	r0, [r3, #4]
}
 800e524:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	  setbuf(stdin,NULL);
 800e528:	f005 ba00 	b.w	801392c <setbuf>
 800e52c:	20000018 	.word	0x20000018

0800e530 <Copy_Gain>:
void Copy_Gain()
{
 800e530:	b570      	push	{r4, r5, r6, lr}
	//セクター消去して、一つ一つ書き込む。
	//printf("\r\nどしたん\r\n");

	uint32_t address = start_adress_sector9;
	float data[16]={0};
	data[0] = Pid[L_VELO_PID].KP;
 800e532:	4b1c      	ldr	r3, [pc, #112]	; (800e5a4 <Copy_Gain+0x74>)
	uint32_t address = start_adress_sector9;
 800e534:	4c1c      	ldr	r4, [pc, #112]	; (800e5a8 <Copy_Gain+0x78>)
	data[1] = Pid[L_VELO_PID].KI;
 800e536:	f8d3 20b4 	ldr.w	r2, [r3, #180]	; 0xb4
	data[2] = Pid[L_VELO_PID].KD;
 800e53a:	f8d3 50b8 	ldr.w	r5, [r3, #184]	; 0xb8

	data[3] = Pid[A_VELO_PID].KP;
 800e53e:	6818      	ldr	r0, [r3, #0]
	data[4] = Pid[A_VELO_PID].KI;
 800e540:	6859      	ldr	r1, [r3, #4]
	data[0] = Pid[L_VELO_PID].KP;
 800e542:	ed93 0a2c 	vldr	s0, [r3, #176]	; 0xb0
	data[6] = Pid[L_WALL_PID].KP;
	data[7] = Pid[L_WALL_PID].KI;
	data[8] = Pid[L_WALL_PID].KD;

	data[9] = Pid[R_WALL_PID].KP;
	data[10] = Pid[R_WALL_PID].KI;
 800e546:	f8d3 6088 	ldr.w	r6, [r3, #136]	; 0x88
	uint32_t address = start_adress_sector9;
 800e54a:	6824      	ldr	r4, [r4, #0]
{
 800e54c:	b090      	sub	sp, #64	; 0x40
	data[0] = Pid[L_VELO_PID].KP;
 800e54e:	ed8d 0a00 	vstr	s0, [sp]
	data[1] = Pid[L_VELO_PID].KI;
 800e552:	9201      	str	r2, [sp, #4]
	data[5] = Pid[A_VELO_PID].KD;
 800e554:	689a      	ldr	r2, [r3, #8]
	data[2] = Pid[L_VELO_PID].KD;
 800e556:	9502      	str	r5, [sp, #8]
	data[3] = Pid[A_VELO_PID].KP;
 800e558:	9003      	str	r0, [sp, #12]
	data[6] = Pid[L_WALL_PID].KP;
 800e55a:	6d9d      	ldr	r5, [r3, #88]	; 0x58
	data[7] = Pid[L_WALL_PID].KI;
 800e55c:	6dd8      	ldr	r0, [r3, #92]	; 0x5c
	data[4] = Pid[A_VELO_PID].KI;
 800e55e:	9104      	str	r1, [sp, #16]
	data[5] = Pid[A_VELO_PID].KD;
 800e560:	9205      	str	r2, [sp, #20]
	data[8] = Pid[L_WALL_PID].KD;
 800e562:	6e19      	ldr	r1, [r3, #96]	; 0x60
	data[9] = Pid[R_WALL_PID].KP;
 800e564:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
	data[6] = Pid[L_WALL_PID].KP;
 800e568:	9506      	str	r5, [sp, #24]
	data[7] = Pid[L_WALL_PID].KI;
 800e56a:	9007      	str	r0, [sp, #28]
	data[11] = Pid[R_WALL_PID].KD;
 800e56c:	f8d3 508c 	ldr.w	r5, [r3, #140]	; 0x8c

	data[12] = Pid[D_WALL_PID].KP;
 800e570:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
	data[8] = Pid[L_WALL_PID].KD;
 800e572:	9108      	str	r1, [sp, #32]
	data[9] = Pid[R_WALL_PID].KP;
 800e574:	9209      	str	r2, [sp, #36]	; 0x24
	data[13] = Pid[D_WALL_PID].KI;
 800e576:	6b19      	ldr	r1, [r3, #48]	; 0x30
	data[14] = Pid[D_WALL_PID].KD;
 800e578:	6b5a      	ldr	r2, [r3, #52]	; 0x34
	data[10] = Pid[R_WALL_PID].KI;
 800e57a:	960a      	str	r6, [sp, #40]	; 0x28
	float data[16]={0};
 800e57c:	2300      	movs	r3, #0
	data[11] = Pid[R_WALL_PID].KD;
 800e57e:	950b      	str	r5, [sp, #44]	; 0x2c
	data[12] = Pid[D_WALL_PID].KP;
 800e580:	900c      	str	r0, [sp, #48]	; 0x30
	data[13] = Pid[D_WALL_PID].KI;
 800e582:	910d      	str	r1, [sp, #52]	; 0x34
	data[14] = Pid[D_WALL_PID].KD;
 800e584:	920e      	str	r2, [sp, #56]	; 0x38
 800e586:	ad01      	add	r5, sp, #4
	float data[16]={0};
 800e588:	930f      	str	r3, [sp, #60]	; 0x3c
 800e58a:	ae0f      	add	r6, sp, #60	; 0x3c
 800e58c:	e001      	b.n	800e592 <Copy_Gain+0x62>
 800e58e:	ecb5 0a01 	vldmia	r5!, {s0}
	for(int i=0; i < 15; i++)
	{

		FLASH_Write_Word_F( address, data[i]);
 800e592:	4620      	mov	r0, r4
 800e594:	f7ff fc2c 	bl	800ddf0 <FLASH_Write_Word_F>
	for(int i=0; i < 15; i++)
 800e598:	42b5      	cmp	r5, r6
		address += 0x04;
 800e59a:	f104 0404 	add.w	r4, r4, #4
	for(int i=0; i < 15; i++)
 800e59e:	d1f6      	bne.n	800e58e <Copy_Gain+0x5e>

	//printf("\r\nはなしきこか？\r\n");
	//起動時にCopy_Gainを実行する
	//Flash_clear_sector9();

}
 800e5a0:	b010      	add	sp, #64	; 0x40
 800e5a2:	bd70      	pop	{r4, r5, r6, pc}
 800e5a4:	20001318 	.word	0x20001318
 800e5a8:	08016ee8 	.word	0x08016ee8

0800e5ac <Load_Gain>:
void Load_Gain()
{
 800e5ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e5b0:	ed2d 8b02 	vpush	{d8}
	//非数の数数えて、全部そうだったらそのまま
	//そうでなければ読みだした値は全てゲインとして代入
	//Flash_load_sector9();

	//読み出し
	uint32_t address = start_adress_sector9;//こっちか
 800e5b4:	4b61      	ldr	r3, [pc, #388]	; (800e73c <Load_Gain+0x190>)
	uint8_t j=0;
	for(int i=0; i < 15; i++)
	{
		FLASH_Read_Word_F( address, &data[i]);
		address += 0x04;
		printf("%d, %f\r\n",i,data[i]);
 800e5b6:	f8df 91a0 	ldr.w	r9, [pc, #416]	; 800e758 <Load_Gain+0x1ac>
	uint32_t address = start_adress_sector9;//こっちか
 800e5ba:	681f      	ldr	r7, [r3, #0]
		judge = isnanf(data[i]); //nanでなければ0
		printf("judge : %d\r\n", judge);
 800e5bc:	f8df 819c 	ldr.w	r8, [pc, #412]	; 800e75c <Load_Gain+0x1b0>
{
 800e5c0:	b090      	sub	sp, #64	; 0x40
	float data[16]={0};//1個多く要素を作る。
 800e5c2:	4668      	mov	r0, sp
 800e5c4:	2240      	movs	r2, #64	; 0x40
 800e5c6:	2100      	movs	r1, #0
 800e5c8:	f003 fbd3 	bl	8011d72 <memset>
 800e5cc:	466c      	mov	r4, sp
	for(int i=0; i < 15; i++)
 800e5ce:	2500      	movs	r5, #0
 800e5d0:	1b3f      	subs	r7, r7, r4
	uint8_t j=0;
 800e5d2:	46aa      	mov	sl, r5
		FLASH_Read_Word_F( address, &data[i]);
 800e5d4:	4621      	mov	r1, r4
 800e5d6:	1938      	adds	r0, r7, r4
 800e5d8:	f7ff fc30 	bl	800de3c <FLASH_Read_Word_F>
		printf("%d, %f\r\n",i,data[i]);
 800e5dc:	6820      	ldr	r0, [r4, #0]
 800e5de:	f7f9 feeb 	bl	80083b8 <__aeabi_f2d>
 800e5e2:	4602      	mov	r2, r0
 800e5e4:	460b      	mov	r3, r1
 800e5e6:	4648      	mov	r0, r9
 800e5e8:	4629      	mov	r1, r5
 800e5ea:	f004 fec1 	bl	8013370 <iprintf>
		judge = isnanf(data[i]); //nanでなければ0
 800e5ee:	ecb4 8a01 	vldmia	r4!, {s16}
 800e5f2:	eeb4 8a48 	vcmp.f32	s16, s16
 800e5f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
		printf("judge : %d\r\n", judge);
 800e5fa:	bf6c      	ite	vs
 800e5fc:	2101      	movvs	r1, #1
 800e5fe:	2100      	movvc	r1, #0
 800e600:	4640      	mov	r0, r8
 800e602:	f004 feb5 	bl	8013370 <iprintf>
		if(judge == 1) //コンパイラでisnanfの結果が変わる
 800e606:	eeb4 8a48 	vcmp.f32	s16, s16
 800e60a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
		{
			j++;
 800e60e:	bf68      	it	vs
 800e610:	f10a 0a01 	addvs.w	sl, sl, #1
	for(int i=0; i < 15; i++)
 800e614:	f105 0501 	add.w	r5, r5, #1
			j++;
 800e618:	bf68      	it	vs
 800e61a:	fa5f fa8a 	uxtbvs.w	sl, sl
	for(int i=0; i < 15; i++)
 800e61e:	2d0f      	cmp	r5, #15
 800e620:	d1d8      	bne.n	800e5d4 <Load_Gain+0x28>


	}
	//起動時、flashに0がたくさん。そのときは何もしない
	//数字が入っていれば、それを入れる
	printf("%d\r\n",j);
 800e622:	4651      	mov	r1, sl
 800e624:	4846      	ldr	r0, [pc, #280]	; (800e740 <Load_Gain+0x194>)
 800e626:	f004 fea3 	bl	8013370 <iprintf>
		if(j == 15)//全てnan0であれば
 800e62a:	f1ba 0f0f 	cmp.w	sl, #15
 800e62e:	d03a      	beq.n	800e6a6 <Load_Gain+0xfa>
//
//			Pid[L_WALL_PID].KP = data[6];
//			Pid[L_WALL_PID].KI = data[7];
//			Pid[L_WALL_PID].KD = data[8];
			//2回目以降こっちが呼ばれる
			PIDSetGain(L_VELO_PID, data[0], data[1], data[2]);
 800e630:	ed9d 1a02 	vldr	s2, [sp, #8]
 800e634:	eddd 0a01 	vldr	s1, [sp, #4]
 800e638:	ed9d 0a00 	vldr	s0, [sp]
 800e63c:	2004      	movs	r0, #4
 800e63e:	f000 fa1b 	bl	800ea78 <PIDSetGain>
			PIDSetGain(R_VELO_PID, data[0], data[1], data[2]);
 800e642:	ed9d 1a02 	vldr	s2, [sp, #8]
 800e646:	eddd 0a01 	vldr	s1, [sp, #4]
 800e64a:	ed9d 0a00 	vldr	s0, [sp]
 800e64e:	2005      	movs	r0, #5
 800e650:	f000 fa12 	bl	800ea78 <PIDSetGain>
			//PIDSetGain(R_VELO_PID, data[0], data[1], data[2]);
			//PIDSetGain(B_VELO, 1.1941, 33.5232, 0.0059922);
			//28.6379,340.0855,0.21289);//17.4394, 321.233, 0.12492);
			PIDSetGain(A_VELO_PID, data[3], data[4], data[5]);//28.6379,340.0855,0.21289);//17.4394, 321.233, 0.12492);
 800e654:	ed9d 1a05 	vldr	s2, [sp, #20]
 800e658:	eddd 0a04 	vldr	s1, [sp, #16]
 800e65c:	ed9d 0a03 	vldr	s0, [sp, #12]
 800e660:	2000      	movs	r0, #0
 800e662:	f000 fa09 	bl	800ea78 <PIDSetGain>
			//Iは積分=偏差を消す。ゲインが大きいと偏差が縮まるが、収束がはやくなるがオーバーシュートが起きる。
			//Dは微分= 振動を抑えられるぶん収束が遅くなる。
			//PIDSetGain(D_WALL_PID, data[0], data[1], data[2]);
			PIDSetGain(L_WALL_PID, data[6], data[7], data[8]);
 800e666:	ed9d 1a08 	vldr	s2, [sp, #32]
 800e66a:	eddd 0a07 	vldr	s1, [sp, #28]
 800e66e:	ed9d 0a06 	vldr	s0, [sp, #24]
 800e672:	2002      	movs	r0, #2
 800e674:	f000 fa00 	bl	800ea78 <PIDSetGain>
			PIDSetGain(R_WALL_PID, data[9], data[10], data[11]);
 800e678:	ed9d 1a0b 	vldr	s2, [sp, #44]	; 0x2c
 800e67c:	eddd 0a0a 	vldr	s1, [sp, #40]	; 0x28
 800e680:	ed9d 0a09 	vldr	s0, [sp, #36]	; 0x24
 800e684:	2003      	movs	r0, #3
 800e686:	f000 f9f7 	bl	800ea78 <PIDSetGain>
			PIDSetGain(D_WALL_PID, data[12], data[13], data[14]);
 800e68a:	ed9d 1a0e 	vldr	s2, [sp, #56]	; 0x38
 800e68e:	eddd 0a0d 	vldr	s1, [sp, #52]	; 0x34
 800e692:	ed9d 0a0c 	vldr	s0, [sp, #48]	; 0x30
 800e696:	2001      	movs	r0, #1
 800e698:	f000 f9ee 	bl	800ea78 <PIDSetGain>
			//PIDSetGain(R_WALL_PID, data[0], data[1], data[2]);
		}

}
 800e69c:	b010      	add	sp, #64	; 0x40
 800e69e:	ecbd 8b02 	vpop	{d8}
 800e6a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			printf("デフォルトゲインセット\r\n");
 800e6a6:	4827      	ldr	r0, [pc, #156]	; (800e744 <Load_Gain+0x198>)
 800e6a8:	f004 feea 	bl	8013480 <puts>
		  PIDSetGain(L_VELO_PID, 14.6, 2800,0.001);
 800e6ac:	ed9f 1a26 	vldr	s2, [pc, #152]	; 800e748 <Load_Gain+0x19c>
 800e6b0:	eddf 0a26 	vldr	s1, [pc, #152]	; 800e74c <Load_Gain+0x1a0>
 800e6b4:	ed9f 0a26 	vldr	s0, [pc, #152]	; 800e750 <Load_Gain+0x1a4>
 800e6b8:	2004      	movs	r0, #4
 800e6ba:	f000 f9dd 	bl	800ea78 <PIDSetGain>
		  PIDSetGain(R_VELO_PID, 14.6, 2800,0.001);
 800e6be:	ed9f 1a22 	vldr	s2, [pc, #136]	; 800e748 <Load_Gain+0x19c>
 800e6c2:	eddf 0a22 	vldr	s1, [pc, #136]	; 800e74c <Load_Gain+0x1a0>
 800e6c6:	ed9f 0a22 	vldr	s0, [pc, #136]	; 800e750 <Load_Gain+0x1a4>
 800e6ca:	2005      	movs	r0, #5
 800e6cc:	f000 f9d4 	bl	800ea78 <PIDSetGain>
		  PIDSetGain(A_VELO_PID, 14.6,0,0);//28.6379,340.0855,0.21289);//17.4394, 321.233, 0.12492);
 800e6d0:	ed9f 1a20 	vldr	s2, [pc, #128]	; 800e754 <Load_Gain+0x1a8>
 800e6d4:	ed9f 0a1e 	vldr	s0, [pc, #120]	; 800e750 <Load_Gain+0x1a4>
 800e6d8:	eef0 0a41 	vmov.f32	s1, s2
 800e6dc:	2000      	movs	r0, #0
 800e6de:	f000 f9cb 	bl	800ea78 <PIDSetGain>
		  PIDSetGain(F_WALL_PID, 14.6,0,0);
 800e6e2:	ed9f 1a1c 	vldr	s2, [pc, #112]	; 800e754 <Load_Gain+0x1a8>
 800e6e6:	ed9f 0a1a 	vldr	s0, [pc, #104]	; 800e750 <Load_Gain+0x1a4>
 800e6ea:	eef0 0a41 	vmov.f32	s1, s2
 800e6ee:	2008      	movs	r0, #8
 800e6f0:	f000 f9c2 	bl	800ea78 <PIDSetGain>
		  PIDSetGain(D_WALL_PID, 6, 4, 0	);//3.2,0,0);/4.5,1.5,0.003);//3.6, 20, 0);//5.2//速度制御
 800e6f4:	ed9f 1a17 	vldr	s2, [pc, #92]	; 800e754 <Load_Gain+0x1a8>
 800e6f8:	eef1 0a00 	vmov.f32	s1, #16	; 0x40800000  4.0
 800e6fc:	eeb1 0a08 	vmov.f32	s0, #24	; 0x40c00000  6.0
 800e700:	2001      	movs	r0, #1
 800e702:	f000 f9b9 	bl	800ea78 <PIDSetGain>
		  PIDSetGain(L_WALL_PID, 12,8,0);//6.4,0,0);//9,3,0.006);//1.8, 10, 0);
 800e706:	ed9f 1a13 	vldr	s2, [pc, #76]	; 800e754 <Load_Gain+0x1a8>
 800e70a:	eef2 0a00 	vmov.f32	s1, #32	; 0x41000000  8.0
 800e70e:	eeb2 0a08 	vmov.f32	s0, #40	; 0x41400000  12.0
 800e712:	2002      	movs	r0, #2
 800e714:	f000 f9b0 	bl	800ea78 <PIDSetGain>
		  PIDSetGain(R_WALL_PID, 12,8,0);//6.4,0,0);//9,3,0.006);//1.8, 10, 0);
 800e718:	ed9f 1a0e 	vldr	s2, [pc, #56]	; 800e754 <Load_Gain+0x1a8>
 800e71c:	eef2 0a00 	vmov.f32	s1, #32	; 0x41000000  8.0
 800e720:	eeb2 0a08 	vmov.f32	s0, #40	; 0x41400000  12.0
 800e724:	2003      	movs	r0, #3
 800e726:	f000 f9a7 	bl	800ea78 <PIDSetGain>
			Flash_clear_sector9();
 800e72a:	f7ff fbcd 	bl	800dec8 <Flash_clear_sector9>
			Copy_Gain();
 800e72e:	f7ff feff 	bl	800e530 <Copy_Gain>
}
 800e732:	b010      	add	sp, #64	; 0x40
 800e734:	ecbd 8b02 	vpop	{d8}
 800e738:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e73c:	08016ee8 	.word	0x08016ee8
 800e740:	08017038 	.word	0x08017038
 800e744:	08017040 	.word	0x08017040
 800e748:	3a83126f 	.word	0x3a83126f
 800e74c:	452f0000 	.word	0x452f0000
 800e750:	4169999a 	.word	0x4169999a
 800e754:	00000000 	.word	0x00000000
 800e758:	08017024 	.word	0x08017024
 800e75c:	08017030 	.word	0x08017030

0800e760 <Change_Gain>:
void Change_Gain()
{
 800e760:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	//他の処理や割り込みを停止

	HAL_TIM_Base_Stop_IT(&htim1);
 800e764:	48a4      	ldr	r0, [pc, #656]	; (800e9f8 <Change_Gain+0x298>)
 800e766:	4ca5      	ldr	r4, [pc, #660]	; (800e9fc <Change_Gain+0x29c>)
	char nl;

	while(1)
	{
		//float a = Pid[2].KP;
		printf("現在のPIDゲイン\r\n");
 800e768:	f8df 8304 	ldr.w	r8, [pc, #772]	; 800ea70 <Change_Gain+0x310>
		printf("[1] 車輪左右 : %f, %f, %f\r\n",Pid[L_VELO_PID].KP, Pid[L_VELO_PID].KI, Pid[L_VELO_PID].KD);
 800e76c:	4da4      	ldr	r5, [pc, #656]	; (800ea00 <Change_Gain+0x2a0>)
		printf("[2] 角度 : %f, %f, %f\r\n", Pid[A_VELO_PID].KP, Pid[A_VELO_PID].KI, Pid[A_VELO_PID].KD);	//角度の偏差から角速度を出力し、車輪左右の制御に渡す
 800e76e:	f8df 9304 	ldr.w	r9, [pc, #772]	; 800ea74 <Change_Gain+0x314>
{
 800e772:	b087      	sub	sp, #28
	HAL_TIM_Base_Stop_IT(&htim1);
 800e774:	f002 f92c 	bl	80109d0 <HAL_TIM_Base_Stop_IT>
	HAL_TIM_Base_Stop_IT(&htim8);
 800e778:	48a2      	ldr	r0, [pc, #648]	; (800ea04 <Change_Gain+0x2a4>)
 800e77a:	f002 f929 	bl	80109d0 <HAL_TIM_Base_Stop_IT>
	Motor_PWM_Stop();
 800e77e:	f7ff fdd3 	bl	800e328 <Motor_PWM_Stop>
	EmitterOFF();
 800e782:	f7ff fd51 	bl	800e228 <EmitterOFF>
	HAL_Delay(200);
 800e786:	20c8      	movs	r0, #200	; 0xc8
 800e788:	f000 fb3a 	bl	800ee00 <HAL_Delay>
	char change_mode='0';
 800e78c:	2330      	movs	r3, #48	; 0x30
 800e78e:	f88d 3015 	strb.w	r3, [sp, #21]
	char pid = '0';
 800e792:	f88d 3016 	strb.w	r3, [sp, #22]
		printf("現在のPIDゲイン\r\n");
 800e796:	4640      	mov	r0, r8
 800e798:	f004 fe72 	bl	8013480 <puts>
		printf("[1] 車輪左右 : %f, %f, %f\r\n",Pid[L_VELO_PID].KP, Pid[L_VELO_PID].KI, Pid[L_VELO_PID].KD);
 800e79c:	f8d4 00b0 	ldr.w	r0, [r4, #176]	; 0xb0
 800e7a0:	f7f9 fe0a 	bl	80083b8 <__aeabi_f2d>
 800e7a4:	4606      	mov	r6, r0
 800e7a6:	f8d4 00b8 	ldr.w	r0, [r4, #184]	; 0xb8
 800e7aa:	460f      	mov	r7, r1
 800e7ac:	f7f9 fe04 	bl	80083b8 <__aeabi_f2d>
 800e7b0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e7b4:	f8d4 00b4 	ldr.w	r0, [r4, #180]	; 0xb4
 800e7b8:	f7f9 fdfe 	bl	80083b8 <__aeabi_f2d>
 800e7bc:	4632      	mov	r2, r6
 800e7be:	463b      	mov	r3, r7
 800e7c0:	e9cd 0100 	strd	r0, r1, [sp]
 800e7c4:	4628      	mov	r0, r5
 800e7c6:	f004 fdd3 	bl	8013370 <iprintf>
		printf("[2] 角度 : %f, %f, %f\r\n", Pid[A_VELO_PID].KP, Pid[A_VELO_PID].KI, Pid[A_VELO_PID].KD);	//角度の偏差から角速度を出力し、車輪左右の制御に渡す
 800e7ca:	6820      	ldr	r0, [r4, #0]
 800e7cc:	f7f9 fdf4 	bl	80083b8 <__aeabi_f2d>
 800e7d0:	4606      	mov	r6, r0
 800e7d2:	68a0      	ldr	r0, [r4, #8]
 800e7d4:	460f      	mov	r7, r1
 800e7d6:	f7f9 fdef 	bl	80083b8 <__aeabi_f2d>
 800e7da:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e7de:	6860      	ldr	r0, [r4, #4]
 800e7e0:	f7f9 fdea 	bl	80083b8 <__aeabi_f2d>
 800e7e4:	4632      	mov	r2, r6
 800e7e6:	463b      	mov	r3, r7
 800e7e8:	e9cd 0100 	strd	r0, r1, [sp]
 800e7ec:	4648      	mov	r0, r9
 800e7ee:	f004 fdbf 	bl	8013370 <iprintf>
		printf("[3] 左壁 : %f, %f, %f\r\n", Pid[L_WALL_PID].KP, Pid[L_WALL_PID].KI, Pid[L_WALL_PID].KD);
 800e7f2:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e7f4:	f7f9 fde0 	bl	80083b8 <__aeabi_f2d>
 800e7f8:	4606      	mov	r6, r0
 800e7fa:	6e20      	ldr	r0, [r4, #96]	; 0x60
 800e7fc:	460f      	mov	r7, r1
 800e7fe:	f7f9 fddb 	bl	80083b8 <__aeabi_f2d>
 800e802:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e806:	6de0      	ldr	r0, [r4, #92]	; 0x5c
 800e808:	f7f9 fdd6 	bl	80083b8 <__aeabi_f2d>
 800e80c:	4632      	mov	r2, r6
 800e80e:	463b      	mov	r3, r7
 800e810:	e9cd 0100 	strd	r0, r1, [sp]
 800e814:	487c      	ldr	r0, [pc, #496]	; (800ea08 <Change_Gain+0x2a8>)
 800e816:	f004 fdab 	bl	8013370 <iprintf>
		printf("[4] 右壁 : %f, %f, %f\r\n", Pid[R_WALL_PID].KP, Pid[R_WALL_PID].KI, Pid[R_WALL_PID].KD);
 800e81a:	f8d4 0084 	ldr.w	r0, [r4, #132]	; 0x84
 800e81e:	f7f9 fdcb 	bl	80083b8 <__aeabi_f2d>
 800e822:	4606      	mov	r6, r0
 800e824:	f8d4 008c 	ldr.w	r0, [r4, #140]	; 0x8c
 800e828:	460f      	mov	r7, r1
 800e82a:	f7f9 fdc5 	bl	80083b8 <__aeabi_f2d>
 800e82e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e832:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
 800e836:	f7f9 fdbf 	bl	80083b8 <__aeabi_f2d>
 800e83a:	4632      	mov	r2, r6
 800e83c:	463b      	mov	r3, r7
 800e83e:	e9cd 0100 	strd	r0, r1, [sp]
 800e842:	4872      	ldr	r0, [pc, #456]	; (800ea0c <Change_Gain+0x2ac>)
 800e844:	f004 fd94 	bl	8013370 <iprintf>
		printf("[5] 両壁 : %f, %f, %f\r\n", Pid[D_WALL_PID].KP, Pid[D_WALL_PID].KI, Pid[D_WALL_PID].KD);
 800e848:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 800e84a:	f7f9 fdb5 	bl	80083b8 <__aeabi_f2d>
 800e84e:	4606      	mov	r6, r0
 800e850:	6b60      	ldr	r0, [r4, #52]	; 0x34
 800e852:	460f      	mov	r7, r1
 800e854:	f7f9 fdb0 	bl	80083b8 <__aeabi_f2d>
 800e858:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e85c:	6b20      	ldr	r0, [r4, #48]	; 0x30
 800e85e:	f7f9 fdab 	bl	80083b8 <__aeabi_f2d>
 800e862:	463b      	mov	r3, r7
 800e864:	e9cd 0100 	strd	r0, r1, [sp]
 800e868:	4632      	mov	r2, r6
 800e86a:	4869      	ldr	r0, [pc, #420]	; (800ea10 <Change_Gain+0x2b0>)
 800e86c:	f004 fd80 	bl	8013370 <iprintf>

		Buffering();
 800e870:	f7ff fe4e 	bl	800e510 <Buffering>
		printf("モード(0で終了) :"); scanf("%c",&change_mode);
 800e874:	4867      	ldr	r0, [pc, #412]	; (800ea14 <Change_Gain+0x2b4>)
 800e876:	f004 fd7b 	bl	8013370 <iprintf>
 800e87a:	f10d 0115 	add.w	r1, sp, #21
 800e87e:	4866      	ldr	r0, [pc, #408]	; (800ea18 <Change_Gain+0x2b8>)
 800e880:	f005 f80a 	bl	8013898 <iscanf>
		if(change_mode == '0')
 800e884:	f89d 3015 	ldrb.w	r3, [sp, #21]
 800e888:	2b30      	cmp	r3, #48	; 0x30
 800e88a:	d066      	beq.n	800e95a <Change_Gain+0x1fa>
			break;
		}
		else
		{

			Buffering();
 800e88c:	f7ff fe40 	bl	800e510 <Buffering>
			printf("\r\nP , I or D ? : "); scanf("%c",&pid);
 800e890:	4862      	ldr	r0, [pc, #392]	; (800ea1c <Change_Gain+0x2bc>)
 800e892:	f004 fd6d 	bl	8013370 <iprintf>
 800e896:	f10d 0116 	add.w	r1, sp, #22
 800e89a:	485f      	ldr	r0, [pc, #380]	; (800ea18 <Change_Gain+0x2b8>)
 800e89c:	f004 fffc 	bl	8013898 <iscanf>
			printf("\r\n%c、 %c を選択しました\r\n",change_mode,pid);
 800e8a0:	f89d 2016 	ldrb.w	r2, [sp, #22]
 800e8a4:	f89d 1015 	ldrb.w	r1, [sp, #21]
 800e8a8:	485d      	ldr	r0, [pc, #372]	; (800ea20 <Change_Gain+0x2c0>)
 800e8aa:	f004 fd61 	bl	8013370 <iprintf>

			Buffering();
 800e8ae:	f7ff fe2f 	bl	800e510 <Buffering>
			printf("\r\n値を入力 : ");
 800e8b2:	485c      	ldr	r0, [pc, #368]	; (800ea24 <Change_Gain+0x2c4>)
 800e8b4:	f004 fd5c 	bl	8013370 <iprintf>

			switch(change_mode)
 800e8b8:	f89d 3015 	ldrb.w	r3, [sp, #21]
 800e8bc:	3b31      	subs	r3, #49	; 0x31
 800e8be:	2b04      	cmp	r3, #4
 800e8c0:	d85e      	bhi.n	800e980 <Change_Gain+0x220>
 800e8c2:	e8df f003 	tbb	[pc, r3]
 800e8c6:	303d      	.short	0x303d
 800e8c8:	1623      	.short	0x1623
 800e8ca:	03          	.byte	0x03
 800e8cb:	00          	.byte	0x00
				{
					scanf("%f",&Pid[R_WALL_PID].KD);
				}
				break;
			case '5'://壁制御ゲイン
				if(pid == 'p')
 800e8cc:	f89d 3016 	ldrb.w	r3, [sp, #22]
 800e8d0:	2b70      	cmp	r3, #112	; 0x70
 800e8d2:	d068      	beq.n	800e9a6 <Change_Gain+0x246>
				{
					scanf("%f",&Pid[D_WALL_PID].KP);
				}
				else if(pid == 'i')
 800e8d4:	2b69      	cmp	r3, #105	; 0x69
 800e8d6:	d07f      	beq.n	800e9d8 <Change_Gain+0x278>
				{
					scanf("%f",&Pid[D_WALL_PID].KI);
				}
				else if(pid == 'd')
 800e8d8:	2b64      	cmp	r3, #100	; 0x64
 800e8da:	d055      	beq.n	800e988 <Change_Gain+0x228>
				break;
			default :
				printf("該当しません\r\n");
				break;
			}
			Buffering();
 800e8dc:	f7ff fe18 	bl	800e510 <Buffering>
			scanf("%c",&nl);
 800e8e0:	f10d 0117 	add.w	r1, sp, #23
 800e8e4:	484c      	ldr	r0, [pc, #304]	; (800ea18 <Change_Gain+0x2b8>)
 800e8e6:	f004 ffd7 	bl	8013898 <iscanf>
			printf("\r\n");
 800e8ea:	484f      	ldr	r0, [pc, #316]	; (800ea28 <Change_Gain+0x2c8>)
 800e8ec:	f004 fdc8 	bl	8013480 <puts>
		printf("現在のPIDゲイン\r\n");
 800e8f0:	e751      	b.n	800e796 <Change_Gain+0x36>
				if(pid == 'p')
 800e8f2:	f89d 3016 	ldrb.w	r3, [sp, #22]
 800e8f6:	2b70      	cmp	r3, #112	; 0x70
 800e8f8:	d05a      	beq.n	800e9b0 <Change_Gain+0x250>
				else if(pid == 'i')
 800e8fa:	2b69      	cmp	r3, #105	; 0x69
 800e8fc:	d071      	beq.n	800e9e2 <Change_Gain+0x282>
				else if(pid == 'd')
 800e8fe:	2b64      	cmp	r3, #100	; 0x64
 800e900:	d1ec      	bne.n	800e8dc <Change_Gain+0x17c>
					scanf("%f",&Pid[R_WALL_PID].KD);
 800e902:	494a      	ldr	r1, [pc, #296]	; (800ea2c <Change_Gain+0x2cc>)
 800e904:	484a      	ldr	r0, [pc, #296]	; (800ea30 <Change_Gain+0x2d0>)
 800e906:	f004 ffc7 	bl	8013898 <iscanf>
 800e90a:	e7e7      	b.n	800e8dc <Change_Gain+0x17c>
				if(pid == 'p')
 800e90c:	f89d 3016 	ldrb.w	r3, [sp, #22]
 800e910:	2b70      	cmp	r3, #112	; 0x70
 800e912:	d052      	beq.n	800e9ba <Change_Gain+0x25a>
				else if(pid == 'i')
 800e914:	2b69      	cmp	r3, #105	; 0x69
 800e916:	d069      	beq.n	800e9ec <Change_Gain+0x28c>
				else if(pid == 'd')
 800e918:	2b64      	cmp	r3, #100	; 0x64
 800e91a:	d1df      	bne.n	800e8dc <Change_Gain+0x17c>
					scanf("%f",&Pid[L_WALL_PID].KD);
 800e91c:	4945      	ldr	r1, [pc, #276]	; (800ea34 <Change_Gain+0x2d4>)
 800e91e:	4844      	ldr	r0, [pc, #272]	; (800ea30 <Change_Gain+0x2d0>)
 800e920:	f004 ffba 	bl	8013898 <iscanf>
 800e924:	e7da      	b.n	800e8dc <Change_Gain+0x17c>
				if(pid == 'p')
 800e926:	f89d 3016 	ldrb.w	r3, [sp, #22]
 800e92a:	2b70      	cmp	r3, #112	; 0x70
 800e92c:	d036      	beq.n	800e99c <Change_Gain+0x23c>
				else if(pid == 'i')
 800e92e:	2b69      	cmp	r3, #105	; 0x69
 800e930:	d04d      	beq.n	800e9ce <Change_Gain+0x26e>
				else if(pid == 'd')
 800e932:	2b64      	cmp	r3, #100	; 0x64
 800e934:	d1d2      	bne.n	800e8dc <Change_Gain+0x17c>
					scanf("%f",&Pid[A_VELO_PID].KD);
 800e936:	4940      	ldr	r1, [pc, #256]	; (800ea38 <Change_Gain+0x2d8>)
 800e938:	483d      	ldr	r0, [pc, #244]	; (800ea30 <Change_Gain+0x2d0>)
 800e93a:	f004 ffad 	bl	8013898 <iscanf>
 800e93e:	e7cd      	b.n	800e8dc <Change_Gain+0x17c>
				if(pid == 'p')
 800e940:	f89d 3016 	ldrb.w	r3, [sp, #22]
 800e944:	2b70      	cmp	r3, #112	; 0x70
 800e946:	d024      	beq.n	800e992 <Change_Gain+0x232>
				else if(pid == 'i')
 800e948:	2b69      	cmp	r3, #105	; 0x69
 800e94a:	d03b      	beq.n	800e9c4 <Change_Gain+0x264>
				else if(pid == 'd')
 800e94c:	2b64      	cmp	r3, #100	; 0x64
 800e94e:	d1c5      	bne.n	800e8dc <Change_Gain+0x17c>
					scanf("%f",&Pid[L_VELO_PID].KD);
 800e950:	493a      	ldr	r1, [pc, #232]	; (800ea3c <Change_Gain+0x2dc>)
 800e952:	4837      	ldr	r0, [pc, #220]	; (800ea30 <Change_Gain+0x2d0>)
 800e954:	f004 ffa0 	bl	8013898 <iscanf>
 800e958:	e7c0      	b.n	800e8dc <Change_Gain+0x17c>
		}

	}
	printf("\r\n完了\r\n");
 800e95a:	4839      	ldr	r0, [pc, #228]	; (800ea40 <Change_Gain+0x2e0>)
 800e95c:	f004 fd90 	bl	8013480 <puts>

	//値の変更は終了

	//ROMに保存したい
	//work_ram[5120] 以降から使える。(これより前はマップデータ等)切りのいい5200から使おう
	Flash_clear_sector9();
 800e960:	f7ff fab2 	bl	800dec8 <Flash_clear_sector9>
	//printf("\r\nどや\r\n");
	Copy_Gain();
 800e964:	f7ff fde4 	bl	800e530 <Copy_Gain>
	//printf("\r\nいいね\r\n");

	ChangeLED(7);
 800e968:	2007      	movs	r0, #7
 800e96a:	f7ff fc6b 	bl	800e244 <ChangeLED>
	HAL_Delay(200);
 800e96e:	20c8      	movs	r0, #200	; 0xc8
 800e970:	f000 fa46 	bl	800ee00 <HAL_Delay>
	ChangeLED(0);
 800e974:	2000      	movs	r0, #0
 800e976:	f7ff fc65 	bl	800e244 <ChangeLED>
	HAL_TIM_Base_Start_IT(&htim8);
	Motor_PWM_Start();
	Emitter_ON();
	ADC_Start();
#endif
}
 800e97a:	b007      	add	sp, #28
 800e97c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
				printf("該当しません\r\n");
 800e980:	4830      	ldr	r0, [pc, #192]	; (800ea44 <Change_Gain+0x2e4>)
 800e982:	f004 fd7d 	bl	8013480 <puts>
				break;
 800e986:	e7a9      	b.n	800e8dc <Change_Gain+0x17c>
					scanf("%f",&Pid[D_WALL_PID].KD);
 800e988:	492f      	ldr	r1, [pc, #188]	; (800ea48 <Change_Gain+0x2e8>)
 800e98a:	4829      	ldr	r0, [pc, #164]	; (800ea30 <Change_Gain+0x2d0>)
 800e98c:	f004 ff84 	bl	8013898 <iscanf>
 800e990:	e7a4      	b.n	800e8dc <Change_Gain+0x17c>
					scanf("%f",&Pid[L_VELO_PID].KP);
 800e992:	492e      	ldr	r1, [pc, #184]	; (800ea4c <Change_Gain+0x2ec>)
 800e994:	4826      	ldr	r0, [pc, #152]	; (800ea30 <Change_Gain+0x2d0>)
 800e996:	f004 ff7f 	bl	8013898 <iscanf>
 800e99a:	e79f      	b.n	800e8dc <Change_Gain+0x17c>
					scanf("%f",&Pid[A_VELO_PID].KP);
 800e99c:	4917      	ldr	r1, [pc, #92]	; (800e9fc <Change_Gain+0x29c>)
 800e99e:	4824      	ldr	r0, [pc, #144]	; (800ea30 <Change_Gain+0x2d0>)
 800e9a0:	f004 ff7a 	bl	8013898 <iscanf>
 800e9a4:	e79a      	b.n	800e8dc <Change_Gain+0x17c>
					scanf("%f",&Pid[D_WALL_PID].KP);
 800e9a6:	492a      	ldr	r1, [pc, #168]	; (800ea50 <Change_Gain+0x2f0>)
 800e9a8:	4821      	ldr	r0, [pc, #132]	; (800ea30 <Change_Gain+0x2d0>)
 800e9aa:	f004 ff75 	bl	8013898 <iscanf>
 800e9ae:	e795      	b.n	800e8dc <Change_Gain+0x17c>
					scanf("%f",&Pid[R_WALL_PID].KP);
 800e9b0:	4928      	ldr	r1, [pc, #160]	; (800ea54 <Change_Gain+0x2f4>)
 800e9b2:	481f      	ldr	r0, [pc, #124]	; (800ea30 <Change_Gain+0x2d0>)
 800e9b4:	f004 ff70 	bl	8013898 <iscanf>
 800e9b8:	e790      	b.n	800e8dc <Change_Gain+0x17c>
					scanf("%f",&Pid[L_WALL_PID].KP);
 800e9ba:	4927      	ldr	r1, [pc, #156]	; (800ea58 <Change_Gain+0x2f8>)
 800e9bc:	481c      	ldr	r0, [pc, #112]	; (800ea30 <Change_Gain+0x2d0>)
 800e9be:	f004 ff6b 	bl	8013898 <iscanf>
 800e9c2:	e78b      	b.n	800e8dc <Change_Gain+0x17c>
					scanf("%f",&Pid[L_VELO_PID].KI);
 800e9c4:	4925      	ldr	r1, [pc, #148]	; (800ea5c <Change_Gain+0x2fc>)
 800e9c6:	481a      	ldr	r0, [pc, #104]	; (800ea30 <Change_Gain+0x2d0>)
 800e9c8:	f004 ff66 	bl	8013898 <iscanf>
 800e9cc:	e786      	b.n	800e8dc <Change_Gain+0x17c>
					scanf("%f",&Pid[A_VELO_PID].KI);
 800e9ce:	4924      	ldr	r1, [pc, #144]	; (800ea60 <Change_Gain+0x300>)
 800e9d0:	4817      	ldr	r0, [pc, #92]	; (800ea30 <Change_Gain+0x2d0>)
 800e9d2:	f004 ff61 	bl	8013898 <iscanf>
 800e9d6:	e781      	b.n	800e8dc <Change_Gain+0x17c>
					scanf("%f",&Pid[D_WALL_PID].KI);
 800e9d8:	4922      	ldr	r1, [pc, #136]	; (800ea64 <Change_Gain+0x304>)
 800e9da:	4815      	ldr	r0, [pc, #84]	; (800ea30 <Change_Gain+0x2d0>)
 800e9dc:	f004 ff5c 	bl	8013898 <iscanf>
 800e9e0:	e77c      	b.n	800e8dc <Change_Gain+0x17c>
					scanf("%f",&Pid[R_WALL_PID].KI);
 800e9e2:	4921      	ldr	r1, [pc, #132]	; (800ea68 <Change_Gain+0x308>)
 800e9e4:	4812      	ldr	r0, [pc, #72]	; (800ea30 <Change_Gain+0x2d0>)
 800e9e6:	f004 ff57 	bl	8013898 <iscanf>
 800e9ea:	e777      	b.n	800e8dc <Change_Gain+0x17c>
					scanf("%f",&Pid[L_WALL_PID].KI);
 800e9ec:	491f      	ldr	r1, [pc, #124]	; (800ea6c <Change_Gain+0x30c>)
 800e9ee:	4810      	ldr	r0, [pc, #64]	; (800ea30 <Change_Gain+0x2d0>)
 800e9f0:	f004 ff52 	bl	8013898 <iscanf>
 800e9f4:	e772      	b.n	800e8dc <Change_Gain+0x17c>
 800e9f6:	bf00      	nop
 800e9f8:	20001f6c 	.word	0x20001f6c
 800e9fc:	20001318 	.word	0x20001318
 800ea00:	08016f08 	.word	0x08016f08
 800ea04:	20001d24 	.word	0x20001d24
 800ea08:	08016f44 	.word	0x08016f44
 800ea0c:	08016f60 	.word	0x08016f60
 800ea10:	08016f7c 	.word	0x08016f7c
 800ea14:	08016f98 	.word	0x08016f98
 800ea18:	08016fb0 	.word	0x08016fb0
 800ea1c:	08016fb4 	.word	0x08016fb4
 800ea20:	08016fc8 	.word	0x08016fc8
 800ea24:	08016fec 	.word	0x08016fec
 800ea28:	08017020 	.word	0x08017020
 800ea2c:	200013a4 	.word	0x200013a4
 800ea30:	08017000 	.word	0x08017000
 800ea34:	20001378 	.word	0x20001378
 800ea38:	20001320 	.word	0x20001320
 800ea3c:	200013d0 	.word	0x200013d0
 800ea40:	08017018 	.word	0x08017018
 800ea44:	08017004 	.word	0x08017004
 800ea48:	2000134c 	.word	0x2000134c
 800ea4c:	200013c8 	.word	0x200013c8
 800ea50:	20001344 	.word	0x20001344
 800ea54:	2000139c 	.word	0x2000139c
 800ea58:	20001370 	.word	0x20001370
 800ea5c:	200013cc 	.word	0x200013cc
 800ea60:	2000131c 	.word	0x2000131c
 800ea64:	20001348 	.word	0x20001348
 800ea68:	200013a0 	.word	0x200013a0
 800ea6c:	20001374 	.word	0x20001374
 800ea70:	08016ef0 	.word	0x08016ef0
 800ea74:	08016f28 	.word	0x08016f28

0800ea78 <PIDSetGain>:

const float pid_T = 0.001f;
const float pid_DT = 1.0f/0.001f;
void PIDSetGain(int n, float kp, float ki, float kd)	//同じデータ構造体をシステム同定で使いそう。パラメータ調整とか
{
	Pid[n].KP = kp;
 800ea78:	4a05      	ldr	r2, [pc, #20]	; (800ea90 <PIDSetGain+0x18>)
 800ea7a:	232c      	movs	r3, #44	; 0x2c
 800ea7c:	fb03 2000 	mla	r0, r3, r0, r2
 800ea80:	ed80 0a00 	vstr	s0, [r0]
	Pid[n].KI = ki;
 800ea84:	edc0 0a01 	vstr	s1, [r0, #4]
	Pid[n].KD = kd;
 800ea88:	ed80 1a02 	vstr	s2, [r0, #8]

}
 800ea8c:	4770      	bx	lr
 800ea8e:	bf00      	nop
 800ea90:	20001318 	.word	0x20001318

0800ea94 <PIDChangeFlag>:

void PIDChangeFlag(int n, int on_or_off)
{
	Pid[n].flag = on_or_off;
 800ea94:	4a02      	ldr	r2, [pc, #8]	; (800eaa0 <PIDChangeFlag+0xc>)
 800ea96:	232c      	movs	r3, #44	; 0x2c
 800ea98:	fb03 2000 	mla	r0, r3, r0, r2
 800ea9c:	6281      	str	r1, [r0, #40]	; 0x28
}
 800ea9e:	4770      	bx	lr
 800eaa0:	20001318 	.word	0x20001318

0800eaa4 <PIDReset>:
	return Pid[n].flag;
}
void PIDReset(int n)
{
	//速度に限らずやればよいのでは
	Pid[n].e = 0;
 800eaa4:	4905      	ldr	r1, [pc, #20]	; (800eabc <PIDReset+0x18>)
 800eaa6:	232c      	movs	r3, #44	; 0x2c
 800eaa8:	fb03 1000 	mla	r0, r3, r0, r1
 800eaac:	2200      	movs	r2, #0
	Pid[n].ei = 0;
	Pid[n].ed = 0;
	Pid[n].elast = 0;
	Pid[n].out = 0;
 800eaae:	2300      	movs	r3, #0
 800eab0:	6243      	str	r3, [r0, #36]	; 0x24
	Pid[n].e = 0;
 800eab2:	60c2      	str	r2, [r0, #12]
	Pid[n].ei = 0;
 800eab4:	6102      	str	r2, [r0, #16]
	Pid[n].ed = 0;
 800eab6:	6142      	str	r2, [r0, #20]
	Pid[n].elast = 0;
 800eab8:	6182      	str	r2, [r0, #24]
}
 800eaba:	4770      	bx	lr
 800eabc:	20001318 	.word	0x20001318

0800eac0 <PIDControl>:
inline int PIDControl(int n, float target, float current)
{
	//PIDInput( n, target, current);
	//PIDCalculate( n, T );
	//出力の前に全部0にする処理をフラグで
	if(Pid[n].flag == 0)
 800eac0:	4b21      	ldr	r3, [pc, #132]	; (800eb48 <PIDControl+0x88>)
{
 800eac2:	b510      	push	{r4, lr}
	if(Pid[n].flag == 0)
 800eac4:	242c      	movs	r4, #44	; 0x2c
 800eac6:	fb04 3400 	mla	r4, r4, r0, r3
 800eaca:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 800eacc:	b3a8      	cbz	r0, 800eb3a <PIDControl+0x7a>
	else
	{
		Pid[n].target = target;
		Pid[n].current = current;

		Pid[n].e = Pid[n].target - Pid[n].current;
 800eace:	ee70 6a60 	vsub.f32	s13, s0, s1
		Pid[n].ei += Pid[n].e * pid_T;
 800ead2:	ed9f 4a1e 	vldr	s8, [pc, #120]	; 800eb4c <PIDControl+0x8c>
 800ead6:	ed94 6a04 	vldr	s12, [r4, #16]
		Pid[n].ed = ( Pid[n].e - Pid[n].elast ) * pid_DT;
		Pid[n].elast = Pid[n].e;
		Pid[n].out = round(Pid[n].KP*Pid[n].e + Pid[n].KI*Pid[n].ei + Pid[n].KD*Pid[n].ed);
 800eada:	ed94 7a01 	vldr	s14, [r4, #4]
 800eade:	ed94 5a00 	vldr	s10, [r4]
		Pid[n].ed = ( Pid[n].e - Pid[n].elast ) * pid_DT;
 800eae2:	edd4 7a06 	vldr	s15, [r4, #24]
 800eae6:	eddf 4a1a 	vldr	s9, [pc, #104]	; 800eb50 <PIDControl+0x90>
		Pid[n].out = round(Pid[n].KP*Pid[n].e + Pid[n].KI*Pid[n].ei + Pid[n].KD*Pid[n].ed);
 800eaea:	edd4 5a02 	vldr	s11, [r4, #8]
		Pid[n].e = Pid[n].target - Pid[n].current;
 800eaee:	edc4 6a03 	vstr	s13, [r4, #12]
		Pid[n].ei += Pid[n].e * pid_T;
 800eaf2:	eea6 6a84 	vfma.f32	s12, s13, s8
		Pid[n].ed = ( Pid[n].e - Pid[n].elast ) * pid_DT;
 800eaf6:	ee76 7ae7 	vsub.f32	s15, s13, s15
		Pid[n].out = round(Pid[n].KP*Pid[n].e + Pid[n].KI*Pid[n].ei + Pid[n].KD*Pid[n].ed);
 800eafa:	ee26 7a07 	vmul.f32	s14, s12, s14
		Pid[n].ed = ( Pid[n].e - Pid[n].elast ) * pid_DT;
 800eafe:	ee67 7aa4 	vmul.f32	s15, s15, s9
		Pid[n].out = round(Pid[n].KP*Pid[n].e + Pid[n].KI*Pid[n].ei + Pid[n].KD*Pid[n].ed);
 800eb02:	eea6 7a85 	vfma.f32	s14, s13, s10
		Pid[n].ei += Pid[n].e * pid_T;
 800eb06:	ed84 6a04 	vstr	s12, [r4, #16]
		Pid[n].out = round(Pid[n].KP*Pid[n].e + Pid[n].KI*Pid[n].ei + Pid[n].KD*Pid[n].ed);
 800eb0a:	eea7 7aa5 	vfma.f32	s14, s15, s11
		Pid[n].elast = Pid[n].e;
 800eb0e:	edc4 6a06 	vstr	s13, [r4, #24]
		Pid[n].ed = ( Pid[n].e - Pid[n].elast ) * pid_DT;
 800eb12:	edc4 7a05 	vstr	s15, [r4, #20]
		Pid[n].out = round(Pid[n].KP*Pid[n].e + Pid[n].KI*Pid[n].ei + Pid[n].KD*Pid[n].ed);
 800eb16:	ee17 0a10 	vmov	r0, s14
		Pid[n].target = target;
 800eb1a:	ed84 0a08 	vstr	s0, [r4, #32]
		Pid[n].current = current;
 800eb1e:	edc4 0a07 	vstr	s1, [r4, #28]
		Pid[n].out = round(Pid[n].KP*Pid[n].e + Pid[n].KI*Pid[n].ei + Pid[n].KD*Pid[n].ed);
 800eb22:	f7f9 fc49 	bl	80083b8 <__aeabi_f2d>
 800eb26:	ec41 0b10 	vmov	d0, r0, r1
 800eb2a:	f002 fe97 	bl	801185c <round>
 800eb2e:	ec51 0b10 	vmov	r0, r1, d0
 800eb32:	f7f9 ff49 	bl	80089c8 <__aeabi_d2iz>
 800eb36:	6260      	str	r0, [r4, #36]	; 0x24
		return Pid[n].out;
	}
}
 800eb38:	bd10      	pop	{r4, pc}
		Pid[n].e = 0.0f;
 800eb3a:	2300      	movs	r3, #0
		Pid[n].out = 0;
 800eb3c:	6260      	str	r0, [r4, #36]	; 0x24
		Pid[n].e = 0.0f;
 800eb3e:	60e3      	str	r3, [r4, #12]
		Pid[n].ei = 0.0f;
 800eb40:	6123      	str	r3, [r4, #16]
		Pid[n].ed = 0.0f;
 800eb42:	6163      	str	r3, [r4, #20]
		Pid[n].elast = 0.0f;
 800eb44:	61a3      	str	r3, [r4, #24]
}
 800eb46:	bd10      	pop	{r4, pc}
 800eb48:	20001318 	.word	0x20001318
 800eb4c:	3a83126f 	.word	0x3a83126f
 800eb50:	4479ffff 	.word	0x4479ffff

0800eb54 <HAL_GPIO_EXTI_Callback>:
#include <stdio.h>
#include <math.h>
//中間モジュール。
int gpio_callback_count=0;
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
	if(GPIO_Pin == GPIO_PIN_12)
 800eb54:	f5b0 5f80 	cmp.w	r0, #4096	; 0x1000
 800eb58:	d106      	bne.n	800eb68 <HAL_GPIO_EXTI_Callback+0x14>
	{
	  gpio_callback_count++;
 800eb5a:	4a04      	ldr	r2, [pc, #16]	; (800eb6c <HAL_GPIO_EXTI_Callback+0x18>)
 800eb5c:	6813      	ldr	r3, [r2, #0]
 800eb5e:	3301      	adds	r3, #1
	  //ChangeLED(gpio_callback_count);

	  if(gpio_callback_count > 1) gpio_callback_count=0;
 800eb60:	2b01      	cmp	r3, #1
 800eb62:	bfc8      	it	gt
 800eb64:	2300      	movgt	r3, #0
 800eb66:	6013      	str	r3, [r2, #0]
	}
}
 800eb68:	4770      	bx	lr
 800eb6a:	bf00      	nop
 800eb6c:	200014fc 	.word	0x200014fc

0800eb70 <Signal>:
//エンコーダはモード選択時には直で取得しちゃってよいので引数にしない。while中で取得。
//float Photo[4];

//led_driver
void Signal(int8_t mode)
{
 800eb70:	b538      	push	{r3, r4, r5, lr}
 800eb72:	4605      	mov	r5, r0
 800eb74:	2405      	movs	r4, #5
	for(int i=0; i < 5; i++)
	{
		ChangeLED(mode);
 800eb76:	4628      	mov	r0, r5
 800eb78:	f7ff fb64 	bl	800e244 <ChangeLED>
		HAL_Delay(100);
 800eb7c:	2064      	movs	r0, #100	; 0x64
 800eb7e:	f000 f93f 	bl	800ee00 <HAL_Delay>
		ChangeLED(0);
 800eb82:	2000      	movs	r0, #0
 800eb84:	f7ff fb5e 	bl	800e244 <ChangeLED>
		HAL_Delay(100);
 800eb88:	2064      	movs	r0, #100	; 0x64
 800eb8a:	f000 f939 	bl	800ee00 <HAL_Delay>
	for(int i=0; i < 5; i++)
 800eb8e:	3c01      	subs	r4, #1
 800eb90:	d1f1      	bne.n	800eb76 <Signal+0x6>
	}
}
 800eb92:	bd38      	pop	{r3, r4, r5, pc}

0800eb94 <BatteryCheck>:

//battery_adc
void BatteryCheck(int adc_data)
{
 800eb94:	b510      	push	{r4, lr}

	//このあたりのハードウェア情報を一括で書いてしまう。
	float battery_voltage;//adc1[2] グローバルな値はどこか一か所で呼び出す
	battery_voltage = ADCToBatteryVoltage( adc_data, V_SPLIT_NUM, PIN_V_MAX ,ADC_RESOLUTION );
 800eb96:	ed9f 1a12 	vldr	s2, [pc, #72]	; 800ebe0 <BatteryCheck+0x4c>
 800eb9a:	eddf 0a12 	vldr	s1, [pc, #72]	; 800ebe4 <BatteryCheck+0x50>
{
 800eb9e:	ed2d 8b02 	vpush	{d8}
	battery_voltage = ADCToBatteryVoltage( adc_data, V_SPLIT_NUM, PIN_V_MAX ,ADC_RESOLUTION );
 800eba2:	eeb0 0a08 	vmov.f32	s0, #8	; 0x40400000  3.0
 800eba6:	f7ff fc71 	bl	800e48c <ADCToBatteryVoltage>

	int led_pattern_num = IntegerPower(2, LED_NUM); //led
 800ebaa:	2103      	movs	r1, #3
	battery_voltage = ADCToBatteryVoltage( adc_data, V_SPLIT_NUM, PIN_V_MAX ,ADC_RESOLUTION );
 800ebac:	eeb0 8a40 	vmov.f32	s16, s0
	int led_pattern_num = IntegerPower(2, LED_NUM); //led
 800ebb0:	2002      	movs	r0, #2
 800ebb2:	f7ff fc77 	bl	800e4a4 <IntegerPower>

	int battery_level = GetBatteryLevel( battery_voltage, BATTERY_MIN, BATTERY_MAX, led_pattern_num);
 800ebb6:	eeb0 0a48 	vmov.f32	s0, s16
 800ebba:	ed9f 1a0b 	vldr	s2, [pc, #44]	; 800ebe8 <BatteryCheck+0x54>
 800ebbe:	eddf 0a0b 	vldr	s1, [pc, #44]	; 800ebec <BatteryCheck+0x58>
 800ebc2:	f7ff fc7d 	bl	800e4c0 <GetBatteryLevel>
 800ebc6:	4604      	mov	r4, r0

	printf("%d\r\n", battery_level);
 800ebc8:	4601      	mov	r1, r0
 800ebca:	4809      	ldr	r0, [pc, #36]	; (800ebf0 <BatteryCheck+0x5c>)
 800ebcc:	f004 fbd0 	bl	8013370 <iprintf>
	Signal( battery_level );
}
 800ebd0:	ecbd 8b02 	vpop	{d8}
	Signal( battery_level );
 800ebd4:	b260      	sxtb	r0, r4
}
 800ebd6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	Signal( battery_level );
 800ebda:	f7ff bfc9 	b.w	800eb70 <Signal>
 800ebde:	bf00      	nop
 800ebe0:	45800000 	.word	0x45800000
 800ebe4:	40533333 	.word	0x40533333
 800ebe8:	41066666 	.word	0x41066666
 800ebec:	40e66666 	.word	0x40e66666
 800ebf0:	08017038 	.word	0x08017038

0800ebf4 <PhotoSwitch>:

//ここ書いたら大事な処理を書き始められる
//enc, emitter,receiver
//壁センサのデータをどうやってもってくるか。構造体にしておいてアローでアクセスするか、別の処理を考えるか。スイッチを使うか。中でフラグ作るか、それならそのままセンサの値を突っ込んだ方がいい。
void PhotoSwitch()
{
 800ebf4:	b538      	push	{r3, r4, r5, lr}
	HAL_ADC_Start_DMA(&hadc2, (uint32_t *) adc2, 2);
 800ebf6:	4c10      	ldr	r4, [pc, #64]	; (800ec38 <PhotoSwitch+0x44>)
 800ebf8:	4810      	ldr	r0, [pc, #64]	; (800ec3c <PhotoSwitch+0x48>)
 800ebfa:	4621      	mov	r1, r4
 800ebfc:	2202      	movs	r2, #2
 800ebfe:	f000 f9c3 	bl	800ef88 <HAL_ADC_Start_DMA>
	//tim8のduty比を下げて電流消費を削減
	HAL_TIMEx_OCN_Start_IT(&htim8, TIM_CHANNEL_1);
 800ec02:	2100      	movs	r1, #0
 800ec04:	480e      	ldr	r0, [pc, #56]	; (800ec40 <PhotoSwitch+0x4c>)
 800ec06:	f002 fb9d 	bl	8011344 <HAL_TIMEx_OCN_Start_IT>

	while(adc2[1] < 200)
 800ec0a:	6861      	ldr	r1, [r4, #4]
 800ec0c:	29c7      	cmp	r1, #199	; 0xc7
 800ec0e:	d806      	bhi.n	800ec1e <PhotoSwitch+0x2a>
	{
		printf("adc2[1] : %lu\r\n", adc2[1]);
 800ec10:	4d0c      	ldr	r5, [pc, #48]	; (800ec44 <PhotoSwitch+0x50>)
 800ec12:	4628      	mov	r0, r5
 800ec14:	f004 fbac 	bl	8013370 <iprintf>
	while(adc2[1] < 200)
 800ec18:	6861      	ldr	r1, [r4, #4]
 800ec1a:	29c7      	cmp	r1, #199	; 0xc7
 800ec1c:	d9f9      	bls.n	800ec12 <PhotoSwitch+0x1e>

	}
	HAL_ADC_Stop_DMA(&hadc2);
 800ec1e:	4807      	ldr	r0, [pc, #28]	; (800ec3c <PhotoSwitch+0x48>)
 800ec20:	f000 fa54 	bl	800f0cc <HAL_ADC_Stop_DMA>
	HAL_TIMEx_OCN_Stop_IT(&htim8, TIM_CHANNEL_1);
 800ec24:	2100      	movs	r1, #0
 800ec26:	4806      	ldr	r0, [pc, #24]	; (800ec40 <PhotoSwitch+0x4c>)
 800ec28:	f002 fbc0 	bl	80113ac <HAL_TIMEx_OCN_Stop_IT>
	Signal( 7 );
 800ec2c:	2007      	movs	r0, #7
}
 800ec2e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	Signal( 7 );
 800ec32:	f7ff bf9d 	b.w	800eb70 <Signal>
 800ec36:	bf00      	nop
 800ec38:	200012c0 	.word	0x200012c0
 800ec3c:	20001da4 	.word	0x20001da4
 800ec40:	20001d24 	.word	0x20001d24
 800ec44:	08017064 	.word	0x08017064

0800ec48 <ModeSelect>:

void ModeSelect(int8_t min, int8_t max, int8_t *pMode)
{
 800ec48:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ec4c:	4606      	mov	r6, r0
 800ec4e:	ed2d 8b04 	vpush	{d8-d9}
 800ec52:	460f      	mov	r7, r1
	//メインフローで呼び出す
	//0-7番で設定
	//起動時に呼ぶ

	//エンコーダ開始。初期値セット込み
	HAL_TIM_Encoder_Start(&htim3,TIM_CHANNEL_1);
 800ec54:	4828      	ldr	r0, [pc, #160]	; (800ecf8 <ModeSelect+0xb0>)
	*pMode=min;

	//壁センサデータをどうもってくるか。adcの生値を入れ、均して使う。関数呼び出し時の値

	TIM3->CNT = INITIAL_PULSE;
	gpio_callback_count = 0;
 800ec56:	4c29      	ldr	r4, [pc, #164]	; (800ecfc <ModeSelect+0xb4>)
	{
		//printf("Photo[FR] : %f, ENC3 : %d\r\n", Photo[FR], ENC3_LEFT);
		//センサデータを一個取得して戻り値で返す関数を使う。
		  ENC3_LEFT = TIM3 -> CNT;	//このアローがすでにグローバル的な値なので、センサデータもグローバルでいい。

		  if(INITIAL_PULSE + (ENCODER_PULSE * REDUCATION_RATIO) /4 <= ENC3_LEFT )
 800ec58:	ed9f 9a29 	vldr	s18, [pc, #164]	; 800ed00 <ModeSelect+0xb8>
		  	  }
		  	  ChangeLED(*pMode);
		  	  TIM3->CNT = INITIAL_PULSE;

		  }
		  if(INITIAL_PULSE - (ENCODER_PULSE * REDUCATION_RATIO) /4 >= ENC3_LEFT)
 800ec5c:	eddf 8a29 	vldr	s17, [pc, #164]	; 800ed04 <ModeSelect+0xbc>
	HAL_TIM_Encoder_Start(&htim3,TIM_CHANNEL_1);
 800ec60:	2100      	movs	r1, #0
{
 800ec62:	4690      	mov	r8, r2
	HAL_TIM_Encoder_Start(&htim3,TIM_CHANNEL_1);
 800ec64:	f001 ffd2 	bl	8010c0c <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&htim3,TIM_CHANNEL_2);
 800ec68:	2104      	movs	r1, #4
 800ec6a:	4823      	ldr	r0, [pc, #140]	; (800ecf8 <ModeSelect+0xb0>)
 800ec6c:	f001 ffce 	bl	8010c0c <HAL_TIM_Encoder_Start>
	TIM3->CNT = INITIAL_PULSE;
 800ec70:	4a25      	ldr	r2, [pc, #148]	; (800ed08 <ModeSelect+0xc0>)
	*pMode=min;
 800ec72:	f888 6000 	strb.w	r6, [r8]
	TIM3->CNT = INITIAL_PULSE;
 800ec76:	f247 552f 	movw	r5, #29999	; 0x752f
	gpio_callback_count = 0;
 800ec7a:	2300      	movs	r3, #0
	TIM3->CNT = INITIAL_PULSE;
 800ec7c:	6255      	str	r5, [r2, #36]	; 0x24
		  ENC3_LEFT = TIM3 -> CNT;	//このアローがすでにグローバル的な値なので、センサデータもグローバルでいい。
 800ec7e:	4691      	mov	r9, r2
	gpio_callback_count = 0;
 800ec80:	6023      	str	r3, [r4, #0]
	while(gpio_callback_count == 0/**/) //前向きの
 800ec82:	b9eb      	cbnz	r3, 800ecc0 <ModeSelect+0x78>
		  ENC3_LEFT = TIM3 -> CNT;	//このアローがすでにグローバル的な値なので、センサデータもグローバルでいい。
 800ec84:	ed99 8a09 	vldr	s16, [r9, #36]	; 0x24
		  if(INITIAL_PULSE + (ENCODER_PULSE * REDUCATION_RATIO) /4 <= ENC3_LEFT )
 800ec88:	eeb8 8ac8 	vcvt.f32.s32	s16, s16
 800ec8c:	eeb4 8ac9 	vcmpe.f32	s16, s18
 800ec90:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ec94:	db0c      	blt.n	800ecb0 <ModeSelect+0x68>
		  	  *pMode += 1;
 800ec96:	f898 0000 	ldrb.w	r0, [r8]
 800ec9a:	3001      	adds	r0, #1
 800ec9c:	b240      	sxtb	r0, r0
		  		  *pMode = min;
 800ec9e:	42b8      	cmp	r0, r7
 800eca0:	bfc8      	it	gt
 800eca2:	4630      	movgt	r0, r6
 800eca4:	f888 0000 	strb.w	r0, [r8]
		  	  ChangeLED(*pMode);
 800eca8:	f7ff facc 	bl	800e244 <ChangeLED>
		  	  TIM3->CNT = INITIAL_PULSE;
 800ecac:	f8c9 5024 	str.w	r5, [r9, #36]	; 0x24
		  if(INITIAL_PULSE - (ENCODER_PULSE * REDUCATION_RATIO) /4 >= ENC3_LEFT)
 800ecb0:	eeb4 8ae8 	vcmpe.f32	s16, s17
 800ecb4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ecb8:	d910      	bls.n	800ecdc <ModeSelect+0x94>
 800ecba:	6823      	ldr	r3, [r4, #0]
	while(gpio_callback_count == 0/**/) //前向きの
 800ecbc:	2b00      	cmp	r3, #0
 800ecbe:	d0e1      	beq.n	800ec84 <ModeSelect+0x3c>
		  	  }
		  	  ChangeLED(*pMode);
		  	  TIM3->CNT = INITIAL_PULSE;
		  }
	}
	gpio_callback_count = 0;
 800ecc0:	2300      	movs	r3, #0
	HAL_TIM_Encoder_Stop(&htim3,TIM_CHANNEL_1);
 800ecc2:	4619      	mov	r1, r3
 800ecc4:	480c      	ldr	r0, [pc, #48]	; (800ecf8 <ModeSelect+0xb0>)
	gpio_callback_count = 0;
 800ecc6:	6023      	str	r3, [r4, #0]
	HAL_TIM_Encoder_Stop(&htim3,TIM_CHANNEL_1);
 800ecc8:	f001 ffc4 	bl	8010c54 <HAL_TIM_Encoder_Stop>
	HAL_TIM_Encoder_Stop(&htim3,TIM_CHANNEL_2);
}
 800eccc:	ecbd 8b04 	vpop	{d8-d9}
	HAL_TIM_Encoder_Stop(&htim3,TIM_CHANNEL_2);
 800ecd0:	2104      	movs	r1, #4
 800ecd2:	4809      	ldr	r0, [pc, #36]	; (800ecf8 <ModeSelect+0xb0>)
}
 800ecd4:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	HAL_TIM_Encoder_Stop(&htim3,TIM_CHANNEL_2);
 800ecd8:	f001 bfbc 	b.w	8010c54 <HAL_TIM_Encoder_Stop>
		  	  *pMode -= 1;
 800ecdc:	f898 0000 	ldrb.w	r0, [r8]
 800ece0:	3801      	subs	r0, #1
 800ece2:	b240      	sxtb	r0, r0
 800ece4:	42b0      	cmp	r0, r6
 800ece6:	bfb8      	it	lt
 800ece8:	4638      	movlt	r0, r7
 800ecea:	f888 0000 	strb.w	r0, [r8]
		  	  ChangeLED(*pMode);
 800ecee:	f7ff faa9 	bl	800e244 <ChangeLED>
		  	  TIM3->CNT = INITIAL_PULSE;
 800ecf2:	f8c9 5024 	str.w	r5, [r9, #36]	; 0x24
 800ecf6:	e7e0      	b.n	800ecba <ModeSelect+0x72>
 800ecf8:	20001dec 	.word	0x20001dec
 800ecfc:	200014fc 	.word	0x200014fc
 800ed00:	47352f00 	.word	0x47352f00
 800ed04:	4654bc00 	.word	0x4654bc00
 800ed08:	40000400 	.word	0x40000400

0800ed0c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 800ed0c:	f8df d034 	ldr.w	sp, [pc, #52]	; 800ed44 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800ed10:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800ed12:	e003      	b.n	800ed1c <LoopCopyDataInit>

0800ed14 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800ed14:	4b0c      	ldr	r3, [pc, #48]	; (800ed48 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800ed16:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800ed18:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800ed1a:	3104      	adds	r1, #4

0800ed1c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800ed1c:	480b      	ldr	r0, [pc, #44]	; (800ed4c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800ed1e:	4b0c      	ldr	r3, [pc, #48]	; (800ed50 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800ed20:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800ed22:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800ed24:	d3f6      	bcc.n	800ed14 <CopyDataInit>
  ldr  r2, =_sbss
 800ed26:	4a0b      	ldr	r2, [pc, #44]	; (800ed54 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800ed28:	e002      	b.n	800ed30 <LoopFillZerobss>

0800ed2a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800ed2a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800ed2c:	f842 3b04 	str.w	r3, [r2], #4

0800ed30 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800ed30:	4b09      	ldr	r3, [pc, #36]	; (800ed58 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800ed32:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800ed34:	d3f9      	bcc.n	800ed2a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800ed36:	f7fe ff69 	bl	800dc0c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800ed3a:	f002 ff87 	bl	8011c4c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800ed3e:	f7fe fab5 	bl	800d2ac <main>
  bx  lr    
 800ed42:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 800ed44:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 800ed48:	080173c0 	.word	0x080173c0
  ldr  r0, =_sdata
 800ed4c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800ed50:	200001e8 	.word	0x200001e8
  ldr  r2, =_sbss
 800ed54:	200001e8 	.word	0x200001e8
  ldr  r3, = _ebss
 800ed58:	20002048 	.word	0x20002048

0800ed5c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800ed5c:	e7fe      	b.n	800ed5c <ADC_IRQHandler>
	...

0800ed60 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800ed60:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800ed62:	4a0e      	ldr	r2, [pc, #56]	; (800ed9c <HAL_InitTick+0x3c>)
 800ed64:	4b0e      	ldr	r3, [pc, #56]	; (800eda0 <HAL_InitTick+0x40>)
 800ed66:	7812      	ldrb	r2, [r2, #0]
 800ed68:	681b      	ldr	r3, [r3, #0]
{
 800ed6a:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800ed6c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800ed70:	fbb0 f0f2 	udiv	r0, r0, r2
 800ed74:	fbb3 f0f0 	udiv	r0, r3, r0
 800ed78:	f000 fb24 	bl	800f3c4 <HAL_SYSTICK_Config>
 800ed7c:	b908      	cbnz	r0, 800ed82 <HAL_InitTick+0x22>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800ed7e:	2d0f      	cmp	r5, #15
 800ed80:	d901      	bls.n	800ed86 <HAL_InitTick+0x26>
    return HAL_ERROR;
 800ed82:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 800ed84:	bd38      	pop	{r3, r4, r5, pc}
 800ed86:	4604      	mov	r4, r0
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800ed88:	4602      	mov	r2, r0
 800ed8a:	4629      	mov	r1, r5
 800ed8c:	f04f 30ff 	mov.w	r0, #4294967295
 800ed90:	f000 fad4 	bl	800f33c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800ed94:	4b03      	ldr	r3, [pc, #12]	; (800eda4 <HAL_InitTick+0x44>)
 800ed96:	4620      	mov	r0, r4
 800ed98:	601d      	str	r5, [r3, #0]
}
 800ed9a:	bd38      	pop	{r3, r4, r5, pc}
 800ed9c:	20000010 	.word	0x20000010
 800eda0:	2000000c 	.word	0x2000000c
 800eda4:	20000014 	.word	0x20000014

0800eda8 <HAL_Init>:
{
 800eda8:	b508      	push	{r3, lr}
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800edaa:	4b0b      	ldr	r3, [pc, #44]	; (800edd8 <HAL_Init+0x30>)
 800edac:	681a      	ldr	r2, [r3, #0]
 800edae:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800edb2:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800edb4:	681a      	ldr	r2, [r3, #0]
 800edb6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800edba:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800edbc:	681a      	ldr	r2, [r3, #0]
 800edbe:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800edc2:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800edc4:	2003      	movs	r0, #3
 800edc6:	f000 faa7 	bl	800f318 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 800edca:	2000      	movs	r0, #0
 800edcc:	f7ff ffc8 	bl	800ed60 <HAL_InitTick>
  HAL_MspInit();
 800edd0:	f7fe fc88 	bl	800d6e4 <HAL_MspInit>
}
 800edd4:	2000      	movs	r0, #0
 800edd6:	bd08      	pop	{r3, pc}
 800edd8:	40023c00 	.word	0x40023c00

0800eddc <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 800eddc:	4a03      	ldr	r2, [pc, #12]	; (800edec <HAL_IncTick+0x10>)
 800edde:	4b04      	ldr	r3, [pc, #16]	; (800edf0 <HAL_IncTick+0x14>)
 800ede0:	6811      	ldr	r1, [r2, #0]
 800ede2:	781b      	ldrb	r3, [r3, #0]
 800ede4:	440b      	add	r3, r1
 800ede6:	6013      	str	r3, [r2, #0]
}
 800ede8:	4770      	bx	lr
 800edea:	bf00      	nop
 800edec:	20002020 	.word	0x20002020
 800edf0:	20000010 	.word	0x20000010

0800edf4 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 800edf4:	4b01      	ldr	r3, [pc, #4]	; (800edfc <HAL_GetTick+0x8>)
 800edf6:	6818      	ldr	r0, [r3, #0]
}
 800edf8:	4770      	bx	lr
 800edfa:	bf00      	nop
 800edfc:	20002020 	.word	0x20002020

0800ee00 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800ee00:	b538      	push	{r3, r4, r5, lr}
 800ee02:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 800ee04:	f7ff fff6 	bl	800edf4 <HAL_GetTick>
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800ee08:	1c63      	adds	r3, r4, #1
  uint32_t tickstart = HAL_GetTick();
 800ee0a:	4605      	mov	r5, r0
  if (wait < HAL_MAX_DELAY)
 800ee0c:	d002      	beq.n	800ee14 <HAL_Delay+0x14>
  {
    wait += (uint32_t)(uwTickFreq);
 800ee0e:	4b04      	ldr	r3, [pc, #16]	; (800ee20 <HAL_Delay+0x20>)
 800ee10:	781b      	ldrb	r3, [r3, #0]
 800ee12:	441c      	add	r4, r3
  }

  while((HAL_GetTick() - tickstart) < wait)
 800ee14:	f7ff ffee 	bl	800edf4 <HAL_GetTick>
 800ee18:	1b40      	subs	r0, r0, r5
 800ee1a:	42a0      	cmp	r0, r4
 800ee1c:	d3fa      	bcc.n	800ee14 <HAL_Delay+0x14>
  {
  }
}
 800ee1e:	bd38      	pop	{r3, r4, r5, pc}
 800ee20:	20000010 	.word	0x20000010

0800ee24 <HAL_ADC_Init>:
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  
  /* Check ADC handle */
  if(hadc == NULL)
 800ee24:	2800      	cmp	r0, #0
 800ee26:	f000 8091 	beq.w	800ef4c <HAL_ADC_Init+0x128>
{
 800ee2a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 800ee2c:	6c05      	ldr	r5, [r0, #64]	; 0x40
 800ee2e:	4604      	mov	r4, r0
 800ee30:	2d00      	cmp	r5, #0
 800ee32:	f000 8081 	beq.w	800ef38 <HAL_ADC_Init+0x114>
    hadc->Lock = HAL_UNLOCKED;
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800ee36:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800ee38:	06db      	lsls	r3, r3, #27
 800ee3a:	d504      	bpl.n	800ee46 <HAL_ADC_Init+0x22>
  {
    tmp_hal_status = HAL_ERROR;
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 800ee3c:	2300      	movs	r3, #0
    tmp_hal_status = HAL_ERROR;
 800ee3e:	2001      	movs	r0, #1
  __HAL_UNLOCK(hadc);
 800ee40:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
}
 800ee44:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    ADC_STATE_CLR_SET(hadc->State,
 800ee46:	6c22      	ldr	r2, [r4, #64]	; 0x40
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 800ee48:	494d      	ldr	r1, [pc, #308]	; (800ef80 <HAL_ADC_Init+0x15c>)
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800ee4a:	6823      	ldr	r3, [r4, #0]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800ee4c:	4d4d      	ldr	r5, [pc, #308]	; (800ef84 <HAL_ADC_Init+0x160>)
    ADC_STATE_CLR_SET(hadc->State,
 800ee4e:	f422 5288 	bic.w	r2, r2, #4352	; 0x1100
 800ee52:	f022 0202 	bic.w	r2, r2, #2
 800ee56:	f042 0202 	orr.w	r2, r2, #2
 800ee5a:	6422      	str	r2, [r4, #64]	; 0x40
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 800ee5c:	684a      	ldr	r2, [r1, #4]
 800ee5e:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 800ee62:	604a      	str	r2, [r1, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 800ee64:	684a      	ldr	r2, [r1, #4]
 800ee66:	6860      	ldr	r0, [r4, #4]
 800ee68:	4302      	orrs	r2, r0
 800ee6a:	604a      	str	r2, [r1, #4]
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800ee6c:	6858      	ldr	r0, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800ee6e:	6921      	ldr	r1, [r4, #16]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800ee70:	68a7      	ldr	r7, [r4, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800ee72:	68e6      	ldr	r6, [r4, #12]
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800ee74:	f420 7080 	bic.w	r0, r0, #256	; 0x100
 800ee78:	6058      	str	r0, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800ee7a:	685a      	ldr	r2, [r3, #4]
 800ee7c:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 800ee80:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800ee82:	6858      	ldr	r0, [r3, #4]
 800ee84:	f020 7040 	bic.w	r0, r0, #50331648	; 0x3000000
 800ee88:	6058      	str	r0, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800ee8a:	6859      	ldr	r1, [r3, #4]
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800ee8c:	6aa0      	ldr	r0, [r4, #40]	; 0x28
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800ee8e:	4339      	orrs	r1, r7
 800ee90:	6059      	str	r1, [r3, #4]
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800ee92:	6899      	ldr	r1, [r3, #8]
 800ee94:	f421 6100 	bic.w	r1, r1, #2048	; 0x800
 800ee98:	6099      	str	r1, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800ee9a:	689a      	ldr	r2, [r3, #8]
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800ee9c:	42a8      	cmp	r0, r5
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800ee9e:	ea42 0206 	orr.w	r2, r2, r6
 800eea2:	609a      	str	r2, [r3, #8]
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800eea4:	d054      	beq.n	800ef50 <HAL_ADC_Init+0x12c>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800eea6:	6899      	ldr	r1, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800eea8:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800eeaa:	f021 6170 	bic.w	r1, r1, #251658240	; 0xf000000
 800eeae:	6099      	str	r1, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800eeb0:	689a      	ldr	r2, [r3, #8]
 800eeb2:	4310      	orrs	r0, r2
 800eeb4:	6098      	str	r0, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800eeb6:	6899      	ldr	r1, [r3, #8]
 800eeb8:	f021 5140 	bic.w	r1, r1, #805306368	; 0x30000000
 800eebc:	6099      	str	r1, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800eebe:	689a      	ldr	r2, [r3, #8]
 800eec0:	432a      	orrs	r2, r5
 800eec2:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800eec4:	6899      	ldr	r1, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800eec6:	7e25      	ldrb	r5, [r4, #24]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800eec8:	f894 0020 	ldrb.w	r0, [r4, #32]
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800eecc:	f021 0102 	bic.w	r1, r1, #2
 800eed0:	6099      	str	r1, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800eed2:	689a      	ldr	r2, [r3, #8]
 800eed4:	ea42 0245 	orr.w	r2, r2, r5, lsl #1
 800eed8:	609a      	str	r2, [r3, #8]
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800eeda:	685a      	ldr	r2, [r3, #4]
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800eedc:	2800      	cmp	r0, #0
 800eede:	d140      	bne.n	800ef62 <HAL_ADC_Init+0x13e>
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800eee0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800eee4:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800eee6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800eee8:	69e5      	ldr	r5, [r4, #28]
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800eeea:	f894 7030 	ldrb.w	r7, [r4, #48]	; 0x30
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800eeee:	6966      	ldr	r6, [r4, #20]
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800eef0:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800eef4:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800eef6:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 800eef8:	3d01      	subs	r5, #1
 800eefa:	ea40 5005 	orr.w	r0, r0, r5, lsl #20
 800eefe:	62d8      	str	r0, [r3, #44]	; 0x2c
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800ef00:	6898      	ldr	r0, [r3, #8]
 800ef02:	f420 7000 	bic.w	r0, r0, #512	; 0x200
 800ef06:	6098      	str	r0, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800ef08:	6899      	ldr	r1, [r3, #8]
 800ef0a:	ea41 2147 	orr.w	r1, r1, r7, lsl #9
 800ef0e:	6099      	str	r1, [r3, #8]
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800ef10:	6899      	ldr	r1, [r3, #8]
 800ef12:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 800ef16:	6099      	str	r1, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800ef18:	689a      	ldr	r2, [r3, #8]
    ADC_CLEAR_ERRORCODE(hadc);
 800ef1a:	2000      	movs	r0, #0
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800ef1c:	ea42 2286 	orr.w	r2, r2, r6, lsl #10
 800ef20:	609a      	str	r2, [r3, #8]
    ADC_CLEAR_ERRORCODE(hadc);
 800ef22:	6460      	str	r0, [r4, #68]	; 0x44
    ADC_STATE_CLR_SET(hadc->State,
 800ef24:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800ef26:	f023 0303 	bic.w	r3, r3, #3
 800ef2a:	f043 0301 	orr.w	r3, r3, #1
 800ef2e:	6423      	str	r3, [r4, #64]	; 0x40
  __HAL_UNLOCK(hadc);
 800ef30:	2300      	movs	r3, #0
 800ef32:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 800ef36:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    HAL_ADC_MspInit(hadc);
 800ef38:	f7fe fbf0 	bl	800d71c <HAL_ADC_MspInit>
    ADC_CLEAR_ERRORCODE(hadc);
 800ef3c:	6465      	str	r5, [r4, #68]	; 0x44
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800ef3e:	6c23      	ldr	r3, [r4, #64]	; 0x40
    hadc->Lock = HAL_UNLOCKED;
 800ef40:	f884 503c 	strb.w	r5, [r4, #60]	; 0x3c
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800ef44:	06db      	lsls	r3, r3, #27
 800ef46:	f53f af79 	bmi.w	800ee3c <HAL_ADC_Init+0x18>
 800ef4a:	e77c      	b.n	800ee46 <HAL_ADC_Init+0x22>
    return HAL_ERROR;
 800ef4c:	2001      	movs	r0, #1
}
 800ef4e:	4770      	bx	lr
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800ef50:	689a      	ldr	r2, [r3, #8]
 800ef52:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800ef56:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800ef58:	689a      	ldr	r2, [r3, #8]
 800ef5a:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800ef5e:	609a      	str	r2, [r3, #8]
 800ef60:	e7b0      	b.n	800eec4 <HAL_ADC_Init+0xa0>
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800ef62:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800ef66:	6a61      	ldr	r1, [r4, #36]	; 0x24
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800ef68:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800ef6a:	685a      	ldr	r2, [r3, #4]
 800ef6c:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800ef70:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800ef72:	685a      	ldr	r2, [r3, #4]
 800ef74:	3901      	subs	r1, #1
 800ef76:	ea42 3241 	orr.w	r2, r2, r1, lsl #13
 800ef7a:	605a      	str	r2, [r3, #4]
 800ef7c:	e7b3      	b.n	800eee6 <HAL_ADC_Init+0xc2>
 800ef7e:	bf00      	nop
 800ef80:	40012300 	.word	0x40012300
 800ef84:	0f000001 	.word	0x0f000001

0800ef88 <HAL_ADC_Start_DMA>:
{
 800ef88:	b5f0      	push	{r4, r5, r6, r7, lr}
  __HAL_LOCK(hadc);
 800ef8a:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
{
 800ef8e:	b083      	sub	sp, #12
  __IO uint32_t counter = 0U;
 800ef90:	2400      	movs	r4, #0
  __HAL_LOCK(hadc);
 800ef92:	2b01      	cmp	r3, #1
  __IO uint32_t counter = 0U;
 800ef94:	9401      	str	r4, [sp, #4]
  __HAL_LOCK(hadc);
 800ef96:	f000 8081 	beq.w	800f09c <HAL_ADC_Start_DMA+0x114>
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800ef9a:	6805      	ldr	r5, [r0, #0]
 800ef9c:	68ab      	ldr	r3, [r5, #8]
  __HAL_LOCK(hadc);
 800ef9e:	2401      	movs	r4, #1
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800efa0:	07df      	lsls	r7, r3, #31
  __HAL_LOCK(hadc);
 800efa2:	f880 403c 	strb.w	r4, [r0, #60]	; 0x3c
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800efa6:	d414      	bmi.n	800efd2 <HAL_ADC_Start_DMA+0x4a>
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800efa8:	4b40      	ldr	r3, [pc, #256]	; (800f0ac <HAL_ADC_Start_DMA+0x124>)
 800efaa:	4e41      	ldr	r6, [pc, #260]	; (800f0b0 <HAL_ADC_Start_DMA+0x128>)
 800efac:	681c      	ldr	r4, [r3, #0]
    __HAL_ADC_ENABLE(hadc);
 800efae:	68ab      	ldr	r3, [r5, #8]
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800efb0:	fba6 6404 	umull	r6, r4, r6, r4
 800efb4:	0ca4      	lsrs	r4, r4, #18
    __HAL_ADC_ENABLE(hadc);
 800efb6:	f043 0301 	orr.w	r3, r3, #1
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800efba:	eb04 0444 	add.w	r4, r4, r4, lsl #1
    __HAL_ADC_ENABLE(hadc);
 800efbe:	60ab      	str	r3, [r5, #8]
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800efc0:	9401      	str	r4, [sp, #4]
    while(counter != 0U)
 800efc2:	9b01      	ldr	r3, [sp, #4]
 800efc4:	b12b      	cbz	r3, 800efd2 <HAL_ADC_Start_DMA+0x4a>
      counter--;
 800efc6:	9c01      	ldr	r4, [sp, #4]
 800efc8:	3c01      	subs	r4, #1
 800efca:	9401      	str	r4, [sp, #4]
    while(counter != 0U)
 800efcc:	9c01      	ldr	r4, [sp, #4]
 800efce:	2c00      	cmp	r4, #0
 800efd0:	d1f9      	bne.n	800efc6 <HAL_ADC_Start_DMA+0x3e>
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800efd2:	68ab      	ldr	r3, [r5, #8]
 800efd4:	07de      	lsls	r6, r3, #31
 800efd6:	d543      	bpl.n	800f060 <HAL_ADC_Start_DMA+0xd8>
    ADC_STATE_CLR_SET(hadc->State,
 800efd8:	6c04      	ldr	r4, [r0, #64]	; 0x40
 800efda:	f424 64e0 	bic.w	r4, r4, #1792	; 0x700
 800efde:	f024 0401 	bic.w	r4, r4, #1
 800efe2:	f444 7480 	orr.w	r4, r4, #256	; 0x100
 800efe6:	6404      	str	r4, [r0, #64]	; 0x40
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800efe8:	686b      	ldr	r3, [r5, #4]
 800efea:	055c      	lsls	r4, r3, #21
 800efec:	d505      	bpl.n	800effa <HAL_ADC_Start_DMA+0x72>
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800efee:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800eff0:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800eff4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800eff8:	6403      	str	r3, [r0, #64]	; 0x40
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800effa:	6c03      	ldr	r3, [r0, #64]	; 0x40
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800effc:	4e2d      	ldr	r6, [pc, #180]	; (800f0b4 <HAL_ADC_Start_DMA+0x12c>)
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800effe:	f413 5380 	ands.w	r3, r3, #4096	; 0x1000
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800f002:	bf1c      	itt	ne
 800f004:	6c43      	ldrne	r3, [r0, #68]	; 0x44
 800f006:	f023 0306 	bicne.w	r3, r3, #6
      ADC_CLEAR_ERRORCODE(hadc);
 800f00a:	6443      	str	r3, [r0, #68]	; 0x44
 800f00c:	4604      	mov	r4, r0
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800f00e:	6b80      	ldr	r0, [r0, #56]	; 0x38
 800f010:	4613      	mov	r3, r2
    __HAL_UNLOCK(hadc);   
 800f012:	2700      	movs	r7, #0
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800f014:	4a28      	ldr	r2, [pc, #160]	; (800f0b8 <HAL_ADC_Start_DMA+0x130>)
    __HAL_UNLOCK(hadc);   
 800f016:	f884 703c 	strb.w	r7, [r4, #60]	; 0x3c
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800f01a:	63c6      	str	r6, [r0, #60]	; 0x3c
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800f01c:	6402      	str	r2, [r0, #64]	; 0x40
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800f01e:	4e27      	ldr	r6, [pc, #156]	; (800f0bc <HAL_ADC_Start_DMA+0x134>)
 800f020:	64c6      	str	r6, [r0, #76]	; 0x4c
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800f022:	f06f 0222 	mvn.w	r2, #34	; 0x22
 800f026:	602a      	str	r2, [r5, #0]
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800f028:	686e      	ldr	r6, [r5, #4]
 800f02a:	f046 6680 	orr.w	r6, r6, #67108864	; 0x4000000
 800f02e:	606e      	str	r6, [r5, #4]
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 800f030:	68ae      	ldr	r6, [r5, #8]
 800f032:	f446 7680 	orr.w	r6, r6, #256	; 0x100
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800f036:	460a      	mov	r2, r1
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 800f038:	60ae      	str	r6, [r5, #8]
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800f03a:	f105 014c 	add.w	r1, r5, #76	; 0x4c
 800f03e:	f000 fa75 	bl	800f52c <HAL_DMA_Start_IT>
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 800f042:	4b1f      	ldr	r3, [pc, #124]	; (800f0c0 <HAL_ADC_Start_DMA+0x138>)
 800f044:	685a      	ldr	r2, [r3, #4]
 800f046:	06d2      	lsls	r2, r2, #27
 800f048:	d10d      	bne.n	800f066 <HAL_ADC_Start_DMA+0xde>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 800f04a:	6822      	ldr	r2, [r4, #0]
 800f04c:	491d      	ldr	r1, [pc, #116]	; (800f0c4 <HAL_ADC_Start_DMA+0x13c>)
 800f04e:	428a      	cmp	r2, r1
 800f050:	d01b      	beq.n	800f08a <HAL_ADC_Start_DMA+0x102>
 800f052:	f501 7180 	add.w	r1, r1, #256	; 0x100
 800f056:	428a      	cmp	r2, r1
 800f058:	d023      	beq.n	800f0a2 <HAL_ADC_Start_DMA+0x11a>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 800f05a:	491b      	ldr	r1, [pc, #108]	; (800f0c8 <HAL_ADC_Start_DMA+0x140>)
 800f05c:	428a      	cmp	r2, r1
 800f05e:	d00f      	beq.n	800f080 <HAL_ADC_Start_DMA+0xf8>
  return HAL_OK;
 800f060:	2000      	movs	r0, #0
}
 800f062:	b003      	add	sp, #12
 800f064:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800f066:	6823      	ldr	r3, [r4, #0]
 800f068:	4a16      	ldr	r2, [pc, #88]	; (800f0c4 <HAL_ADC_Start_DMA+0x13c>)
 800f06a:	4293      	cmp	r3, r2
 800f06c:	d1f8      	bne.n	800f060 <HAL_ADC_Start_DMA+0xd8>
 800f06e:	6898      	ldr	r0, [r3, #8]
 800f070:	f010 5040 	ands.w	r0, r0, #805306368	; 0x30000000
 800f074:	d1f4      	bne.n	800f060 <HAL_ADC_Start_DMA+0xd8>
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800f076:	689a      	ldr	r2, [r3, #8]
 800f078:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800f07c:	609a      	str	r2, [r3, #8]
 800f07e:	e7f0      	b.n	800f062 <HAL_ADC_Start_DMA+0xda>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 800f080:	685b      	ldr	r3, [r3, #4]
 800f082:	f003 031f 	and.w	r3, r3, #31
 800f086:	2b0f      	cmp	r3, #15
 800f088:	d8ea      	bhi.n	800f060 <HAL_ADC_Start_DMA+0xd8>
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 800f08a:	6890      	ldr	r0, [r2, #8]
 800f08c:	f010 5040 	ands.w	r0, r0, #805306368	; 0x30000000
 800f090:	d1e6      	bne.n	800f060 <HAL_ADC_Start_DMA+0xd8>
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800f092:	6893      	ldr	r3, [r2, #8]
 800f094:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800f098:	6093      	str	r3, [r2, #8]
 800f09a:	e7e2      	b.n	800f062 <HAL_ADC_Start_DMA+0xda>
  __HAL_LOCK(hadc);
 800f09c:	2002      	movs	r0, #2
}
 800f09e:	b003      	add	sp, #12
 800f0a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 800f0a2:	685b      	ldr	r3, [r3, #4]
 800f0a4:	06db      	lsls	r3, r3, #27
 800f0a6:	d0f0      	beq.n	800f08a <HAL_ADC_Start_DMA+0x102>
 800f0a8:	e7da      	b.n	800f060 <HAL_ADC_Start_DMA+0xd8>
 800f0aa:	bf00      	nop
 800f0ac:	2000000c 	.word	0x2000000c
 800f0b0:	431bde83 	.word	0x431bde83
 800f0b4:	0800f15d 	.word	0x0800f15d
 800f0b8:	0800f135 	.word	0x0800f135
 800f0bc:	0800f145 	.word	0x0800f145
 800f0c0:	40012300 	.word	0x40012300
 800f0c4:	40012000 	.word	0x40012000
 800f0c8:	40012200 	.word	0x40012200

0800f0cc <HAL_ADC_Stop_DMA>:
  __HAL_LOCK(hadc);
 800f0cc:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 800f0d0:	2b01      	cmp	r3, #1
 800f0d2:	d029      	beq.n	800f128 <HAL_ADC_Stop_DMA+0x5c>
  __HAL_ADC_DISABLE(hadc);
 800f0d4:	6803      	ldr	r3, [r0, #0]
 800f0d6:	689a      	ldr	r2, [r3, #8]
  __HAL_LOCK(hadc);
 800f0d8:	2101      	movs	r1, #1
  __HAL_ADC_DISABLE(hadc);
 800f0da:	f022 0201 	bic.w	r2, r2, #1
{
 800f0de:	b510      	push	{r4, lr}
  __HAL_LOCK(hadc);
 800f0e0:	f880 103c 	strb.w	r1, [r0, #60]	; 0x3c
  __HAL_ADC_DISABLE(hadc);
 800f0e4:	609a      	str	r2, [r3, #8]
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 800f0e6:	689a      	ldr	r2, [r3, #8]
 800f0e8:	07d2      	lsls	r2, r2, #31
 800f0ea:	4604      	mov	r4, r0
 800f0ec:	d504      	bpl.n	800f0f8 <HAL_ADC_Stop_DMA+0x2c>
  __HAL_UNLOCK(hadc);
 800f0ee:	2300      	movs	r3, #0
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800f0f0:	2000      	movs	r0, #0
  __HAL_UNLOCK(hadc);
 800f0f2:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 800f0f6:	bd10      	pop	{r4, pc}
    hadc->Instance->CR2 &= ~ADC_CR2_DMA;
 800f0f8:	689a      	ldr	r2, [r3, #8]
    tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 800f0fa:	6b80      	ldr	r0, [r0, #56]	; 0x38
    hadc->Instance->CR2 &= ~ADC_CR2_DMA;
 800f0fc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800f100:	609a      	str	r2, [r3, #8]
    tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 800f102:	f000 fa51 	bl	800f5a8 <HAL_DMA_Abort>
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 800f106:	6822      	ldr	r2, [r4, #0]
 800f108:	6853      	ldr	r3, [r2, #4]
 800f10a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800f10e:	6053      	str	r3, [r2, #4]
    ADC_STATE_CLR_SET(hadc->State,
 800f110:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800f112:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800f116:	f023 0301 	bic.w	r3, r3, #1
 800f11a:	f043 0301 	orr.w	r3, r3, #1
 800f11e:	6423      	str	r3, [r4, #64]	; 0x40
  __HAL_UNLOCK(hadc);
 800f120:	2300      	movs	r3, #0
 800f122:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 800f126:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hadc);
 800f128:	2002      	movs	r0, #2
}
 800f12a:	4770      	bx	lr

0800f12c <HAL_ADC_ConvCpltCallback>:
 800f12c:	4770      	bx	lr
 800f12e:	bf00      	nop

0800f130 <HAL_ADC_ConvHalfCpltCallback>:
 800f130:	4770      	bx	lr
 800f132:	bf00      	nop

0800f134 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 800f134:	b508      	push	{r3, lr}
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800f136:	6b80      	ldr	r0, [r0, #56]	; 0x38
 800f138:	f7ff fffa 	bl	800f130 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800f13c:	bd08      	pop	{r3, pc}
 800f13e:	bf00      	nop

0800f140 <HAL_ADC_ErrorCallback>:
 800f140:	4770      	bx	lr
 800f142:	bf00      	nop

0800f144 <ADC_DMAError>:
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800f144:	6b80      	ldr	r0, [r0, #56]	; 0x38
{
 800f146:	b508      	push	{r3, lr}
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 800f148:	2340      	movs	r3, #64	; 0x40
 800f14a:	6403      	str	r3, [r0, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 800f14c:	6c43      	ldr	r3, [r0, #68]	; 0x44
 800f14e:	f043 0304 	orr.w	r3, r3, #4
 800f152:	6443      	str	r3, [r0, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800f154:	f7ff fff4 	bl	800f140 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800f158:	bd08      	pop	{r3, pc}
 800f15a:	bf00      	nop

0800f15c <ADC_DMAConvCplt>:
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800f15c:	6b83      	ldr	r3, [r0, #56]	; 0x38
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800f15e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800f160:	f012 0f50 	tst.w	r2, #80	; 0x50
{
 800f164:	b510      	push	{r4, lr}
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800f166:	6c1a      	ldr	r2, [r3, #64]	; 0x40
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800f168:	d123      	bne.n	800f1b2 <ADC_DMAConvCplt+0x56>
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800f16a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800f16e:	6819      	ldr	r1, [r3, #0]
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800f170:	641a      	str	r2, [r3, #64]	; 0x40
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800f172:	688a      	ldr	r2, [r1, #8]
 800f174:	f012 5f40 	tst.w	r2, #805306368	; 0x30000000
 800f178:	d117      	bne.n	800f1aa <ADC_DMAConvCplt+0x4e>
 800f17a:	7e1a      	ldrb	r2, [r3, #24]
 800f17c:	b9aa      	cbnz	r2, 800f1aa <ADC_DMAConvCplt+0x4e>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800f17e:	6aca      	ldr	r2, [r1, #44]	; 0x2c
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800f180:	f412 0f70 	tst.w	r2, #15728640	; 0xf00000
 800f184:	d002      	beq.n	800f18c <ADC_DMAConvCplt+0x30>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800f186:	688a      	ldr	r2, [r1, #8]
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800f188:	0550      	lsls	r0, r2, #21
 800f18a:	d40e      	bmi.n	800f1aa <ADC_DMAConvCplt+0x4e>
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 800f18c:	684a      	ldr	r2, [r1, #4]
 800f18e:	f022 0220 	bic.w	r2, r2, #32
 800f192:	604a      	str	r2, [r1, #4]
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800f194:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800f196:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800f19a:	641a      	str	r2, [r3, #64]	; 0x40
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800f19c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800f19e:	04d1      	lsls	r1, r2, #19
 800f1a0:	d403      	bmi.n	800f1aa <ADC_DMAConvCplt+0x4e>
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800f1a2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800f1a4:	f042 0201 	orr.w	r2, r2, #1
 800f1a8:	641a      	str	r2, [r3, #64]	; 0x40
    HAL_ADC_ConvCpltCallback(hadc);
 800f1aa:	4618      	mov	r0, r3
 800f1ac:	f7ff ffbe 	bl	800f12c <HAL_ADC_ConvCpltCallback>
}
 800f1b0:	bd10      	pop	{r4, pc}
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 800f1b2:	06d2      	lsls	r2, r2, #27
 800f1b4:	d404      	bmi.n	800f1c0 <ADC_DMAConvCplt+0x64>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 800f1b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
}
 800f1b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      hadc->DMA_Handle->XferErrorCallback(hdma);
 800f1bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800f1be:	4718      	bx	r3
      HAL_ADC_ErrorCallback(hadc);
 800f1c0:	4618      	mov	r0, r3
 800f1c2:	f7ff ffbd 	bl	800f140 <HAL_ADC_ErrorCallback>
}
 800f1c6:	bd10      	pop	{r4, pc}

0800f1c8 <HAL_ADC_ConfigChannel>:
{
 800f1c8:	b4f0      	push	{r4, r5, r6, r7}
  __HAL_LOCK(hadc);
 800f1ca:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
{
 800f1ce:	b082      	sub	sp, #8
  __IO uint32_t counter = 0U;
 800f1d0:	2200      	movs	r2, #0
  __HAL_LOCK(hadc);
 800f1d2:	2b01      	cmp	r3, #1
  __IO uint32_t counter = 0U;
 800f1d4:	9201      	str	r2, [sp, #4]
  __HAL_LOCK(hadc);
 800f1d6:	f000 8095 	beq.w	800f304 <HAL_ADC_ConfigChannel+0x13c>
  if (sConfig->Channel > ADC_CHANNEL_9)
 800f1da:	680d      	ldr	r5, [r1, #0]
 800f1dc:	688a      	ldr	r2, [r1, #8]
 800f1de:	6803      	ldr	r3, [r0, #0]
  __HAL_LOCK(hadc);
 800f1e0:	2401      	movs	r4, #1
  if (sConfig->Channel > ADC_CHANNEL_9)
 800f1e2:	2d09      	cmp	r5, #9
 800f1e4:	b2af      	uxth	r7, r5
  __HAL_LOCK(hadc);
 800f1e6:	f880 403c 	strb.w	r4, [r0, #60]	; 0x3c
  if (sConfig->Channel > ADC_CHANNEL_9)
 800f1ea:	d829      	bhi.n	800f240 <HAL_ADC_ConfigChannel+0x78>
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800f1ec:	691c      	ldr	r4, [r3, #16]
 800f1ee:	eb05 0645 	add.w	r6, r5, r5, lsl #1
 800f1f2:	f04f 0c07 	mov.w	ip, #7
 800f1f6:	fa0c fc06 	lsl.w	ip, ip, r6
 800f1fa:	ea24 040c 	bic.w	r4, r4, ip
 800f1fe:	611c      	str	r4, [r3, #16]
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800f200:	691c      	ldr	r4, [r3, #16]
 800f202:	fa02 f606 	lsl.w	r6, r2, r6
 800f206:	4326      	orrs	r6, r4
 800f208:	611e      	str	r6, [r3, #16]
  if (sConfig->Rank < 7U)
 800f20a:	684e      	ldr	r6, [r1, #4]
 800f20c:	2e06      	cmp	r6, #6
 800f20e:	eb06 0286 	add.w	r2, r6, r6, lsl #2
 800f212:	d82a      	bhi.n	800f26a <HAL_ADC_ConfigChannel+0xa2>
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800f214:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800f216:	3a05      	subs	r2, #5
 800f218:	241f      	movs	r4, #31
 800f21a:	4094      	lsls	r4, r2
 800f21c:	ea21 0104 	bic.w	r1, r1, r4
 800f220:	6359      	str	r1, [r3, #52]	; 0x34
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800f222:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800f224:	fa07 f202 	lsl.w	r2, r7, r2
 800f228:	430a      	orrs	r2, r1
 800f22a:	635a      	str	r2, [r3, #52]	; 0x34
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800f22c:	4a37      	ldr	r2, [pc, #220]	; (800f30c <HAL_ADC_ConfigChannel+0x144>)
 800f22e:	4293      	cmp	r3, r2
 800f230:	d02d      	beq.n	800f28e <HAL_ADC_ConfigChannel+0xc6>
  __HAL_UNLOCK(hadc);
 800f232:	2300      	movs	r3, #0
 800f234:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  return HAL_OK;
 800f238:	4618      	mov	r0, r3
}
 800f23a:	b002      	add	sp, #8
 800f23c:	bcf0      	pop	{r4, r5, r6, r7}
 800f23e:	4770      	bx	lr
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800f240:	eb07 0647 	add.w	r6, r7, r7, lsl #1
 800f244:	68dc      	ldr	r4, [r3, #12]
 800f246:	3e1e      	subs	r6, #30
 800f248:	f04f 0c07 	mov.w	ip, #7
 800f24c:	fa0c fc06 	lsl.w	ip, ip, r6
 800f250:	ea24 040c 	bic.w	r4, r4, ip
 800f254:	60dc      	str	r4, [r3, #12]
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800f256:	68dc      	ldr	r4, [r3, #12]
 800f258:	fa02 f606 	lsl.w	r6, r2, r6
 800f25c:	4326      	orrs	r6, r4
 800f25e:	60de      	str	r6, [r3, #12]
  if (sConfig->Rank < 7U)
 800f260:	684e      	ldr	r6, [r1, #4]
 800f262:	2e06      	cmp	r6, #6
 800f264:	eb06 0286 	add.w	r2, r6, r6, lsl #2
 800f268:	d9d4      	bls.n	800f214 <HAL_ADC_ConfigChannel+0x4c>
  else if (sConfig->Rank < 13U)
 800f26a:	2e0c      	cmp	r6, #12
 800f26c:	d835      	bhi.n	800f2da <HAL_ADC_ConfigChannel+0x112>
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800f26e:	f1a2 0423 	sub.w	r4, r2, #35	; 0x23
 800f272:	211f      	movs	r1, #31
 800f274:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800f276:	40a1      	lsls	r1, r4
 800f278:	ea22 0201 	bic.w	r2, r2, r1
 800f27c:	631a      	str	r2, [r3, #48]	; 0x30
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800f27e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800f280:	fa07 f204 	lsl.w	r2, r7, r4
 800f284:	430a      	orrs	r2, r1
 800f286:	631a      	str	r2, [r3, #48]	; 0x30
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800f288:	4a20      	ldr	r2, [pc, #128]	; (800f30c <HAL_ADC_ConfigChannel+0x144>)
 800f28a:	4293      	cmp	r3, r2
 800f28c:	d1d1      	bne.n	800f232 <HAL_ADC_ConfigChannel+0x6a>
 800f28e:	2d12      	cmp	r5, #18
 800f290:	d031      	beq.n	800f2f6 <HAL_ADC_ConfigChannel+0x12e>
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800f292:	f1a5 0310 	sub.w	r3, r5, #16
 800f296:	2b01      	cmp	r3, #1
 800f298:	d8cb      	bhi.n	800f232 <HAL_ADC_ConfigChannel+0x6a>
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800f29a:	4a1d      	ldr	r2, [pc, #116]	; (800f310 <HAL_ADC_ConfigChannel+0x148>)
 800f29c:	6853      	ldr	r3, [r2, #4]
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 800f29e:	2d10      	cmp	r5, #16
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800f2a0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800f2a4:	6053      	str	r3, [r2, #4]
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 800f2a6:	d1c4      	bne.n	800f232 <HAL_ADC_ConfigChannel+0x6a>
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800f2a8:	4b1a      	ldr	r3, [pc, #104]	; (800f314 <HAL_ADC_ConfigChannel+0x14c>)
 800f2aa:	f102 7246 	add.w	r2, r2, #51904512	; 0x3180000
 800f2ae:	f502 322e 	add.w	r2, r2, #178176	; 0x2b800
 800f2b2:	681b      	ldr	r3, [r3, #0]
 800f2b4:	f202 3283 	addw	r2, r2, #899	; 0x383
 800f2b8:	fba2 2303 	umull	r2, r3, r2, r3
 800f2bc:	0c9b      	lsrs	r3, r3, #18
 800f2be:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800f2c2:	005b      	lsls	r3, r3, #1
 800f2c4:	9301      	str	r3, [sp, #4]
      while(counter != 0U)
 800f2c6:	9b01      	ldr	r3, [sp, #4]
 800f2c8:	2b00      	cmp	r3, #0
 800f2ca:	d0b2      	beq.n	800f232 <HAL_ADC_ConfigChannel+0x6a>
        counter--;
 800f2cc:	9b01      	ldr	r3, [sp, #4]
 800f2ce:	3b01      	subs	r3, #1
 800f2d0:	9301      	str	r3, [sp, #4]
      while(counter != 0U)
 800f2d2:	9b01      	ldr	r3, [sp, #4]
 800f2d4:	2b00      	cmp	r3, #0
 800f2d6:	d1f9      	bne.n	800f2cc <HAL_ADC_ConfigChannel+0x104>
 800f2d8:	e7ab      	b.n	800f232 <HAL_ADC_ConfigChannel+0x6a>
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800f2da:	f1a2 0141 	sub.w	r1, r2, #65	; 0x41
 800f2de:	241f      	movs	r4, #31
 800f2e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f2e2:	408c      	lsls	r4, r1
 800f2e4:	ea22 0204 	bic.w	r2, r2, r4
 800f2e8:	62da      	str	r2, [r3, #44]	; 0x2c
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800f2ea:	6adc      	ldr	r4, [r3, #44]	; 0x2c
 800f2ec:	fa07 f201 	lsl.w	r2, r7, r1
 800f2f0:	4322      	orrs	r2, r4
 800f2f2:	62da      	str	r2, [r3, #44]	; 0x2c
 800f2f4:	e79a      	b.n	800f22c <HAL_ADC_ConfigChannel+0x64>
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 800f2f6:	f8d2 3304 	ldr.w	r3, [r2, #772]	; 0x304
 800f2fa:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800f2fe:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
 800f302:	e796      	b.n	800f232 <HAL_ADC_ConfigChannel+0x6a>
  __HAL_LOCK(hadc);
 800f304:	2002      	movs	r0, #2
}
 800f306:	b002      	add	sp, #8
 800f308:	bcf0      	pop	{r4, r5, r6, r7}
 800f30a:	4770      	bx	lr
 800f30c:	40012000 	.word	0x40012000
 800f310:	40012300 	.word	0x40012300
 800f314:	2000000c 	.word	0x2000000c

0800f318 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800f318:	4a07      	ldr	r2, [pc, #28]	; (800f338 <HAL_NVIC_SetPriorityGrouping+0x20>)
 800f31a:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800f31c:	f64f 01ff 	movw	r1, #63743	; 0xf8ff
 800f320:	400b      	ands	r3, r1
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800f322:	0200      	lsls	r0, r0, #8
 800f324:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800f328:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
 800f32c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  reg_value  =  (reg_value                                   |
 800f330:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 800f332:	60d3      	str	r3, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 800f334:	4770      	bx	lr
 800f336:	bf00      	nop
 800f338:	e000ed00 	.word	0xe000ed00

0800f33c <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800f33c:	4b18      	ldr	r3, [pc, #96]	; (800f3a0 <HAL_NVIC_SetPriority+0x64>)
 800f33e:	68db      	ldr	r3, [r3, #12]
 800f340:	f3c3 2302 	ubfx	r3, r3, #8, #3
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800f344:	b430      	push	{r4, r5}
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800f346:	f1c3 0507 	rsb	r5, r3, #7
 800f34a:	2d04      	cmp	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800f34c:	f103 0404 	add.w	r4, r3, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800f350:	bf28      	it	cs
 800f352:	2504      	movcs	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800f354:	2c06      	cmp	r4, #6
 800f356:	d919      	bls.n	800f38c <HAL_NVIC_SetPriority+0x50>
 800f358:	3b03      	subs	r3, #3
 800f35a:	f04f 34ff 	mov.w	r4, #4294967295
 800f35e:	409c      	lsls	r4, r3
 800f360:	ea22 0404 	bic.w	r4, r2, r4

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800f364:	f04f 32ff 	mov.w	r2, #4294967295
 800f368:	40aa      	lsls	r2, r5
 800f36a:	ea21 0102 	bic.w	r1, r1, r2
 800f36e:	fa01 f203 	lsl.w	r2, r1, r3
 800f372:	4322      	orrs	r2, r4
 800f374:	0112      	lsls	r2, r2, #4
  if ((int32_t)(IRQn) >= 0)
 800f376:	2800      	cmp	r0, #0
 800f378:	b2d2      	uxtb	r2, r2
 800f37a:	db0a      	blt.n	800f392 <HAL_NVIC_SetPriority+0x56>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800f37c:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 800f380:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 800f384:	f880 2300 	strb.w	r2, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 800f388:	bc30      	pop	{r4, r5}
 800f38a:	4770      	bx	lr
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800f38c:	2400      	movs	r4, #0
 800f38e:	4623      	mov	r3, r4
 800f390:	e7e8      	b.n	800f364 <HAL_NVIC_SetPriority+0x28>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800f392:	4b04      	ldr	r3, [pc, #16]	; (800f3a4 <HAL_NVIC_SetPriority+0x68>)
 800f394:	f000 000f 	and.w	r0, r0, #15
 800f398:	4403      	add	r3, r0
 800f39a:	761a      	strb	r2, [r3, #24]
 800f39c:	bc30      	pop	{r4, r5}
 800f39e:	4770      	bx	lr
 800f3a0:	e000ed00 	.word	0xe000ed00
 800f3a4:	e000ecfc 	.word	0xe000ecfc

0800f3a8 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 800f3a8:	2800      	cmp	r0, #0
 800f3aa:	db07      	blt.n	800f3bc <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800f3ac:	f000 011f 	and.w	r1, r0, #31
 800f3b0:	2301      	movs	r3, #1
 800f3b2:	0940      	lsrs	r0, r0, #5
 800f3b4:	4a02      	ldr	r2, [pc, #8]	; (800f3c0 <HAL_NVIC_EnableIRQ+0x18>)
 800f3b6:	408b      	lsls	r3, r1
 800f3b8:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 800f3bc:	4770      	bx	lr
 800f3be:	bf00      	nop
 800f3c0:	e000e100 	.word	0xe000e100

0800f3c4 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800f3c4:	3801      	subs	r0, #1
 800f3c6:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 800f3ca:	d20e      	bcs.n	800f3ea <HAL_SYSTICK_Config+0x26>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800f3cc:	4b08      	ldr	r3, [pc, #32]	; (800f3f0 <HAL_SYSTICK_Config+0x2c>)
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800f3ce:	b410      	push	{r4}
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800f3d0:	4c08      	ldr	r4, [pc, #32]	; (800f3f4 <HAL_SYSTICK_Config+0x30>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800f3d2:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800f3d4:	20f0      	movs	r0, #240	; 0xf0
 800f3d6:	f884 0023 	strb.w	r0, [r4, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800f3da:	2200      	movs	r2, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800f3dc:	2107      	movs	r1, #7
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800f3de:	4610      	mov	r0, r2
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800f3e0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800f3e2:	6019      	str	r1, [r3, #0]
   return SysTick_Config(TicksNumb);
}
 800f3e4:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f3e8:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 800f3ea:	2001      	movs	r0, #1
 800f3ec:	4770      	bx	lr
 800f3ee:	bf00      	nop
 800f3f0:	e000e010 	.word	0xe000e010
 800f3f4:	e000ed00 	.word	0xe000ed00

0800f3f8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800f3f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f3fa:	4604      	mov	r4, r0
  uint32_t tmp = 0U;
  uint32_t tickstart = HAL_GetTick();
 800f3fc:	f7ff fcfa 	bl	800edf4 <HAL_GetTick>
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800f400:	2c00      	cmp	r4, #0
 800f402:	d054      	beq.n	800f4ae <HAL_DMA_Init+0xb6>
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800f404:	2202      	movs	r2, #2
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800f406:	6823      	ldr	r3, [r4, #0]
  hdma->State = HAL_DMA_STATE_BUSY;
 800f408:	f884 2035 	strb.w	r2, [r4, #53]	; 0x35
  __HAL_DMA_DISABLE(hdma);
 800f40c:	681a      	ldr	r2, [r3, #0]
  __HAL_UNLOCK(hdma);
 800f40e:	2100      	movs	r1, #0
  __HAL_DMA_DISABLE(hdma);
 800f410:	f022 0201 	bic.w	r2, r2, #1
  __HAL_UNLOCK(hdma);
 800f414:	f884 1034 	strb.w	r1, [r4, #52]	; 0x34
 800f418:	4605      	mov	r5, r0
  __HAL_DMA_DISABLE(hdma);
 800f41a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800f41c:	e005      	b.n	800f42a <HAL_DMA_Init+0x32>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800f41e:	f7ff fce9 	bl	800edf4 <HAL_GetTick>
 800f422:	1b40      	subs	r0, r0, r5
 800f424:	2805      	cmp	r0, #5
 800f426:	d83b      	bhi.n	800f4a0 <HAL_DMA_Init+0xa8>
 800f428:	6823      	ldr	r3, [r4, #0]
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800f42a:	681a      	ldr	r2, [r3, #0]
 800f42c:	07d1      	lsls	r1, r2, #31
 800f42e:	d4f6      	bmi.n	800f41e <HAL_DMA_Init+0x26>
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800f430:	e9d4 2601 	ldrd	r2, r6, [r4, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800f434:	e9d4 5103 	ldrd	r5, r1, [r4, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800f438:	4332      	orrs	r2, r6
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800f43a:	6960      	ldr	r0, [r4, #20]
  tmp = hdma->Instance->CR;
 800f43c:	681f      	ldr	r7, [r3, #0]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800f43e:	432a      	orrs	r2, r5
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800f440:	e9d4 6506 	ldrd	r6, r5, [r4, #24]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800f444:	430a      	orrs	r2, r1
 800f446:	4302      	orrs	r2, r0
          hdma->Init.Mode                | hdma->Init.Priority;
 800f448:	6a21      	ldr	r1, [r4, #32]
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800f44a:	4835      	ldr	r0, [pc, #212]	; (800f520 <HAL_DMA_Init+0x128>)
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800f44c:	4332      	orrs	r2, r6
 800f44e:	432a      	orrs	r2, r5
          hdma->Init.Mode                | hdma->Init.Priority;
 800f450:	430a      	orrs	r2, r1

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800f452:	6a61      	ldr	r1, [r4, #36]	; 0x24
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800f454:	4038      	ands	r0, r7
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800f456:	2904      	cmp	r1, #4
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800f458:	ea42 0200 	orr.w	r2, r2, r0
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800f45c:	d029      	beq.n	800f4b2 <HAL_DMA_Init+0xba>
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800f45e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800f460:	695a      	ldr	r2, [r3, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800f462:	f022 0207 	bic.w	r2, r2, #7

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800f466:	4311      	orrs	r1, r2
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800f468:	b2da      	uxtb	r2, r3
 800f46a:	482e      	ldr	r0, [pc, #184]	; (800f524 <HAL_DMA_Init+0x12c>)
  hdma->Instance->FCR = tmp;
 800f46c:	6159      	str	r1, [r3, #20]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800f46e:	3a10      	subs	r2, #16
 800f470:	fba0 1202 	umull	r1, r2, r0, r2
 800f474:	0912      	lsrs	r2, r2, #4
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800f476:	492c      	ldr	r1, [pc, #176]	; (800f528 <HAL_DMA_Init+0x130>)
 800f478:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800f47c:	5c89      	ldrb	r1, [r1, r2]
 800f47e:	65e1      	str	r1, [r4, #92]	; 0x5c
 800f480:	f023 0303 	bic.w	r3, r3, #3
  
  if (stream_number > 3U)
 800f484:	2a03      	cmp	r2, #3
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800f486:	bf88      	it	hi
 800f488:	3304      	addhi	r3, #4
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800f48a:	223f      	movs	r2, #63	; 0x3f
 800f48c:	408a      	lsls	r2, r1
  hdma->State = HAL_DMA_STATE_READY;
 800f48e:	2501      	movs	r5, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800f490:	2100      	movs	r1, #0
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800f492:	65a3      	str	r3, [r4, #88]	; 0x58
  return HAL_OK;
 800f494:	4608      	mov	r0, r1
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800f496:	609a      	str	r2, [r3, #8]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800f498:	6561      	str	r1, [r4, #84]	; 0x54
  hdma->State = HAL_DMA_STATE_READY;
 800f49a:	f884 5035 	strb.w	r5, [r4, #53]	; 0x35
}
 800f49e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800f4a0:	2303      	movs	r3, #3
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800f4a2:	2220      	movs	r2, #32
 800f4a4:	6562      	str	r2, [r4, #84]	; 0x54
      return HAL_TIMEOUT;
 800f4a6:	4618      	mov	r0, r3
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800f4a8:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
}
 800f4ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return HAL_ERROR;
 800f4ae:	2001      	movs	r0, #1
}
 800f4b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800f4b2:	e9d4 010b 	ldrd	r0, r1, [r4, #44]	; 0x2c
 800f4b6:	4301      	orrs	r1, r0
 800f4b8:	430a      	orrs	r2, r1
    tmp |= hdma->Init.FIFOThreshold;
 800f4ba:	6aa5      	ldr	r5, [r4, #40]	; 0x28
  hdma->Instance->CR = tmp;  
 800f4bc:	601a      	str	r2, [r3, #0]
  tmp = hdma->Instance->FCR;
 800f4be:	695a      	ldr	r2, [r3, #20]
    tmp |= hdma->Init.FIFOThreshold;
 800f4c0:	f045 0104 	orr.w	r1, r5, #4
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800f4c4:	f022 0207 	bic.w	r2, r2, #7
    tmp |= hdma->Init.FIFOThreshold;
 800f4c8:	4311      	orrs	r1, r2
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800f4ca:	2800      	cmp	r0, #0
 800f4cc:	d0cc      	beq.n	800f468 <HAL_DMA_Init+0x70>
{
  HAL_StatusTypeDef status = HAL_OK;
  uint32_t tmp = hdma->Init.FIFOThreshold;
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800f4ce:	b17e      	cbz	r6, 800f4f0 <HAL_DMA_Init+0xf8>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800f4d0:	f5b6 5f00 	cmp.w	r6, #8192	; 0x2000
 800f4d4:	d016      	beq.n	800f504 <HAL_DMA_Init+0x10c>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800f4d6:	2d02      	cmp	r5, #2
 800f4d8:	d903      	bls.n	800f4e2 <HAL_DMA_Init+0xea>
 800f4da:	2d03      	cmp	r5, #3
 800f4dc:	d1c4      	bne.n	800f468 <HAL_DMA_Init+0x70>
    case DMA_FIFO_THRESHOLD_HALFFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
      break;
    case DMA_FIFO_THRESHOLD_FULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800f4de:	01c2      	lsls	r2, r0, #7
 800f4e0:	d5c2      	bpl.n	800f468 <HAL_DMA_Init+0x70>
        hdma->State = HAL_DMA_STATE_READY;
 800f4e2:	2301      	movs	r3, #1
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800f4e4:	2240      	movs	r2, #64	; 0x40
 800f4e6:	6562      	str	r2, [r4, #84]	; 0x54
        return HAL_ERROR; 
 800f4e8:	4618      	mov	r0, r3
        hdma->State = HAL_DMA_STATE_READY;
 800f4ea:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
}
 800f4ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    switch (tmp)
 800f4f0:	2d01      	cmp	r5, #1
 800f4f2:	d003      	beq.n	800f4fc <HAL_DMA_Init+0x104>
 800f4f4:	d3f3      	bcc.n	800f4de <HAL_DMA_Init+0xe6>
 800f4f6:	2d02      	cmp	r5, #2
 800f4f8:	d1b6      	bne.n	800f468 <HAL_DMA_Init+0x70>
 800f4fa:	e7f0      	b.n	800f4de <HAL_DMA_Init+0xe6>
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800f4fc:	f1b0 7fc0 	cmp.w	r0, #25165824	; 0x1800000
 800f500:	d1b2      	bne.n	800f468 <HAL_DMA_Init+0x70>
 800f502:	e7ee      	b.n	800f4e2 <HAL_DMA_Init+0xea>
    switch (tmp)
 800f504:	2d03      	cmp	r5, #3
 800f506:	d8af      	bhi.n	800f468 <HAL_DMA_Init+0x70>
 800f508:	a201      	add	r2, pc, #4	; (adr r2, 800f510 <HAL_DMA_Init+0x118>)
 800f50a:	f852 f025 	ldr.w	pc, [r2, r5, lsl #2]
 800f50e:	bf00      	nop
 800f510:	0800f4e3 	.word	0x0800f4e3
 800f514:	0800f4df 	.word	0x0800f4df
 800f518:	0800f4e3 	.word	0x0800f4e3
 800f51c:	0800f4fd 	.word	0x0800f4fd
 800f520:	f010803f 	.word	0xf010803f
 800f524:	aaaaaaab 	.word	0xaaaaaaab
 800f528:	08017074 	.word	0x08017074

0800f52c <HAL_DMA_Start_IT>:
{
 800f52c:	b4f0      	push	{r4, r5, r6, r7}
  __HAL_LOCK(hdma);
 800f52e:	f890 4034 	ldrb.w	r4, [r0, #52]	; 0x34
 800f532:	2c01      	cmp	r4, #1
 800f534:	d035      	beq.n	800f5a2 <HAL_DMA_Start_IT+0x76>
  if(HAL_DMA_STATE_READY == hdma->State)
 800f536:	f890 4035 	ldrb.w	r4, [r0, #53]	; 0x35
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800f53a:	6d86      	ldr	r6, [r0, #88]	; 0x58
  __HAL_LOCK(hdma);
 800f53c:	2501      	movs	r5, #1
  if(HAL_DMA_STATE_READY == hdma->State)
 800f53e:	42ac      	cmp	r4, r5
  __HAL_LOCK(hdma);
 800f540:	f880 5034 	strb.w	r5, [r0, #52]	; 0x34
  if(HAL_DMA_STATE_READY == hdma->State)
 800f544:	d127      	bne.n	800f596 <HAL_DMA_Start_IT+0x6a>
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800f546:	6804      	ldr	r4, [r0, #0]
    hdma->State = HAL_DMA_STATE_BUSY;
 800f548:	2702      	movs	r7, #2
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800f54a:	2500      	movs	r5, #0
    hdma->State = HAL_DMA_STATE_BUSY;
 800f54c:	f880 7035 	strb.w	r7, [r0, #53]	; 0x35
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800f550:	6545      	str	r5, [r0, #84]	; 0x54
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800f552:	6825      	ldr	r5, [r4, #0]
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800f554:	6887      	ldr	r7, [r0, #8]
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800f556:	f425 2580 	bic.w	r5, r5, #262144	; 0x40000
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800f55a:	2f40      	cmp	r7, #64	; 0x40
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800f55c:	6025      	str	r5, [r4, #0]
  hdma->Instance->NDTR = DataLength;
 800f55e:	6063      	str	r3, [r4, #4]
    hdma->Instance->PAR = DstAddress;
 800f560:	bf0a      	itet	eq
 800f562:	60a2      	streq	r2, [r4, #8]
    hdma->Instance->PAR = SrcAddress;
 800f564:	60a1      	strne	r1, [r4, #8]
    hdma->Instance->M0AR = SrcAddress;
 800f566:	60e1      	streq	r1, [r4, #12]
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800f568:	6dc1      	ldr	r1, [r0, #92]	; 0x5c
    hdma->Instance->M0AR = DstAddress;
 800f56a:	bf18      	it	ne
 800f56c:	60e2      	strne	r2, [r4, #12]
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800f56e:	233f      	movs	r3, #63	; 0x3f
 800f570:	408b      	lsls	r3, r1
    if(hdma->XferHalfCpltCallback != NULL)
 800f572:	6c02      	ldr	r2, [r0, #64]	; 0x40
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800f574:	60b3      	str	r3, [r6, #8]
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800f576:	6823      	ldr	r3, [r4, #0]
 800f578:	f043 0316 	orr.w	r3, r3, #22
 800f57c:	6023      	str	r3, [r4, #0]
    if(hdma->XferHalfCpltCallback != NULL)
 800f57e:	b11a      	cbz	r2, 800f588 <HAL_DMA_Start_IT+0x5c>
      hdma->Instance->CR  |= DMA_IT_HT;
 800f580:	6823      	ldr	r3, [r4, #0]
 800f582:	f043 0308 	orr.w	r3, r3, #8
 800f586:	6023      	str	r3, [r4, #0]
    __HAL_DMA_ENABLE(hdma);
 800f588:	6823      	ldr	r3, [r4, #0]
 800f58a:	f043 0301 	orr.w	r3, r3, #1
 800f58e:	6023      	str	r3, [r4, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800f590:	2000      	movs	r0, #0
}
 800f592:	bcf0      	pop	{r4, r5, r6, r7}
 800f594:	4770      	bx	lr
    __HAL_UNLOCK(hdma);	  
 800f596:	2300      	movs	r3, #0
 800f598:	f880 3034 	strb.w	r3, [r0, #52]	; 0x34
}
 800f59c:	bcf0      	pop	{r4, r5, r6, r7}
    status = HAL_BUSY;
 800f59e:	2002      	movs	r0, #2
}
 800f5a0:	4770      	bx	lr
  __HAL_LOCK(hdma);
 800f5a2:	2002      	movs	r0, #2
}
 800f5a4:	bcf0      	pop	{r4, r5, r6, r7}
 800f5a6:	4770      	bx	lr

0800f5a8 <HAL_DMA_Abort>:
{
 800f5a8:	b570      	push	{r4, r5, r6, lr}
 800f5aa:	4604      	mov	r4, r0
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800f5ac:	6d86      	ldr	r6, [r0, #88]	; 0x58
  uint32_t tickstart = HAL_GetTick();
 800f5ae:	f7ff fc21 	bl	800edf4 <HAL_GetTick>
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800f5b2:	f894 3035 	ldrb.w	r3, [r4, #53]	; 0x35
 800f5b6:	2b02      	cmp	r3, #2
 800f5b8:	d006      	beq.n	800f5c8 <HAL_DMA_Abort+0x20>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800f5ba:	2280      	movs	r2, #128	; 0x80
    __HAL_UNLOCK(hdma);
 800f5bc:	2300      	movs	r3, #0
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800f5be:	6562      	str	r2, [r4, #84]	; 0x54
    __HAL_UNLOCK(hdma);
 800f5c0:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    return HAL_ERROR;
 800f5c4:	2001      	movs	r0, #1
}
 800f5c6:	bd70      	pop	{r4, r5, r6, pc}
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800f5c8:	6823      	ldr	r3, [r4, #0]
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800f5ca:	6c21      	ldr	r1, [r4, #64]	; 0x40
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800f5cc:	681a      	ldr	r2, [r3, #0]
 800f5ce:	f022 0216 	bic.w	r2, r2, #22
 800f5d2:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800f5d4:	695a      	ldr	r2, [r3, #20]
 800f5d6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800f5da:	4605      	mov	r5, r0
 800f5dc:	615a      	str	r2, [r3, #20]
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800f5de:	b331      	cbz	r1, 800f62e <HAL_DMA_Abort+0x86>
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800f5e0:	681a      	ldr	r2, [r3, #0]
 800f5e2:	f022 0208 	bic.w	r2, r2, #8
 800f5e6:	601a      	str	r2, [r3, #0]
    __HAL_DMA_DISABLE(hdma);
 800f5e8:	681a      	ldr	r2, [r3, #0]
 800f5ea:	f022 0201 	bic.w	r2, r2, #1
 800f5ee:	601a      	str	r2, [r3, #0]
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800f5f0:	e005      	b.n	800f5fe <HAL_DMA_Abort+0x56>
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800f5f2:	f7ff fbff 	bl	800edf4 <HAL_GetTick>
 800f5f6:	1b40      	subs	r0, r0, r5
 800f5f8:	2805      	cmp	r0, #5
 800f5fa:	d80f      	bhi.n	800f61c <HAL_DMA_Abort+0x74>
 800f5fc:	6823      	ldr	r3, [r4, #0]
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800f5fe:	681b      	ldr	r3, [r3, #0]
 800f600:	f013 0301 	ands.w	r3, r3, #1
 800f604:	d1f5      	bne.n	800f5f2 <HAL_DMA_Abort+0x4a>
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800f606:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800f608:	223f      	movs	r2, #63	; 0x3f
 800f60a:	408a      	lsls	r2, r1
    hdma->State = HAL_DMA_STATE_READY;
 800f60c:	2101      	movs	r1, #1
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800f60e:	60b2      	str	r2, [r6, #8]
  return HAL_OK;
 800f610:	4618      	mov	r0, r3
    __HAL_UNLOCK(hdma);
 800f612:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    hdma->State = HAL_DMA_STATE_READY;
 800f616:	f884 1035 	strb.w	r1, [r4, #53]	; 0x35
}
 800f61a:	bd70      	pop	{r4, r5, r6, pc}
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800f61c:	2220      	movs	r2, #32
        __HAL_UNLOCK(hdma);
 800f61e:	2300      	movs	r3, #0
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800f620:	2003      	movs	r0, #3
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800f622:	6562      	str	r2, [r4, #84]	; 0x54
        __HAL_UNLOCK(hdma);
 800f624:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800f628:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
}
 800f62c:	bd70      	pop	{r4, r5, r6, pc}
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800f62e:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 800f630:	2a00      	cmp	r2, #0
 800f632:	d1d5      	bne.n	800f5e0 <HAL_DMA_Abort+0x38>
 800f634:	e7d8      	b.n	800f5e8 <HAL_DMA_Abort+0x40>
 800f636:	bf00      	nop

0800f638 <HAL_DMA_IRQHandler>:
{
 800f638:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f63a:	b083      	sub	sp, #12
  __IO uint32_t count = 0U;
 800f63c:	2300      	movs	r3, #0
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800f63e:	6d87      	ldr	r7, [r0, #88]	; 0x58
  __IO uint32_t count = 0U;
 800f640:	9301      	str	r3, [sp, #4]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800f642:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
  tmpisr = regs->ISR;
 800f644:	683d      	ldr	r5, [r7, #0]
  uint32_t timeout = SystemCoreClock / 9600U;
 800f646:	4965      	ldr	r1, [pc, #404]	; (800f7dc <HAL_DMA_IRQHandler+0x1a4>)
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800f648:	2208      	movs	r2, #8
 800f64a:	409a      	lsls	r2, r3
 800f64c:	422a      	tst	r2, r5
{
 800f64e:	4604      	mov	r4, r0
  uint32_t timeout = SystemCoreClock / 9600U;
 800f650:	680e      	ldr	r6, [r1, #0]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800f652:	d003      	beq.n	800f65c <HAL_DMA_IRQHandler+0x24>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800f654:	6801      	ldr	r1, [r0, #0]
 800f656:	6808      	ldr	r0, [r1, #0]
 800f658:	0740      	lsls	r0, r0, #29
 800f65a:	d459      	bmi.n	800f710 <HAL_DMA_IRQHandler+0xd8>
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800f65c:	2201      	movs	r2, #1
 800f65e:	409a      	lsls	r2, r3
 800f660:	422a      	tst	r2, r5
 800f662:	d003      	beq.n	800f66c <HAL_DMA_IRQHandler+0x34>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800f664:	6821      	ldr	r1, [r4, #0]
 800f666:	6949      	ldr	r1, [r1, #20]
 800f668:	0608      	lsls	r0, r1, #24
 800f66a:	d474      	bmi.n	800f756 <HAL_DMA_IRQHandler+0x11e>
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800f66c:	2204      	movs	r2, #4
 800f66e:	409a      	lsls	r2, r3
 800f670:	422a      	tst	r2, r5
 800f672:	d003      	beq.n	800f67c <HAL_DMA_IRQHandler+0x44>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800f674:	6821      	ldr	r1, [r4, #0]
 800f676:	6809      	ldr	r1, [r1, #0]
 800f678:	0789      	lsls	r1, r1, #30
 800f67a:	d466      	bmi.n	800f74a <HAL_DMA_IRQHandler+0x112>
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800f67c:	2210      	movs	r2, #16
 800f67e:	409a      	lsls	r2, r3
 800f680:	422a      	tst	r2, r5
 800f682:	d003      	beq.n	800f68c <HAL_DMA_IRQHandler+0x54>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800f684:	6821      	ldr	r1, [r4, #0]
 800f686:	6808      	ldr	r0, [r1, #0]
 800f688:	0700      	lsls	r0, r0, #28
 800f68a:	d44b      	bmi.n	800f724 <HAL_DMA_IRQHandler+0xec>
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800f68c:	2220      	movs	r2, #32
 800f68e:	409a      	lsls	r2, r3
 800f690:	422a      	tst	r2, r5
 800f692:	d014      	beq.n	800f6be <HAL_DMA_IRQHandler+0x86>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800f694:	6821      	ldr	r1, [r4, #0]
 800f696:	6808      	ldr	r0, [r1, #0]
 800f698:	06c0      	lsls	r0, r0, #27
 800f69a:	d510      	bpl.n	800f6be <HAL_DMA_IRQHandler+0x86>
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800f69c:	60ba      	str	r2, [r7, #8]
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800f69e:	f894 2035 	ldrb.w	r2, [r4, #53]	; 0x35
 800f6a2:	2a05      	cmp	r2, #5
 800f6a4:	d063      	beq.n	800f76e <HAL_DMA_IRQHandler+0x136>
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800f6a6:	680b      	ldr	r3, [r1, #0]
 800f6a8:	f413 2f80 	tst.w	r3, #262144	; 0x40000
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800f6ac:	680b      	ldr	r3, [r1, #0]
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800f6ae:	d07e      	beq.n	800f7ae <HAL_DMA_IRQHandler+0x176>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800f6b0:	0319      	lsls	r1, r3, #12
 800f6b2:	f140 8089 	bpl.w	800f7c8 <HAL_DMA_IRQHandler+0x190>
        if(hdma->XferCpltCallback != NULL)
 800f6b6:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800f6b8:	b10b      	cbz	r3, 800f6be <HAL_DMA_IRQHandler+0x86>
          hdma->XferCpltCallback(hdma);
 800f6ba:	4620      	mov	r0, r4
 800f6bc:	4798      	blx	r3
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800f6be:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800f6c0:	b323      	cbz	r3, 800f70c <HAL_DMA_IRQHandler+0xd4>
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800f6c2:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800f6c4:	07da      	lsls	r2, r3, #31
 800f6c6:	d51a      	bpl.n	800f6fe <HAL_DMA_IRQHandler+0xc6>
      hdma->State = HAL_DMA_STATE_ABORT;
 800f6c8:	2305      	movs	r3, #5
      __HAL_DMA_DISABLE(hdma);
 800f6ca:	6822      	ldr	r2, [r4, #0]
      hdma->State = HAL_DMA_STATE_ABORT;
 800f6cc:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
      __HAL_DMA_DISABLE(hdma);
 800f6d0:	6813      	ldr	r3, [r2, #0]
  uint32_t timeout = SystemCoreClock / 9600U;
 800f6d2:	4943      	ldr	r1, [pc, #268]	; (800f7e0 <HAL_DMA_IRQHandler+0x1a8>)
      __HAL_DMA_DISABLE(hdma);
 800f6d4:	f023 0301 	bic.w	r3, r3, #1
  uint32_t timeout = SystemCoreClock / 9600U;
 800f6d8:	fba1 1606 	umull	r1, r6, r1, r6
      __HAL_DMA_DISABLE(hdma);
 800f6dc:	6013      	str	r3, [r2, #0]
  uint32_t timeout = SystemCoreClock / 9600U;
 800f6de:	0ab6      	lsrs	r6, r6, #10
 800f6e0:	e002      	b.n	800f6e8 <HAL_DMA_IRQHandler+0xb0>
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800f6e2:	6813      	ldr	r3, [r2, #0]
 800f6e4:	07db      	lsls	r3, r3, #31
 800f6e6:	d504      	bpl.n	800f6f2 <HAL_DMA_IRQHandler+0xba>
        if (++count > timeout)
 800f6e8:	9b01      	ldr	r3, [sp, #4]
 800f6ea:	3301      	adds	r3, #1
 800f6ec:	42b3      	cmp	r3, r6
 800f6ee:	9301      	str	r3, [sp, #4]
 800f6f0:	d9f7      	bls.n	800f6e2 <HAL_DMA_IRQHandler+0xaa>
      __HAL_UNLOCK(hdma);
 800f6f2:	2200      	movs	r2, #0
      hdma->State = HAL_DMA_STATE_READY;
 800f6f4:	2301      	movs	r3, #1
      __HAL_UNLOCK(hdma);
 800f6f6:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
      hdma->State = HAL_DMA_STATE_READY;
 800f6fa:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
    if(hdma->XferErrorCallback != NULL)
 800f6fe:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 800f700:	b123      	cbz	r3, 800f70c <HAL_DMA_IRQHandler+0xd4>
      hdma->XferErrorCallback(hdma);
 800f702:	4620      	mov	r0, r4
}
 800f704:	b003      	add	sp, #12
 800f706:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
      hdma->XferErrorCallback(hdma);
 800f70a:	4718      	bx	r3
}
 800f70c:	b003      	add	sp, #12
 800f70e:	bdf0      	pop	{r4, r5, r6, r7, pc}
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800f710:	6808      	ldr	r0, [r1, #0]
 800f712:	f020 0004 	bic.w	r0, r0, #4
 800f716:	6008      	str	r0, [r1, #0]
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800f718:	60ba      	str	r2, [r7, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800f71a:	6d62      	ldr	r2, [r4, #84]	; 0x54
 800f71c:	f042 0201 	orr.w	r2, r2, #1
 800f720:	6562      	str	r2, [r4, #84]	; 0x54
 800f722:	e79b      	b.n	800f65c <HAL_DMA_IRQHandler+0x24>
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800f724:	60ba      	str	r2, [r7, #8]
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800f726:	680a      	ldr	r2, [r1, #0]
 800f728:	f412 2f80 	tst.w	r2, #262144	; 0x40000
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800f72c:	680a      	ldr	r2, [r1, #0]
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800f72e:	d118      	bne.n	800f762 <HAL_DMA_IRQHandler+0x12a>
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800f730:	05d2      	lsls	r2, r2, #23
 800f732:	d403      	bmi.n	800f73c <HAL_DMA_IRQHandler+0x104>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800f734:	680a      	ldr	r2, [r1, #0]
 800f736:	f022 0208 	bic.w	r2, r2, #8
 800f73a:	600a      	str	r2, [r1, #0]
        if(hdma->XferHalfCpltCallback != NULL)
 800f73c:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800f73e:	2a00      	cmp	r2, #0
 800f740:	d0a4      	beq.n	800f68c <HAL_DMA_IRQHandler+0x54>
          hdma->XferHalfCpltCallback(hdma);
 800f742:	4620      	mov	r0, r4
 800f744:	4790      	blx	r2
 800f746:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 800f748:	e7a0      	b.n	800f68c <HAL_DMA_IRQHandler+0x54>
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800f74a:	60ba      	str	r2, [r7, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800f74c:	6d62      	ldr	r2, [r4, #84]	; 0x54
 800f74e:	f042 0204 	orr.w	r2, r2, #4
 800f752:	6562      	str	r2, [r4, #84]	; 0x54
 800f754:	e792      	b.n	800f67c <HAL_DMA_IRQHandler+0x44>
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800f756:	60ba      	str	r2, [r7, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800f758:	6d62      	ldr	r2, [r4, #84]	; 0x54
 800f75a:	f042 0202 	orr.w	r2, r2, #2
 800f75e:	6562      	str	r2, [r4, #84]	; 0x54
 800f760:	e784      	b.n	800f66c <HAL_DMA_IRQHandler+0x34>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800f762:	0311      	lsls	r1, r2, #12
 800f764:	d5ea      	bpl.n	800f73c <HAL_DMA_IRQHandler+0x104>
          if(hdma->XferM1HalfCpltCallback != NULL)
 800f766:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 800f768:	2a00      	cmp	r2, #0
 800f76a:	d1ea      	bne.n	800f742 <HAL_DMA_IRQHandler+0x10a>
 800f76c:	e78e      	b.n	800f68c <HAL_DMA_IRQHandler+0x54>
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800f76e:	680a      	ldr	r2, [r1, #0]
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800f770:	6c20      	ldr	r0, [r4, #64]	; 0x40
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800f772:	f022 0216 	bic.w	r2, r2, #22
 800f776:	600a      	str	r2, [r1, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800f778:	694a      	ldr	r2, [r1, #20]
 800f77a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800f77e:	614a      	str	r2, [r1, #20]
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800f780:	b338      	cbz	r0, 800f7d2 <HAL_DMA_IRQHandler+0x19a>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800f782:	680a      	ldr	r2, [r1, #0]
 800f784:	f022 0208 	bic.w	r2, r2, #8
 800f788:	600a      	str	r2, [r1, #0]
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800f78a:	223f      	movs	r2, #63	; 0x3f
        if(hdma->XferAbortCallback != NULL)
 800f78c:	6d21      	ldr	r1, [r4, #80]	; 0x50
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800f78e:	fa02 f303 	lsl.w	r3, r2, r3
        __HAL_UNLOCK(hdma);
 800f792:	2000      	movs	r0, #0
        hdma->State = HAL_DMA_STATE_READY;
 800f794:	2201      	movs	r2, #1
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800f796:	60bb      	str	r3, [r7, #8]
        __HAL_UNLOCK(hdma);
 800f798:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
        hdma->State = HAL_DMA_STATE_READY;
 800f79c:	f884 2035 	strb.w	r2, [r4, #53]	; 0x35
        if(hdma->XferAbortCallback != NULL)
 800f7a0:	2900      	cmp	r1, #0
 800f7a2:	d0b3      	beq.n	800f70c <HAL_DMA_IRQHandler+0xd4>
          hdma->XferAbortCallback(hdma);
 800f7a4:	4620      	mov	r0, r4
}
 800f7a6:	b003      	add	sp, #12
 800f7a8:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
          hdma->XferAbortCallback(hdma);
 800f7ac:	4708      	bx	r1
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800f7ae:	f413 7380 	ands.w	r3, r3, #256	; 0x100
 800f7b2:	d180      	bne.n	800f6b6 <HAL_DMA_IRQHandler+0x7e>
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800f7b4:	680a      	ldr	r2, [r1, #0]
          hdma->State = HAL_DMA_STATE_READY;
 800f7b6:	2001      	movs	r0, #1
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800f7b8:	f022 0210 	bic.w	r2, r2, #16
 800f7bc:	600a      	str	r2, [r1, #0]
          __HAL_UNLOCK(hdma);
 800f7be:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
          hdma->State = HAL_DMA_STATE_READY;
 800f7c2:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
 800f7c6:	e776      	b.n	800f6b6 <HAL_DMA_IRQHandler+0x7e>
          if(hdma->XferM1CpltCallback != NULL)
 800f7c8:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800f7ca:	2b00      	cmp	r3, #0
 800f7cc:	f47f af75 	bne.w	800f6ba <HAL_DMA_IRQHandler+0x82>
 800f7d0:	e775      	b.n	800f6be <HAL_DMA_IRQHandler+0x86>
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800f7d2:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 800f7d4:	2a00      	cmp	r2, #0
 800f7d6:	d1d4      	bne.n	800f782 <HAL_DMA_IRQHandler+0x14a>
 800f7d8:	e7d7      	b.n	800f78a <HAL_DMA_IRQHandler+0x152>
 800f7da:	bf00      	nop
 800f7dc:	2000000c 	.word	0x2000000c
 800f7e0:	1b4e81b5 	.word	0x1b4e81b5

0800f7e4 <FLASH_SetErrorCode>:
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 800f7e4:	4b1b      	ldr	r3, [pc, #108]	; (800f854 <FLASH_SetErrorCode+0x70>)
 800f7e6:	68da      	ldr	r2, [r3, #12]
 800f7e8:	06d1      	lsls	r1, r2, #27
 800f7ea:	d505      	bpl.n	800f7f8 <FLASH_SetErrorCode+0x14>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 800f7ec:	491a      	ldr	r1, [pc, #104]	; (800f858 <FLASH_SetErrorCode+0x74>)
 800f7ee:	69ca      	ldr	r2, [r1, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 800f7f0:	2010      	movs	r0, #16
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 800f7f2:	4302      	orrs	r2, r0
 800f7f4:	61ca      	str	r2, [r1, #28]
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 800f7f6:	60d8      	str	r0, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 800f7f8:	4b16      	ldr	r3, [pc, #88]	; (800f854 <FLASH_SetErrorCode+0x70>)
 800f7fa:	68da      	ldr	r2, [r3, #12]
 800f7fc:	0692      	lsls	r2, r2, #26
 800f7fe:	d506      	bpl.n	800f80e <FLASH_SetErrorCode+0x2a>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 800f800:	4915      	ldr	r1, [pc, #84]	; (800f858 <FLASH_SetErrorCode+0x74>)
 800f802:	69ca      	ldr	r2, [r1, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 800f804:	2020      	movs	r0, #32
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 800f806:	f042 0208 	orr.w	r2, r2, #8
 800f80a:	61ca      	str	r2, [r1, #28]
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 800f80c:	60d8      	str	r0, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 800f80e:	4b11      	ldr	r3, [pc, #68]	; (800f854 <FLASH_SetErrorCode+0x70>)
 800f810:	68da      	ldr	r2, [r3, #12]
 800f812:	0650      	lsls	r0, r2, #25
 800f814:	d506      	bpl.n	800f824 <FLASH_SetErrorCode+0x40>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 800f816:	4910      	ldr	r1, [pc, #64]	; (800f858 <FLASH_SetErrorCode+0x74>)
 800f818:	69ca      	ldr	r2, [r1, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 800f81a:	2040      	movs	r0, #64	; 0x40
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 800f81c:	f042 0204 	orr.w	r2, r2, #4
 800f820:	61ca      	str	r2, [r1, #28]
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 800f822:	60d8      	str	r0, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 800f824:	4b0b      	ldr	r3, [pc, #44]	; (800f854 <FLASH_SetErrorCode+0x70>)
 800f826:	68da      	ldr	r2, [r3, #12]
 800f828:	0611      	lsls	r1, r2, #24
 800f82a:	d506      	bpl.n	800f83a <FLASH_SetErrorCode+0x56>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 800f82c:	490a      	ldr	r1, [pc, #40]	; (800f858 <FLASH_SetErrorCode+0x74>)
 800f82e:	69ca      	ldr	r2, [r1, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 800f830:	2080      	movs	r0, #128	; 0x80
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 800f832:	f042 0202 	orr.w	r2, r2, #2
 800f836:	61ca      	str	r2, [r1, #28]
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 800f838:	60d8      	str	r0, [r3, #12]
    
    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
  }
#endif /* FLASH_SR_RDERR */  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 800f83a:	4b06      	ldr	r3, [pc, #24]	; (800f854 <FLASH_SetErrorCode+0x70>)
 800f83c:	68da      	ldr	r2, [r3, #12]
 800f83e:	0792      	lsls	r2, r2, #30
 800f840:	d506      	bpl.n	800f850 <FLASH_SetErrorCode+0x6c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 800f842:	4905      	ldr	r1, [pc, #20]	; (800f858 <FLASH_SetErrorCode+0x74>)
 800f844:	69ca      	ldr	r2, [r1, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 800f846:	2002      	movs	r0, #2
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 800f848:	f042 0220 	orr.w	r2, r2, #32
 800f84c:	61ca      	str	r2, [r1, #28]
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 800f84e:	60d8      	str	r0, [r3, #12]
  }
}
 800f850:	4770      	bx	lr
 800f852:	bf00      	nop
 800f854:	40023c00 	.word	0x40023c00
 800f858:	20002024 	.word	0x20002024

0800f85c <HAL_FLASH_Unlock>:
  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 800f85c:	4b06      	ldr	r3, [pc, #24]	; (800f878 <HAL_FLASH_Unlock+0x1c>)
 800f85e:	691a      	ldr	r2, [r3, #16]
 800f860:	2a00      	cmp	r2, #0
 800f862:	db01      	blt.n	800f868 <HAL_FLASH_Unlock+0xc>
  HAL_StatusTypeDef status = HAL_OK;
 800f864:	2000      	movs	r0, #0
}
 800f866:	4770      	bx	lr
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 800f868:	4904      	ldr	r1, [pc, #16]	; (800f87c <HAL_FLASH_Unlock+0x20>)
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 800f86a:	4a05      	ldr	r2, [pc, #20]	; (800f880 <HAL_FLASH_Unlock+0x24>)
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 800f86c:	6059      	str	r1, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 800f86e:	605a      	str	r2, [r3, #4]
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 800f870:	6918      	ldr	r0, [r3, #16]
  HAL_StatusTypeDef status = HAL_OK;
 800f872:	0fc0      	lsrs	r0, r0, #31
 800f874:	4770      	bx	lr
 800f876:	bf00      	nop
 800f878:	40023c00 	.word	0x40023c00
 800f87c:	45670123 	.word	0x45670123
 800f880:	cdef89ab 	.word	0xcdef89ab

0800f884 <HAL_FLASH_Lock>:
  FLASH->CR |= FLASH_CR_LOCK;
 800f884:	4a03      	ldr	r2, [pc, #12]	; (800f894 <HAL_FLASH_Lock+0x10>)
 800f886:	6913      	ldr	r3, [r2, #16]
 800f888:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800f88c:	6113      	str	r3, [r2, #16]
}
 800f88e:	2000      	movs	r0, #0
 800f890:	4770      	bx	lr
 800f892:	bf00      	nop
 800f894:	40023c00 	.word	0x40023c00

0800f898 <FLASH_WaitForLastOperation>:
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800f898:	4b12      	ldr	r3, [pc, #72]	; (800f8e4 <FLASH_WaitForLastOperation+0x4c>)
{ 
 800f89a:	b570      	push	{r4, r5, r6, lr}
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800f89c:	2200      	movs	r2, #0
{ 
 800f89e:	4605      	mov	r5, r0
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800f8a0:	61da      	str	r2, [r3, #28]
  tickstart = HAL_GetTick();
 800f8a2:	f7ff faa7 	bl	800edf4 <HAL_GetTick>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 800f8a6:	4c10      	ldr	r4, [pc, #64]	; (800f8e8 <FLASH_WaitForLastOperation+0x50>)
  tickstart = HAL_GetTick();
 800f8a8:	4606      	mov	r6, r0
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 800f8aa:	e001      	b.n	800f8b0 <FLASH_WaitForLastOperation+0x18>
    if(Timeout != HAL_MAX_DELAY)
 800f8ac:	1c69      	adds	r1, r5, #1
 800f8ae:	d10d      	bne.n	800f8cc <FLASH_WaitForLastOperation+0x34>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 800f8b0:	68e3      	ldr	r3, [r4, #12]
 800f8b2:	03da      	lsls	r2, r3, #15
 800f8b4:	d4fa      	bmi.n	800f8ac <FLASH_WaitForLastOperation+0x14>
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 800f8b6:	68e3      	ldr	r3, [r4, #12]
 800f8b8:	07db      	lsls	r3, r3, #31
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 800f8ba:	bf44      	itt	mi
 800f8bc:	2301      	movmi	r3, #1
 800f8be:	60e3      	strmi	r3, [r4, #12]
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 800f8c0:	4b09      	ldr	r3, [pc, #36]	; (800f8e8 <FLASH_WaitForLastOperation+0x50>)
 800f8c2:	68d8      	ldr	r0, [r3, #12]
 800f8c4:	f010 00f2 	ands.w	r0, r0, #242	; 0xf2
 800f8c8:	d108      	bne.n	800f8dc <FLASH_WaitForLastOperation+0x44>
}  
 800f8ca:	bd70      	pop	{r4, r5, r6, pc}
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 800f8cc:	b125      	cbz	r5, 800f8d8 <FLASH_WaitForLastOperation+0x40>
 800f8ce:	f7ff fa91 	bl	800edf4 <HAL_GetTick>
 800f8d2:	1b80      	subs	r0, r0, r6
 800f8d4:	42a8      	cmp	r0, r5
 800f8d6:	d9eb      	bls.n	800f8b0 <FLASH_WaitForLastOperation+0x18>
        return HAL_TIMEOUT;
 800f8d8:	2003      	movs	r0, #3
}  
 800f8da:	bd70      	pop	{r4, r5, r6, pc}
    FLASH_SetErrorCode();
 800f8dc:	f7ff ff82 	bl	800f7e4 <FLASH_SetErrorCode>
    return HAL_ERROR;
 800f8e0:	2001      	movs	r0, #1
}  
 800f8e2:	bd70      	pop	{r4, r5, r6, pc}
 800f8e4:	20002024 	.word	0x20002024
 800f8e8:	40023c00 	.word	0x40023c00

0800f8ec <FLASH_Erase_Sector>:

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  
  if(VoltageRange == FLASH_VOLTAGE_RANGE_1)
 800f8ec:	b139      	cbz	r1, 800f8fe <FLASH_Erase_Sector+0x12>
  {
     tmp_psize = FLASH_PSIZE_BYTE;
  }
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_2)
 800f8ee:	2901      	cmp	r1, #1
 800f8f0:	d01c      	beq.n	800f92c <FLASH_Erase_Sector+0x40>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
  }
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_3)
 800f8f2:	2902      	cmp	r1, #2
  {
    tmp_psize = FLASH_PSIZE_WORD;
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 800f8f4:	bf0c      	ite	eq
 800f8f6:	f44f 7100 	moveq.w	r1, #512	; 0x200
 800f8fa:	f44f 7140 	movne.w	r1, #768	; 0x300
  }

  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800f8fe:	4b0d      	ldr	r3, [pc, #52]	; (800f934 <FLASH_Erase_Sector+0x48>)
 800f900:	691a      	ldr	r2, [r3, #16]
 800f902:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800f906:	611a      	str	r2, [r3, #16]
  FLASH->CR |= tmp_psize;
 800f908:	691a      	ldr	r2, [r3, #16]
 800f90a:	4311      	orrs	r1, r2
 800f90c:	6119      	str	r1, [r3, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 800f90e:	691a      	ldr	r2, [r3, #16]
 800f910:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 800f914:	611a      	str	r2, [r3, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 800f916:	691a      	ldr	r2, [r3, #16]
 800f918:	f042 0202 	orr.w	r2, r2, #2
 800f91c:	ea42 00c0 	orr.w	r0, r2, r0, lsl #3
 800f920:	6118      	str	r0, [r3, #16]
  FLASH->CR |= FLASH_CR_STRT;
 800f922:	691a      	ldr	r2, [r3, #16]
 800f924:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800f928:	611a      	str	r2, [r3, #16]
}
 800f92a:	4770      	bx	lr
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 800f92c:	f44f 7180 	mov.w	r1, #256	; 0x100
 800f930:	e7e5      	b.n	800f8fe <FLASH_Erase_Sector+0x12>
 800f932:	bf00      	nop
 800f934:	40023c00 	.word	0x40023c00

0800f938 <FLASH_FlushCaches>:
  * @retval None
  */
void FLASH_FlushCaches(void)
{
  /* Flush instruction cache  */
  if(READ_BIT(FLASH->ACR, FLASH_ACR_ICEN)!= RESET)
 800f938:	4b14      	ldr	r3, [pc, #80]	; (800f98c <FLASH_FlushCaches+0x54>)
 800f93a:	681a      	ldr	r2, [r3, #0]
 800f93c:	0591      	lsls	r1, r2, #22
 800f93e:	d50f      	bpl.n	800f960 <FLASH_FlushCaches+0x28>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 800f940:	681a      	ldr	r2, [r3, #0]
 800f942:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800f946:	601a      	str	r2, [r3, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 800f948:	681a      	ldr	r2, [r3, #0]
 800f94a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800f94e:	601a      	str	r2, [r3, #0]
 800f950:	681a      	ldr	r2, [r3, #0]
 800f952:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800f956:	601a      	str	r2, [r3, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800f958:	681a      	ldr	r2, [r3, #0]
 800f95a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800f95e:	601a      	str	r2, [r3, #0]
  }
  
  /* Flush data cache */
  if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != RESET)
 800f960:	4b0a      	ldr	r3, [pc, #40]	; (800f98c <FLASH_FlushCaches+0x54>)
 800f962:	681a      	ldr	r2, [r3, #0]
 800f964:	0552      	lsls	r2, r2, #21
 800f966:	d50f      	bpl.n	800f988 <FLASH_FlushCaches+0x50>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 800f968:	681a      	ldr	r2, [r3, #0]
 800f96a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800f96e:	601a      	str	r2, [r3, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 800f970:	681a      	ldr	r2, [r3, #0]
 800f972:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800f976:	601a      	str	r2, [r3, #0]
 800f978:	681a      	ldr	r2, [r3, #0]
 800f97a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800f97e:	601a      	str	r2, [r3, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 800f980:	681a      	ldr	r2, [r3, #0]
 800f982:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800f986:	601a      	str	r2, [r3, #0]
  }
}
 800f988:	4770      	bx	lr
 800f98a:	bf00      	nop
 800f98c:	40023c00 	.word	0x40023c00

0800f990 <HAL_FLASHEx_Erase>:
{
 800f990:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  __HAL_LOCK(&pFlash);
 800f994:	4e2d      	ldr	r6, [pc, #180]	; (800fa4c <HAL_FLASHEx_Erase+0xbc>)
 800f996:	7e33      	ldrb	r3, [r6, #24]
 800f998:	2b01      	cmp	r3, #1
 800f99a:	d038      	beq.n	800fa0e <HAL_FLASHEx_Erase+0x7e>
 800f99c:	2301      	movs	r3, #1
 800f99e:	4604      	mov	r4, r0
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800f9a0:	f24c 3050 	movw	r0, #50000	; 0xc350
 800f9a4:	4688      	mov	r8, r1
  __HAL_LOCK(&pFlash);
 800f9a6:	7633      	strb	r3, [r6, #24]
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800f9a8:	f7ff ff76 	bl	800f898 <FLASH_WaitForLastOperation>
  if(status == HAL_OK)
 800f9ac:	4607      	mov	r7, r0
 800f9ae:	bb48      	cbnz	r0, 800fa04 <HAL_FLASHEx_Erase+0x74>
    *SectorError = 0xFFFFFFFFU;
 800f9b0:	f04f 33ff 	mov.w	r3, #4294967295
 800f9b4:	f8c8 3000 	str.w	r3, [r8]
    if(pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 800f9b8:	6823      	ldr	r3, [r4, #0]
 800f9ba:	2b01      	cmp	r3, #1
 800f9bc:	d02b      	beq.n	800fa16 <HAL_FLASHEx_Erase+0x86>
      for(index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 800f9be:	e9d4 5302 	ldrd	r5, r3, [r4, #8]
 800f9c2:	442b      	add	r3, r5
 800f9c4:	429d      	cmp	r5, r3
 800f9c6:	d21b      	bcs.n	800fa00 <HAL_FLASHEx_Erase+0x70>
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB));
 800f9c8:	f8df 9084 	ldr.w	r9, [pc, #132]	; 800fa50 <HAL_FLASHEx_Erase+0xc0>
 800f9cc:	e005      	b.n	800f9da <HAL_FLASHEx_Erase+0x4a>
      for(index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 800f9ce:	e9d4 2302 	ldrd	r2, r3, [r4, #8]
 800f9d2:	3501      	adds	r5, #1
 800f9d4:	4413      	add	r3, r2
 800f9d6:	42ab      	cmp	r3, r5
 800f9d8:	d912      	bls.n	800fa00 <HAL_FLASHEx_Erase+0x70>
        FLASH_Erase_Sector(index, (uint8_t) pEraseInit->VoltageRange);
 800f9da:	7c21      	ldrb	r1, [r4, #16]
 800f9dc:	4628      	mov	r0, r5
 800f9de:	f7ff ff85 	bl	800f8ec <FLASH_Erase_Sector>
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800f9e2:	f24c 3050 	movw	r0, #50000	; 0xc350
 800f9e6:	f7ff ff57 	bl	800f898 <FLASH_WaitForLastOperation>
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB));
 800f9ea:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800f9ee:	f023 03fa 	bic.w	r3, r3, #250	; 0xfa
 800f9f2:	f8c9 3010 	str.w	r3, [r9, #16]
        if(status != HAL_OK) 
 800f9f6:	2800      	cmp	r0, #0
 800f9f8:	d0e9      	beq.n	800f9ce <HAL_FLASHEx_Erase+0x3e>
          *SectorError = index;
 800f9fa:	f8c8 5000 	str.w	r5, [r8]
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800f9fe:	4607      	mov	r7, r0
    FLASH_FlushCaches();    
 800fa00:	f7ff ff9a 	bl	800f938 <FLASH_FlushCaches>
  __HAL_UNLOCK(&pFlash);
 800fa04:	2300      	movs	r3, #0
 800fa06:	7633      	strb	r3, [r6, #24]
}
 800fa08:	4638      	mov	r0, r7
 800fa0a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  __HAL_LOCK(&pFlash);
 800fa0e:	2702      	movs	r7, #2
}
 800fa10:	4638      	mov	r0, r7
 800fa12:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800fa16:	4d0e      	ldr	r5, [pc, #56]	; (800fa50 <HAL_FLASHEx_Erase+0xc0>)
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange, pEraseInit->Banks);
 800fa18:	6923      	ldr	r3, [r4, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800fa1a:	692a      	ldr	r2, [r5, #16]
 800fa1c:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800fa20:	612a      	str	r2, [r5, #16]
  FLASH->CR |= FLASH_CR_MER;
 800fa22:	692a      	ldr	r2, [r5, #16]
 800fa24:	f042 0204 	orr.w	r2, r2, #4
 800fa28:	612a      	str	r2, [r5, #16]
  FLASH->CR |= FLASH_CR_STRT | ((uint32_t)VoltageRange <<8U);
 800fa2a:	692a      	ldr	r2, [r5, #16]
 800fa2c:	021b      	lsls	r3, r3, #8
 800fa2e:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800fa32:	b29b      	uxth	r3, r3
 800fa34:	4313      	orrs	r3, r2
 800fa36:	612b      	str	r3, [r5, #16]
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800fa38:	f24c 3050 	movw	r0, #50000	; 0xc350
 800fa3c:	f7ff ff2c 	bl	800f898 <FLASH_WaitForLastOperation>
      FLASH->CR &= (~FLASH_MER_BIT);
 800fa40:	692b      	ldr	r3, [r5, #16]
 800fa42:	f023 0304 	bic.w	r3, r3, #4
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800fa46:	4607      	mov	r7, r0
      FLASH->CR &= (~FLASH_MER_BIT);
 800fa48:	612b      	str	r3, [r5, #16]
 800fa4a:	e7d9      	b.n	800fa00 <HAL_FLASHEx_Erase+0x70>
 800fa4c:	20002024 	.word	0x20002024
 800fa50:	40023c00 	.word	0x40023c00

0800fa54 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800fa54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  for(position = 0U; position < GPIO_NUMBER; position++)
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800fa58:	f8d1 8000 	ldr.w	r8, [r1]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800fa5c:	f8df e1f4 	ldr.w	lr, [pc, #500]	; 800fc54 <HAL_GPIO_Init+0x200>
{
 800fa60:	b083      	sub	sp, #12
  for(position = 0U; position < GPIO_NUMBER; position++)
 800fa62:	2400      	movs	r4, #0
 800fa64:	e003      	b.n	800fa6e <HAL_GPIO_Init+0x1a>
 800fa66:	3401      	adds	r4, #1
 800fa68:	2c10      	cmp	r4, #16
 800fa6a:	f000 808c 	beq.w	800fb86 <HAL_GPIO_Init+0x132>
    ioposition = 0x01U << position;
 800fa6e:	2301      	movs	r3, #1
 800fa70:	40a3      	lsls	r3, r4
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800fa72:	ea08 0203 	and.w	r2, r8, r3
    if(iocurrent == ioposition)
 800fa76:	4293      	cmp	r3, r2
 800fa78:	d1f5      	bne.n	800fa66 <HAL_GPIO_Init+0x12>
 800fa7a:	e9d1 6501 	ldrd	r6, r5, [r1, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800fa7e:	f026 0910 	bic.w	r9, r6, #16
 800fa82:	ea4f 0c44 	mov.w	ip, r4, lsl #1
 800fa86:	2303      	movs	r3, #3
 800fa88:	f109 37ff 	add.w	r7, r9, #4294967295
 800fa8c:	fa03 f30c 	lsl.w	r3, r3, ip
 800fa90:	2f01      	cmp	r7, #1
 800fa92:	ea6f 0303 	mvn.w	r3, r3
 800fa96:	fa05 f50c 	lsl.w	r5, r5, ip
 800fa9a:	d977      	bls.n	800fb8c <HAL_GPIO_Init+0x138>
      temp = GPIOx->PUPDR;
 800fa9c:	68c7      	ldr	r7, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800fa9e:	401f      	ands	r7, r3
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800faa0:	433d      	orrs	r5, r7
      GPIOx->PUPDR = temp;
 800faa2:	60c5      	str	r5, [r0, #12]
      temp = GPIOx->MODER;
 800faa4:	6807      	ldr	r7, [r0, #0]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800faa6:	f006 0503 	and.w	r5, r6, #3
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800faaa:	401f      	ands	r7, r3
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800faac:	fa05 f30c 	lsl.w	r3, r5, ip
 800fab0:	433b      	orrs	r3, r7
      GPIOx->MODER = temp;
 800fab2:	6003      	str	r3, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800fab4:	00f3      	lsls	r3, r6, #3
 800fab6:	d5d6      	bpl.n	800fa66 <HAL_GPIO_Init+0x12>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800fab8:	4d5f      	ldr	r5, [pc, #380]	; (800fc38 <HAL_GPIO_Init+0x1e4>)
 800faba:	2300      	movs	r3, #0
 800fabc:	9301      	str	r3, [sp, #4]
 800fabe:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 800fac0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800fac4:	646b      	str	r3, [r5, #68]	; 0x44
 800fac6:	6c6d      	ldr	r5, [r5, #68]	; 0x44
 800fac8:	f024 0303 	bic.w	r3, r4, #3
 800facc:	f405 4580 	and.w	r5, r5, #16384	; 0x4000
 800fad0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800fad4:	9501      	str	r5, [sp, #4]
 800fad6:	f503 339c 	add.w	r3, r3, #79872	; 0x13800
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800fada:	f004 0503 	and.w	r5, r4, #3
 800fade:	ea4f 0985 	mov.w	r9, r5, lsl #2
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800fae2:	4d56      	ldr	r5, [pc, #344]	; (800fc3c <HAL_GPIO_Init+0x1e8>)
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800fae4:	9f01      	ldr	r7, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2U];
 800fae6:	f8d3 c008 	ldr.w	ip, [r3, #8]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800faea:	270f      	movs	r7, #15
 800faec:	fa07 f709 	lsl.w	r7, r7, r9
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800faf0:	42a8      	cmp	r0, r5
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800faf2:	ea2c 0707 	bic.w	r7, ip, r7
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800faf6:	d01f      	beq.n	800fb38 <HAL_GPIO_Init+0xe4>
 800faf8:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800fafc:	42a8      	cmp	r0, r5
 800fafe:	d076      	beq.n	800fbee <HAL_GPIO_Init+0x19a>
 800fb00:	4d4f      	ldr	r5, [pc, #316]	; (800fc40 <HAL_GPIO_Init+0x1ec>)
 800fb02:	42a8      	cmp	r0, r5
 800fb04:	d079      	beq.n	800fbfa <HAL_GPIO_Init+0x1a6>
 800fb06:	4d4f      	ldr	r5, [pc, #316]	; (800fc44 <HAL_GPIO_Init+0x1f0>)
 800fb08:	42a8      	cmp	r0, r5
 800fb0a:	d07c      	beq.n	800fc06 <HAL_GPIO_Init+0x1b2>
 800fb0c:	4d4e      	ldr	r5, [pc, #312]	; (800fc48 <HAL_GPIO_Init+0x1f4>)
 800fb0e:	42a8      	cmp	r0, r5
 800fb10:	d07f      	beq.n	800fc12 <HAL_GPIO_Init+0x1be>
 800fb12:	4d4e      	ldr	r5, [pc, #312]	; (800fc4c <HAL_GPIO_Init+0x1f8>)
 800fb14:	42a8      	cmp	r0, r5
 800fb16:	f000 8082 	beq.w	800fc1e <HAL_GPIO_Init+0x1ca>
 800fb1a:	4d4d      	ldr	r5, [pc, #308]	; (800fc50 <HAL_GPIO_Init+0x1fc>)
 800fb1c:	42a8      	cmp	r0, r5
 800fb1e:	f000 8084 	beq.w	800fc2a <HAL_GPIO_Init+0x1d6>
 800fb22:	f8df c134 	ldr.w	ip, [pc, #308]	; 800fc58 <HAL_GPIO_Init+0x204>
 800fb26:	4560      	cmp	r0, ip
 800fb28:	bf0c      	ite	eq
 800fb2a:	f04f 0c07 	moveq.w	ip, #7
 800fb2e:	f04f 0c08 	movne.w	ip, #8
 800fb32:	fa0c f509 	lsl.w	r5, ip, r9
 800fb36:	432f      	orrs	r7, r5
        SYSCFG->EXTICR[position >> 2U] = temp;
 800fb38:	609f      	str	r7, [r3, #8]
        temp = EXTI->IMR;
 800fb3a:	f8de 3000 	ldr.w	r3, [lr]
        temp &= ~((uint32_t)iocurrent);
 800fb3e:	43d5      	mvns	r5, r2
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800fb40:	03f7      	lsls	r7, r6, #15
        temp &= ~((uint32_t)iocurrent);
 800fb42:	bf54      	ite	pl
 800fb44:	402b      	andpl	r3, r5
        {
          temp |= iocurrent;
 800fb46:	4313      	orrmi	r3, r2
        }
        EXTI->IMR = temp;
 800fb48:	f8ce 3000 	str.w	r3, [lr]

        temp = EXTI->EMR;
 800fb4c:	f8de 3004 	ldr.w	r3, [lr, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800fb50:	03b7      	lsls	r7, r6, #14
        temp &= ~((uint32_t)iocurrent);
 800fb52:	bf54      	ite	pl
 800fb54:	402b      	andpl	r3, r5
        {
          temp |= iocurrent;
 800fb56:	4313      	orrmi	r3, r2
        }
        EXTI->EMR = temp;
 800fb58:	f8ce 3004 	str.w	r3, [lr, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800fb5c:	f8de 3008 	ldr.w	r3, [lr, #8]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800fb60:	02f7      	lsls	r7, r6, #11
        temp &= ~((uint32_t)iocurrent);
 800fb62:	bf54      	ite	pl
 800fb64:	402b      	andpl	r3, r5
        {
          temp |= iocurrent;
 800fb66:	4313      	orrmi	r3, r2
        }
        EXTI->RTSR = temp;
 800fb68:	f8ce 3008 	str.w	r3, [lr, #8]

        temp = EXTI->FTSR;
 800fb6c:	f8de 300c 	ldr.w	r3, [lr, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800fb70:	02b6      	lsls	r6, r6, #10
  for(position = 0U; position < GPIO_NUMBER; position++)
 800fb72:	f104 0401 	add.w	r4, r4, #1
        temp &= ~((uint32_t)iocurrent);
 800fb76:	bf54      	ite	pl
 800fb78:	402b      	andpl	r3, r5
        {
          temp |= iocurrent;
 800fb7a:	4313      	orrmi	r3, r2
  for(position = 0U; position < GPIO_NUMBER; position++)
 800fb7c:	2c10      	cmp	r4, #16
        }
        EXTI->FTSR = temp;
 800fb7e:	f8ce 300c 	str.w	r3, [lr, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800fb82:	f47f af74 	bne.w	800fa6e <HAL_GPIO_Init+0x1a>
      }
    }
  }
}
 800fb86:	b003      	add	sp, #12
 800fb88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp = GPIOx->OSPEEDR; 
 800fb8c:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800fb8e:	ea07 0a03 	and.w	sl, r7, r3
        temp |= (GPIO_Init->Speed << (position * 2U));
 800fb92:	68cf      	ldr	r7, [r1, #12]
 800fb94:	fa07 f70c 	lsl.w	r7, r7, ip
 800fb98:	ea47 070a 	orr.w	r7, r7, sl
        GPIOx->OSPEEDR = temp;
 800fb9c:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 800fb9e:	f8d0 a004 	ldr.w	sl, [r0, #4]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800fba2:	f3c6 1700 	ubfx	r7, r6, #4, #1
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800fba6:	ea2a 0a02 	bic.w	sl, sl, r2
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800fbaa:	40a7      	lsls	r7, r4
 800fbac:	ea47 070a 	orr.w	r7, r7, sl
        GPIOx->OTYPER = temp;
 800fbb0:	6047      	str	r7, [r0, #4]
      temp = GPIOx->PUPDR;
 800fbb2:	68c7      	ldr	r7, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800fbb4:	401f      	ands	r7, r3
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800fbb6:	433d      	orrs	r5, r7
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800fbb8:	f1b9 0f02 	cmp.w	r9, #2
      GPIOx->PUPDR = temp;
 800fbbc:	60c5      	str	r5, [r0, #12]
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800fbbe:	f47f af71 	bne.w	800faa4 <HAL_GPIO_Init+0x50>
        temp = GPIOx->AFR[position >> 3U];
 800fbc2:	ea4f 09d4 	mov.w	r9, r4, lsr #3
 800fbc6:	eb00 0989 	add.w	r9, r0, r9, lsl #2
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800fbca:	f004 0707 	and.w	r7, r4, #7
        temp = GPIOx->AFR[position >> 3U];
 800fbce:	f8d9 5020 	ldr.w	r5, [r9, #32]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800fbd2:	00bf      	lsls	r7, r7, #2
 800fbd4:	f04f 0b0f 	mov.w	fp, #15
 800fbd8:	fa0b fb07 	lsl.w	fp, fp, r7
 800fbdc:	ea25 0a0b 	bic.w	sl, r5, fp
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800fbe0:	690d      	ldr	r5, [r1, #16]
 800fbe2:	40bd      	lsls	r5, r7
 800fbe4:	ea45 050a 	orr.w	r5, r5, sl
        GPIOx->AFR[position >> 3U] = temp;
 800fbe8:	f8c9 5020 	str.w	r5, [r9, #32]
 800fbec:	e75a      	b.n	800faa4 <HAL_GPIO_Init+0x50>
 800fbee:	f04f 0c01 	mov.w	ip, #1
 800fbf2:	fa0c f509 	lsl.w	r5, ip, r9
 800fbf6:	432f      	orrs	r7, r5
 800fbf8:	e79e      	b.n	800fb38 <HAL_GPIO_Init+0xe4>
 800fbfa:	f04f 0c02 	mov.w	ip, #2
 800fbfe:	fa0c f509 	lsl.w	r5, ip, r9
 800fc02:	432f      	orrs	r7, r5
 800fc04:	e798      	b.n	800fb38 <HAL_GPIO_Init+0xe4>
 800fc06:	f04f 0c03 	mov.w	ip, #3
 800fc0a:	fa0c f509 	lsl.w	r5, ip, r9
 800fc0e:	432f      	orrs	r7, r5
 800fc10:	e792      	b.n	800fb38 <HAL_GPIO_Init+0xe4>
 800fc12:	f04f 0c04 	mov.w	ip, #4
 800fc16:	fa0c f509 	lsl.w	r5, ip, r9
 800fc1a:	432f      	orrs	r7, r5
 800fc1c:	e78c      	b.n	800fb38 <HAL_GPIO_Init+0xe4>
 800fc1e:	f04f 0c05 	mov.w	ip, #5
 800fc22:	fa0c f509 	lsl.w	r5, ip, r9
 800fc26:	432f      	orrs	r7, r5
 800fc28:	e786      	b.n	800fb38 <HAL_GPIO_Init+0xe4>
 800fc2a:	f04f 0c06 	mov.w	ip, #6
 800fc2e:	fa0c f509 	lsl.w	r5, ip, r9
 800fc32:	432f      	orrs	r7, r5
 800fc34:	e780      	b.n	800fb38 <HAL_GPIO_Init+0xe4>
 800fc36:	bf00      	nop
 800fc38:	40023800 	.word	0x40023800
 800fc3c:	40020000 	.word	0x40020000
 800fc40:	40020800 	.word	0x40020800
 800fc44:	40020c00 	.word	0x40020c00
 800fc48:	40021000 	.word	0x40021000
 800fc4c:	40021400 	.word	0x40021400
 800fc50:	40021800 	.word	0x40021800
 800fc54:	40013c00 	.word	0x40013c00
 800fc58:	40021c00 	.word	0x40021c00

0800fc5c <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800fc5c:	b902      	cbnz	r2, 800fc60 <HAL_GPIO_WritePin+0x4>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800fc5e:	0409      	lsls	r1, r1, #16
 800fc60:	6181      	str	r1, [r0, #24]
  }
}
 800fc62:	4770      	bx	lr

0800fc64 <HAL_GPIO_EXTI_IRQHandler>:
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800fc64:	4a04      	ldr	r2, [pc, #16]	; (800fc78 <HAL_GPIO_EXTI_IRQHandler+0x14>)
 800fc66:	6951      	ldr	r1, [r2, #20]
 800fc68:	4201      	tst	r1, r0
 800fc6a:	d100      	bne.n	800fc6e <HAL_GPIO_EXTI_IRQHandler+0xa>
 800fc6c:	4770      	bx	lr
{
 800fc6e:	b508      	push	{r3, lr}
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800fc70:	6150      	str	r0, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800fc72:	f7fe ff6f 	bl	800eb54 <HAL_GPIO_EXTI_Callback>
  }
}
 800fc76:	bd08      	pop	{r3, pc}
 800fc78:	40013c00 	.word	0x40013c00

0800fc7c <HAL_RCC_OscConfig>:
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800fc7c:	2800      	cmp	r0, #0
 800fc7e:	f000 8132 	beq.w	800fee6 <HAL_RCC_OscConfig+0x26a>
{
 800fc82:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800fc86:	6803      	ldr	r3, [r0, #0]
 800fc88:	07dd      	lsls	r5, r3, #31
{
 800fc8a:	b082      	sub	sp, #8
 800fc8c:	4604      	mov	r4, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800fc8e:	d52f      	bpl.n	800fcf0 <HAL_RCC_OscConfig+0x74>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800fc90:	49ac      	ldr	r1, [pc, #688]	; (800ff44 <HAL_RCC_OscConfig+0x2c8>)
 800fc92:	688a      	ldr	r2, [r1, #8]
 800fc94:	f002 020c 	and.w	r2, r2, #12
 800fc98:	2a04      	cmp	r2, #4
 800fc9a:	f000 80ea 	beq.w	800fe72 <HAL_RCC_OscConfig+0x1f6>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800fc9e:	688a      	ldr	r2, [r1, #8]
 800fca0:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800fca4:	2a08      	cmp	r2, #8
 800fca6:	f000 80e0 	beq.w	800fe6a <HAL_RCC_OscConfig+0x1ee>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800fcaa:	6863      	ldr	r3, [r4, #4]
 800fcac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800fcb0:	f000 80e9 	beq.w	800fe86 <HAL_RCC_OscConfig+0x20a>
 800fcb4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800fcb8:	f000 8178 	beq.w	800ffac <HAL_RCC_OscConfig+0x330>
 800fcbc:	4da1      	ldr	r5, [pc, #644]	; (800ff44 <HAL_RCC_OscConfig+0x2c8>)
 800fcbe:	682a      	ldr	r2, [r5, #0]
 800fcc0:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800fcc4:	602a      	str	r2, [r5, #0]
 800fcc6:	682a      	ldr	r2, [r5, #0]
 800fcc8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800fccc:	602a      	str	r2, [r5, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800fcce:	2b00      	cmp	r3, #0
 800fcd0:	f040 80de 	bne.w	800fe90 <HAL_RCC_OscConfig+0x214>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800fcd4:	f7ff f88e 	bl	800edf4 <HAL_GetTick>
 800fcd8:	4606      	mov	r6, r0

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800fcda:	e005      	b.n	800fce8 <HAL_RCC_OscConfig+0x6c>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800fcdc:	f7ff f88a 	bl	800edf4 <HAL_GetTick>
 800fce0:	1b80      	subs	r0, r0, r6
 800fce2:	2864      	cmp	r0, #100	; 0x64
 800fce4:	f200 80f2 	bhi.w	800fecc <HAL_RCC_OscConfig+0x250>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800fce8:	682b      	ldr	r3, [r5, #0]
 800fcea:	039b      	lsls	r3, r3, #14
 800fcec:	d4f6      	bmi.n	800fcdc <HAL_RCC_OscConfig+0x60>
 800fcee:	6823      	ldr	r3, [r4, #0]
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800fcf0:	079f      	lsls	r7, r3, #30
 800fcf2:	d475      	bmi.n	800fde0 <HAL_RCC_OscConfig+0x164>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800fcf4:	071a      	lsls	r2, r3, #28
 800fcf6:	d515      	bpl.n	800fd24 <HAL_RCC_OscConfig+0xa8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800fcf8:	6963      	ldr	r3, [r4, #20]
 800fcfa:	2b00      	cmp	r3, #0
 800fcfc:	f000 80a5 	beq.w	800fe4a <HAL_RCC_OscConfig+0x1ce>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800fd00:	4b91      	ldr	r3, [pc, #580]	; (800ff48 <HAL_RCC_OscConfig+0x2cc>)

      /* Get Start Tick*/
      tickstart = HAL_GetTick();

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800fd02:	4d90      	ldr	r5, [pc, #576]	; (800ff44 <HAL_RCC_OscConfig+0x2c8>)
      __HAL_RCC_LSI_ENABLE();
 800fd04:	2201      	movs	r2, #1
 800fd06:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 800fd08:	f7ff f874 	bl	800edf4 <HAL_GetTick>
 800fd0c:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800fd0e:	e005      	b.n	800fd1c <HAL_RCC_OscConfig+0xa0>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800fd10:	f7ff f870 	bl	800edf4 <HAL_GetTick>
 800fd14:	1b80      	subs	r0, r0, r6
 800fd16:	2802      	cmp	r0, #2
 800fd18:	f200 80d8 	bhi.w	800fecc <HAL_RCC_OscConfig+0x250>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800fd1c:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 800fd1e:	079b      	lsls	r3, r3, #30
 800fd20:	d5f6      	bpl.n	800fd10 <HAL_RCC_OscConfig+0x94>
 800fd22:	6823      	ldr	r3, [r4, #0]
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800fd24:	0758      	lsls	r0, r3, #29
 800fd26:	d53b      	bpl.n	800fda0 <HAL_RCC_OscConfig+0x124>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800fd28:	4a86      	ldr	r2, [pc, #536]	; (800ff44 <HAL_RCC_OscConfig+0x2c8>)
 800fd2a:	6c13      	ldr	r3, [r2, #64]	; 0x40
 800fd2c:	f013 5380 	ands.w	r3, r3, #268435456	; 0x10000000
 800fd30:	f040 80db 	bne.w	800feea <HAL_RCC_OscConfig+0x26e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800fd34:	9301      	str	r3, [sp, #4]
 800fd36:	6c13      	ldr	r3, [r2, #64]	; 0x40
 800fd38:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800fd3c:	6413      	str	r3, [r2, #64]	; 0x40
 800fd3e:	6c13      	ldr	r3, [r2, #64]	; 0x40
 800fd40:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800fd44:	9301      	str	r3, [sp, #4]
 800fd46:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 800fd48:	2601      	movs	r6, #1
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800fd4a:	4d80      	ldr	r5, [pc, #512]	; (800ff4c <HAL_RCC_OscConfig+0x2d0>)
 800fd4c:	682a      	ldr	r2, [r5, #0]
 800fd4e:	05d1      	lsls	r1, r2, #23
 800fd50:	f140 80ac 	bpl.w	800feac <HAL_RCC_OscConfig+0x230>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800fd54:	68a3      	ldr	r3, [r4, #8]
 800fd56:	2b01      	cmp	r3, #1
 800fd58:	f000 80c9 	beq.w	800feee <HAL_RCC_OscConfig+0x272>
 800fd5c:	2b05      	cmp	r3, #5
 800fd5e:	f000 812f 	beq.w	800ffc0 <HAL_RCC_OscConfig+0x344>
 800fd62:	4d78      	ldr	r5, [pc, #480]	; (800ff44 <HAL_RCC_OscConfig+0x2c8>)
 800fd64:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 800fd66:	f022 0201 	bic.w	r2, r2, #1
 800fd6a:	672a      	str	r2, [r5, #112]	; 0x70
 800fd6c:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 800fd6e:	f022 0204 	bic.w	r2, r2, #4
 800fd72:	672a      	str	r2, [r5, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800fd74:	2b00      	cmp	r3, #0
 800fd76:	f040 80bf 	bne.w	800fef8 <HAL_RCC_OscConfig+0x27c>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800fd7a:	f7ff f83b 	bl	800edf4 <HAL_GetTick>

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800fd7e:	f241 3788 	movw	r7, #5000	; 0x1388
      tickstart = HAL_GetTick();
 800fd82:	4680      	mov	r8, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800fd84:	e006      	b.n	800fd94 <HAL_RCC_OscConfig+0x118>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800fd86:	f7ff f835 	bl	800edf4 <HAL_GetTick>
 800fd8a:	eba0 0008 	sub.w	r0, r0, r8
 800fd8e:	42b8      	cmp	r0, r7
 800fd90:	f200 809c 	bhi.w	800fecc <HAL_RCC_OscConfig+0x250>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800fd94:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 800fd96:	0798      	lsls	r0, r3, #30
 800fd98:	d4f5      	bmi.n	800fd86 <HAL_RCC_OscConfig+0x10a>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800fd9a:	2e00      	cmp	r6, #0
 800fd9c:	f040 80dc 	bne.w	800ff58 <HAL_RCC_OscConfig+0x2dc>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800fda0:	69a0      	ldr	r0, [r4, #24]
 800fda2:	b1c8      	cbz	r0, 800fdd8 <HAL_RCC_OscConfig+0x15c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800fda4:	4d67      	ldr	r5, [pc, #412]	; (800ff44 <HAL_RCC_OscConfig+0x2c8>)
 800fda6:	68aa      	ldr	r2, [r5, #8]
 800fda8:	f002 020c 	and.w	r2, r2, #12
 800fdac:	2a08      	cmp	r2, #8
 800fdae:	f000 80d9 	beq.w	800ff64 <HAL_RCC_OscConfig+0x2e8>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800fdb2:	4a67      	ldr	r2, [pc, #412]	; (800ff50 <HAL_RCC_OscConfig+0x2d4>)
 800fdb4:	2100      	movs	r1, #0
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800fdb6:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
 800fdb8:	6011      	str	r1, [r2, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800fdba:	f000 810b 	beq.w	800ffd4 <HAL_RCC_OscConfig+0x358>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800fdbe:	f7ff f819 	bl	800edf4 <HAL_GetTick>

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800fdc2:	462c      	mov	r4, r5
        tickstart = HAL_GetTick();
 800fdc4:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800fdc6:	e004      	b.n	800fdd2 <HAL_RCC_OscConfig+0x156>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800fdc8:	f7ff f814 	bl	800edf4 <HAL_GetTick>
 800fdcc:	1b40      	subs	r0, r0, r5
 800fdce:	2802      	cmp	r0, #2
 800fdd0:	d87c      	bhi.n	800fecc <HAL_RCC_OscConfig+0x250>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800fdd2:	6823      	ldr	r3, [r4, #0]
 800fdd4:	019b      	lsls	r3, r3, #6
 800fdd6:	d4f7      	bmi.n	800fdc8 <HAL_RCC_OscConfig+0x14c>
          return HAL_ERROR;
        }
      }
    }
  }
  return HAL_OK;
 800fdd8:	2000      	movs	r0, #0
}
 800fdda:	b002      	add	sp, #8
 800fddc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800fde0:	4a58      	ldr	r2, [pc, #352]	; (800ff44 <HAL_RCC_OscConfig+0x2c8>)
 800fde2:	6891      	ldr	r1, [r2, #8]
 800fde4:	f011 0f0c 	tst.w	r1, #12
 800fde8:	d024      	beq.n	800fe34 <HAL_RCC_OscConfig+0x1b8>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800fdea:	6891      	ldr	r1, [r2, #8]
 800fdec:	f001 010c 	and.w	r1, r1, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800fdf0:	2908      	cmp	r1, #8
 800fdf2:	d01c      	beq.n	800fe2e <HAL_RCC_OscConfig+0x1b2>
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800fdf4:	68e3      	ldr	r3, [r4, #12]
 800fdf6:	2b00      	cmp	r3, #0
 800fdf8:	f000 8092 	beq.w	800ff20 <HAL_RCC_OscConfig+0x2a4>
        __HAL_RCC_HSI_ENABLE();
 800fdfc:	4b55      	ldr	r3, [pc, #340]	; (800ff54 <HAL_RCC_OscConfig+0x2d8>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800fdfe:	4d51      	ldr	r5, [pc, #324]	; (800ff44 <HAL_RCC_OscConfig+0x2c8>)
        __HAL_RCC_HSI_ENABLE();
 800fe00:	2201      	movs	r2, #1
 800fe02:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800fe04:	f7fe fff6 	bl	800edf4 <HAL_GetTick>
 800fe08:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800fe0a:	e004      	b.n	800fe16 <HAL_RCC_OscConfig+0x19a>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800fe0c:	f7fe fff2 	bl	800edf4 <HAL_GetTick>
 800fe10:	1b80      	subs	r0, r0, r6
 800fe12:	2802      	cmp	r0, #2
 800fe14:	d85a      	bhi.n	800fecc <HAL_RCC_OscConfig+0x250>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800fe16:	682b      	ldr	r3, [r5, #0]
 800fe18:	0798      	lsls	r0, r3, #30
 800fe1a:	d5f7      	bpl.n	800fe0c <HAL_RCC_OscConfig+0x190>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800fe1c:	682b      	ldr	r3, [r5, #0]
 800fe1e:	6922      	ldr	r2, [r4, #16]
 800fe20:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800fe24:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 800fe28:	602b      	str	r3, [r5, #0]
 800fe2a:	6823      	ldr	r3, [r4, #0]
 800fe2c:	e762      	b.n	800fcf4 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800fe2e:	6852      	ldr	r2, [r2, #4]
 800fe30:	0256      	lsls	r6, r2, #9
 800fe32:	d4df      	bmi.n	800fdf4 <HAL_RCC_OscConfig+0x178>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800fe34:	4a43      	ldr	r2, [pc, #268]	; (800ff44 <HAL_RCC_OscConfig+0x2c8>)
 800fe36:	6812      	ldr	r2, [r2, #0]
 800fe38:	0795      	lsls	r5, r2, #30
 800fe3a:	d54b      	bpl.n	800fed4 <HAL_RCC_OscConfig+0x258>
 800fe3c:	68e2      	ldr	r2, [r4, #12]
 800fe3e:	2a01      	cmp	r2, #1
 800fe40:	d048      	beq.n	800fed4 <HAL_RCC_OscConfig+0x258>
        return HAL_ERROR;
 800fe42:	2001      	movs	r0, #1
}
 800fe44:	b002      	add	sp, #8
 800fe46:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_LSI_DISABLE();
 800fe4a:	4a3f      	ldr	r2, [pc, #252]	; (800ff48 <HAL_RCC_OscConfig+0x2cc>)
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800fe4c:	4d3d      	ldr	r5, [pc, #244]	; (800ff44 <HAL_RCC_OscConfig+0x2c8>)
      __HAL_RCC_LSI_DISABLE();
 800fe4e:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 800fe50:	f7fe ffd0 	bl	800edf4 <HAL_GetTick>
 800fe54:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800fe56:	e004      	b.n	800fe62 <HAL_RCC_OscConfig+0x1e6>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800fe58:	f7fe ffcc 	bl	800edf4 <HAL_GetTick>
 800fe5c:	1b80      	subs	r0, r0, r6
 800fe5e:	2802      	cmp	r0, #2
 800fe60:	d834      	bhi.n	800fecc <HAL_RCC_OscConfig+0x250>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800fe62:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 800fe64:	079f      	lsls	r7, r3, #30
 800fe66:	d4f7      	bmi.n	800fe58 <HAL_RCC_OscConfig+0x1dc>
 800fe68:	e75b      	b.n	800fd22 <HAL_RCC_OscConfig+0xa6>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800fe6a:	684a      	ldr	r2, [r1, #4]
 800fe6c:	0250      	lsls	r0, r2, #9
 800fe6e:	f57f af1c 	bpl.w	800fcaa <HAL_RCC_OscConfig+0x2e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800fe72:	4a34      	ldr	r2, [pc, #208]	; (800ff44 <HAL_RCC_OscConfig+0x2c8>)
 800fe74:	6812      	ldr	r2, [r2, #0]
 800fe76:	0391      	lsls	r1, r2, #14
 800fe78:	f57f af3a 	bpl.w	800fcf0 <HAL_RCC_OscConfig+0x74>
 800fe7c:	6862      	ldr	r2, [r4, #4]
 800fe7e:	2a00      	cmp	r2, #0
 800fe80:	f47f af36 	bne.w	800fcf0 <HAL_RCC_OscConfig+0x74>
 800fe84:	e7dd      	b.n	800fe42 <HAL_RCC_OscConfig+0x1c6>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800fe86:	4a2f      	ldr	r2, [pc, #188]	; (800ff44 <HAL_RCC_OscConfig+0x2c8>)
 800fe88:	6813      	ldr	r3, [r2, #0]
 800fe8a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800fe8e:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 800fe90:	f7fe ffb0 	bl	800edf4 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800fe94:	4d2b      	ldr	r5, [pc, #172]	; (800ff44 <HAL_RCC_OscConfig+0x2c8>)
        tickstart = HAL_GetTick();
 800fe96:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800fe98:	e004      	b.n	800fea4 <HAL_RCC_OscConfig+0x228>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800fe9a:	f7fe ffab 	bl	800edf4 <HAL_GetTick>
 800fe9e:	1b80      	subs	r0, r0, r6
 800fea0:	2864      	cmp	r0, #100	; 0x64
 800fea2:	d813      	bhi.n	800fecc <HAL_RCC_OscConfig+0x250>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800fea4:	682b      	ldr	r3, [r5, #0]
 800fea6:	039a      	lsls	r2, r3, #14
 800fea8:	d5f7      	bpl.n	800fe9a <HAL_RCC_OscConfig+0x21e>
 800feaa:	e720      	b.n	800fcee <HAL_RCC_OscConfig+0x72>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800feac:	682a      	ldr	r2, [r5, #0]
 800feae:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800feb2:	602a      	str	r2, [r5, #0]
      tickstart = HAL_GetTick();
 800feb4:	f7fe ff9e 	bl	800edf4 <HAL_GetTick>
 800feb8:	4607      	mov	r7, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800feba:	682b      	ldr	r3, [r5, #0]
 800febc:	05da      	lsls	r2, r3, #23
 800febe:	f53f af49 	bmi.w	800fd54 <HAL_RCC_OscConfig+0xd8>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800fec2:	f7fe ff97 	bl	800edf4 <HAL_GetTick>
 800fec6:	1bc0      	subs	r0, r0, r7
 800fec8:	2802      	cmp	r0, #2
 800feca:	d9f6      	bls.n	800feba <HAL_RCC_OscConfig+0x23e>
            return HAL_TIMEOUT;
 800fecc:	2003      	movs	r0, #3
}
 800fece:	b002      	add	sp, #8
 800fed0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800fed4:	491b      	ldr	r1, [pc, #108]	; (800ff44 <HAL_RCC_OscConfig+0x2c8>)
 800fed6:	6920      	ldr	r0, [r4, #16]
 800fed8:	680a      	ldr	r2, [r1, #0]
 800feda:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 800fede:	ea42 02c0 	orr.w	r2, r2, r0, lsl #3
 800fee2:	600a      	str	r2, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800fee4:	e706      	b.n	800fcf4 <HAL_RCC_OscConfig+0x78>
    return HAL_ERROR;
 800fee6:	2001      	movs	r0, #1
}
 800fee8:	4770      	bx	lr
    FlagStatus       pwrclkchanged = RESET;
 800feea:	2600      	movs	r6, #0
 800feec:	e72d      	b.n	800fd4a <HAL_RCC_OscConfig+0xce>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800feee:	4a15      	ldr	r2, [pc, #84]	; (800ff44 <HAL_RCC_OscConfig+0x2c8>)
 800fef0:	6f13      	ldr	r3, [r2, #112]	; 0x70
 800fef2:	f043 0301 	orr.w	r3, r3, #1
 800fef6:	6713      	str	r3, [r2, #112]	; 0x70
      tickstart = HAL_GetTick();
 800fef8:	f7fe ff7c 	bl	800edf4 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800fefc:	4d11      	ldr	r5, [pc, #68]	; (800ff44 <HAL_RCC_OscConfig+0x2c8>)
      tickstart = HAL_GetTick();
 800fefe:	4680      	mov	r8, r0
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800ff00:	f241 3788 	movw	r7, #5000	; 0x1388
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800ff04:	e005      	b.n	800ff12 <HAL_RCC_OscConfig+0x296>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800ff06:	f7fe ff75 	bl	800edf4 <HAL_GetTick>
 800ff0a:	eba0 0008 	sub.w	r0, r0, r8
 800ff0e:	42b8      	cmp	r0, r7
 800ff10:	d8dc      	bhi.n	800fecc <HAL_RCC_OscConfig+0x250>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800ff12:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 800ff14:	079b      	lsls	r3, r3, #30
 800ff16:	d5f6      	bpl.n	800ff06 <HAL_RCC_OscConfig+0x28a>
    if(pwrclkchanged == SET)
 800ff18:	2e00      	cmp	r6, #0
 800ff1a:	f43f af41 	beq.w	800fda0 <HAL_RCC_OscConfig+0x124>
 800ff1e:	e01b      	b.n	800ff58 <HAL_RCC_OscConfig+0x2dc>
        __HAL_RCC_HSI_DISABLE();
 800ff20:	4a0c      	ldr	r2, [pc, #48]	; (800ff54 <HAL_RCC_OscConfig+0x2d8>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800ff22:	4d08      	ldr	r5, [pc, #32]	; (800ff44 <HAL_RCC_OscConfig+0x2c8>)
        __HAL_RCC_HSI_DISABLE();
 800ff24:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 800ff26:	f7fe ff65 	bl	800edf4 <HAL_GetTick>
 800ff2a:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800ff2c:	e004      	b.n	800ff38 <HAL_RCC_OscConfig+0x2bc>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800ff2e:	f7fe ff61 	bl	800edf4 <HAL_GetTick>
 800ff32:	1b80      	subs	r0, r0, r6
 800ff34:	2802      	cmp	r0, #2
 800ff36:	d8c9      	bhi.n	800fecc <HAL_RCC_OscConfig+0x250>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800ff38:	682b      	ldr	r3, [r5, #0]
 800ff3a:	0799      	lsls	r1, r3, #30
 800ff3c:	d4f7      	bmi.n	800ff2e <HAL_RCC_OscConfig+0x2b2>
 800ff3e:	6823      	ldr	r3, [r4, #0]
 800ff40:	e6d8      	b.n	800fcf4 <HAL_RCC_OscConfig+0x78>
 800ff42:	bf00      	nop
 800ff44:	40023800 	.word	0x40023800
 800ff48:	42470e80 	.word	0x42470e80
 800ff4c:	40007000 	.word	0x40007000
 800ff50:	42470060 	.word	0x42470060
 800ff54:	42470000 	.word	0x42470000
      __HAL_RCC_PWR_CLK_DISABLE();
 800ff58:	4a35      	ldr	r2, [pc, #212]	; (8010030 <HAL_RCC_OscConfig+0x3b4>)
 800ff5a:	6c13      	ldr	r3, [r2, #64]	; 0x40
 800ff5c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800ff60:	6413      	str	r3, [r2, #64]	; 0x40
 800ff62:	e71d      	b.n	800fda0 <HAL_RCC_OscConfig+0x124>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800ff64:	2801      	cmp	r0, #1
 800ff66:	f43f af6d 	beq.w	800fe44 <HAL_RCC_OscConfig+0x1c8>
        pll_config = RCC->PLLCFGR;
 800ff6a:	686b      	ldr	r3, [r5, #4]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800ff6c:	69e2      	ldr	r2, [r4, #28]
 800ff6e:	f403 0180 	and.w	r1, r3, #4194304	; 0x400000
 800ff72:	4291      	cmp	r1, r2
 800ff74:	f47f af65 	bne.w	800fe42 <HAL_RCC_OscConfig+0x1c6>
 800ff78:	6a22      	ldr	r2, [r4, #32]
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800ff7a:	f003 013f 	and.w	r1, r3, #63	; 0x3f
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800ff7e:	4291      	cmp	r1, r2
 800ff80:	f47f af5f 	bne.w	800fe42 <HAL_RCC_OscConfig+0x1c6>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800ff84:	f647 72c0 	movw	r2, #32704	; 0x7fc0
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800ff88:	6a61      	ldr	r1, [r4, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800ff8a:	401a      	ands	r2, r3
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800ff8c:	428a      	cmp	r2, r1
 800ff8e:	f47f af58 	bne.w	800fe42 <HAL_RCC_OscConfig+0x1c6>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800ff92:	6aa2      	ldr	r2, [r4, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800ff94:	f403 3140 	and.w	r1, r3, #196608	; 0x30000
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800ff98:	4291      	cmp	r1, r2
 800ff9a:	f47f af52 	bne.w	800fe42 <HAL_RCC_OscConfig+0x1c6>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800ff9e:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 800ffa0:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
    return HAL_ERROR;
 800ffa4:	1a18      	subs	r0, r3, r0
 800ffa6:	bf18      	it	ne
 800ffa8:	2001      	movne	r0, #1
 800ffaa:	e74b      	b.n	800fe44 <HAL_RCC_OscConfig+0x1c8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800ffac:	4b20      	ldr	r3, [pc, #128]	; (8010030 <HAL_RCC_OscConfig+0x3b4>)
 800ffae:	681a      	ldr	r2, [r3, #0]
 800ffb0:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 800ffb4:	601a      	str	r2, [r3, #0]
 800ffb6:	681a      	ldr	r2, [r3, #0]
 800ffb8:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800ffbc:	601a      	str	r2, [r3, #0]
 800ffbe:	e767      	b.n	800fe90 <HAL_RCC_OscConfig+0x214>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800ffc0:	4b1b      	ldr	r3, [pc, #108]	; (8010030 <HAL_RCC_OscConfig+0x3b4>)
 800ffc2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800ffc4:	f042 0204 	orr.w	r2, r2, #4
 800ffc8:	671a      	str	r2, [r3, #112]	; 0x70
 800ffca:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800ffcc:	f042 0201 	orr.w	r2, r2, #1
 800ffd0:	671a      	str	r2, [r3, #112]	; 0x70
 800ffd2:	e791      	b.n	800fef8 <HAL_RCC_OscConfig+0x27c>
        tickstart = HAL_GetTick();
 800ffd4:	f7fe ff0e 	bl	800edf4 <HAL_GetTick>
 800ffd8:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800ffda:	e005      	b.n	800ffe8 <HAL_RCC_OscConfig+0x36c>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800ffdc:	f7fe ff0a 	bl	800edf4 <HAL_GetTick>
 800ffe0:	1b80      	subs	r0, r0, r6
 800ffe2:	2802      	cmp	r0, #2
 800ffe4:	f63f af72 	bhi.w	800fecc <HAL_RCC_OscConfig+0x250>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800ffe8:	682b      	ldr	r3, [r5, #0]
 800ffea:	0199      	lsls	r1, r3, #6
 800ffec:	d4f6      	bmi.n	800ffdc <HAL_RCC_OscConfig+0x360>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800ffee:	e9d4 3607 	ldrd	r3, r6, [r4, #28]
 800fff2:	e9d4 0209 	ldrd	r0, r2, [r4, #36]	; 0x24
 800fff6:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800fff8:	4c0d      	ldr	r4, [pc, #52]	; (8010030 <HAL_RCC_OscConfig+0x3b4>)
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800fffa:	4333      	orrs	r3, r6
 800fffc:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 8010000:	0852      	lsrs	r2, r2, #1
 8010002:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8010006:	3a01      	subs	r2, #1
        __HAL_RCC_PLL_ENABLE();
 8010008:	490a      	ldr	r1, [pc, #40]	; (8010034 <HAL_RCC_OscConfig+0x3b8>)
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 801000a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
        __HAL_RCC_PLL_ENABLE();
 801000e:	2201      	movs	r2, #1
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8010010:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 8010012:	600a      	str	r2, [r1, #0]
        tickstart = HAL_GetTick();
 8010014:	f7fe feee 	bl	800edf4 <HAL_GetTick>
 8010018:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 801001a:	e005      	b.n	8010028 <HAL_RCC_OscConfig+0x3ac>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 801001c:	f7fe feea 	bl	800edf4 <HAL_GetTick>
 8010020:	1b40      	subs	r0, r0, r5
 8010022:	2802      	cmp	r0, #2
 8010024:	f63f af52 	bhi.w	800fecc <HAL_RCC_OscConfig+0x250>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8010028:	6823      	ldr	r3, [r4, #0]
 801002a:	019a      	lsls	r2, r3, #6
 801002c:	d5f6      	bpl.n	801001c <HAL_RCC_OscConfig+0x3a0>
 801002e:	e6d3      	b.n	800fdd8 <HAL_RCC_OscConfig+0x15c>
 8010030:	40023800 	.word	0x40023800
 8010034:	42470060 	.word	0x42470060

08010038 <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8010038:	4917      	ldr	r1, [pc, #92]	; (8010098 <HAL_RCC_GetSysClockFreq+0x60>)
{
 801003a:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 801003c:	688b      	ldr	r3, [r1, #8]
 801003e:	f003 030c 	and.w	r3, r3, #12
 8010042:	2b04      	cmp	r3, #4
 8010044:	d01b      	beq.n	801007e <HAL_RCC_GetSysClockFreq+0x46>
 8010046:	2b08      	cmp	r3, #8
 8010048:	d117      	bne.n	801007a <HAL_RCC_GetSysClockFreq+0x42>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 801004a:	684a      	ldr	r2, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 801004c:	684b      	ldr	r3, [r1, #4]
 801004e:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8010052:	f002 023f 	and.w	r2, r2, #63	; 0x3f
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8010056:	d114      	bne.n	8010082 <HAL_RCC_GetSysClockFreq+0x4a>
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8010058:	6849      	ldr	r1, [r1, #4]
 801005a:	4810      	ldr	r0, [pc, #64]	; (801009c <HAL_RCC_GetSysClockFreq+0x64>)
 801005c:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8010060:	fba1 0100 	umull	r0, r1, r1, r0
 8010064:	f7f8 fd48 	bl	8008af8 <__aeabi_uldivmod>
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8010068:	4b0b      	ldr	r3, [pc, #44]	; (8010098 <HAL_RCC_GetSysClockFreq+0x60>)
 801006a:	685b      	ldr	r3, [r3, #4]
 801006c:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8010070:	3301      	adds	r3, #1
 8010072:	005b      	lsls	r3, r3, #1

      sysclockfreq = pllvco/pllp;
 8010074:	fbb0 f0f3 	udiv	r0, r0, r3
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8010078:	bd08      	pop	{r3, pc}
      sysclockfreq = HSI_VALUE;
 801007a:	4808      	ldr	r0, [pc, #32]	; (801009c <HAL_RCC_GetSysClockFreq+0x64>)
}
 801007c:	bd08      	pop	{r3, pc}
      sysclockfreq = HSE_VALUE;
 801007e:	4808      	ldr	r0, [pc, #32]	; (80100a0 <HAL_RCC_GetSysClockFreq+0x68>)
}
 8010080:	bd08      	pop	{r3, pc}
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8010082:	684b      	ldr	r3, [r1, #4]
 8010084:	4806      	ldr	r0, [pc, #24]	; (80100a0 <HAL_RCC_GetSysClockFreq+0x68>)
 8010086:	f3c3 1388 	ubfx	r3, r3, #6, #9
 801008a:	fba3 0100 	umull	r0, r1, r3, r0
 801008e:	2300      	movs	r3, #0
 8010090:	f7f8 fd32 	bl	8008af8 <__aeabi_uldivmod>
 8010094:	e7e8      	b.n	8010068 <HAL_RCC_GetSysClockFreq+0x30>
 8010096:	bf00      	nop
 8010098:	40023800 	.word	0x40023800
 801009c:	00f42400 	.word	0x00f42400
 80100a0:	007a1200 	.word	0x007a1200

080100a4 <HAL_RCC_ClockConfig>:
  if(RCC_ClkInitStruct == NULL)
 80100a4:	b160      	cbz	r0, 80100c0 <HAL_RCC_ClockConfig+0x1c>
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80100a6:	4a49      	ldr	r2, [pc, #292]	; (80101cc <HAL_RCC_ClockConfig+0x128>)
 80100a8:	6813      	ldr	r3, [r2, #0]
 80100aa:	f003 030f 	and.w	r3, r3, #15
 80100ae:	428b      	cmp	r3, r1
 80100b0:	d208      	bcs.n	80100c4 <HAL_RCC_ClockConfig+0x20>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80100b2:	b2cb      	uxtb	r3, r1
 80100b4:	7013      	strb	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80100b6:	6813      	ldr	r3, [r2, #0]
 80100b8:	f003 030f 	and.w	r3, r3, #15
 80100bc:	428b      	cmp	r3, r1
 80100be:	d001      	beq.n	80100c4 <HAL_RCC_ClockConfig+0x20>
    return HAL_ERROR;
 80100c0:	2001      	movs	r0, #1
}
 80100c2:	4770      	bx	lr
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80100c4:	6803      	ldr	r3, [r0, #0]
{
 80100c6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80100ca:	079d      	lsls	r5, r3, #30
 80100cc:	d514      	bpl.n	80100f8 <HAL_RCC_ClockConfig+0x54>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80100ce:	075c      	lsls	r4, r3, #29
 80100d0:	d504      	bpl.n	80100dc <HAL_RCC_ClockConfig+0x38>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80100d2:	4c3f      	ldr	r4, [pc, #252]	; (80101d0 <HAL_RCC_ClockConfig+0x12c>)
 80100d4:	68a2      	ldr	r2, [r4, #8]
 80100d6:	f442 52e0 	orr.w	r2, r2, #7168	; 0x1c00
 80100da:	60a2      	str	r2, [r4, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80100dc:	071a      	lsls	r2, r3, #28
 80100de:	d504      	bpl.n	80100ea <HAL_RCC_ClockConfig+0x46>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80100e0:	4c3b      	ldr	r4, [pc, #236]	; (80101d0 <HAL_RCC_ClockConfig+0x12c>)
 80100e2:	68a2      	ldr	r2, [r4, #8]
 80100e4:	f442 4260 	orr.w	r2, r2, #57344	; 0xe000
 80100e8:	60a2      	str	r2, [r4, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80100ea:	4c39      	ldr	r4, [pc, #228]	; (80101d0 <HAL_RCC_ClockConfig+0x12c>)
 80100ec:	6885      	ldr	r5, [r0, #8]
 80100ee:	68a2      	ldr	r2, [r4, #8]
 80100f0:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 80100f4:	432a      	orrs	r2, r5
 80100f6:	60a2      	str	r2, [r4, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80100f8:	07df      	lsls	r7, r3, #31
 80100fa:	4604      	mov	r4, r0
 80100fc:	460d      	mov	r5, r1
 80100fe:	d522      	bpl.n	8010146 <HAL_RCC_ClockConfig+0xa2>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8010100:	6842      	ldr	r2, [r0, #4]
 8010102:	2a01      	cmp	r2, #1
 8010104:	d057      	beq.n	80101b6 <HAL_RCC_ClockConfig+0x112>
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8010106:	1e93      	subs	r3, r2, #2
 8010108:	2b01      	cmp	r3, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 801010a:	4b31      	ldr	r3, [pc, #196]	; (80101d0 <HAL_RCC_ClockConfig+0x12c>)
 801010c:	681b      	ldr	r3, [r3, #0]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 801010e:	d959      	bls.n	80101c4 <HAL_RCC_ClockConfig+0x120>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8010110:	0799      	lsls	r1, r3, #30
 8010112:	d525      	bpl.n	8010160 <HAL_RCC_ClockConfig+0xbc>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8010114:	4e2e      	ldr	r6, [pc, #184]	; (80101d0 <HAL_RCC_ClockConfig+0x12c>)
 8010116:	68b3      	ldr	r3, [r6, #8]
 8010118:	f023 0303 	bic.w	r3, r3, #3
 801011c:	4313      	orrs	r3, r2
 801011e:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 8010120:	f7fe fe68 	bl	800edf4 <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8010124:	f241 3788 	movw	r7, #5000	; 0x1388
    tickstart = HAL_GetTick();
 8010128:	4680      	mov	r8, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 801012a:	e005      	b.n	8010138 <HAL_RCC_ClockConfig+0x94>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 801012c:	f7fe fe62 	bl	800edf4 <HAL_GetTick>
 8010130:	eba0 0008 	sub.w	r0, r0, r8
 8010134:	42b8      	cmp	r0, r7
 8010136:	d843      	bhi.n	80101c0 <HAL_RCC_ClockConfig+0x11c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8010138:	68b3      	ldr	r3, [r6, #8]
 801013a:	6862      	ldr	r2, [r4, #4]
 801013c:	f003 030c 	and.w	r3, r3, #12
 8010140:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8010144:	d1f2      	bne.n	801012c <HAL_RCC_ClockConfig+0x88>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8010146:	4a21      	ldr	r2, [pc, #132]	; (80101cc <HAL_RCC_ClockConfig+0x128>)
 8010148:	6813      	ldr	r3, [r2, #0]
 801014a:	f003 030f 	and.w	r3, r3, #15
 801014e:	42ab      	cmp	r3, r5
 8010150:	d909      	bls.n	8010166 <HAL_RCC_ClockConfig+0xc2>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8010152:	b2eb      	uxtb	r3, r5
 8010154:	7013      	strb	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8010156:	6813      	ldr	r3, [r2, #0]
 8010158:	f003 030f 	and.w	r3, r3, #15
 801015c:	42ab      	cmp	r3, r5
 801015e:	d002      	beq.n	8010166 <HAL_RCC_ClockConfig+0xc2>
    return HAL_ERROR;
 8010160:	2001      	movs	r0, #1
}
 8010162:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8010166:	6823      	ldr	r3, [r4, #0]
 8010168:	075a      	lsls	r2, r3, #29
 801016a:	d506      	bpl.n	801017a <HAL_RCC_ClockConfig+0xd6>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 801016c:	4918      	ldr	r1, [pc, #96]	; (80101d0 <HAL_RCC_ClockConfig+0x12c>)
 801016e:	68e0      	ldr	r0, [r4, #12]
 8010170:	688a      	ldr	r2, [r1, #8]
 8010172:	f422 52e0 	bic.w	r2, r2, #7168	; 0x1c00
 8010176:	4302      	orrs	r2, r0
 8010178:	608a      	str	r2, [r1, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 801017a:	071b      	lsls	r3, r3, #28
 801017c:	d412      	bmi.n	80101a4 <HAL_RCC_ClockConfig+0x100>
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 801017e:	f7ff ff5b 	bl	8010038 <HAL_RCC_GetSysClockFreq>
 8010182:	4b13      	ldr	r3, [pc, #76]	; (80101d0 <HAL_RCC_ClockConfig+0x12c>)
 8010184:	4c13      	ldr	r4, [pc, #76]	; (80101d4 <HAL_RCC_ClockConfig+0x130>)
 8010186:	689b      	ldr	r3, [r3, #8]
  HAL_InitTick (uwTickPrio);
 8010188:	4913      	ldr	r1, [pc, #76]	; (80101d8 <HAL_RCC_ClockConfig+0x134>)
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 801018a:	4a14      	ldr	r2, [pc, #80]	; (80101dc <HAL_RCC_ClockConfig+0x138>)
 801018c:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8010190:	5ce3      	ldrb	r3, [r4, r3]
 8010192:	fa20 f303 	lsr.w	r3, r0, r3
  HAL_InitTick (uwTickPrio);
 8010196:	6808      	ldr	r0, [r1, #0]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8010198:	6013      	str	r3, [r2, #0]
  HAL_InitTick (uwTickPrio);
 801019a:	f7fe fde1 	bl	800ed60 <HAL_InitTick>
  return HAL_OK;
 801019e:	2000      	movs	r0, #0
}
 80101a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80101a4:	4a0a      	ldr	r2, [pc, #40]	; (80101d0 <HAL_RCC_ClockConfig+0x12c>)
 80101a6:	6921      	ldr	r1, [r4, #16]
 80101a8:	6893      	ldr	r3, [r2, #8]
 80101aa:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 80101ae:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 80101b2:	6093      	str	r3, [r2, #8]
 80101b4:	e7e3      	b.n	801017e <HAL_RCC_ClockConfig+0xda>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80101b6:	4b06      	ldr	r3, [pc, #24]	; (80101d0 <HAL_RCC_ClockConfig+0x12c>)
 80101b8:	681b      	ldr	r3, [r3, #0]
 80101ba:	039e      	lsls	r6, r3, #14
 80101bc:	d4aa      	bmi.n	8010114 <HAL_RCC_ClockConfig+0x70>
 80101be:	e7cf      	b.n	8010160 <HAL_RCC_ClockConfig+0xbc>
        return HAL_TIMEOUT;
 80101c0:	2003      	movs	r0, #3
 80101c2:	e7ed      	b.n	80101a0 <HAL_RCC_ClockConfig+0xfc>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80101c4:	0198      	lsls	r0, r3, #6
 80101c6:	d4a5      	bmi.n	8010114 <HAL_RCC_ClockConfig+0x70>
 80101c8:	e7ca      	b.n	8010160 <HAL_RCC_ClockConfig+0xbc>
 80101ca:	bf00      	nop
 80101cc:	40023c00 	.word	0x40023c00
 80101d0:	40023800 	.word	0x40023800
 80101d4:	08016eac 	.word	0x08016eac
 80101d8:	20000014 	.word	0x20000014
 80101dc:	2000000c 	.word	0x2000000c

080101e0 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80101e0:	4b04      	ldr	r3, [pc, #16]	; (80101f4 <HAL_RCC_GetPCLK1Freq+0x14>)
 80101e2:	4a05      	ldr	r2, [pc, #20]	; (80101f8 <HAL_RCC_GetPCLK1Freq+0x18>)
 80101e4:	689b      	ldr	r3, [r3, #8]
  return SystemCoreClock;
 80101e6:	4905      	ldr	r1, [pc, #20]	; (80101fc <HAL_RCC_GetPCLK1Freq+0x1c>)
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80101e8:	f3c3 2382 	ubfx	r3, r3, #10, #3
 80101ec:	6808      	ldr	r0, [r1, #0]
 80101ee:	5cd3      	ldrb	r3, [r2, r3]
}
 80101f0:	40d8      	lsrs	r0, r3
 80101f2:	4770      	bx	lr
 80101f4:	40023800 	.word	0x40023800
 80101f8:	08016ebc 	.word	0x08016ebc
 80101fc:	2000000c 	.word	0x2000000c

08010200 <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8010200:	4b04      	ldr	r3, [pc, #16]	; (8010214 <HAL_RCC_GetPCLK2Freq+0x14>)
 8010202:	4a05      	ldr	r2, [pc, #20]	; (8010218 <HAL_RCC_GetPCLK2Freq+0x18>)
 8010204:	689b      	ldr	r3, [r3, #8]
  return SystemCoreClock;
 8010206:	4905      	ldr	r1, [pc, #20]	; (801021c <HAL_RCC_GetPCLK2Freq+0x1c>)
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8010208:	f3c3 3342 	ubfx	r3, r3, #13, #3
 801020c:	6808      	ldr	r0, [r1, #0]
 801020e:	5cd3      	ldrb	r3, [r2, r3]
}
 8010210:	40d8      	lsrs	r0, r3
 8010212:	4770      	bx	lr
 8010214:	40023800 	.word	0x40023800
 8010218:	08016ebc 	.word	0x08016ebc
 801021c:	2000000c 	.word	0x2000000c

08010220 <SPI_WaitFlagStateUntilTimeout.constprop.7>:
  * @param  State flag state to check
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
 8010220:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010224:	4607      	mov	r7, r0
 8010226:	460d      	mov	r5, r1
 8010228:	4616      	mov	r6, r2
 801022a:	4698      	mov	r8, r3
                                                       uint32_t Timeout, uint32_t Tickstart)
{
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 801022c:	683c      	ldr	r4, [r7, #0]
 801022e:	e001      	b.n	8010234 <SPI_WaitFlagStateUntilTimeout.constprop.7+0x14>
  {
    if (Timeout != HAL_MAX_DELAY)
 8010230:	1c73      	adds	r3, r6, #1
 8010232:	d106      	bne.n	8010242 <SPI_WaitFlagStateUntilTimeout.constprop.7+0x22>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8010234:	68a0      	ldr	r0, [r4, #8]
 8010236:	ea35 0300 	bics.w	r3, r5, r0
 801023a:	d0f9      	beq.n	8010230 <SPI_WaitFlagStateUntilTimeout.constprop.7+0x10>
        return HAL_TIMEOUT;
      }
    }
  }

  return HAL_OK;
 801023c:	2000      	movs	r0, #0
}
 801023e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8010242:	f7fe fdd7 	bl	800edf4 <HAL_GetTick>
 8010246:	eba0 0008 	sub.w	r0, r0, r8
 801024a:	4286      	cmp	r6, r0
 801024c:	d8ee      	bhi.n	801022c <SPI_WaitFlagStateUntilTimeout.constprop.7+0xc>
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 801024e:	e9d7 3100 	ldrd	r3, r1, [r7]
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8010252:	685a      	ldr	r2, [r3, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8010254:	f5b1 7f82 	cmp.w	r1, #260	; 0x104
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8010258:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 801025c:	605a      	str	r2, [r3, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 801025e:	d014      	beq.n	801028a <SPI_WaitFlagStateUntilTimeout.constprop.7+0x6a>
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8010260:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8010262:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 8010266:	d007      	beq.n	8010278 <SPI_WaitFlagStateUntilTimeout.constprop.7+0x58>
        hspi->State = HAL_SPI_STATE_READY;
 8010268:	2201      	movs	r2, #1
        __HAL_UNLOCK(hspi);
 801026a:	2300      	movs	r3, #0
        hspi->State = HAL_SPI_STATE_READY;
 801026c:	f887 2051 	strb.w	r2, [r7, #81]	; 0x51
        __HAL_UNLOCK(hspi);
 8010270:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
 8010274:	2003      	movs	r0, #3
 8010276:	e7e2      	b.n	801023e <SPI_WaitFlagStateUntilTimeout.constprop.7+0x1e>
          SPI_RESET_CRC(hspi);
 8010278:	681a      	ldr	r2, [r3, #0]
 801027a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 801027e:	601a      	str	r2, [r3, #0]
 8010280:	681a      	ldr	r2, [r3, #0]
 8010282:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8010286:	601a      	str	r2, [r3, #0]
 8010288:	e7ee      	b.n	8010268 <SPI_WaitFlagStateUntilTimeout.constprop.7+0x48>
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 801028a:	68ba      	ldr	r2, [r7, #8]
 801028c:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8010290:	d002      	beq.n	8010298 <SPI_WaitFlagStateUntilTimeout.constprop.7+0x78>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8010292:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 8010296:	d1e3      	bne.n	8010260 <SPI_WaitFlagStateUntilTimeout.constprop.7+0x40>
          __HAL_SPI_DISABLE(hspi);
 8010298:	681a      	ldr	r2, [r3, #0]
 801029a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 801029e:	601a      	str	r2, [r3, #0]
 80102a0:	e7de      	b.n	8010260 <SPI_WaitFlagStateUntilTimeout.constprop.7+0x40>
 80102a2:	bf00      	nop

080102a4 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80102a4:	b570      	push	{r4, r5, r6, lr}
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80102a6:	6845      	ldr	r5, [r0, #4]
 80102a8:	f5b5 7f82 	cmp.w	r5, #260	; 0x104
{
 80102ac:	4604      	mov	r4, r0
 80102ae:	4613      	mov	r3, r2
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80102b0:	d006      	beq.n	80102c0 <SPI_EndRxTransaction+0x1c>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80102b2:	460a      	mov	r2, r1
 80102b4:	2101      	movs	r1, #1
 80102b6:	f7ff ffb3 	bl	8010220 <SPI_WaitFlagStateUntilTimeout.constprop.7>
 80102ba:	b998      	cbnz	r0, 80102e4 <SPI_EndRxTransaction+0x40>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
      return HAL_TIMEOUT;
    }
  }
  return HAL_OK;
 80102bc:	2000      	movs	r0, #0
}
 80102be:	bd70      	pop	{r4, r5, r6, pc}
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80102c0:	6882      	ldr	r2, [r0, #8]
 80102c2:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 80102c6:	d013      	beq.n	80102f0 <SPI_EndRxTransaction+0x4c>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80102c8:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 80102cc:	d115      	bne.n	80102fa <SPI_EndRxTransaction+0x56>
    __HAL_SPI_DISABLE(hspi);
 80102ce:	6806      	ldr	r6, [r0, #0]
 80102d0:	6835      	ldr	r5, [r6, #0]
 80102d2:	f025 0540 	bic.w	r5, r5, #64	; 0x40
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80102d6:	460a      	mov	r2, r1
    __HAL_SPI_DISABLE(hspi);
 80102d8:	6035      	str	r5, [r6, #0]
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80102da:	2101      	movs	r1, #1
 80102dc:	f7ff ffa0 	bl	8010220 <SPI_WaitFlagStateUntilTimeout.constprop.7>
 80102e0:	2800      	cmp	r0, #0
 80102e2:	d0eb      	beq.n	80102bc <SPI_EndRxTransaction+0x18>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80102e4:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80102e6:	f043 0320 	orr.w	r3, r3, #32
 80102ea:	6563      	str	r3, [r4, #84]	; 0x54
      return HAL_TIMEOUT;
 80102ec:	2003      	movs	r0, #3
}
 80102ee:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_SPI_DISABLE(hspi);
 80102f0:	6800      	ldr	r0, [r0, #0]
 80102f2:	6802      	ldr	r2, [r0, #0]
 80102f4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80102f8:	6002      	str	r2, [r0, #0]
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80102fa:	460a      	mov	r2, r1
 80102fc:	4620      	mov	r0, r4
 80102fe:	2180      	movs	r1, #128	; 0x80
 8010300:	f7ff ff8e 	bl	8010220 <SPI_WaitFlagStateUntilTimeout.constprop.7>
 8010304:	2800      	cmp	r0, #0
 8010306:	d1ed      	bne.n	80102e4 <SPI_EndRxTransaction+0x40>
  return HAL_OK;
 8010308:	2000      	movs	r0, #0
 801030a:	e7d8      	b.n	80102be <SPI_EndRxTransaction+0x1a>

0801030c <SPI_EndRxTxTransaction>:
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 801030c:	4b16      	ldr	r3, [pc, #88]	; (8010368 <SPI_EndRxTxTransaction+0x5c>)
{
 801030e:	b530      	push	{r4, r5, lr}
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8010310:	681b      	ldr	r3, [r3, #0]
 8010312:	4d16      	ldr	r5, [pc, #88]	; (801036c <SPI_EndRxTxTransaction+0x60>)
 8010314:	fba5 5303 	umull	r5, r3, r5, r3
 8010318:	0d5b      	lsrs	r3, r3, #21
 801031a:	f44f 757a 	mov.w	r5, #1000	; 0x3e8
 801031e:	fb05 f303 	mul.w	r3, r5, r3
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8010322:	6845      	ldr	r5, [r0, #4]
{
 8010324:	b083      	sub	sp, #12
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8010326:	f5b5 7f82 	cmp.w	r5, #260	; 0x104
{
 801032a:	4604      	mov	r4, r0
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 801032c:	9301      	str	r3, [sp, #4]
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 801032e:	d107      	bne.n	8010340 <SPI_EndRxTxTransaction+0x34>
 8010330:	e00c      	b.n	801034c <SPI_EndRxTxTransaction+0x40>
    {
      if (count == 0U)
      {
        break;
      }
      count--;
 8010332:	9b01      	ldr	r3, [sp, #4]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8010334:	6822      	ldr	r2, [r4, #0]
      count--;
 8010336:	3b01      	subs	r3, #1
 8010338:	9301      	str	r3, [sp, #4]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 801033a:	6893      	ldr	r3, [r2, #8]
 801033c:	061b      	lsls	r3, r3, #24
 801033e:	d502      	bpl.n	8010346 <SPI_EndRxTxTransaction+0x3a>
      if (count == 0U)
 8010340:	9b01      	ldr	r3, [sp, #4]
 8010342:	2b00      	cmp	r3, #0
 8010344:	d1f5      	bne.n	8010332 <SPI_EndRxTxTransaction+0x26>
  }

  return HAL_OK;
 8010346:	2000      	movs	r0, #0
}
 8010348:	b003      	add	sp, #12
 801034a:	bd30      	pop	{r4, r5, pc}
 801034c:	4613      	mov	r3, r2
 801034e:	460a      	mov	r2, r1
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8010350:	2180      	movs	r1, #128	; 0x80
 8010352:	f7ff ff65 	bl	8010220 <SPI_WaitFlagStateUntilTimeout.constprop.7>
 8010356:	2800      	cmp	r0, #0
 8010358:	d0f5      	beq.n	8010346 <SPI_EndRxTxTransaction+0x3a>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 801035a:	6d63      	ldr	r3, [r4, #84]	; 0x54
 801035c:	f043 0320 	orr.w	r3, r3, #32
 8010360:	6563      	str	r3, [r4, #84]	; 0x54
      return HAL_TIMEOUT;
 8010362:	2003      	movs	r0, #3
 8010364:	e7f0      	b.n	8010348 <SPI_EndRxTxTransaction+0x3c>
 8010366:	bf00      	nop
 8010368:	2000000c 	.word	0x2000000c
 801036c:	165e9f81 	.word	0x165e9f81

08010370 <HAL_SPI_TransmitReceive.part.3>:
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
 8010370:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8010374:	4604      	mov	r4, r0
 8010376:	b083      	sub	sp, #12
  __HAL_LOCK(hspi);
 8010378:	2001      	movs	r0, #1
 801037a:	f884 0050 	strb.w	r0, [r4, #80]	; 0x50
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
 801037e:	4691      	mov	r9, r2
 8010380:	4698      	mov	r8, r3
 8010382:	460f      	mov	r7, r1
 8010384:	9d0a      	ldr	r5, [sp, #40]	; 0x28
  tickstart = HAL_GetTick();
 8010386:	f7fe fd35 	bl	800edf4 <HAL_GetTick>
  tmp_state           = hspi->State;
 801038a:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
  tmp_mode            = hspi->Init.Mode;
 801038e:	6862      	ldr	r2, [r4, #4]
  tmp_state           = hspi->State;
 8010390:	b2db      	uxtb	r3, r3
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8010392:	2b01      	cmp	r3, #1
  tickstart = HAL_GetTick();
 8010394:	4606      	mov	r6, r0
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8010396:	d011      	beq.n	80103bc <HAL_SPI_TransmitReceive.part.3+0x4c>
 8010398:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
 801039c:	d009      	beq.n	80103b2 <HAL_SPI_TransmitReceive.part.3+0x42>
    errorcode = HAL_BUSY;
 801039e:	2002      	movs	r0, #2
  hspi->State = HAL_SPI_STATE_READY;
 80103a0:	2201      	movs	r2, #1
  __HAL_UNLOCK(hspi);
 80103a2:	2300      	movs	r3, #0
  hspi->State = HAL_SPI_STATE_READY;
 80103a4:	f884 2051 	strb.w	r2, [r4, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80103a8:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
}
 80103ac:	b003      	add	sp, #12
 80103ae:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80103b2:	68a1      	ldr	r1, [r4, #8]
 80103b4:	2900      	cmp	r1, #0
 80103b6:	d1f2      	bne.n	801039e <HAL_SPI_TransmitReceive.part.3+0x2e>
 80103b8:	2b04      	cmp	r3, #4
 80103ba:	d1f0      	bne.n	801039e <HAL_SPI_TransmitReceive.part.3+0x2e>
  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80103bc:	2f00      	cmp	r7, #0
 80103be:	d064      	beq.n	801048a <HAL_SPI_TransmitReceive.part.3+0x11a>
 80103c0:	f1b9 0f00 	cmp.w	r9, #0
 80103c4:	d061      	beq.n	801048a <HAL_SPI_TransmitReceive.part.3+0x11a>
 80103c6:	f1b8 0f00 	cmp.w	r8, #0
 80103ca:	d05e      	beq.n	801048a <HAL_SPI_TransmitReceive.part.3+0x11a>
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80103cc:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80103d0:	6821      	ldr	r1, [r4, #0]
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80103d2:	f8c4 9038 	str.w	r9, [r4, #56]	; 0x38
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80103d6:	2b04      	cmp	r3, #4
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80103d8:	bf1c      	itt	ne
 80103da:	2305      	movne	r3, #5
 80103dc:	f884 3051 	strbne.w	r3, [r4, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80103e0:	2300      	movs	r3, #0
 80103e2:	6563      	str	r3, [r4, #84]	; 0x54
  hspi->RxXferCount = Size;
 80103e4:	f8a4 803e 	strh.w	r8, [r4, #62]	; 0x3e
  hspi->TxXferCount = Size;
 80103e8:	f8a4 8036 	strh.w	r8, [r4, #54]	; 0x36
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80103ec:	6808      	ldr	r0, [r1, #0]
  hspi->RxXferSize  = Size;
 80103ee:	f8a4 803c 	strh.w	r8, [r4, #60]	; 0x3c
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80103f2:	0640      	lsls	r0, r0, #25
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80103f4:	6327      	str	r7, [r4, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80103f6:	f8a4 8034 	strh.w	r8, [r4, #52]	; 0x34
  hspi->TxISR       = NULL;
 80103fa:	e9c4 3310 	strd	r3, r3, [r4, #64]	; 0x40
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80103fe:	d546      	bpl.n	801048e <HAL_SPI_TransmitReceive.part.3+0x11e>
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8010400:	68e3      	ldr	r3, [r4, #12]
 8010402:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8010406:	d056      	beq.n	80104b6 <HAL_SPI_TransmitReceive.part.3+0x146>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8010408:	2a00      	cmp	r2, #0
 801040a:	d145      	bne.n	8010498 <HAL_SPI_TransmitReceive.part.3+0x128>
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 801040c:	783b      	ldrb	r3, [r7, #0]
 801040e:	730b      	strb	r3, [r1, #12]
      hspi->TxXferCount--;
 8010410:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8010412:	6b22      	ldr	r2, [r4, #48]	; 0x30
      hspi->TxXferCount--;
 8010414:	3b01      	subs	r3, #1
 8010416:	b29b      	uxth	r3, r3
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8010418:	3201      	adds	r2, #1
      hspi->TxXferCount--;
 801041a:	86e3      	strh	r3, [r4, #54]	; 0x36
      hspi->pTxBuffPtr += sizeof(uint8_t);
 801041c:	6322      	str	r2, [r4, #48]	; 0x30
        txallowed = 1U;
 801041e:	2701      	movs	r7, #1
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8010420:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8010422:	b29b      	uxth	r3, r3
 8010424:	b91b      	cbnz	r3, 801042e <HAL_SPI_TransmitReceive.part.3+0xbe>
 8010426:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8010428:	b29b      	uxth	r3, r3
 801042a:	2b00      	cmp	r3, #0
 801042c:	d038      	beq.n	80104a0 <HAL_SPI_TransmitReceive.part.3+0x130>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 801042e:	6823      	ldr	r3, [r4, #0]
 8010430:	689a      	ldr	r2, [r3, #8]
 8010432:	0791      	lsls	r1, r2, #30
 8010434:	d50f      	bpl.n	8010456 <HAL_SPI_TransmitReceive.part.3+0xe6>
 8010436:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 8010438:	b292      	uxth	r2, r2
 801043a:	b162      	cbz	r2, 8010456 <HAL_SPI_TransmitReceive.part.3+0xe6>
 801043c:	b15f      	cbz	r7, 8010456 <HAL_SPI_TransmitReceive.part.3+0xe6>
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 801043e:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8010440:	7812      	ldrb	r2, [r2, #0]
 8010442:	731a      	strb	r2, [r3, #12]
        hspi->TxXferCount--;
 8010444:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
        hspi->pTxBuffPtr++;
 8010446:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8010448:	6823      	ldr	r3, [r4, #0]
        hspi->TxXferCount--;
 801044a:	3a01      	subs	r2, #1
 801044c:	b292      	uxth	r2, r2
        hspi->pTxBuffPtr++;
 801044e:	3101      	adds	r1, #1
        hspi->TxXferCount--;
 8010450:	86e2      	strh	r2, [r4, #54]	; 0x36
        hspi->pTxBuffPtr++;
 8010452:	6321      	str	r1, [r4, #48]	; 0x30
        txallowed = 0U;
 8010454:	2700      	movs	r7, #0
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8010456:	689a      	ldr	r2, [r3, #8]
 8010458:	07d2      	lsls	r2, r2, #31
 801045a:	d50d      	bpl.n	8010478 <HAL_SPI_TransmitReceive.part.3+0x108>
 801045c:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 801045e:	b292      	uxth	r2, r2
 8010460:	b152      	cbz	r2, 8010478 <HAL_SPI_TransmitReceive.part.3+0x108>
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8010462:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8010464:	68db      	ldr	r3, [r3, #12]
 8010466:	7013      	strb	r3, [r2, #0]
        hspi->RxXferCount--;
 8010468:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
        hspi->pRxBuffPtr++;
 801046a:	6ba2      	ldr	r2, [r4, #56]	; 0x38
        hspi->RxXferCount--;
 801046c:	3b01      	subs	r3, #1
 801046e:	b29b      	uxth	r3, r3
        hspi->pRxBuffPtr++;
 8010470:	3201      	adds	r2, #1
        hspi->RxXferCount--;
 8010472:	87e3      	strh	r3, [r4, #62]	; 0x3e
        hspi->pRxBuffPtr++;
 8010474:	63a2      	str	r2, [r4, #56]	; 0x38
        txallowed = 1U;
 8010476:	2701      	movs	r7, #1
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8010478:	f7fe fcbc 	bl	800edf4 <HAL_GetTick>
 801047c:	1b80      	subs	r0, r0, r6
 801047e:	4285      	cmp	r5, r0
 8010480:	d8ce      	bhi.n	8010420 <HAL_SPI_TransmitReceive.part.3+0xb0>
 8010482:	1c6b      	adds	r3, r5, #1
 8010484:	d0cc      	beq.n	8010420 <HAL_SPI_TransmitReceive.part.3+0xb0>
        errorcode = HAL_TIMEOUT;
 8010486:	2003      	movs	r0, #3
 8010488:	e78a      	b.n	80103a0 <HAL_SPI_TransmitReceive.part.3+0x30>
    errorcode = HAL_ERROR;
 801048a:	2001      	movs	r0, #1
 801048c:	e788      	b.n	80103a0 <HAL_SPI_TransmitReceive.part.3+0x30>
    __HAL_SPI_ENABLE(hspi);
 801048e:	680b      	ldr	r3, [r1, #0]
 8010490:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010494:	600b      	str	r3, [r1, #0]
 8010496:	e7b3      	b.n	8010400 <HAL_SPI_TransmitReceive.part.3+0x90>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8010498:	f1b8 0f01 	cmp.w	r8, #1
 801049c:	d1bf      	bne.n	801041e <HAL_SPI_TransmitReceive.part.3+0xae>
 801049e:	e7b5      	b.n	801040c <HAL_SPI_TransmitReceive.part.3+0x9c>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80104a0:	4632      	mov	r2, r6
 80104a2:	4629      	mov	r1, r5
 80104a4:	4620      	mov	r0, r4
 80104a6:	f7ff ff31 	bl	801030c <SPI_EndRxTxTransaction>
 80104aa:	2800      	cmp	r0, #0
 80104ac:	d043      	beq.n	8010536 <HAL_SPI_TransmitReceive.part.3+0x1c6>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80104ae:	2320      	movs	r3, #32
 80104b0:	6563      	str	r3, [r4, #84]	; 0x54
    errorcode = HAL_ERROR;
 80104b2:	2001      	movs	r0, #1
 80104b4:	e774      	b.n	80103a0 <HAL_SPI_TransmitReceive.part.3+0x30>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80104b6:	2a00      	cmp	r2, #0
 80104b8:	d034      	beq.n	8010524 <HAL_SPI_TransmitReceive.part.3+0x1b4>
 80104ba:	f1b8 0f01 	cmp.w	r8, #1
 80104be:	d031      	beq.n	8010524 <HAL_SPI_TransmitReceive.part.3+0x1b4>
        txallowed = 1U;
 80104c0:	2701      	movs	r7, #1
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80104c2:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80104c4:	b29b      	uxth	r3, r3
 80104c6:	b91b      	cbnz	r3, 80104d0 <HAL_SPI_TransmitReceive.part.3+0x160>
 80104c8:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80104ca:	b29b      	uxth	r3, r3
 80104cc:	2b00      	cmp	r3, #0
 80104ce:	d0e7      	beq.n	80104a0 <HAL_SPI_TransmitReceive.part.3+0x130>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80104d0:	6823      	ldr	r3, [r4, #0]
 80104d2:	689a      	ldr	r2, [r3, #8]
 80104d4:	0791      	lsls	r1, r2, #30
 80104d6:	d50d      	bpl.n	80104f4 <HAL_SPI_TransmitReceive.part.3+0x184>
 80104d8:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 80104da:	b292      	uxth	r2, r2
 80104dc:	b152      	cbz	r2, 80104f4 <HAL_SPI_TransmitReceive.part.3+0x184>
 80104de:	b14f      	cbz	r7, 80104f4 <HAL_SPI_TransmitReceive.part.3+0x184>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80104e0:	6b21      	ldr	r1, [r4, #48]	; 0x30
 80104e2:	f831 2b02 	ldrh.w	r2, [r1], #2
 80104e6:	60da      	str	r2, [r3, #12]
        hspi->TxXferCount--;
 80104e8:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80104ea:	6321      	str	r1, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 80104ec:	3a01      	subs	r2, #1
 80104ee:	b292      	uxth	r2, r2
 80104f0:	86e2      	strh	r2, [r4, #54]	; 0x36
        txallowed = 0U;
 80104f2:	2700      	movs	r7, #0
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80104f4:	689a      	ldr	r2, [r3, #8]
 80104f6:	07d2      	lsls	r2, r2, #31
 80104f8:	d50c      	bpl.n	8010514 <HAL_SPI_TransmitReceive.part.3+0x1a4>
 80104fa:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 80104fc:	b292      	uxth	r2, r2
 80104fe:	b14a      	cbz	r2, 8010514 <HAL_SPI_TransmitReceive.part.3+0x1a4>
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8010500:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8010502:	68db      	ldr	r3, [r3, #12]
 8010504:	f822 3b02 	strh.w	r3, [r2], #2
        hspi->RxXferCount--;
 8010508:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
        hspi->pRxBuffPtr += sizeof(uint16_t);
 801050a:	63a2      	str	r2, [r4, #56]	; 0x38
        hspi->RxXferCount--;
 801050c:	3b01      	subs	r3, #1
 801050e:	b29b      	uxth	r3, r3
 8010510:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 1U;
 8010512:	2701      	movs	r7, #1
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8010514:	f7fe fc6e 	bl	800edf4 <HAL_GetTick>
 8010518:	1b80      	subs	r0, r0, r6
 801051a:	42a8      	cmp	r0, r5
 801051c:	d3d1      	bcc.n	80104c2 <HAL_SPI_TransmitReceive.part.3+0x152>
 801051e:	1c68      	adds	r0, r5, #1
 8010520:	d0cf      	beq.n	80104c2 <HAL_SPI_TransmitReceive.part.3+0x152>
 8010522:	e7b0      	b.n	8010486 <HAL_SPI_TransmitReceive.part.3+0x116>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8010524:	f837 3b02 	ldrh.w	r3, [r7], #2
 8010528:	60cb      	str	r3, [r1, #12]
      hspi->TxXferCount--;
 801052a:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
      hspi->pTxBuffPtr += sizeof(uint16_t);
 801052c:	6327      	str	r7, [r4, #48]	; 0x30
      hspi->TxXferCount--;
 801052e:	3b01      	subs	r3, #1
 8010530:	b29b      	uxth	r3, r3
 8010532:	86e3      	strh	r3, [r4, #54]	; 0x36
 8010534:	e7c4      	b.n	80104c0 <HAL_SPI_TransmitReceive.part.3+0x150>
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8010536:	68a3      	ldr	r3, [r4, #8]
 8010538:	2b00      	cmp	r3, #0
 801053a:	f47f af31 	bne.w	80103a0 <HAL_SPI_TransmitReceive.part.3+0x30>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 801053e:	6823      	ldr	r3, [r4, #0]
 8010540:	9001      	str	r0, [sp, #4]
 8010542:	68da      	ldr	r2, [r3, #12]
 8010544:	9201      	str	r2, [sp, #4]
 8010546:	689b      	ldr	r3, [r3, #8]
 8010548:	9301      	str	r3, [sp, #4]
 801054a:	9b01      	ldr	r3, [sp, #4]
 801054c:	e728      	b.n	80103a0 <HAL_SPI_TransmitReceive.part.3+0x30>
 801054e:	bf00      	nop

08010550 <HAL_SPI_Init>:
  if (hspi == NULL)
 8010550:	2800      	cmp	r0, #0
 8010552:	d03b      	beq.n	80105cc <HAL_SPI_Init+0x7c>
  if (hspi->State == HAL_SPI_STATE_RESET)
 8010554:	f890 2051 	ldrb.w	r2, [r0, #81]	; 0x51
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8010558:	2300      	movs	r3, #0
{
 801055a:	b570      	push	{r4, r5, r6, lr}
  if (hspi->State == HAL_SPI_STATE_RESET)
 801055c:	f002 01ff 	and.w	r1, r2, #255	; 0xff
 8010560:	4604      	mov	r4, r0
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8010562:	6283      	str	r3, [r0, #40]	; 0x28
  if (hspi->State == HAL_SPI_STATE_RESET)
 8010564:	b362      	cbz	r2, 80105c0 <HAL_SPI_Init+0x70>
 8010566:	4618      	mov	r0, r3
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8010568:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 801056c:	e9d4 2103 	ldrd	r2, r1, [r4, #12]
 8010570:	432b      	orrs	r3, r5
 8010572:	4313      	orrs	r3, r2
 8010574:	6962      	ldr	r2, [r4, #20]
 8010576:	69e5      	ldr	r5, [r4, #28]
 8010578:	6a26      	ldr	r6, [r4, #32]
 801057a:	430b      	orrs	r3, r1
 801057c:	4313      	orrs	r3, r2
 801057e:	69a2      	ldr	r2, [r4, #24]
  __HAL_SPI_DISABLE(hspi);
 8010580:	6821      	ldr	r1, [r4, #0]
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8010582:	432b      	orrs	r3, r5
  hspi->State = HAL_SPI_STATE_BUSY;
 8010584:	2502      	movs	r5, #2
 8010586:	f884 5051 	strb.w	r5, [r4, #81]	; 0x51
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 801058a:	4333      	orrs	r3, r6
 801058c:	f402 7500 	and.w	r5, r2, #512	; 0x200
  __HAL_SPI_DISABLE(hspi);
 8010590:	680e      	ldr	r6, [r1, #0]
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8010592:	432b      	orrs	r3, r5
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8010594:	0c12      	lsrs	r2, r2, #16
 8010596:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8010598:	f002 0204 	and.w	r2, r2, #4
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 801059c:	4303      	orrs	r3, r0
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 801059e:	432a      	orrs	r2, r5
  __HAL_SPI_DISABLE(hspi);
 80105a0:	f026 0640 	bic.w	r6, r6, #64	; 0x40
 80105a4:	600e      	str	r6, [r1, #0]
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 80105a6:	600b      	str	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 80105a8:	604a      	str	r2, [r1, #4]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80105aa:	69cb      	ldr	r3, [r1, #28]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80105ac:	2200      	movs	r2, #0
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80105ae:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
  hspi->State     = HAL_SPI_STATE_READY;
 80105b2:	2501      	movs	r5, #1
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80105b4:	61cb      	str	r3, [r1, #28]
  return HAL_OK;
 80105b6:	4610      	mov	r0, r2
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80105b8:	6562      	str	r2, [r4, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80105ba:	f884 5051 	strb.w	r5, [r4, #81]	; 0x51
}
 80105be:	bd70      	pop	{r4, r5, r6, pc}
    hspi->Lock = HAL_UNLOCKED;
 80105c0:	f880 1050 	strb.w	r1, [r0, #80]	; 0x50
    HAL_SPI_MspInit(hspi);
 80105c4:	f7fd f94e 	bl	800d864 <HAL_SPI_MspInit>
 80105c8:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 80105ca:	e7cd      	b.n	8010568 <HAL_SPI_Init+0x18>
    return HAL_ERROR;
 80105cc:	2001      	movs	r0, #1
}
 80105ce:	4770      	bx	lr

080105d0 <HAL_SPI_Transmit>:
{
 80105d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  __HAL_LOCK(hspi);
 80105d4:	f890 4050 	ldrb.w	r4, [r0, #80]	; 0x50
 80105d8:	2c01      	cmp	r4, #1
{
 80105da:	b082      	sub	sp, #8
  __HAL_LOCK(hspi);
 80105dc:	d073      	beq.n	80106c6 <HAL_SPI_Transmit+0xf6>
 80105de:	461d      	mov	r5, r3
 80105e0:	2301      	movs	r3, #1
 80105e2:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50
 80105e6:	4604      	mov	r4, r0
 80105e8:	4617      	mov	r7, r2
 80105ea:	4688      	mov	r8, r1
  tickstart = HAL_GetTick();
 80105ec:	f7fe fc02 	bl	800edf4 <HAL_GetTick>
 80105f0:	4606      	mov	r6, r0
  if (hspi->State != HAL_SPI_STATE_READY)
 80105f2:	f894 0051 	ldrb.w	r0, [r4, #81]	; 0x51
 80105f6:	b2c0      	uxtb	r0, r0
 80105f8:	2801      	cmp	r0, #1
 80105fa:	d009      	beq.n	8010610 <HAL_SPI_Transmit+0x40>
    errorcode = HAL_BUSY;
 80105fc:	2002      	movs	r0, #2
  hspi->State = HAL_SPI_STATE_READY;
 80105fe:	2201      	movs	r2, #1
  __HAL_UNLOCK(hspi);
 8010600:	2300      	movs	r3, #0
  hspi->State = HAL_SPI_STATE_READY;
 8010602:	f884 2051 	strb.w	r2, [r4, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8010606:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
}
 801060a:	b002      	add	sp, #8
 801060c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if ((pData == NULL) || (Size == 0U))
 8010610:	f1b8 0f00 	cmp.w	r8, #0
 8010614:	d0f3      	beq.n	80105fe <HAL_SPI_Transmit+0x2e>
 8010616:	2f00      	cmp	r7, #0
 8010618:	d0f1      	beq.n	80105fe <HAL_SPI_Transmit+0x2e>
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 801061a:	68a2      	ldr	r2, [r4, #8]
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 801061c:	f8c4 8030 	str.w	r8, [r4, #48]	; 0x30
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8010620:	2300      	movs	r3, #0
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8010622:	2103      	movs	r1, #3
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8010624:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8010628:	f884 1051 	strb.w	r1, [r4, #81]	; 0x51
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 801062c:	63a3      	str	r3, [r4, #56]	; 0x38
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 801062e:	6563      	str	r3, [r4, #84]	; 0x54
  hspi->RxXferSize  = 0U;
 8010630:	87a3      	strh	r3, [r4, #60]	; 0x3c
  hspi->RxISR       = NULL;
 8010632:	e9c4 3310 	strd	r3, r3, [r4, #64]	; 0x40
  hspi->TxXferCount = Size;
 8010636:	86e7      	strh	r7, [r4, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8010638:	86a7      	strh	r7, [r4, #52]	; 0x34
  hspi->RxXferCount = 0U;
 801063a:	87e3      	strh	r3, [r4, #62]	; 0x3e
 801063c:	6823      	ldr	r3, [r4, #0]
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 801063e:	d103      	bne.n	8010648 <HAL_SPI_Transmit+0x78>
    SPI_1LINE_TX(hspi);
 8010640:	681a      	ldr	r2, [r3, #0]
 8010642:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8010646:	601a      	str	r2, [r3, #0]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8010648:	681a      	ldr	r2, [r3, #0]
 801064a:	0652      	lsls	r2, r2, #25
 801064c:	d53f      	bpl.n	80106ce <HAL_SPI_Transmit+0xfe>
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 801064e:	68e2      	ldr	r2, [r4, #12]
 8010650:	6861      	ldr	r1, [r4, #4]
 8010652:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
 8010656:	d04b      	beq.n	80106f0 <HAL_SPI_Transmit+0x120>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8010658:	2900      	cmp	r1, #0
 801065a:	d13d      	bne.n	80106d8 <HAL_SPI_Transmit+0x108>
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 801065c:	f898 2000 	ldrb.w	r2, [r8]
 8010660:	731a      	strb	r2, [r3, #12]
      hspi->TxXferCount--;
 8010662:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8010664:	6b22      	ldr	r2, [r4, #48]	; 0x30
      hspi->TxXferCount--;
 8010666:	3b01      	subs	r3, #1
 8010668:	b29b      	uxth	r3, r3
      hspi->pTxBuffPtr += sizeof(uint8_t);
 801066a:	3201      	adds	r2, #1
      hspi->TxXferCount--;
 801066c:	86e3      	strh	r3, [r4, #54]	; 0x36
      hspi->pTxBuffPtr += sizeof(uint8_t);
 801066e:	6322      	str	r2, [r4, #48]	; 0x30
    while (hspi->TxXferCount > 0U)
 8010670:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8010672:	b29b      	uxth	r3, r3
 8010674:	b18b      	cbz	r3, 801069a <HAL_SPI_Transmit+0xca>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8010676:	6823      	ldr	r3, [r4, #0]
 8010678:	689a      	ldr	r2, [r3, #8]
 801067a:	0792      	lsls	r2, r2, #30
 801067c:	d52f      	bpl.n	80106de <HAL_SPI_Transmit+0x10e>
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 801067e:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8010680:	7812      	ldrb	r2, [r2, #0]
 8010682:	731a      	strb	r2, [r3, #12]
        hspi->TxXferCount--;
 8010684:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8010686:	6b21      	ldr	r1, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 8010688:	3b01      	subs	r3, #1
 801068a:	b29b      	uxth	r3, r3
 801068c:	86e3      	strh	r3, [r4, #54]	; 0x36
    while (hspi->TxXferCount > 0U)
 801068e:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8010690:	3101      	adds	r1, #1
    while (hspi->TxXferCount > 0U)
 8010692:	b29b      	uxth	r3, r3
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8010694:	6321      	str	r1, [r4, #48]	; 0x30
    while (hspi->TxXferCount > 0U)
 8010696:	2b00      	cmp	r3, #0
 8010698:	d1ed      	bne.n	8010676 <HAL_SPI_Transmit+0xa6>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 801069a:	4632      	mov	r2, r6
 801069c:	4629      	mov	r1, r5
 801069e:	4620      	mov	r0, r4
 80106a0:	f7ff fe34 	bl	801030c <SPI_EndRxTxTransaction>
 80106a4:	b108      	cbz	r0, 80106aa <HAL_SPI_Transmit+0xda>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80106a6:	2320      	movs	r3, #32
 80106a8:	6563      	str	r3, [r4, #84]	; 0x54
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80106aa:	68a3      	ldr	r3, [r4, #8]
 80106ac:	b933      	cbnz	r3, 80106bc <HAL_SPI_Transmit+0xec>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80106ae:	6822      	ldr	r2, [r4, #0]
 80106b0:	9301      	str	r3, [sp, #4]
 80106b2:	68d3      	ldr	r3, [r2, #12]
 80106b4:	9301      	str	r3, [sp, #4]
 80106b6:	6893      	ldr	r3, [r2, #8]
 80106b8:	9301      	str	r3, [sp, #4]
 80106ba:	9b01      	ldr	r3, [sp, #4]
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80106bc:	6d60      	ldr	r0, [r4, #84]	; 0x54
    errorcode = HAL_BUSY;
 80106be:	3000      	adds	r0, #0
 80106c0:	bf18      	it	ne
 80106c2:	2001      	movne	r0, #1
error:
 80106c4:	e79b      	b.n	80105fe <HAL_SPI_Transmit+0x2e>
  __HAL_LOCK(hspi);
 80106c6:	2002      	movs	r0, #2
}
 80106c8:	b002      	add	sp, #8
 80106ca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_SPI_ENABLE(hspi);
 80106ce:	681a      	ldr	r2, [r3, #0]
 80106d0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80106d4:	601a      	str	r2, [r3, #0]
 80106d6:	e7ba      	b.n	801064e <HAL_SPI_Transmit+0x7e>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80106d8:	2f01      	cmp	r7, #1
 80106da:	d1c9      	bne.n	8010670 <HAL_SPI_Transmit+0xa0>
 80106dc:	e7be      	b.n	801065c <HAL_SPI_Transmit+0x8c>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80106de:	f7fe fb89 	bl	800edf4 <HAL_GetTick>
 80106e2:	1b80      	subs	r0, r0, r6
 80106e4:	42a8      	cmp	r0, r5
 80106e6:	d3c3      	bcc.n	8010670 <HAL_SPI_Transmit+0xa0>
 80106e8:	1c6b      	adds	r3, r5, #1
 80106ea:	d0c1      	beq.n	8010670 <HAL_SPI_Transmit+0xa0>
          errorcode = HAL_TIMEOUT;
 80106ec:	2003      	movs	r0, #3
 80106ee:	e786      	b.n	80105fe <HAL_SPI_Transmit+0x2e>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80106f0:	b311      	cbz	r1, 8010738 <HAL_SPI_Transmit+0x168>
 80106f2:	2f01      	cmp	r7, #1
 80106f4:	d020      	beq.n	8010738 <HAL_SPI_Transmit+0x168>
    while (hspi->TxXferCount > 0U)
 80106f6:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80106f8:	b29b      	uxth	r3, r3
 80106fa:	2b00      	cmp	r3, #0
 80106fc:	d0cd      	beq.n	801069a <HAL_SPI_Transmit+0xca>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80106fe:	6823      	ldr	r3, [r4, #0]
 8010700:	689a      	ldr	r2, [r3, #8]
 8010702:	0790      	lsls	r0, r2, #30
 8010704:	d510      	bpl.n	8010728 <HAL_SPI_Transmit+0x158>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8010706:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8010708:	f832 1b02 	ldrh.w	r1, [r2], #2
 801070c:	60d9      	str	r1, [r3, #12]
        hspi->TxXferCount--;
 801070e:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8010710:	6322      	str	r2, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 8010712:	3b01      	subs	r3, #1
 8010714:	b29b      	uxth	r3, r3
 8010716:	86e3      	strh	r3, [r4, #54]	; 0x36
    while (hspi->TxXferCount > 0U)
 8010718:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 801071a:	b29b      	uxth	r3, r3
 801071c:	2b00      	cmp	r3, #0
 801071e:	d0bc      	beq.n	801069a <HAL_SPI_Transmit+0xca>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8010720:	6823      	ldr	r3, [r4, #0]
 8010722:	689a      	ldr	r2, [r3, #8]
 8010724:	0790      	lsls	r0, r2, #30
 8010726:	d4ee      	bmi.n	8010706 <HAL_SPI_Transmit+0x136>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8010728:	f7fe fb64 	bl	800edf4 <HAL_GetTick>
 801072c:	1b80      	subs	r0, r0, r6
 801072e:	42a8      	cmp	r0, r5
 8010730:	d3e1      	bcc.n	80106f6 <HAL_SPI_Transmit+0x126>
 8010732:	1c69      	adds	r1, r5, #1
 8010734:	d0df      	beq.n	80106f6 <HAL_SPI_Transmit+0x126>
 8010736:	e7d9      	b.n	80106ec <HAL_SPI_Transmit+0x11c>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8010738:	4641      	mov	r1, r8
 801073a:	f831 2b02 	ldrh.w	r2, [r1], #2
 801073e:	60da      	str	r2, [r3, #12]
      hspi->TxXferCount--;
 8010740:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8010742:	6321      	str	r1, [r4, #48]	; 0x30
      hspi->TxXferCount--;
 8010744:	3b01      	subs	r3, #1
 8010746:	b29b      	uxth	r3, r3
 8010748:	86e3      	strh	r3, [r4, #54]	; 0x36
 801074a:	e7d4      	b.n	80106f6 <HAL_SPI_Transmit+0x126>

0801074c <HAL_SPI_Receive>:
{
 801074c:	e92d 42f0 	stmdb	sp!, {r4, r5, r6, r7, r9, lr}
 8010750:	4616      	mov	r6, r2
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8010752:	6842      	ldr	r2, [r0, #4]
 8010754:	f890 5050 	ldrb.w	r5, [r0, #80]	; 0x50
 8010758:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
{
 801075c:	b082      	sub	sp, #8
 801075e:	4604      	mov	r4, r0
 8010760:	461f      	mov	r7, r3
 8010762:	4689      	mov	r9, r1
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8010764:	d016      	beq.n	8010794 <HAL_SPI_Receive+0x48>
  __HAL_LOCK(hspi);
 8010766:	2d01      	cmp	r5, #1
 8010768:	d024      	beq.n	80107b4 <HAL_SPI_Receive+0x68>
 801076a:	2301      	movs	r3, #1
 801076c:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
  tickstart = HAL_GetTick();
 8010770:	f7fe fb40 	bl	800edf4 <HAL_GetTick>
 8010774:	4605      	mov	r5, r0
  if (hspi->State != HAL_SPI_STATE_READY)
 8010776:	f894 0051 	ldrb.w	r0, [r4, #81]	; 0x51
 801077a:	b2c0      	uxtb	r0, r0
 801077c:	2801      	cmp	r0, #1
 801077e:	d01d      	beq.n	80107bc <HAL_SPI_Receive+0x70>
    errorcode = HAL_BUSY;
 8010780:	2002      	movs	r0, #2
  hspi->State = HAL_SPI_STATE_READY;
 8010782:	2201      	movs	r2, #1
  __HAL_UNLOCK(hspi);
 8010784:	2300      	movs	r3, #0
  hspi->State = HAL_SPI_STATE_READY;
 8010786:	f884 2051 	strb.w	r2, [r4, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 801078a:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
}
 801078e:	b002      	add	sp, #8
 8010790:	e8bd 82f0 	ldmia.w	sp!, {r4, r5, r6, r7, r9, pc}
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8010794:	6883      	ldr	r3, [r0, #8]
 8010796:	2b00      	cmp	r3, #0
 8010798:	d1e5      	bne.n	8010766 <HAL_SPI_Receive+0x1a>
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 801079a:	2304      	movs	r3, #4
  __HAL_LOCK(hspi);
 801079c:	2d01      	cmp	r5, #1
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 801079e:	f880 3051 	strb.w	r3, [r0, #81]	; 0x51
  __HAL_LOCK(hspi);
 80107a2:	d007      	beq.n	80107b4 <HAL_SPI_Receive+0x68>
 80107a4:	9700      	str	r7, [sp, #0]
 80107a6:	4633      	mov	r3, r6
 80107a8:	460a      	mov	r2, r1
 80107aa:	f7ff fde1 	bl	8010370 <HAL_SPI_TransmitReceive.part.3>
}
 80107ae:	b002      	add	sp, #8
 80107b0:	e8bd 82f0 	ldmia.w	sp!, {r4, r5, r6, r7, r9, pc}
  __HAL_LOCK(hspi);
 80107b4:	2002      	movs	r0, #2
}
 80107b6:	b002      	add	sp, #8
 80107b8:	e8bd 82f0 	ldmia.w	sp!, {r4, r5, r6, r7, r9, pc}
  if ((pData == NULL) || (Size == 0U))
 80107bc:	f1b9 0f00 	cmp.w	r9, #0
 80107c0:	d0df      	beq.n	8010782 <HAL_SPI_Receive+0x36>
 80107c2:	2e00      	cmp	r6, #0
 80107c4:	d0dd      	beq.n	8010782 <HAL_SPI_Receive+0x36>
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80107c6:	68a2      	ldr	r2, [r4, #8]
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80107c8:	f8c4 9038 	str.w	r9, [r4, #56]	; 0x38
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80107cc:	2304      	movs	r3, #4
 80107ce:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80107d2:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80107d6:	f04f 0300 	mov.w	r3, #0
 80107da:	6563      	str	r3, [r4, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80107dc:	6323      	str	r3, [r4, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 80107de:	86a3      	strh	r3, [r4, #52]	; 0x34
  hspi->TxISR       = NULL;
 80107e0:	e9c4 3310 	strd	r3, r3, [r4, #64]	; 0x40
  hspi->RxXferCount = Size;
 80107e4:	87e6      	strh	r6, [r4, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 80107e6:	87a6      	strh	r6, [r4, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 80107e8:	86e3      	strh	r3, [r4, #54]	; 0x36
 80107ea:	6823      	ldr	r3, [r4, #0]
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80107ec:	d050      	beq.n	8010890 <HAL_SPI_Receive+0x144>
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80107ee:	681a      	ldr	r2, [r3, #0]
 80107f0:	0656      	lsls	r6, r2, #25
 80107f2:	d403      	bmi.n	80107fc <HAL_SPI_Receive+0xb0>
    __HAL_SPI_ENABLE(hspi);
 80107f4:	681a      	ldr	r2, [r3, #0]
 80107f6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80107fa:	601a      	str	r2, [r3, #0]
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 80107fc:	68e3      	ldr	r3, [r4, #12]
 80107fe:	bb43      	cbnz	r3, 8010852 <HAL_SPI_Receive+0x106>
    while (hspi->RxXferCount > 0U)
 8010800:	8fe1      	ldrh	r1, [r4, #62]	; 0x3e
 8010802:	b289      	uxth	r1, r1
 8010804:	b189      	cbz	r1, 801082a <HAL_SPI_Receive+0xde>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8010806:	6823      	ldr	r3, [r4, #0]
 8010808:	689a      	ldr	r2, [r3, #8]
 801080a:	07d0      	lsls	r0, r2, #31
 801080c:	d537      	bpl.n	801087e <HAL_SPI_Receive+0x132>
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 801080e:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8010810:	7b1b      	ldrb	r3, [r3, #12]
 8010812:	7013      	strb	r3, [r2, #0]
        hspi->RxXferCount--;
 8010814:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8010816:	6ba2      	ldr	r2, [r4, #56]	; 0x38
        hspi->RxXferCount--;
 8010818:	3b01      	subs	r3, #1
 801081a:	b29b      	uxth	r3, r3
 801081c:	87e3      	strh	r3, [r4, #62]	; 0x3e
    while (hspi->RxXferCount > 0U)
 801081e:	8fe1      	ldrh	r1, [r4, #62]	; 0x3e
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8010820:	3201      	adds	r2, #1
    while (hspi->RxXferCount > 0U)
 8010822:	b289      	uxth	r1, r1
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8010824:	63a2      	str	r2, [r4, #56]	; 0x38
    while (hspi->RxXferCount > 0U)
 8010826:	2900      	cmp	r1, #0
 8010828:	d1ed      	bne.n	8010806 <HAL_SPI_Receive+0xba>
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 801082a:	462a      	mov	r2, r5
 801082c:	4639      	mov	r1, r7
 801082e:	4620      	mov	r0, r4
 8010830:	f7ff fd38 	bl	80102a4 <SPI_EndRxTransaction>
 8010834:	b108      	cbz	r0, 801083a <HAL_SPI_Receive+0xee>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8010836:	2320      	movs	r3, #32
 8010838:	6563      	str	r3, [r4, #84]	; 0x54
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 801083a:	6d60      	ldr	r0, [r4, #84]	; 0x54
    errorcode = HAL_BUSY;
 801083c:	3000      	adds	r0, #0
 801083e:	bf18      	it	ne
 8010840:	2001      	movne	r0, #1
error :
 8010842:	e79e      	b.n	8010782 <HAL_SPI_Receive+0x36>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8010844:	f7fe fad6 	bl	800edf4 <HAL_GetTick>
 8010848:	1b40      	subs	r0, r0, r5
 801084a:	42b8      	cmp	r0, r7
 801084c:	d301      	bcc.n	8010852 <HAL_SPI_Receive+0x106>
 801084e:	1c7b      	adds	r3, r7, #1
 8010850:	d11c      	bne.n	801088c <HAL_SPI_Receive+0x140>
    while (hspi->RxXferCount > 0U)
 8010852:	8fe1      	ldrh	r1, [r4, #62]	; 0x3e
 8010854:	b289      	uxth	r1, r1
 8010856:	2900      	cmp	r1, #0
 8010858:	d0e7      	beq.n	801082a <HAL_SPI_Receive+0xde>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 801085a:	6823      	ldr	r3, [r4, #0]
 801085c:	689a      	ldr	r2, [r3, #8]
 801085e:	07d2      	lsls	r2, r2, #31
 8010860:	d5f0      	bpl.n	8010844 <HAL_SPI_Receive+0xf8>
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8010862:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8010864:	68db      	ldr	r3, [r3, #12]
 8010866:	f822 3b02 	strh.w	r3, [r2], #2
        hspi->RxXferCount--;
 801086a:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
        hspi->pRxBuffPtr += sizeof(uint16_t);
 801086c:	63a2      	str	r2, [r4, #56]	; 0x38
        hspi->RxXferCount--;
 801086e:	3b01      	subs	r3, #1
 8010870:	b29b      	uxth	r3, r3
 8010872:	87e3      	strh	r3, [r4, #62]	; 0x3e
    while (hspi->RxXferCount > 0U)
 8010874:	8fe1      	ldrh	r1, [r4, #62]	; 0x3e
 8010876:	b289      	uxth	r1, r1
 8010878:	2900      	cmp	r1, #0
 801087a:	d1ee      	bne.n	801085a <HAL_SPI_Receive+0x10e>
 801087c:	e7d5      	b.n	801082a <HAL_SPI_Receive+0xde>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 801087e:	f7fe fab9 	bl	800edf4 <HAL_GetTick>
 8010882:	1b40      	subs	r0, r0, r5
 8010884:	42b8      	cmp	r0, r7
 8010886:	d3bb      	bcc.n	8010800 <HAL_SPI_Receive+0xb4>
 8010888:	1c79      	adds	r1, r7, #1
 801088a:	d0b9      	beq.n	8010800 <HAL_SPI_Receive+0xb4>
          errorcode = HAL_TIMEOUT;
 801088c:	2003      	movs	r0, #3
 801088e:	e778      	b.n	8010782 <HAL_SPI_Receive+0x36>
    SPI_1LINE_RX(hspi);
 8010890:	681a      	ldr	r2, [r3, #0]
 8010892:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8010896:	601a      	str	r2, [r3, #0]
 8010898:	e7a9      	b.n	80107ee <HAL_SPI_Receive+0xa2>
 801089a:	bf00      	nop

0801089c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 801089c:	b4f0      	push	{r4, r5, r6, r7}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 801089e:	6a04      	ldr	r4, [r0, #32]
  tmpccmrx |= OC_Config->OCMode;

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80108a0:	688f      	ldr	r7, [r1, #8]
  tmpccmrx |= OC_Config->OCMode;
 80108a2:	680e      	ldr	r6, [r1, #0]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80108a4:	4d14      	ldr	r5, [pc, #80]	; (80108f8 <TIM_OC1_SetConfig+0x5c>)
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80108a6:	f024 0401 	bic.w	r4, r4, #1
 80108aa:	6204      	str	r4, [r0, #32]
  tmpccer = TIMx->CCER;
 80108ac:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 80108ae:	6844      	ldr	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 80108b0:	6982      	ldr	r2, [r0, #24]
  tmpccer &= ~TIM_CCER_CC1P;
 80108b2:	f023 0302 	bic.w	r3, r3, #2
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80108b6:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80108ba:	42a8      	cmp	r0, r5
  tmpccer |= OC_Config->OCPolarity;
 80108bc:	ea43 0307 	orr.w	r3, r3, r7
  tmpccmrx |= OC_Config->OCMode;
 80108c0:	ea42 0206 	orr.w	r2, r2, r6
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80108c4:	d00a      	beq.n	80108dc <TIM_OC1_SetConfig+0x40>
 80108c6:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80108ca:	42a8      	cmp	r0, r5
 80108cc:	d006      	beq.n	80108dc <TIM_OC1_SetConfig+0x40>

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80108ce:	6849      	ldr	r1, [r1, #4]
  TIMx->CR2 = tmpcr2;
 80108d0:	6044      	str	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 80108d2:	6182      	str	r2, [r0, #24]

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
}
 80108d4:	bcf0      	pop	{r4, r5, r6, r7}
  TIMx->CCR1 = OC_Config->Pulse;
 80108d6:	6341      	str	r1, [r0, #52]	; 0x34
  TIMx->CCER = tmpccer;
 80108d8:	6203      	str	r3, [r0, #32]
}
 80108da:	4770      	bx	lr
    tmpccer |= OC_Config->OCNPolarity;
 80108dc:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC1NP;
 80108de:	f023 0308 	bic.w	r3, r3, #8
    tmpccer |= OC_Config->OCNPolarity;
 80108e2:	432b      	orrs	r3, r5
    tmpcr2 |= OC_Config->OCNIdleState;
 80108e4:	e9d1 5605 	ldrd	r5, r6, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80108e8:	f424 7440 	bic.w	r4, r4, #768	; 0x300
    tmpcr2 |= OC_Config->OCNIdleState;
 80108ec:	4335      	orrs	r5, r6
    tmpccer &= ~TIM_CCER_CC1NE;
 80108ee:	f023 0304 	bic.w	r3, r3, #4
    tmpcr2 |= OC_Config->OCNIdleState;
 80108f2:	432c      	orrs	r4, r5
 80108f4:	e7eb      	b.n	80108ce <TIM_OC1_SetConfig+0x32>
 80108f6:	bf00      	nop
 80108f8:	40010000 	.word	0x40010000

080108fc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80108fc:	b4f0      	push	{r4, r5, r6, r7}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80108fe:	6a04      	ldr	r4, [r0, #32]
  tmpccmrx |= OC_Config->OCMode;

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8010900:	688f      	ldr	r7, [r1, #8]
  tmpccmrx |= OC_Config->OCMode;
 8010902:	680e      	ldr	r6, [r1, #0]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8010904:	4d15      	ldr	r5, [pc, #84]	; (801095c <TIM_OC3_SetConfig+0x60>)
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8010906:	f424 7480 	bic.w	r4, r4, #256	; 0x100
 801090a:	6204      	str	r4, [r0, #32]
  tmpccer = TIMx->CCER;
 801090c:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 801090e:	6844      	ldr	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR2;
 8010910:	69c2      	ldr	r2, [r0, #28]
  tmpccer &= ~TIM_CCER_CC3P;
 8010912:	f423 7300 	bic.w	r3, r3, #512	; 0x200
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8010916:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 801091a:	42a8      	cmp	r0, r5
  tmpccer |= (OC_Config->OCPolarity << 8U);
 801091c:	ea43 2307 	orr.w	r3, r3, r7, lsl #8
  tmpccmrx |= OC_Config->OCMode;
 8010920:	ea42 0206 	orr.w	r2, r2, r6
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8010924:	d00a      	beq.n	801093c <TIM_OC3_SetConfig+0x40>
 8010926:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 801092a:	42a8      	cmp	r0, r5
 801092c:	d006      	beq.n	801093c <TIM_OC3_SetConfig+0x40>

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 801092e:	6849      	ldr	r1, [r1, #4]
  TIMx->CR2 = tmpcr2;
 8010930:	6044      	str	r4, [r0, #4]
  TIMx->CCMR2 = tmpccmrx;
 8010932:	61c2      	str	r2, [r0, #28]

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
}
 8010934:	bcf0      	pop	{r4, r5, r6, r7}
  TIMx->CCR3 = OC_Config->Pulse;
 8010936:	63c1      	str	r1, [r0, #60]	; 0x3c
  TIMx->CCER = tmpccer;
 8010938:	6203      	str	r3, [r0, #32]
}
 801093a:	4770      	bx	lr
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 801093c:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC3NP;
 801093e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8010942:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8010946:	e9d1 5605 	ldrd	r5, r6, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 801094a:	f424 5440 	bic.w	r4, r4, #12288	; 0x3000
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 801094e:	4335      	orrs	r5, r6
    tmpccer &= ~TIM_CCER_CC3NE;
 8010950:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8010954:	ea44 1405 	orr.w	r4, r4, r5, lsl #4
 8010958:	e7e9      	b.n	801092e <TIM_OC3_SetConfig+0x32>
 801095a:	bf00      	nop
 801095c:	40010000 	.word	0x40010000

08010960 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8010960:	b4f0      	push	{r4, r5, r6, r7}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8010962:	6a04      	ldr	r4, [r0, #32]
  tmpccmrx |= (OC_Config->OCMode << 8U);

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8010964:	688f      	ldr	r7, [r1, #8]
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8010966:	680e      	ldr	r6, [r1, #0]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8010968:	4d10      	ldr	r5, [pc, #64]	; (80109ac <TIM_OC4_SetConfig+0x4c>)
  TIMx->CCER &= ~TIM_CCER_CC4E;
 801096a:	f424 5480 	bic.w	r4, r4, #4096	; 0x1000
 801096e:	6204      	str	r4, [r0, #32]
  tmpccer = TIMx->CCER;
 8010970:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 8010972:	6844      	ldr	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR2;
 8010974:	69c2      	ldr	r2, [r0, #28]
  tmpccer &= ~TIM_CCER_CC4P;
 8010976:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 801097a:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 801097e:	42a8      	cmp	r0, r5
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8010980:	ea43 3307 	orr.w	r3, r3, r7, lsl #12
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8010984:	ea42 2206 	orr.w	r2, r2, r6, lsl #8
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8010988:	d00a      	beq.n	80109a0 <TIM_OC4_SetConfig+0x40>
 801098a:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 801098e:	42a8      	cmp	r0, r5
 8010990:	d006      	beq.n	80109a0 <TIM_OC4_SetConfig+0x40>

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8010992:	6849      	ldr	r1, [r1, #4]
  TIMx->CR2 = tmpcr2;
 8010994:	6044      	str	r4, [r0, #4]
  TIMx->CCMR2 = tmpccmrx;
 8010996:	61c2      	str	r2, [r0, #28]

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
}
 8010998:	bcf0      	pop	{r4, r5, r6, r7}
  TIMx->CCR4 = OC_Config->Pulse;
 801099a:	6401      	str	r1, [r0, #64]	; 0x40
  TIMx->CCER = tmpccer;
 801099c:	6203      	str	r3, [r0, #32]
}
 801099e:	4770      	bx	lr
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80109a0:	694d      	ldr	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS4;
 80109a2:	f424 4480 	bic.w	r4, r4, #16384	; 0x4000
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80109a6:	ea44 1485 	orr.w	r4, r4, r5, lsl #6
 80109aa:	e7f2      	b.n	8010992 <TIM_OC4_SetConfig+0x32>
 80109ac:	40010000 	.word	0x40010000

080109b0 <HAL_TIM_Base_Start_IT>:
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80109b0:	6803      	ldr	r3, [r0, #0]
 80109b2:	68da      	ldr	r2, [r3, #12]
 80109b4:	f042 0201 	orr.w	r2, r2, #1
 80109b8:	60da      	str	r2, [r3, #12]
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80109ba:	689a      	ldr	r2, [r3, #8]
 80109bc:	f002 0207 	and.w	r2, r2, #7
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80109c0:	2a06      	cmp	r2, #6
 80109c2:	d003      	beq.n	80109cc <HAL_TIM_Base_Start_IT+0x1c>
    __HAL_TIM_ENABLE(htim);
 80109c4:	681a      	ldr	r2, [r3, #0]
 80109c6:	f042 0201 	orr.w	r2, r2, #1
 80109ca:	601a      	str	r2, [r3, #0]
}
 80109cc:	2000      	movs	r0, #0
 80109ce:	4770      	bx	lr

080109d0 <HAL_TIM_Base_Stop_IT>:
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 80109d0:	6803      	ldr	r3, [r0, #0]
 80109d2:	68da      	ldr	r2, [r3, #12]
 80109d4:	f022 0201 	bic.w	r2, r2, #1
 80109d8:	60da      	str	r2, [r3, #12]
  __HAL_TIM_DISABLE(htim);
 80109da:	6a19      	ldr	r1, [r3, #32]
 80109dc:	f241 1211 	movw	r2, #4369	; 0x1111
 80109e0:	4211      	tst	r1, r2
 80109e2:	d108      	bne.n	80109f6 <HAL_TIM_Base_Stop_IT+0x26>
 80109e4:	6a19      	ldr	r1, [r3, #32]
 80109e6:	f240 4244 	movw	r2, #1092	; 0x444
 80109ea:	4211      	tst	r1, r2
 80109ec:	d103      	bne.n	80109f6 <HAL_TIM_Base_Stop_IT+0x26>
 80109ee:	681a      	ldr	r2, [r3, #0]
 80109f0:	f022 0201 	bic.w	r2, r2, #1
 80109f4:	601a      	str	r2, [r3, #0]
}
 80109f6:	2000      	movs	r0, #0
 80109f8:	4770      	bx	lr
 80109fa:	bf00      	nop

080109fc <HAL_TIM_OC_MspInit>:
 80109fc:	4770      	bx	lr
 80109fe:	bf00      	nop

08010a00 <HAL_TIM_OC_Start>:
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8010a00:	6803      	ldr	r3, [r0, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8010a02:	2201      	movs	r2, #1

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8010a04:	6a18      	ldr	r0, [r3, #32]
  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8010a06:	f001 011f 	and.w	r1, r1, #31
 8010a0a:	fa02 f101 	lsl.w	r1, r2, r1
  TIMx->CCER &= ~tmp;
 8010a0e:	ea20 0001 	bic.w	r0, r0, r1
{
 8010a12:	b410      	push	{r4}
  TIMx->CCER &= ~tmp;
 8010a14:	6218      	str	r0, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8010a16:	6a1a      	ldr	r2, [r3, #32]
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8010a18:	4c0c      	ldr	r4, [pc, #48]	; (8010a4c <HAL_TIM_OC_Start+0x4c>)
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8010a1a:	4311      	orrs	r1, r2
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8010a1c:	42a3      	cmp	r3, r4
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8010a1e:	6219      	str	r1, [r3, #32]
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8010a20:	d00f      	beq.n	8010a42 <HAL_TIM_OC_Start+0x42>
 8010a22:	4a0b      	ldr	r2, [pc, #44]	; (8010a50 <HAL_TIM_OC_Start+0x50>)
 8010a24:	4293      	cmp	r3, r2
 8010a26:	d00c      	beq.n	8010a42 <HAL_TIM_OC_Start+0x42>
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8010a28:	689a      	ldr	r2, [r3, #8]
 8010a2a:	f002 0207 	and.w	r2, r2, #7
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8010a2e:	2a06      	cmp	r2, #6
 8010a30:	d003      	beq.n	8010a3a <HAL_TIM_OC_Start+0x3a>
    __HAL_TIM_ENABLE(htim);
 8010a32:	681a      	ldr	r2, [r3, #0]
 8010a34:	f042 0201 	orr.w	r2, r2, #1
 8010a38:	601a      	str	r2, [r3, #0]
}
 8010a3a:	2000      	movs	r0, #0
 8010a3c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010a40:	4770      	bx	lr
    __HAL_TIM_MOE_ENABLE(htim);
 8010a42:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8010a44:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8010a48:	645a      	str	r2, [r3, #68]	; 0x44
 8010a4a:	e7ed      	b.n	8010a28 <HAL_TIM_OC_Start+0x28>
 8010a4c:	40010000 	.word	0x40010000
 8010a50:	40010400 	.word	0x40010400

08010a54 <HAL_TIM_OC_Start_IT>:
{
 8010a54:	b410      	push	{r4}
 8010a56:	6803      	ldr	r3, [r0, #0]
  switch (Channel)
 8010a58:	290c      	cmp	r1, #12
 8010a5a:	d80c      	bhi.n	8010a76 <HAL_TIM_OC_Start_IT+0x22>
 8010a5c:	e8df f001 	tbb	[pc, r1]
 8010a60:	0b0b0b07 	.word	0x0b0b0b07
 8010a64:	0b0b0b39 	.word	0x0b0b0b39
 8010a68:	0b0b0b34 	.word	0x0b0b0b34
 8010a6c:	2f          	.byte	0x2f
 8010a6d:	00          	.byte	0x00
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8010a6e:	68da      	ldr	r2, [r3, #12]
 8010a70:	f042 0202 	orr.w	r2, r2, #2
 8010a74:	60da      	str	r2, [r3, #12]
  TIMx->CCER &= ~tmp;
 8010a76:	6a18      	ldr	r0, [r3, #32]
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8010a78:	4c18      	ldr	r4, [pc, #96]	; (8010adc <HAL_TIM_OC_Start_IT+0x88>)
  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8010a7a:	f001 021f 	and.w	r2, r1, #31
 8010a7e:	2101      	movs	r1, #1
 8010a80:	4091      	lsls	r1, r2
  TIMx->CCER &= ~tmp;
 8010a82:	ea20 0001 	bic.w	r0, r0, r1
 8010a86:	6218      	str	r0, [r3, #32]
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8010a88:	6a1a      	ldr	r2, [r3, #32]
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8010a8a:	42a3      	cmp	r3, r4
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8010a8c:	ea41 0102 	orr.w	r1, r1, r2
 8010a90:	6219      	str	r1, [r3, #32]
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8010a92:	d00f      	beq.n	8010ab4 <HAL_TIM_OC_Start_IT+0x60>
 8010a94:	4a12      	ldr	r2, [pc, #72]	; (8010ae0 <HAL_TIM_OC_Start_IT+0x8c>)
 8010a96:	4293      	cmp	r3, r2
 8010a98:	d00c      	beq.n	8010ab4 <HAL_TIM_OC_Start_IT+0x60>
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8010a9a:	689a      	ldr	r2, [r3, #8]
 8010a9c:	f002 0207 	and.w	r2, r2, #7
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8010aa0:	2a06      	cmp	r2, #6
 8010aa2:	d003      	beq.n	8010aac <HAL_TIM_OC_Start_IT+0x58>
    __HAL_TIM_ENABLE(htim);
 8010aa4:	681a      	ldr	r2, [r3, #0]
 8010aa6:	f042 0201 	orr.w	r2, r2, #1
 8010aaa:	601a      	str	r2, [r3, #0]
}
 8010aac:	2000      	movs	r0, #0
 8010aae:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010ab2:	4770      	bx	lr
    __HAL_TIM_MOE_ENABLE(htim);
 8010ab4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8010ab6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8010aba:	645a      	str	r2, [r3, #68]	; 0x44
 8010abc:	e7ed      	b.n	8010a9a <HAL_TIM_OC_Start_IT+0x46>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8010abe:	68da      	ldr	r2, [r3, #12]
 8010ac0:	f042 0210 	orr.w	r2, r2, #16
 8010ac4:	60da      	str	r2, [r3, #12]
      break;
 8010ac6:	e7d6      	b.n	8010a76 <HAL_TIM_OC_Start_IT+0x22>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8010ac8:	68da      	ldr	r2, [r3, #12]
 8010aca:	f042 0208 	orr.w	r2, r2, #8
 8010ace:	60da      	str	r2, [r3, #12]
      break;
 8010ad0:	e7d1      	b.n	8010a76 <HAL_TIM_OC_Start_IT+0x22>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8010ad2:	68da      	ldr	r2, [r3, #12]
 8010ad4:	f042 0204 	orr.w	r2, r2, #4
 8010ad8:	60da      	str	r2, [r3, #12]
      break;
 8010ada:	e7cc      	b.n	8010a76 <HAL_TIM_OC_Start_IT+0x22>
 8010adc:	40010000 	.word	0x40010000
 8010ae0:	40010400 	.word	0x40010400

08010ae4 <HAL_TIM_OC_Stop_IT>:
{
 8010ae4:	b410      	push	{r4}
 8010ae6:	6803      	ldr	r3, [r0, #0]
  switch (Channel)
 8010ae8:	290c      	cmp	r1, #12
 8010aea:	d80c      	bhi.n	8010b06 <HAL_TIM_OC_Stop_IT+0x22>
 8010aec:	e8df f001 	tbb	[pc, r1]
 8010af0:	0b0b0b07 	.word	0x0b0b0b07
 8010af4:	0b0b0b47 	.word	0x0b0b0b47
 8010af8:	0b0b0b42 	.word	0x0b0b0b42
 8010afc:	3d          	.byte	0x3d
 8010afd:	00          	.byte	0x00
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 8010afe:	68da      	ldr	r2, [r3, #12]
 8010b00:	f022 0202 	bic.w	r2, r2, #2
 8010b04:	60da      	str	r2, [r3, #12]
  TIMx->CCER &= ~tmp;
 8010b06:	6a1a      	ldr	r2, [r3, #32]
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8010b08:	4c1f      	ldr	r4, [pc, #124]	; (8010b88 <HAL_TIM_OC_Stop_IT+0xa4>)
  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8010b0a:	f001 011f 	and.w	r1, r1, #31
 8010b0e:	2001      	movs	r0, #1
 8010b10:	fa00 f101 	lsl.w	r1, r0, r1
  TIMx->CCER &= ~tmp;
 8010b14:	ea22 0101 	bic.w	r1, r2, r1
 8010b18:	6219      	str	r1, [r3, #32]
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8010b1a:	6a1a      	ldr	r2, [r3, #32]
 8010b1c:	621a      	str	r2, [r3, #32]
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8010b1e:	42a3      	cmp	r3, r4
 8010b20:	d014      	beq.n	8010b4c <HAL_TIM_OC_Stop_IT+0x68>
 8010b22:	4a1a      	ldr	r2, [pc, #104]	; (8010b8c <HAL_TIM_OC_Stop_IT+0xa8>)
 8010b24:	4293      	cmp	r3, r2
 8010b26:	d011      	beq.n	8010b4c <HAL_TIM_OC_Stop_IT+0x68>
  __HAL_TIM_DISABLE(htim);
 8010b28:	6a19      	ldr	r1, [r3, #32]
 8010b2a:	f241 1211 	movw	r2, #4369	; 0x1111
 8010b2e:	4211      	tst	r1, r2
 8010b30:	d108      	bne.n	8010b44 <HAL_TIM_OC_Stop_IT+0x60>
 8010b32:	6a19      	ldr	r1, [r3, #32]
 8010b34:	f240 4244 	movw	r2, #1092	; 0x444
 8010b38:	4211      	tst	r1, r2
 8010b3a:	d103      	bne.n	8010b44 <HAL_TIM_OC_Stop_IT+0x60>
 8010b3c:	681a      	ldr	r2, [r3, #0]
 8010b3e:	f022 0201 	bic.w	r2, r2, #1
 8010b42:	601a      	str	r2, [r3, #0]
}
 8010b44:	2000      	movs	r0, #0
 8010b46:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010b4a:	4770      	bx	lr
    __HAL_TIM_MOE_DISABLE(htim);
 8010b4c:	6a19      	ldr	r1, [r3, #32]
 8010b4e:	f241 1211 	movw	r2, #4369	; 0x1111
 8010b52:	4211      	tst	r1, r2
 8010b54:	d1e8      	bne.n	8010b28 <HAL_TIM_OC_Stop_IT+0x44>
 8010b56:	6a19      	ldr	r1, [r3, #32]
 8010b58:	f240 4244 	movw	r2, #1092	; 0x444
 8010b5c:	4211      	tst	r1, r2
 8010b5e:	d1e3      	bne.n	8010b28 <HAL_TIM_OC_Stop_IT+0x44>
 8010b60:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8010b62:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8010b66:	645a      	str	r2, [r3, #68]	; 0x44
 8010b68:	e7de      	b.n	8010b28 <HAL_TIM_OC_Stop_IT+0x44>
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 8010b6a:	68da      	ldr	r2, [r3, #12]
 8010b6c:	f022 0210 	bic.w	r2, r2, #16
 8010b70:	60da      	str	r2, [r3, #12]
      break;
 8010b72:	e7c8      	b.n	8010b06 <HAL_TIM_OC_Stop_IT+0x22>
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 8010b74:	68da      	ldr	r2, [r3, #12]
 8010b76:	f022 0208 	bic.w	r2, r2, #8
 8010b7a:	60da      	str	r2, [r3, #12]
      break;
 8010b7c:	e7c3      	b.n	8010b06 <HAL_TIM_OC_Stop_IT+0x22>
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 8010b7e:	68da      	ldr	r2, [r3, #12]
 8010b80:	f022 0204 	bic.w	r2, r2, #4
 8010b84:	60da      	str	r2, [r3, #12]
      break;
 8010b86:	e7be      	b.n	8010b06 <HAL_TIM_OC_Stop_IT+0x22>
 8010b88:	40010000 	.word	0x40010000
 8010b8c:	40010400 	.word	0x40010400

08010b90 <HAL_TIM_PWM_MspInit>:
 8010b90:	4770      	bx	lr
 8010b92:	bf00      	nop

08010b94 <HAL_TIM_PWM_Start>:
 8010b94:	f7ff bf34 	b.w	8010a00 <HAL_TIM_OC_Start>

08010b98 <HAL_TIM_PWM_Stop>:
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8010b98:	6803      	ldr	r3, [r0, #0]
{
 8010b9a:	b430      	push	{r4, r5}
  TIMx->CCER &= ~tmp;
 8010b9c:	6a1a      	ldr	r2, [r3, #32]
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8010b9e:	4c19      	ldr	r4, [pc, #100]	; (8010c04 <HAL_TIM_PWM_Stop+0x6c>)
  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8010ba0:	f001 051f 	and.w	r5, r1, #31
 8010ba4:	2101      	movs	r1, #1
 8010ba6:	40a9      	lsls	r1, r5
  TIMx->CCER &= ~tmp;
 8010ba8:	ea22 0101 	bic.w	r1, r2, r1
 8010bac:	6219      	str	r1, [r3, #32]
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8010bae:	6a1a      	ldr	r2, [r3, #32]
 8010bb0:	621a      	str	r2, [r3, #32]
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8010bb2:	42a3      	cmp	r3, r4
 8010bb4:	d016      	beq.n	8010be4 <HAL_TIM_PWM_Stop+0x4c>
 8010bb6:	4a14      	ldr	r2, [pc, #80]	; (8010c08 <HAL_TIM_PWM_Stop+0x70>)
 8010bb8:	4293      	cmp	r3, r2
 8010bba:	d013      	beq.n	8010be4 <HAL_TIM_PWM_Stop+0x4c>
  __HAL_TIM_DISABLE(htim);
 8010bbc:	6a19      	ldr	r1, [r3, #32]
 8010bbe:	f241 1211 	movw	r2, #4369	; 0x1111
 8010bc2:	4211      	tst	r1, r2
 8010bc4:	d108      	bne.n	8010bd8 <HAL_TIM_PWM_Stop+0x40>
 8010bc6:	6a19      	ldr	r1, [r3, #32]
 8010bc8:	f240 4244 	movw	r2, #1092	; 0x444
 8010bcc:	4211      	tst	r1, r2
 8010bce:	d103      	bne.n	8010bd8 <HAL_TIM_PWM_Stop+0x40>
 8010bd0:	681a      	ldr	r2, [r3, #0]
 8010bd2:	f022 0201 	bic.w	r2, r2, #1
 8010bd6:	601a      	str	r2, [r3, #0]
  htim->State = HAL_TIM_STATE_READY;
 8010bd8:	2301      	movs	r3, #1
 8010bda:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
}
 8010bde:	bc30      	pop	{r4, r5}
 8010be0:	2000      	movs	r0, #0
 8010be2:	4770      	bx	lr
    __HAL_TIM_MOE_DISABLE(htim);
 8010be4:	6a19      	ldr	r1, [r3, #32]
 8010be6:	f241 1211 	movw	r2, #4369	; 0x1111
 8010bea:	4211      	tst	r1, r2
 8010bec:	d1e6      	bne.n	8010bbc <HAL_TIM_PWM_Stop+0x24>
 8010bee:	6a19      	ldr	r1, [r3, #32]
 8010bf0:	f240 4244 	movw	r2, #1092	; 0x444
 8010bf4:	4211      	tst	r1, r2
 8010bf6:	d1e1      	bne.n	8010bbc <HAL_TIM_PWM_Stop+0x24>
 8010bf8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8010bfa:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8010bfe:	645a      	str	r2, [r3, #68]	; 0x44
 8010c00:	e7dc      	b.n	8010bbc <HAL_TIM_PWM_Stop+0x24>
 8010c02:	bf00      	nop
 8010c04:	40010000 	.word	0x40010000
 8010c08:	40010400 	.word	0x40010400

08010c0c <HAL_TIM_Encoder_Start>:
{
 8010c0c:	6803      	ldr	r3, [r0, #0]
  switch (Channel)
 8010c0e:	b1c1      	cbz	r1, 8010c42 <HAL_TIM_Encoder_Start+0x36>
 8010c10:	2904      	cmp	r1, #4
 8010c12:	d10d      	bne.n	8010c30 <HAL_TIM_Encoder_Start+0x24>
  TIMx->CCER &= ~tmp;
 8010c14:	6a1a      	ldr	r2, [r3, #32]
 8010c16:	f022 0210 	bic.w	r2, r2, #16
 8010c1a:	621a      	str	r2, [r3, #32]
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8010c1c:	6a1a      	ldr	r2, [r3, #32]
 8010c1e:	f042 0210 	orr.w	r2, r2, #16
 8010c22:	621a      	str	r2, [r3, #32]
  __HAL_TIM_ENABLE(htim);
 8010c24:	681a      	ldr	r2, [r3, #0]
 8010c26:	f042 0201 	orr.w	r2, r2, #1
 8010c2a:	601a      	str	r2, [r3, #0]
}
 8010c2c:	2000      	movs	r0, #0
 8010c2e:	4770      	bx	lr
  TIMx->CCER &= ~tmp;
 8010c30:	6a1a      	ldr	r2, [r3, #32]
 8010c32:	f022 0201 	bic.w	r2, r2, #1
 8010c36:	621a      	str	r2, [r3, #32]
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8010c38:	6a1a      	ldr	r2, [r3, #32]
 8010c3a:	f042 0201 	orr.w	r2, r2, #1
 8010c3e:	621a      	str	r2, [r3, #32]
 8010c40:	e7e8      	b.n	8010c14 <HAL_TIM_Encoder_Start+0x8>
  TIMx->CCER &= ~tmp;
 8010c42:	6a1a      	ldr	r2, [r3, #32]
 8010c44:	f022 0201 	bic.w	r2, r2, #1
 8010c48:	621a      	str	r2, [r3, #32]
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8010c4a:	6a1a      	ldr	r2, [r3, #32]
 8010c4c:	f042 0201 	orr.w	r2, r2, #1
 8010c50:	621a      	str	r2, [r3, #32]
 8010c52:	e7e7      	b.n	8010c24 <HAL_TIM_Encoder_Start+0x18>

08010c54 <HAL_TIM_Encoder_Stop>:
{
 8010c54:	6803      	ldr	r3, [r0, #0]
  switch (Channel)
 8010c56:	b1f1      	cbz	r1, 8010c96 <HAL_TIM_Encoder_Stop+0x42>
 8010c58:	2904      	cmp	r1, #4
 8010c5a:	d115      	bne.n	8010c88 <HAL_TIM_Encoder_Stop+0x34>
  TIMx->CCER &= ~tmp;
 8010c5c:	6a1a      	ldr	r2, [r3, #32]
 8010c5e:	f022 0210 	bic.w	r2, r2, #16
 8010c62:	621a      	str	r2, [r3, #32]
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8010c64:	6a1a      	ldr	r2, [r3, #32]
 8010c66:	621a      	str	r2, [r3, #32]
  __HAL_TIM_DISABLE(htim);
 8010c68:	6a19      	ldr	r1, [r3, #32]
 8010c6a:	f241 1211 	movw	r2, #4369	; 0x1111
 8010c6e:	4211      	tst	r1, r2
 8010c70:	d108      	bne.n	8010c84 <HAL_TIM_Encoder_Stop+0x30>
 8010c72:	6a19      	ldr	r1, [r3, #32]
 8010c74:	f240 4244 	movw	r2, #1092	; 0x444
 8010c78:	4211      	tst	r1, r2
 8010c7a:	d103      	bne.n	8010c84 <HAL_TIM_Encoder_Stop+0x30>
 8010c7c:	681a      	ldr	r2, [r3, #0]
 8010c7e:	f022 0201 	bic.w	r2, r2, #1
 8010c82:	601a      	str	r2, [r3, #0]
}
 8010c84:	2000      	movs	r0, #0
 8010c86:	4770      	bx	lr
  TIMx->CCER &= ~tmp;
 8010c88:	6a1a      	ldr	r2, [r3, #32]
 8010c8a:	f022 0201 	bic.w	r2, r2, #1
 8010c8e:	621a      	str	r2, [r3, #32]
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8010c90:	6a1a      	ldr	r2, [r3, #32]
 8010c92:	621a      	str	r2, [r3, #32]
 8010c94:	e7e2      	b.n	8010c5c <HAL_TIM_Encoder_Stop+0x8>
  TIMx->CCER &= ~tmp;
 8010c96:	6a1a      	ldr	r2, [r3, #32]
 8010c98:	f022 0201 	bic.w	r2, r2, #1
 8010c9c:	621a      	str	r2, [r3, #32]
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8010c9e:	6a1a      	ldr	r2, [r3, #32]
 8010ca0:	621a      	str	r2, [r3, #32]
 8010ca2:	e7e1      	b.n	8010c68 <HAL_TIM_Encoder_Stop+0x14>

08010ca4 <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 8010ca4:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8010ca8:	2b01      	cmp	r3, #1
 8010caa:	d05a      	beq.n	8010d62 <HAL_TIM_ConfigClockSource+0xbe>
  htim->State = HAL_TIM_STATE_BUSY;
 8010cac:	2202      	movs	r2, #2
  tmpsmcr = htim->Instance->SMCR;
 8010cae:	6803      	ldr	r3, [r0, #0]
{
 8010cb0:	b4f0      	push	{r4, r5, r6, r7}
  htim->State = HAL_TIM_STATE_BUSY;
 8010cb2:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
  tmpsmcr = htim->Instance->SMCR;
 8010cb6:	689a      	ldr	r2, [r3, #8]
  switch (sClockSourceConfig->ClockSource)
 8010cb8:	680c      	ldr	r4, [r1, #0]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8010cba:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 8010cbe:	f022 0277 	bic.w	r2, r2, #119	; 0x77
  __HAL_LOCK(htim);
 8010cc2:	2501      	movs	r5, #1
  switch (sClockSourceConfig->ClockSource)
 8010cc4:	2c40      	cmp	r4, #64	; 0x40
  __HAL_LOCK(htim);
 8010cc6:	f880 503c 	strb.w	r5, [r0, #60]	; 0x3c
  htim->Instance->SMCR = tmpsmcr;
 8010cca:	609a      	str	r2, [r3, #8]
  switch (sClockSourceConfig->ClockSource)
 8010ccc:	d074      	beq.n	8010db8 <HAL_TIM_ConfigClockSource+0x114>
 8010cce:	d94a      	bls.n	8010d66 <HAL_TIM_ConfigClockSource+0xc2>
 8010cd0:	2c60      	cmp	r4, #96	; 0x60
 8010cd2:	d02d      	beq.n	8010d30 <HAL_TIM_ConfigClockSource+0x8c>
 8010cd4:	d956      	bls.n	8010d84 <HAL_TIM_ConfigClockSource+0xe0>
 8010cd6:	2c70      	cmp	r4, #112	; 0x70
 8010cd8:	d01a      	beq.n	8010d10 <HAL_TIM_ConfigClockSource+0x6c>
 8010cda:	f5b4 5f00 	cmp.w	r4, #8192	; 0x2000
 8010cde:	d10e      	bne.n	8010cfe <HAL_TIM_ConfigClockSource+0x5a>
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8010ce0:	e9d1 5201 	ldrd	r5, r2, [r1, #4]
 8010ce4:	68cc      	ldr	r4, [r1, #12]
  tmpsmcr = TIMx->SMCR;
 8010ce6:	6899      	ldr	r1, [r3, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8010ce8:	432a      	orrs	r2, r5
 8010cea:	ea42 2204 	orr.w	r2, r2, r4, lsl #8
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8010cee:	f421 417f 	bic.w	r1, r1, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8010cf2:	430a      	orrs	r2, r1
  TIMx->SMCR = tmpsmcr;
 8010cf4:	609a      	str	r2, [r3, #8]
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8010cf6:	689a      	ldr	r2, [r3, #8]
 8010cf8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8010cfc:	609a      	str	r2, [r3, #8]
  __HAL_UNLOCK(htim);
 8010cfe:	2300      	movs	r3, #0
  htim->State = HAL_TIM_STATE_READY;
 8010d00:	2201      	movs	r2, #1
 8010d02:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8010d06:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
}
 8010d0a:	bcf0      	pop	{r4, r5, r6, r7}
  return HAL_OK;
 8010d0c:	4618      	mov	r0, r3
}
 8010d0e:	4770      	bx	lr
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8010d10:	e9d1 5201 	ldrd	r5, r2, [r1, #4]
 8010d14:	68cc      	ldr	r4, [r1, #12]
  tmpsmcr = TIMx->SMCR;
 8010d16:	6899      	ldr	r1, [r3, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8010d18:	432a      	orrs	r2, r5
 8010d1a:	ea42 2204 	orr.w	r2, r2, r4, lsl #8
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8010d1e:	f421 417f 	bic.w	r1, r1, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8010d22:	430a      	orrs	r2, r1
  TIMx->SMCR = tmpsmcr;
 8010d24:	609a      	str	r2, [r3, #8]
      tmpsmcr = htim->Instance->SMCR;
 8010d26:	689a      	ldr	r2, [r3, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8010d28:	f042 0277 	orr.w	r2, r2, #119	; 0x77
      htim->Instance->SMCR = tmpsmcr;
 8010d2c:	609a      	str	r2, [r3, #8]
      break;
 8010d2e:	e7e6      	b.n	8010cfe <HAL_TIM_ConfigClockSource+0x5a>
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8010d30:	6a1c      	ldr	r4, [r3, #32]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8010d32:	684d      	ldr	r5, [r1, #4]
 8010d34:	68ce      	ldr	r6, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8010d36:	f024 0410 	bic.w	r4, r4, #16
 8010d3a:	621c      	str	r4, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8010d3c:	6999      	ldr	r1, [r3, #24]
  tmpccer = TIMx->CCER;
 8010d3e:	6a1a      	ldr	r2, [r3, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8010d40:	f421 4170 	bic.w	r1, r1, #61440	; 0xf000
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8010d44:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 8010d48:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8010d4c:	ea41 3106 	orr.w	r1, r1, r6, lsl #12
  TIMx->CCMR1 = tmpccmr1 ;
 8010d50:	6199      	str	r1, [r3, #24]
  TIMx->CCER = tmpccer;
 8010d52:	621a      	str	r2, [r3, #32]
  tmpsmcr = TIMx->SMCR;
 8010d54:	689a      	ldr	r2, [r3, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8010d56:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8010d5a:	f042 0267 	orr.w	r2, r2, #103	; 0x67
  TIMx->SMCR = tmpsmcr;
 8010d5e:	609a      	str	r2, [r3, #8]
 8010d60:	e7cd      	b.n	8010cfe <HAL_TIM_ConfigClockSource+0x5a>
  __HAL_LOCK(htim);
 8010d62:	2002      	movs	r0, #2
}
 8010d64:	4770      	bx	lr
  switch (sClockSourceConfig->ClockSource)
 8010d66:	2c10      	cmp	r4, #16
 8010d68:	d004      	beq.n	8010d74 <HAL_TIM_ConfigClockSource+0xd0>
 8010d6a:	d93d      	bls.n	8010de8 <HAL_TIM_ConfigClockSource+0x144>
 8010d6c:	2c20      	cmp	r4, #32
 8010d6e:	d001      	beq.n	8010d74 <HAL_TIM_ConfigClockSource+0xd0>
 8010d70:	2c30      	cmp	r4, #48	; 0x30
 8010d72:	d1c4      	bne.n	8010cfe <HAL_TIM_ConfigClockSource+0x5a>
  tmpsmcr = TIMx->SMCR;
 8010d74:	689a      	ldr	r2, [r3, #8]
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8010d76:	f044 0407 	orr.w	r4, r4, #7
  tmpsmcr &= ~TIM_SMCR_TS;
 8010d7a:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8010d7e:	4314      	orrs	r4, r2
  TIMx->SMCR = tmpsmcr;
 8010d80:	609c      	str	r4, [r3, #8]
 8010d82:	e7bc      	b.n	8010cfe <HAL_TIM_ConfigClockSource+0x5a>
  switch (sClockSourceConfig->ClockSource)
 8010d84:	2c50      	cmp	r4, #80	; 0x50
 8010d86:	d1ba      	bne.n	8010cfe <HAL_TIM_ConfigClockSource+0x5a>
  tmpccer = TIMx->CCER;
 8010d88:	6a1d      	ldr	r5, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8010d8a:	6a1e      	ldr	r6, [r3, #32]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8010d8c:	684c      	ldr	r4, [r1, #4]
 8010d8e:	68cf      	ldr	r7, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8010d90:	f026 0601 	bic.w	r6, r6, #1
 8010d94:	621e      	str	r6, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8010d96:	699a      	ldr	r2, [r3, #24]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8010d98:	f025 010a 	bic.w	r1, r5, #10
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8010d9c:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8010da0:	ea42 1207 	orr.w	r2, r2, r7, lsl #4
  tmpccer |= TIM_ICPolarity;
 8010da4:	4321      	orrs	r1, r4
  TIMx->CCMR1 = tmpccmr1;
 8010da6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8010da8:	6219      	str	r1, [r3, #32]
  tmpsmcr = TIMx->SMCR;
 8010daa:	689a      	ldr	r2, [r3, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8010dac:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8010db0:	f042 0257 	orr.w	r2, r2, #87	; 0x57
  TIMx->SMCR = tmpsmcr;
 8010db4:	609a      	str	r2, [r3, #8]
 8010db6:	e7a2      	b.n	8010cfe <HAL_TIM_ConfigClockSource+0x5a>
  tmpccer = TIMx->CCER;
 8010db8:	6a1d      	ldr	r5, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8010dba:	6a1e      	ldr	r6, [r3, #32]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8010dbc:	684c      	ldr	r4, [r1, #4]
 8010dbe:	68cf      	ldr	r7, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8010dc0:	f026 0601 	bic.w	r6, r6, #1
 8010dc4:	621e      	str	r6, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8010dc6:	699a      	ldr	r2, [r3, #24]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8010dc8:	f025 010a 	bic.w	r1, r5, #10
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8010dcc:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8010dd0:	ea42 1207 	orr.w	r2, r2, r7, lsl #4
  tmpccer |= TIM_ICPolarity;
 8010dd4:	4321      	orrs	r1, r4
  TIMx->CCMR1 = tmpccmr1;
 8010dd6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8010dd8:	6219      	str	r1, [r3, #32]
  tmpsmcr = TIMx->SMCR;
 8010dda:	689a      	ldr	r2, [r3, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8010ddc:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8010de0:	f042 0247 	orr.w	r2, r2, #71	; 0x47
  TIMx->SMCR = tmpsmcr;
 8010de4:	609a      	str	r2, [r3, #8]
 8010de6:	e78a      	b.n	8010cfe <HAL_TIM_ConfigClockSource+0x5a>
  switch (sClockSourceConfig->ClockSource)
 8010de8:	2c00      	cmp	r4, #0
 8010dea:	d0c3      	beq.n	8010d74 <HAL_TIM_ConfigClockSource+0xd0>
 8010dec:	e787      	b.n	8010cfe <HAL_TIM_ConfigClockSource+0x5a>
 8010dee:	bf00      	nop

08010df0 <HAL_TIM_OC_DelayElapsedCallback>:
 8010df0:	4770      	bx	lr
 8010df2:	bf00      	nop

08010df4 <HAL_TIM_IC_CaptureCallback>:
 8010df4:	4770      	bx	lr
 8010df6:	bf00      	nop

08010df8 <HAL_TIM_PWM_PulseFinishedCallback>:
 8010df8:	4770      	bx	lr
 8010dfa:	bf00      	nop

08010dfc <HAL_TIM_TriggerCallback>:
 8010dfc:	4770      	bx	lr
 8010dfe:	bf00      	nop

08010e00 <HAL_TIM_IRQHandler>:
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8010e00:	6803      	ldr	r3, [r0, #0]
 8010e02:	691a      	ldr	r2, [r3, #16]
 8010e04:	0791      	lsls	r1, r2, #30
{
 8010e06:	b510      	push	{r4, lr}
 8010e08:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8010e0a:	d502      	bpl.n	8010e12 <HAL_TIM_IRQHandler+0x12>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8010e0c:	68da      	ldr	r2, [r3, #12]
 8010e0e:	0792      	lsls	r2, r2, #30
 8010e10:	d45f      	bmi.n	8010ed2 <HAL_TIM_IRQHandler+0xd2>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8010e12:	691a      	ldr	r2, [r3, #16]
 8010e14:	0750      	lsls	r0, r2, #29
 8010e16:	d502      	bpl.n	8010e1e <HAL_TIM_IRQHandler+0x1e>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8010e18:	68da      	ldr	r2, [r3, #12]
 8010e1a:	0751      	lsls	r1, r2, #29
 8010e1c:	d446      	bmi.n	8010eac <HAL_TIM_IRQHandler+0xac>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8010e1e:	691a      	ldr	r2, [r3, #16]
 8010e20:	0712      	lsls	r2, r2, #28
 8010e22:	d502      	bpl.n	8010e2a <HAL_TIM_IRQHandler+0x2a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8010e24:	68da      	ldr	r2, [r3, #12]
 8010e26:	0710      	lsls	r0, r2, #28
 8010e28:	d42e      	bmi.n	8010e88 <HAL_TIM_IRQHandler+0x88>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8010e2a:	691a      	ldr	r2, [r3, #16]
 8010e2c:	06d2      	lsls	r2, r2, #27
 8010e2e:	d502      	bpl.n	8010e36 <HAL_TIM_IRQHandler+0x36>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8010e30:	68da      	ldr	r2, [r3, #12]
 8010e32:	06d0      	lsls	r0, r2, #27
 8010e34:	d418      	bmi.n	8010e68 <HAL_TIM_IRQHandler+0x68>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8010e36:	691a      	ldr	r2, [r3, #16]
 8010e38:	07d1      	lsls	r1, r2, #31
 8010e3a:	d502      	bpl.n	8010e42 <HAL_TIM_IRQHandler+0x42>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8010e3c:	68da      	ldr	r2, [r3, #12]
 8010e3e:	07d2      	lsls	r2, r2, #31
 8010e40:	d45d      	bmi.n	8010efe <HAL_TIM_IRQHandler+0xfe>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8010e42:	691a      	ldr	r2, [r3, #16]
 8010e44:	0610      	lsls	r0, r2, #24
 8010e46:	d502      	bpl.n	8010e4e <HAL_TIM_IRQHandler+0x4e>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8010e48:	68da      	ldr	r2, [r3, #12]
 8010e4a:	0611      	lsls	r1, r2, #24
 8010e4c:	d45f      	bmi.n	8010f0e <HAL_TIM_IRQHandler+0x10e>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8010e4e:	691a      	ldr	r2, [r3, #16]
 8010e50:	0652      	lsls	r2, r2, #25
 8010e52:	d502      	bpl.n	8010e5a <HAL_TIM_IRQHandler+0x5a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8010e54:	68da      	ldr	r2, [r3, #12]
 8010e56:	0650      	lsls	r0, r2, #25
 8010e58:	d461      	bmi.n	8010f1e <HAL_TIM_IRQHandler+0x11e>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8010e5a:	691a      	ldr	r2, [r3, #16]
 8010e5c:	0691      	lsls	r1, r2, #26
 8010e5e:	d502      	bpl.n	8010e66 <HAL_TIM_IRQHandler+0x66>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8010e60:	68da      	ldr	r2, [r3, #12]
 8010e62:	0692      	lsls	r2, r2, #26
 8010e64:	d443      	bmi.n	8010eee <HAL_TIM_IRQHandler+0xee>
}
 8010e66:	bd10      	pop	{r4, pc}
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8010e68:	f06f 0210 	mvn.w	r2, #16
 8010e6c:	611a      	str	r2, [r3, #16]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8010e6e:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8010e70:	2208      	movs	r2, #8
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8010e72:	f413 7f40 	tst.w	r3, #768	; 0x300
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8010e76:	7722      	strb	r2, [r4, #28]
        HAL_TIM_IC_CaptureCallback(htim);
 8010e78:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8010e7a:	d064      	beq.n	8010f46 <HAL_TIM_IRQHandler+0x146>
        HAL_TIM_IC_CaptureCallback(htim);
 8010e7c:	f7ff ffba 	bl	8010df4 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8010e80:	2200      	movs	r2, #0
 8010e82:	6823      	ldr	r3, [r4, #0]
 8010e84:	7722      	strb	r2, [r4, #28]
 8010e86:	e7d6      	b.n	8010e36 <HAL_TIM_IRQHandler+0x36>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8010e88:	f06f 0208 	mvn.w	r2, #8
 8010e8c:	611a      	str	r2, [r3, #16]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8010e8e:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8010e90:	2204      	movs	r2, #4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8010e92:	0799      	lsls	r1, r3, #30
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8010e94:	7722      	strb	r2, [r4, #28]
        HAL_TIM_IC_CaptureCallback(htim);
 8010e96:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8010e98:	d152      	bne.n	8010f40 <HAL_TIM_IRQHandler+0x140>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8010e9a:	f7ff ffa9 	bl	8010df0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8010e9e:	4620      	mov	r0, r4
 8010ea0:	f7ff ffaa 	bl	8010df8 <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8010ea4:	2200      	movs	r2, #0
 8010ea6:	6823      	ldr	r3, [r4, #0]
 8010ea8:	7722      	strb	r2, [r4, #28]
 8010eaa:	e7be      	b.n	8010e2a <HAL_TIM_IRQHandler+0x2a>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8010eac:	f06f 0204 	mvn.w	r2, #4
 8010eb0:	611a      	str	r2, [r3, #16]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8010eb2:	699b      	ldr	r3, [r3, #24]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8010eb4:	2202      	movs	r2, #2
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8010eb6:	f413 7f40 	tst.w	r3, #768	; 0x300
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8010eba:	7722      	strb	r2, [r4, #28]
        HAL_TIM_IC_CaptureCallback(htim);
 8010ebc:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8010ebe:	d13c      	bne.n	8010f3a <HAL_TIM_IRQHandler+0x13a>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8010ec0:	f7ff ff96 	bl	8010df0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8010ec4:	4620      	mov	r0, r4
 8010ec6:	f7ff ff97 	bl	8010df8 <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8010eca:	2200      	movs	r2, #0
 8010ecc:	6823      	ldr	r3, [r4, #0]
 8010ece:	7722      	strb	r2, [r4, #28]
 8010ed0:	e7a5      	b.n	8010e1e <HAL_TIM_IRQHandler+0x1e>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8010ed2:	f06f 0202 	mvn.w	r2, #2
 8010ed6:	611a      	str	r2, [r3, #16]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8010ed8:	699b      	ldr	r3, [r3, #24]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8010eda:	2201      	movs	r2, #1
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8010edc:	079b      	lsls	r3, r3, #30
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8010ede:	7702      	strb	r2, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8010ee0:	d025      	beq.n	8010f2e <HAL_TIM_IRQHandler+0x12e>
          HAL_TIM_IC_CaptureCallback(htim);
 8010ee2:	f7ff ff87 	bl	8010df4 <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8010ee6:	2200      	movs	r2, #0
 8010ee8:	6823      	ldr	r3, [r4, #0]
 8010eea:	7722      	strb	r2, [r4, #28]
 8010eec:	e791      	b.n	8010e12 <HAL_TIM_IRQHandler+0x12>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8010eee:	f06f 0220 	mvn.w	r2, #32
      HAL_TIMEx_CommutCallback(htim);
 8010ef2:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8010ef4:	611a      	str	r2, [r3, #16]
}
 8010ef6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      HAL_TIMEx_CommutCallback(htim);
 8010efa:	f000 bb11 	b.w	8011520 <HAL_TIMEx_CommutCallback>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8010efe:	f06f 0201 	mvn.w	r2, #1
 8010f02:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8010f04:	4620      	mov	r0, r4
 8010f06:	f7f9 f9c7 	bl	800a298 <HAL_TIM_PeriodElapsedCallback>
 8010f0a:	6823      	ldr	r3, [r4, #0]
 8010f0c:	e799      	b.n	8010e42 <HAL_TIM_IRQHandler+0x42>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8010f0e:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8010f12:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8010f14:	4620      	mov	r0, r4
 8010f16:	f000 fb05 	bl	8011524 <HAL_TIMEx_BreakCallback>
 8010f1a:	6823      	ldr	r3, [r4, #0]
 8010f1c:	e797      	b.n	8010e4e <HAL_TIM_IRQHandler+0x4e>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8010f1e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8010f22:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8010f24:	4620      	mov	r0, r4
 8010f26:	f7ff ff69 	bl	8010dfc <HAL_TIM_TriggerCallback>
 8010f2a:	6823      	ldr	r3, [r4, #0]
 8010f2c:	e795      	b.n	8010e5a <HAL_TIM_IRQHandler+0x5a>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8010f2e:	f7ff ff5f 	bl	8010df0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8010f32:	4620      	mov	r0, r4
 8010f34:	f7ff ff60 	bl	8010df8 <HAL_TIM_PWM_PulseFinishedCallback>
 8010f38:	e7d5      	b.n	8010ee6 <HAL_TIM_IRQHandler+0xe6>
        HAL_TIM_IC_CaptureCallback(htim);
 8010f3a:	f7ff ff5b 	bl	8010df4 <HAL_TIM_IC_CaptureCallback>
 8010f3e:	e7c4      	b.n	8010eca <HAL_TIM_IRQHandler+0xca>
        HAL_TIM_IC_CaptureCallback(htim);
 8010f40:	f7ff ff58 	bl	8010df4 <HAL_TIM_IC_CaptureCallback>
 8010f44:	e7ae      	b.n	8010ea4 <HAL_TIM_IRQHandler+0xa4>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8010f46:	f7ff ff53 	bl	8010df0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8010f4a:	4620      	mov	r0, r4
 8010f4c:	f7ff ff54 	bl	8010df8 <HAL_TIM_PWM_PulseFinishedCallback>
 8010f50:	e796      	b.n	8010e80 <HAL_TIM_IRQHandler+0x80>
 8010f52:	bf00      	nop

08010f54 <TIM_Base_SetConfig>:
{
 8010f54:	b4f0      	push	{r4, r5, r6, r7}
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8010f56:	4e36      	ldr	r6, [pc, #216]	; (8011030 <TIM_Base_SetConfig+0xdc>)
  tmpcr1 = TIMx->CR1;
 8010f58:	6803      	ldr	r3, [r0, #0]
 8010f5a:	694d      	ldr	r5, [r1, #20]
 8010f5c:	688c      	ldr	r4, [r1, #8]
 8010f5e:	680a      	ldr	r2, [r1, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8010f60:	42b0      	cmp	r0, r6
 8010f62:	d055      	beq.n	8011010 <TIM_Base_SetConfig+0xbc>
 8010f64:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8010f68:	d029      	beq.n	8010fbe <TIM_Base_SetConfig+0x6a>
 8010f6a:	f5a6 467c 	sub.w	r6, r6, #64512	; 0xfc00
 8010f6e:	42b0      	cmp	r0, r6
 8010f70:	d037      	beq.n	8010fe2 <TIM_Base_SetConfig+0x8e>
 8010f72:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8010f76:	42b0      	cmp	r0, r6
 8010f78:	d033      	beq.n	8010fe2 <TIM_Base_SetConfig+0x8e>
 8010f7a:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8010f7e:	42b0      	cmp	r0, r6
 8010f80:	d02f      	beq.n	8010fe2 <TIM_Base_SetConfig+0x8e>
 8010f82:	f506 4678 	add.w	r6, r6, #63488	; 0xf800
 8010f86:	42b0      	cmp	r0, r6
 8010f88:	d02b      	beq.n	8010fe2 <TIM_Base_SetConfig+0x8e>
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8010f8a:	f506 5670 	add.w	r6, r6, #15360	; 0x3c00
 8010f8e:	42b0      	cmp	r0, r6
 8010f90:	d013      	beq.n	8010fba <TIM_Base_SetConfig+0x66>
 8010f92:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8010f96:	42b0      	cmp	r0, r6
 8010f98:	d00f      	beq.n	8010fba <TIM_Base_SetConfig+0x66>
 8010f9a:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8010f9e:	42b0      	cmp	r0, r6
 8010fa0:	d00b      	beq.n	8010fba <TIM_Base_SetConfig+0x66>
 8010fa2:	f5a6 3698 	sub.w	r6, r6, #77824	; 0x13000
 8010fa6:	42b0      	cmp	r0, r6
 8010fa8:	d007      	beq.n	8010fba <TIM_Base_SetConfig+0x66>
 8010faa:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8010fae:	42b0      	cmp	r0, r6
 8010fb0:	d003      	beq.n	8010fba <TIM_Base_SetConfig+0x66>
 8010fb2:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8010fb6:	42b0      	cmp	r0, r6
 8010fb8:	d109      	bne.n	8010fce <TIM_Base_SetConfig+0x7a>
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8010fba:	68c9      	ldr	r1, [r1, #12]
 8010fbc:	e004      	b.n	8010fc8 <TIM_Base_SetConfig+0x74>
    tmpcr1 |= Structure->CounterMode;
 8010fbe:	684e      	ldr	r6, [r1, #4]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8010fc0:	68c9      	ldr	r1, [r1, #12]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8010fc2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8010fc6:	4333      	orrs	r3, r6
    tmpcr1 &= ~TIM_CR1_CKD;
 8010fc8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8010fcc:	430b      	orrs	r3, r1
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8010fce:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8010fd2:	432b      	orrs	r3, r5
  TIMx->CR1 = tmpcr1;
 8010fd4:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8010fd6:	62c4      	str	r4, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8010fd8:	6282      	str	r2, [r0, #40]	; 0x28
  TIMx->EGR = TIM_EGR_UG;
 8010fda:	2301      	movs	r3, #1
 8010fdc:	6143      	str	r3, [r0, #20]
}
 8010fde:	bcf0      	pop	{r4, r5, r6, r7}
 8010fe0:	4770      	bx	lr
    tmpcr1 |= Structure->CounterMode;
 8010fe2:	684e      	ldr	r6, [r1, #4]
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8010fe4:	4f13      	ldr	r7, [pc, #76]	; (8011034 <TIM_Base_SetConfig+0xe0>)
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8010fe6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8010fea:	4333      	orrs	r3, r6
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8010fec:	68ce      	ldr	r6, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 8010fee:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8010ff2:	4333      	orrs	r3, r6
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8010ff4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8010ff8:	432b      	orrs	r3, r5
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8010ffa:	42b8      	cmp	r0, r7
  TIMx->CR1 = tmpcr1;
 8010ffc:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8010ffe:	62c4      	str	r4, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8011000:	6282      	str	r2, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8011002:	d1ea      	bne.n	8010fda <TIM_Base_SetConfig+0x86>
    TIMx->RCR = Structure->RepetitionCounter;
 8011004:	690b      	ldr	r3, [r1, #16]
 8011006:	6303      	str	r3, [r0, #48]	; 0x30
  TIMx->EGR = TIM_EGR_UG;
 8011008:	2301      	movs	r3, #1
 801100a:	6143      	str	r3, [r0, #20]
}
 801100c:	bcf0      	pop	{r4, r5, r6, r7}
 801100e:	4770      	bx	lr
    tmpcr1 |= Structure->CounterMode;
 8011010:	684f      	ldr	r7, [r1, #4]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8011012:	68ce      	ldr	r6, [r1, #12]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8011014:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8011018:	433b      	orrs	r3, r7
    tmpcr1 &= ~TIM_CR1_CKD;
 801101a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 801101e:	4333      	orrs	r3, r6
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8011020:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8011024:	432b      	orrs	r3, r5
  TIMx->CR1 = tmpcr1;
 8011026:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8011028:	62c4      	str	r4, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 801102a:	6282      	str	r2, [r0, #40]	; 0x28
 801102c:	e7ea      	b.n	8011004 <TIM_Base_SetConfig+0xb0>
 801102e:	bf00      	nop
 8011030:	40010000 	.word	0x40010000
 8011034:	40010400 	.word	0x40010400

08011038 <HAL_TIM_Base_Init>:
  if (htim == NULL)
 8011038:	b1b8      	cbz	r0, 801106a <HAL_TIM_Base_Init+0x32>
  if (htim->State == HAL_TIM_STATE_RESET)
 801103a:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
{
 801103e:	b510      	push	{r4, lr}
  if (htim->State == HAL_TIM_STATE_RESET)
 8011040:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8011044:	4604      	mov	r4, r0
 8011046:	b15b      	cbz	r3, 8011060 <HAL_TIM_Base_Init+0x28>
  htim->State = HAL_TIM_STATE_BUSY;
 8011048:	2302      	movs	r3, #2
 801104a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 801104e:	6820      	ldr	r0, [r4, #0]
 8011050:	1d21      	adds	r1, r4, #4
 8011052:	f7ff ff7f 	bl	8010f54 <TIM_Base_SetConfig>
  htim->State = HAL_TIM_STATE_READY;
 8011056:	2301      	movs	r3, #1
 8011058:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 801105c:	2000      	movs	r0, #0
}
 801105e:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 8011060:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 8011064:	f7fc fc36 	bl	800d8d4 <HAL_TIM_Base_MspInit>
 8011068:	e7ee      	b.n	8011048 <HAL_TIM_Base_Init+0x10>
    return HAL_ERROR;
 801106a:	2001      	movs	r0, #1
}
 801106c:	4770      	bx	lr
 801106e:	bf00      	nop

08011070 <HAL_TIM_OC_Init>:
  if (htim == NULL)
 8011070:	b1b8      	cbz	r0, 80110a2 <HAL_TIM_OC_Init+0x32>
  if (htim->State == HAL_TIM_STATE_RESET)
 8011072:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
{
 8011076:	b510      	push	{r4, lr}
  if (htim->State == HAL_TIM_STATE_RESET)
 8011078:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 801107c:	4604      	mov	r4, r0
 801107e:	b15b      	cbz	r3, 8011098 <HAL_TIM_OC_Init+0x28>
  htim->State = HAL_TIM_STATE_BUSY;
 8011080:	2302      	movs	r3, #2
 8011082:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8011086:	6820      	ldr	r0, [r4, #0]
 8011088:	1d21      	adds	r1, r4, #4
 801108a:	f7ff ff63 	bl	8010f54 <TIM_Base_SetConfig>
  htim->State = HAL_TIM_STATE_READY;
 801108e:	2301      	movs	r3, #1
 8011090:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8011094:	2000      	movs	r0, #0
}
 8011096:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 8011098:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_OC_MspInit(htim);
 801109c:	f7ff fcae 	bl	80109fc <HAL_TIM_OC_MspInit>
 80110a0:	e7ee      	b.n	8011080 <HAL_TIM_OC_Init+0x10>
    return HAL_ERROR;
 80110a2:	2001      	movs	r0, #1
}
 80110a4:	4770      	bx	lr
 80110a6:	bf00      	nop

080110a8 <HAL_TIM_PWM_Init>:
  if (htim == NULL)
 80110a8:	b1b8      	cbz	r0, 80110da <HAL_TIM_PWM_Init+0x32>
  if (htim->State == HAL_TIM_STATE_RESET)
 80110aa:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
{
 80110ae:	b510      	push	{r4, lr}
  if (htim->State == HAL_TIM_STATE_RESET)
 80110b0:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80110b4:	4604      	mov	r4, r0
 80110b6:	b15b      	cbz	r3, 80110d0 <HAL_TIM_PWM_Init+0x28>
  htim->State = HAL_TIM_STATE_BUSY;
 80110b8:	2302      	movs	r3, #2
 80110ba:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80110be:	6820      	ldr	r0, [r4, #0]
 80110c0:	1d21      	adds	r1, r4, #4
 80110c2:	f7ff ff47 	bl	8010f54 <TIM_Base_SetConfig>
  htim->State = HAL_TIM_STATE_READY;
 80110c6:	2301      	movs	r3, #1
 80110c8:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 80110cc:	2000      	movs	r0, #0
}
 80110ce:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 80110d0:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_PWM_MspInit(htim);
 80110d4:	f7ff fd5c 	bl	8010b90 <HAL_TIM_PWM_MspInit>
 80110d8:	e7ee      	b.n	80110b8 <HAL_TIM_PWM_Init+0x10>
    return HAL_ERROR;
 80110da:	2001      	movs	r0, #1
}
 80110dc:	4770      	bx	lr
 80110de:	bf00      	nop

080110e0 <HAL_TIM_Encoder_Init>:
  if (htim == NULL)
 80110e0:	2800      	cmp	r0, #0
 80110e2:	d04f      	beq.n	8011184 <HAL_TIM_Encoder_Init+0xa4>
{
 80110e4:	b5f0      	push	{r4, r5, r6, r7, lr}
  if (htim->State == HAL_TIM_STATE_RESET)
 80110e6:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
{
 80110ea:	b083      	sub	sp, #12
 80110ec:	4605      	mov	r5, r0
 80110ee:	460c      	mov	r4, r1
  if (htim->State == HAL_TIM_STATE_RESET)
 80110f0:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80110f4:	2b00      	cmp	r3, #0
 80110f6:	d040      	beq.n	801117a <HAL_TIM_Encoder_Init+0x9a>
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80110f8:	4629      	mov	r1, r5
  htim->State = HAL_TIM_STATE_BUSY;
 80110fa:	2302      	movs	r3, #2
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80110fc:	f851 0b04 	ldr.w	r0, [r1], #4
  htim->State = HAL_TIM_STATE_BUSY;
 8011100:	f885 303d 	strb.w	r3, [r5, #61]	; 0x3d
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8011104:	6883      	ldr	r3, [r0, #8]
 8011106:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 801110a:	f023 0307 	bic.w	r3, r3, #7
 801110e:	6083      	str	r3, [r0, #8]
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8011110:	f7ff ff20 	bl	8010f54 <TIM_Base_SetConfig>
  tmpsmcr = htim->Instance->SMCR;
 8011114:	6829      	ldr	r1, [r5, #0]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8011116:	6923      	ldr	r3, [r4, #16]
  tmpsmcr = htim->Instance->SMCR;
 8011118:	6888      	ldr	r0, [r1, #8]
  tmpccmr1 = htim->Instance->CCMR1;
 801111a:	698e      	ldr	r6, [r1, #24]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 801111c:	69a7      	ldr	r7, [r4, #24]
 801111e:	68a2      	ldr	r2, [r4, #8]
  tmpsmcr |= sConfig->EncoderMode;
 8011120:	f8d4 c000 	ldr.w	ip, [r4]
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8011124:	f426 7e40 	bic.w	lr, r6, #768	; 0x300
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8011128:	69e6      	ldr	r6, [r4, #28]
 801112a:	011b      	lsls	r3, r3, #4
 801112c:	ea43 2306 	orr.w	r3, r3, r6, lsl #8
 8011130:	6a26      	ldr	r6, [r4, #32]
 8011132:	9601      	str	r6, [sp, #4]
 8011134:	68e6      	ldr	r6, [r4, #12]
 8011136:	4333      	orrs	r3, r6
 8011138:	9e01      	ldr	r6, [sp, #4]
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 801113a:	f02e 0e03 	bic.w	lr, lr, #3
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 801113e:	ea42 2207 	orr.w	r2, r2, r7, lsl #8
 8011142:	ea42 020e 	orr.w	r2, r2, lr
  tmpccer = htim->Instance->CCER;
 8011146:	6a0f      	ldr	r7, [r1, #32]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8011148:	ea43 3306 	orr.w	r3, r3, r6, lsl #12
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 801114c:	6966      	ldr	r6, [r4, #20]
 801114e:	6864      	ldr	r4, [r4, #4]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8011150:	f422 427c 	bic.w	r2, r2, #64512	; 0xfc00
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8011154:	ea44 1406 	orr.w	r4, r4, r6, lsl #4
  tmpsmcr |= sConfig->EncoderMode;
 8011158:	ea40 000c 	orr.w	r0, r0, ip
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 801115c:	f022 02fc 	bic.w	r2, r2, #252	; 0xfc
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8011160:	f027 07aa 	bic.w	r7, r7, #170	; 0xaa
  htim->Instance->SMCR = tmpsmcr;
 8011164:	6088      	str	r0, [r1, #8]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8011166:	4327      	orrs	r7, r4
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8011168:	4313      	orrs	r3, r2
  htim->State = HAL_TIM_STATE_READY;
 801116a:	2401      	movs	r4, #1
  return HAL_OK;
 801116c:	2000      	movs	r0, #0
  htim->Instance->CCMR1 = tmpccmr1;
 801116e:	618b      	str	r3, [r1, #24]
  htim->Instance->CCER = tmpccer;
 8011170:	620f      	str	r7, [r1, #32]
  htim->State = HAL_TIM_STATE_READY;
 8011172:	f885 403d 	strb.w	r4, [r5, #61]	; 0x3d
}
 8011176:	b003      	add	sp, #12
 8011178:	bdf0      	pop	{r4, r5, r6, r7, pc}
    htim->Lock = HAL_UNLOCKED;
 801117a:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Encoder_MspInit(htim);
 801117e:	f7fc fc0b 	bl	800d998 <HAL_TIM_Encoder_MspInit>
 8011182:	e7b9      	b.n	80110f8 <HAL_TIM_Encoder_Init+0x18>
    return HAL_ERROR;
 8011184:	2001      	movs	r0, #1
}
 8011186:	4770      	bx	lr

08011188 <TIM_OC2_SetConfig>:
{
 8011188:	b4f0      	push	{r4, r5, r6, r7}
  TIMx->CCER &= ~TIM_CCER_CC2E;
 801118a:	6a04      	ldr	r4, [r0, #32]
  tmpccer |= (OC_Config->OCPolarity << 4U);
 801118c:	688f      	ldr	r7, [r1, #8]
  tmpccmrx |= (OC_Config->OCMode << 8U);
 801118e:	680e      	ldr	r6, [r1, #0]
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8011190:	4d15      	ldr	r5, [pc, #84]	; (80111e8 <TIM_OC2_SetConfig+0x60>)
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8011192:	f024 0410 	bic.w	r4, r4, #16
 8011196:	6204      	str	r4, [r0, #32]
  tmpccer = TIMx->CCER;
 8011198:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 801119a:	6844      	ldr	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 801119c:	6982      	ldr	r2, [r0, #24]
  tmpccer &= ~TIM_CCER_CC2P;
 801119e:	f023 0320 	bic.w	r3, r3, #32
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80111a2:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80111a6:	42a8      	cmp	r0, r5
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80111a8:	ea43 1307 	orr.w	r3, r3, r7, lsl #4
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80111ac:	ea42 2206 	orr.w	r2, r2, r6, lsl #8
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80111b0:	d00a      	beq.n	80111c8 <TIM_OC2_SetConfig+0x40>
 80111b2:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80111b6:	42a8      	cmp	r0, r5
 80111b8:	d006      	beq.n	80111c8 <TIM_OC2_SetConfig+0x40>
  TIMx->CCR2 = OC_Config->Pulse;
 80111ba:	6849      	ldr	r1, [r1, #4]
  TIMx->CR2 = tmpcr2;
 80111bc:	6044      	str	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 80111be:	6182      	str	r2, [r0, #24]
}
 80111c0:	bcf0      	pop	{r4, r5, r6, r7}
  TIMx->CCR2 = OC_Config->Pulse;
 80111c2:	6381      	str	r1, [r0, #56]	; 0x38
  TIMx->CCER = tmpccer;
 80111c4:	6203      	str	r3, [r0, #32]
}
 80111c6:	4770      	bx	lr
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80111c8:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC2NP;
 80111ca:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80111ce:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80111d2:	e9d1 5605 	ldrd	r5, r6, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80111d6:	f424 6440 	bic.w	r4, r4, #3072	; 0xc00
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80111da:	4335      	orrs	r5, r6
    tmpccer &= ~TIM_CCER_CC2NE;
 80111dc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80111e0:	ea44 0485 	orr.w	r4, r4, r5, lsl #2
 80111e4:	e7e9      	b.n	80111ba <TIM_OC2_SetConfig+0x32>
 80111e6:	bf00      	nop
 80111e8:	40010000 	.word	0x40010000

080111ec <HAL_TIM_OC_ConfigChannel>:
  __HAL_LOCK(htim);
 80111ec:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 80111f0:	2b01      	cmp	r3, #1
 80111f2:	d028      	beq.n	8011246 <HAL_TIM_OC_ConfigChannel+0x5a>
{
 80111f4:	b510      	push	{r4, lr}
 80111f6:	4604      	mov	r4, r0
  htim->State = HAL_TIM_STATE_BUSY;
 80111f8:	2302      	movs	r3, #2
  __HAL_LOCK(htim);
 80111fa:	2001      	movs	r0, #1
 80111fc:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 8011200:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  switch (Channel)
 8011204:	2a0c      	cmp	r2, #12
 8011206:	d80b      	bhi.n	8011220 <HAL_TIM_OC_ConfigChannel+0x34>
 8011208:	e8df f002 	tbb	[pc, r2]
 801120c:	0a0a0a07 	.word	0x0a0a0a07
 8011210:	0a0a0a15 	.word	0x0a0a0a15
 8011214:	0a0a0a19 	.word	0x0a0a0a19
 8011218:	11          	.byte	0x11
 8011219:	00          	.byte	0x00
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 801121a:	6820      	ldr	r0, [r4, #0]
 801121c:	f7ff fb3e 	bl	801089c <TIM_OC1_SetConfig>
  htim->State = HAL_TIM_STATE_READY;
 8011220:	2301      	movs	r3, #1
  __HAL_UNLOCK(htim);
 8011222:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8011224:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8011228:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 801122c:	bd10      	pop	{r4, pc}
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 801122e:	6820      	ldr	r0, [r4, #0]
 8011230:	f7ff fb96 	bl	8010960 <TIM_OC4_SetConfig>
      break;
 8011234:	e7f4      	b.n	8011220 <HAL_TIM_OC_ConfigChannel+0x34>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8011236:	6820      	ldr	r0, [r4, #0]
 8011238:	f7ff ffa6 	bl	8011188 <TIM_OC2_SetConfig>
      break;
 801123c:	e7f0      	b.n	8011220 <HAL_TIM_OC_ConfigChannel+0x34>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 801123e:	6820      	ldr	r0, [r4, #0]
 8011240:	f7ff fb5c 	bl	80108fc <TIM_OC3_SetConfig>
      break;
 8011244:	e7ec      	b.n	8011220 <HAL_TIM_OC_ConfigChannel+0x34>
  __HAL_LOCK(htim);
 8011246:	2002      	movs	r0, #2
}
 8011248:	4770      	bx	lr
 801124a:	bf00      	nop

0801124c <HAL_TIM_PWM_ConfigChannel>:
{
 801124c:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 801124e:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8011252:	2b01      	cmp	r3, #1
 8011254:	d074      	beq.n	8011340 <HAL_TIM_PWM_ConfigChannel+0xf4>
 8011256:	460d      	mov	r5, r1
  htim->State = HAL_TIM_STATE_BUSY;
 8011258:	2302      	movs	r3, #2
  __HAL_LOCK(htim);
 801125a:	2101      	movs	r1, #1
 801125c:	4604      	mov	r4, r0
 801125e:	f880 103c 	strb.w	r1, [r0, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 8011262:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  switch (Channel)
 8011266:	2a0c      	cmp	r2, #12
 8011268:	d819      	bhi.n	801129e <HAL_TIM_PWM_ConfigChannel+0x52>
 801126a:	e8df f002 	tbb	[pc, r2]
 801126e:	1807      	.short	0x1807
 8011270:	18381818 	.word	0x18381818
 8011274:	18511818 	.word	0x18511818
 8011278:	1818      	.short	0x1818
 801127a:	1f          	.byte	0x1f
 801127b:	00          	.byte	0x00
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 801127c:	4629      	mov	r1, r5
 801127e:	6800      	ldr	r0, [r0, #0]
 8011280:	f7ff fb0c 	bl	801089c <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8011284:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8011286:	6928      	ldr	r0, [r5, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8011288:	6999      	ldr	r1, [r3, #24]
 801128a:	f041 0108 	orr.w	r1, r1, #8
 801128e:	6199      	str	r1, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8011290:	6999      	ldr	r1, [r3, #24]
 8011292:	f021 0104 	bic.w	r1, r1, #4
 8011296:	6199      	str	r1, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8011298:	699a      	ldr	r2, [r3, #24]
 801129a:	4302      	orrs	r2, r0
 801129c:	619a      	str	r2, [r3, #24]
  htim->State = HAL_TIM_STATE_READY;
 801129e:	2301      	movs	r3, #1
  __HAL_UNLOCK(htim);
 80112a0:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 80112a2:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 80112a6:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 80112aa:	bd38      	pop	{r3, r4, r5, pc}
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80112ac:	4629      	mov	r1, r5
 80112ae:	6800      	ldr	r0, [r0, #0]
 80112b0:	f7ff fb56 	bl	8010960 <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80112b4:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80112b6:	6928      	ldr	r0, [r5, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80112b8:	69d9      	ldr	r1, [r3, #28]
 80112ba:	f441 6100 	orr.w	r1, r1, #2048	; 0x800
 80112be:	61d9      	str	r1, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80112c0:	69d9      	ldr	r1, [r3, #28]
 80112c2:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 80112c6:	61d9      	str	r1, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80112c8:	69da      	ldr	r2, [r3, #28]
 80112ca:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
 80112ce:	61da      	str	r2, [r3, #28]
  __HAL_UNLOCK(htim);
 80112d0:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 80112d2:	2301      	movs	r3, #1
 80112d4:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 80112d8:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
 80112dc:	e7e5      	b.n	80112aa <HAL_TIM_PWM_ConfigChannel+0x5e>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80112de:	4629      	mov	r1, r5
 80112e0:	6800      	ldr	r0, [r0, #0]
 80112e2:	f7ff ff51 	bl	8011188 <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80112e6:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80112e8:	6928      	ldr	r0, [r5, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80112ea:	6999      	ldr	r1, [r3, #24]
 80112ec:	f441 6100 	orr.w	r1, r1, #2048	; 0x800
 80112f0:	6199      	str	r1, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80112f2:	6999      	ldr	r1, [r3, #24]
 80112f4:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 80112f8:	6199      	str	r1, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80112fa:	699a      	ldr	r2, [r3, #24]
 80112fc:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
 8011300:	619a      	str	r2, [r3, #24]
  __HAL_UNLOCK(htim);
 8011302:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8011304:	2301      	movs	r3, #1
 8011306:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 801130a:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
 801130e:	e7cc      	b.n	80112aa <HAL_TIM_PWM_ConfigChannel+0x5e>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8011310:	4629      	mov	r1, r5
 8011312:	6800      	ldr	r0, [r0, #0]
 8011314:	f7ff faf2 	bl	80108fc <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8011318:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 801131a:	6928      	ldr	r0, [r5, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 801131c:	69d9      	ldr	r1, [r3, #28]
 801131e:	f041 0108 	orr.w	r1, r1, #8
 8011322:	61d9      	str	r1, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8011324:	69d9      	ldr	r1, [r3, #28]
 8011326:	f021 0104 	bic.w	r1, r1, #4
 801132a:	61d9      	str	r1, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 801132c:	69da      	ldr	r2, [r3, #28]
 801132e:	4302      	orrs	r2, r0
 8011330:	61da      	str	r2, [r3, #28]
  __HAL_UNLOCK(htim);
 8011332:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8011334:	2301      	movs	r3, #1
 8011336:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 801133a:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
 801133e:	e7b4      	b.n	80112aa <HAL_TIM_PWM_ConfigChannel+0x5e>
  __HAL_LOCK(htim);
 8011340:	2002      	movs	r0, #2
}
 8011342:	bd38      	pop	{r3, r4, r5, pc}

08011344 <HAL_TIMEx_OCN_Start_IT>:
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 8011344:	2904      	cmp	r1, #4
 8011346:	6803      	ldr	r3, [r0, #0]
 8011348:	d02a      	beq.n	80113a0 <HAL_TIMEx_OCN_Start_IT+0x5c>
 801134a:	2908      	cmp	r1, #8
 801134c:	d023      	beq.n	8011396 <HAL_TIMEx_OCN_Start_IT+0x52>
 801134e:	b1e9      	cbz	r1, 801138c <HAL_TIMEx_OCN_Start_IT+0x48>
    default:
      break;
  }

  /* Enable the TIM Break interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_BREAK);
 8011350:	68da      	ldr	r2, [r3, #12]
 8011352:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8011356:	60da      	str	r2, [r3, #12]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 8011358:	6a18      	ldr	r0, [r3, #32]
  tmp = TIM_CCER_CC1NE << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 801135a:	f001 021f 	and.w	r2, r1, #31
 801135e:	2104      	movs	r1, #4
 8011360:	4091      	lsls	r1, r2
  TIMx->CCER &=  ~tmp;
 8011362:	ea20 0001 	bic.w	r0, r0, r1
 8011366:	6218      	str	r0, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8011368:	6a1a      	ldr	r2, [r3, #32]
 801136a:	4311      	orrs	r1, r2
 801136c:	6219      	str	r1, [r3, #32]
  __HAL_TIM_MOE_ENABLE(htim);
 801136e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8011370:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8011374:	645a      	str	r2, [r3, #68]	; 0x44
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8011376:	689a      	ldr	r2, [r3, #8]
 8011378:	f002 0207 	and.w	r2, r2, #7
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801137c:	2a06      	cmp	r2, #6
 801137e:	d003      	beq.n	8011388 <HAL_TIMEx_OCN_Start_IT+0x44>
    __HAL_TIM_ENABLE(htim);
 8011380:	681a      	ldr	r2, [r3, #0]
 8011382:	f042 0201 	orr.w	r2, r2, #1
 8011386:	601a      	str	r2, [r3, #0]
}
 8011388:	2000      	movs	r0, #0
 801138a:	4770      	bx	lr
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 801138c:	68da      	ldr	r2, [r3, #12]
 801138e:	f042 0202 	orr.w	r2, r2, #2
 8011392:	60da      	str	r2, [r3, #12]
      break;
 8011394:	e7dc      	b.n	8011350 <HAL_TIMEx_OCN_Start_IT+0xc>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8011396:	68da      	ldr	r2, [r3, #12]
 8011398:	f042 0208 	orr.w	r2, r2, #8
 801139c:	60da      	str	r2, [r3, #12]
      break;
 801139e:	e7d7      	b.n	8011350 <HAL_TIMEx_OCN_Start_IT+0xc>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80113a0:	68da      	ldr	r2, [r3, #12]
 80113a2:	f042 0204 	orr.w	r2, r2, #4
 80113a6:	60da      	str	r2, [r3, #12]
      break;
 80113a8:	e7d2      	b.n	8011350 <HAL_TIMEx_OCN_Start_IT+0xc>
 80113aa:	bf00      	nop

080113ac <HAL_TIMEx_OCN_Stop_IT>:
  switch (Channel)
 80113ac:	2904      	cmp	r1, #4
 80113ae:	6803      	ldr	r3, [r0, #0]
 80113b0:	d040      	beq.n	8011434 <HAL_TIMEx_OCN_Stop_IT+0x88>
 80113b2:	2908      	cmp	r1, #8
 80113b4:	d039      	beq.n	801142a <HAL_TIMEx_OCN_Stop_IT+0x7e>
 80113b6:	2900      	cmp	r1, #0
 80113b8:	d032      	beq.n	8011420 <HAL_TIMEx_OCN_Stop_IT+0x74>
  TIMx->CCER &=  ~tmp;
 80113ba:	6a1a      	ldr	r2, [r3, #32]
  tmp = TIM_CCER_CC1NE << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80113bc:	f001 011f 	and.w	r1, r1, #31
 80113c0:	2004      	movs	r0, #4
 80113c2:	fa00 f101 	lsl.w	r1, r0, r1
  TIMx->CCER &=  ~tmp;
 80113c6:	ea22 0101 	bic.w	r1, r2, r1
 80113ca:	6219      	str	r1, [r3, #32]
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80113cc:	6a1a      	ldr	r2, [r3, #32]
 80113ce:	621a      	str	r2, [r3, #32]
  tmpccer = htim->Instance->CCER;
 80113d0:	6a19      	ldr	r1, [r3, #32]
  if ((tmpccer & (TIM_CCER_CC1NE | TIM_CCER_CC2NE | TIM_CCER_CC3NE)) == (uint32_t)RESET)
 80113d2:	f240 4244 	movw	r2, #1092	; 0x444
 80113d6:	4211      	tst	r1, r2
 80113d8:	d103      	bne.n	80113e2 <HAL_TIMEx_OCN_Stop_IT+0x36>
    __HAL_TIM_DISABLE_IT(htim, TIM_IT_BREAK);
 80113da:	68da      	ldr	r2, [r3, #12]
 80113dc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80113e0:	60da      	str	r2, [r3, #12]
  __HAL_TIM_MOE_DISABLE(htim);
 80113e2:	6a19      	ldr	r1, [r3, #32]
 80113e4:	f241 1211 	movw	r2, #4369	; 0x1111
 80113e8:	4211      	tst	r1, r2
 80113ea:	d104      	bne.n	80113f6 <HAL_TIMEx_OCN_Stop_IT+0x4a>
 80113ec:	6a19      	ldr	r1, [r3, #32]
 80113ee:	f240 4244 	movw	r2, #1092	; 0x444
 80113f2:	4211      	tst	r1, r2
 80113f4:	d00f      	beq.n	8011416 <HAL_TIMEx_OCN_Stop_IT+0x6a>
  __HAL_TIM_DISABLE(htim);
 80113f6:	6a19      	ldr	r1, [r3, #32]
 80113f8:	f241 1211 	movw	r2, #4369	; 0x1111
 80113fc:	4211      	tst	r1, r2
 80113fe:	d108      	bne.n	8011412 <HAL_TIMEx_OCN_Stop_IT+0x66>
 8011400:	6a19      	ldr	r1, [r3, #32]
 8011402:	f240 4244 	movw	r2, #1092	; 0x444
 8011406:	4211      	tst	r1, r2
 8011408:	d103      	bne.n	8011412 <HAL_TIMEx_OCN_Stop_IT+0x66>
 801140a:	681a      	ldr	r2, [r3, #0]
 801140c:	f022 0201 	bic.w	r2, r2, #1
 8011410:	601a      	str	r2, [r3, #0]
}
 8011412:	2000      	movs	r0, #0
 8011414:	4770      	bx	lr
  __HAL_TIM_MOE_DISABLE(htim);
 8011416:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8011418:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 801141c:	645a      	str	r2, [r3, #68]	; 0x44
 801141e:	e7ea      	b.n	80113f6 <HAL_TIMEx_OCN_Stop_IT+0x4a>
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 8011420:	68da      	ldr	r2, [r3, #12]
 8011422:	f022 0202 	bic.w	r2, r2, #2
 8011426:	60da      	str	r2, [r3, #12]
      break;
 8011428:	e7c7      	b.n	80113ba <HAL_TIMEx_OCN_Stop_IT+0xe>
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 801142a:	68da      	ldr	r2, [r3, #12]
 801142c:	f022 0208 	bic.w	r2, r2, #8
 8011430:	60da      	str	r2, [r3, #12]
      break;
 8011432:	e7c2      	b.n	80113ba <HAL_TIMEx_OCN_Stop_IT+0xe>
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 8011434:	68da      	ldr	r2, [r3, #12]
 8011436:	f022 0204 	bic.w	r2, r2, #4
 801143a:	60da      	str	r2, [r3, #12]
      break;
 801143c:	e7bd      	b.n	80113ba <HAL_TIMEx_OCN_Stop_IT+0xe>
 801143e:	bf00      	nop

08011440 <HAL_TIMEx_MasterConfigSynchronization>:
  __HAL_LOCK(htim);
 8011440:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8011444:	2b01      	cmp	r3, #1
 8011446:	d03a      	beq.n	80114be <HAL_TIMEx_MasterConfigSynchronization+0x7e>
  tmpcr2 = htim->Instance->CR2;
 8011448:	6803      	ldr	r3, [r0, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 801144a:	2202      	movs	r2, #2
{
 801144c:	b470      	push	{r4, r5, r6}
  htim->State = HAL_TIM_STATE_BUSY;
 801144e:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
  tmpcr2 = htim->Instance->CR2;
 8011452:	685a      	ldr	r2, [r3, #4]
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8011454:	680e      	ldr	r6, [r1, #0]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8011456:	4d1b      	ldr	r5, [pc, #108]	; (80114c4 <HAL_TIMEx_MasterConfigSynchronization+0x84>)
  tmpsmcr = htim->Instance->SMCR;
 8011458:	689c      	ldr	r4, [r3, #8]
  tmpcr2 &= ~TIM_CR2_MMS;
 801145a:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 801145e:	4332      	orrs	r2, r6
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8011460:	42ab      	cmp	r3, r5
  __HAL_LOCK(htim);
 8011462:	f04f 0601 	mov.w	r6, #1
 8011466:	f880 603c 	strb.w	r6, [r0, #60]	; 0x3c
  htim->Instance->CR2 = tmpcr2;
 801146a:	605a      	str	r2, [r3, #4]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 801146c:	d019      	beq.n	80114a2 <HAL_TIMEx_MasterConfigSynchronization+0x62>
 801146e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8011472:	d016      	beq.n	80114a2 <HAL_TIMEx_MasterConfigSynchronization+0x62>
 8011474:	4a14      	ldr	r2, [pc, #80]	; (80114c8 <HAL_TIMEx_MasterConfigSynchronization+0x88>)
 8011476:	4293      	cmp	r3, r2
 8011478:	d013      	beq.n	80114a2 <HAL_TIMEx_MasterConfigSynchronization+0x62>
 801147a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 801147e:	4293      	cmp	r3, r2
 8011480:	d00f      	beq.n	80114a2 <HAL_TIMEx_MasterConfigSynchronization+0x62>
 8011482:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8011486:	4293      	cmp	r3, r2
 8011488:	d00b      	beq.n	80114a2 <HAL_TIMEx_MasterConfigSynchronization+0x62>
 801148a:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 801148e:	4293      	cmp	r3, r2
 8011490:	d007      	beq.n	80114a2 <HAL_TIMEx_MasterConfigSynchronization+0x62>
 8011492:	f502 5270 	add.w	r2, r2, #15360	; 0x3c00
 8011496:	4293      	cmp	r3, r2
 8011498:	d003      	beq.n	80114a2 <HAL_TIMEx_MasterConfigSynchronization+0x62>
 801149a:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 801149e:	4293      	cmp	r3, r2
 80114a0:	d104      	bne.n	80114ac <HAL_TIMEx_MasterConfigSynchronization+0x6c>
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80114a2:	684a      	ldr	r2, [r1, #4]
    tmpsmcr &= ~TIM_SMCR_MSM;
 80114a4:	f024 0480 	bic.w	r4, r4, #128	; 0x80
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80114a8:	4314      	orrs	r4, r2
    htim->Instance->SMCR = tmpsmcr;
 80114aa:	609c      	str	r4, [r3, #8]
  __HAL_UNLOCK(htim);
 80114ac:	2300      	movs	r3, #0
  htim->State = HAL_TIM_STATE_READY;
 80114ae:	2201      	movs	r2, #1
 80114b0:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 80114b4:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
}
 80114b8:	bc70      	pop	{r4, r5, r6}
  return HAL_OK;
 80114ba:	4618      	mov	r0, r3
}
 80114bc:	4770      	bx	lr
  __HAL_LOCK(htim);
 80114be:	2002      	movs	r0, #2
}
 80114c0:	4770      	bx	lr
 80114c2:	bf00      	nop
 80114c4:	40010000 	.word	0x40010000
 80114c8:	40000400 	.word	0x40000400

080114cc <HAL_TIMEx_ConfigBreakDeadTime>:
  __HAL_LOCK(htim);
 80114cc:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 80114d0:	2b01      	cmp	r3, #1
 80114d2:	d021      	beq.n	8011518 <HAL_TIMEx_ConfigBreakDeadTime+0x4c>
{
 80114d4:	b430      	push	{r4, r5}
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80114d6:	e9d1 5302 	ldrd	r5, r3, [r1, #8]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80114da:	e9d1 2400 	ldrd	r2, r4, [r1]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80114de:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80114e2:	432b      	orrs	r3, r5
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80114e4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80114e8:	4323      	orrs	r3, r4
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80114ea:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80114ee:	e9d1 5404 	ldrd	r5, r4, [r1, #16]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80114f2:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80114f4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80114f8:	432b      	orrs	r3, r5
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80114fa:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80114fe:	69c9      	ldr	r1, [r1, #28]
  htim->Instance->BDTR = tmpbdtr;
 8011500:	6802      	ldr	r2, [r0, #0]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8011502:	4323      	orrs	r3, r4
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8011504:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8011508:	430b      	orrs	r3, r1
  __HAL_UNLOCK(htim);
 801150a:	2100      	movs	r1, #0
  htim->Instance->BDTR = tmpbdtr;
 801150c:	6453      	str	r3, [r2, #68]	; 0x44
}
 801150e:	bc30      	pop	{r4, r5}
  __HAL_UNLOCK(htim);
 8011510:	f880 103c 	strb.w	r1, [r0, #60]	; 0x3c
}
 8011514:	4608      	mov	r0, r1
 8011516:	4770      	bx	lr
  __HAL_LOCK(htim);
 8011518:	2302      	movs	r3, #2
}
 801151a:	4618      	mov	r0, r3
 801151c:	4770      	bx	lr
 801151e:	bf00      	nop

08011520 <HAL_TIMEx_CommutCallback>:
 8011520:	4770      	bx	lr
 8011522:	bf00      	nop

08011524 <HAL_TIMEx_BreakCallback>:
 8011524:	4770      	bx	lr
 8011526:	bf00      	nop

08011528 <UART_SetConfig>:
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8011528:	6802      	ldr	r2, [r0, #0]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 801152a:	6883      	ldr	r3, [r0, #8]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 801152c:	6911      	ldr	r1, [r2, #16]
{
 801152e:	b570      	push	{r4, r5, r6, lr}
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8011530:	68c5      	ldr	r5, [r0, #12]
 8011532:	f421 5140 	bic.w	r1, r1, #12288	; 0x3000
{
 8011536:	4604      	mov	r4, r0
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8011538:	4329      	orrs	r1, r5
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 801153a:	6900      	ldr	r0, [r0, #16]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 801153c:	6111      	str	r1, [r2, #16]
  MODIFY_REG(huart->Instance->CR1,
 801153e:	68d1      	ldr	r1, [r2, #12]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8011540:	6965      	ldr	r5, [r4, #20]
 8011542:	4303      	orrs	r3, r0
 8011544:	69e0      	ldr	r0, [r4, #28]
  MODIFY_REG(huart->Instance->CR1,
 8011546:	f421 4116 	bic.w	r1, r1, #38400	; 0x9600
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 801154a:	432b      	orrs	r3, r5
  MODIFY_REG(huart->Instance->CR1,
 801154c:	f021 010c 	bic.w	r1, r1, #12
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8011550:	4303      	orrs	r3, r0
  MODIFY_REG(huart->Instance->CR1,
 8011552:	430b      	orrs	r3, r1
 8011554:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8011556:	6953      	ldr	r3, [r2, #20]
 8011558:	69a1      	ldr	r1, [r4, #24]
 801155a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 801155e:	430b      	orrs	r3, r1

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8011560:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8011564:	6153      	str	r3, [r2, #20]
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8011566:	4b2a      	ldr	r3, [pc, #168]	; (8011610 <UART_SetConfig+0xe8>)
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8011568:	d023      	beq.n	80115b2 <UART_SetConfig+0x8a>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 801156a:	429a      	cmp	r2, r3
 801156c:	d01e      	beq.n	80115ac <UART_SetConfig+0x84>
 801156e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8011572:	429a      	cmp	r2, r3
 8011574:	d01a      	beq.n	80115ac <UART_SetConfig+0x84>
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8011576:	f7fe fe33 	bl	80101e0 <HAL_RCC_GetPCLK1Freq>
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 801157a:	6863      	ldr	r3, [r4, #4]
 801157c:	2219      	movs	r2, #25
 801157e:	fba0 0102 	umull	r0, r1, r0, r2
 8011582:	009a      	lsls	r2, r3, #2
 8011584:	0f9b      	lsrs	r3, r3, #30
 8011586:	f7f7 fab7 	bl	8008af8 <__aeabi_uldivmod>
 801158a:	4922      	ldr	r1, [pc, #136]	; (8011614 <UART_SetConfig+0xec>)
 801158c:	6824      	ldr	r4, [r4, #0]
 801158e:	fba1 3200 	umull	r3, r2, r1, r0
 8011592:	0952      	lsrs	r2, r2, #5
 8011594:	2364      	movs	r3, #100	; 0x64
 8011596:	fb03 0312 	mls	r3, r3, r2, r0
 801159a:	011b      	lsls	r3, r3, #4
 801159c:	3332      	adds	r3, #50	; 0x32
 801159e:	fba1 1303 	umull	r1, r3, r1, r3
 80115a2:	0112      	lsls	r2, r2, #4
 80115a4:	eb02 1353 	add.w	r3, r2, r3, lsr #5
 80115a8:	60a3      	str	r3, [r4, #8]
    }
  }
}
 80115aa:	bd70      	pop	{r4, r5, r6, pc}
      pclk = HAL_RCC_GetPCLK2Freq();
 80115ac:	f7fe fe28 	bl	8010200 <HAL_RCC_GetPCLK2Freq>
 80115b0:	e7e3      	b.n	801157a <UART_SetConfig+0x52>
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80115b2:	429a      	cmp	r2, r3
 80115b4:	d028      	beq.n	8011608 <UART_SetConfig+0xe0>
 80115b6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80115ba:	429a      	cmp	r2, r3
 80115bc:	d024      	beq.n	8011608 <UART_SetConfig+0xe0>
      pclk = HAL_RCC_GetPCLK1Freq();
 80115be:	f7fe fe0f 	bl	80101e0 <HAL_RCC_GetPCLK1Freq>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80115c2:	6862      	ldr	r2, [r4, #4]
 80115c4:	4d13      	ldr	r5, [pc, #76]	; (8011614 <UART_SetConfig+0xec>)
 80115c6:	1892      	adds	r2, r2, r2
 80115c8:	f04f 0119 	mov.w	r1, #25
 80115cc:	f04f 0600 	mov.w	r6, #0
 80115d0:	eb46 0306 	adc.w	r3, r6, r6
 80115d4:	fba0 0101 	umull	r0, r1, r0, r1
 80115d8:	f7f7 fa8e 	bl	8008af8 <__aeabi_uldivmod>
 80115dc:	fba5 3200 	umull	r3, r2, r5, r0
 80115e0:	0951      	lsrs	r1, r2, #5
 80115e2:	2364      	movs	r3, #100	; 0x64
 80115e4:	fb03 0311 	mls	r3, r3, r1, r0
 80115e8:	00db      	lsls	r3, r3, #3
 80115ea:	3332      	adds	r3, #50	; 0x32
 80115ec:	fba5 2303 	umull	r2, r3, r5, r3
 80115f0:	095b      	lsrs	r3, r3, #5
 80115f2:	f003 0207 	and.w	r2, r3, #7
 80115f6:	005b      	lsls	r3, r3, #1
 80115f8:	6824      	ldr	r4, [r4, #0]
 80115fa:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 80115fe:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8011602:	4413      	add	r3, r2
 8011604:	60a3      	str	r3, [r4, #8]
}
 8011606:	bd70      	pop	{r4, r5, r6, pc}
      pclk = HAL_RCC_GetPCLK2Freq();
 8011608:	f7fe fdfa 	bl	8010200 <HAL_RCC_GetPCLK2Freq>
 801160c:	e7d9      	b.n	80115c2 <UART_SetConfig+0x9a>
 801160e:	bf00      	nop
 8011610:	40011000 	.word	0x40011000
 8011614:	51eb851f 	.word	0x51eb851f

08011618 <UART_WaitOnFlagUntilTimeout.constprop.3>:
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
 8011618:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801161c:	4607      	mov	r7, r0
 801161e:	460e      	mov	r6, r1
 8011620:	4690      	mov	r8, r2
 8011622:	461d      	mov	r5, r3
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8011624:	683c      	ldr	r4, [r7, #0]
 8011626:	e001      	b.n	801162c <UART_WaitOnFlagUntilTimeout.constprop.3+0x14>
    if (Timeout != HAL_MAX_DELAY)
 8011628:	1c6b      	adds	r3, r5, #1
 801162a:	d106      	bne.n	801163a <UART_WaitOnFlagUntilTimeout.constprop.3+0x22>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 801162c:	6820      	ldr	r0, [r4, #0]
 801162e:	ea36 0300 	bics.w	r3, r6, r0
 8011632:	d1f9      	bne.n	8011628 <UART_WaitOnFlagUntilTimeout.constprop.3+0x10>
  return HAL_OK;
 8011634:	2000      	movs	r0, #0
}
 8011636:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 801163a:	b135      	cbz	r5, 801164a <UART_WaitOnFlagUntilTimeout.constprop.3+0x32>
 801163c:	f7fd fbda 	bl	800edf4 <HAL_GetTick>
 8011640:	eba0 0008 	sub.w	r0, r0, r8
 8011644:	4285      	cmp	r5, r0
 8011646:	d2ed      	bcs.n	8011624 <UART_WaitOnFlagUntilTimeout.constprop.3+0xc>
 8011648:	683c      	ldr	r4, [r7, #0]
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 801164a:	68e3      	ldr	r3, [r4, #12]
 801164c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8011650:	60e3      	str	r3, [r4, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8011652:	6963      	ldr	r3, [r4, #20]
        huart->gState  = HAL_UART_STATE_READY;
 8011654:	2220      	movs	r2, #32
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8011656:	f023 0301 	bic.w	r3, r3, #1
        __HAL_UNLOCK(huart);
 801165a:	2100      	movs	r1, #0
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801165c:	6163      	str	r3, [r4, #20]
        __HAL_UNLOCK(huart);
 801165e:	2003      	movs	r0, #3
        huart->gState  = HAL_UART_STATE_READY;
 8011660:	f887 2039 	strb.w	r2, [r7, #57]	; 0x39
        __HAL_UNLOCK(huart);
 8011664:	f887 1038 	strb.w	r1, [r7, #56]	; 0x38
        huart->RxState = HAL_UART_STATE_READY;
 8011668:	f887 203a 	strb.w	r2, [r7, #58]	; 0x3a
 801166c:	e7e3      	b.n	8011636 <UART_WaitOnFlagUntilTimeout.constprop.3+0x1e>
 801166e:	bf00      	nop

08011670 <HAL_UART_Init>:
  if (huart == NULL)
 8011670:	b360      	cbz	r0, 80116cc <HAL_UART_Init+0x5c>
{
 8011672:	b538      	push	{r3, r4, r5, lr}
  if (huart->gState == HAL_UART_STATE_RESET)
 8011674:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8011678:	4604      	mov	r4, r0
 801167a:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 801167e:	b303      	cbz	r3, 80116c2 <HAL_UART_Init+0x52>
  __HAL_UART_DISABLE(huart);
 8011680:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8011682:	2324      	movs	r3, #36	; 0x24
 8011684:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UART_DISABLE(huart);
 8011688:	68d3      	ldr	r3, [r2, #12]
 801168a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 801168e:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 8011690:	4620      	mov	r0, r4
 8011692:	f7ff ff49 	bl	8011528 <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8011696:	6823      	ldr	r3, [r4, #0]
 8011698:	691a      	ldr	r2, [r3, #16]
 801169a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 801169e:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80116a0:	695a      	ldr	r2, [r3, #20]
 80116a2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80116a6:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE(huart);
 80116a8:	68da      	ldr	r2, [r3, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80116aa:	2500      	movs	r5, #0
  huart->gState = HAL_UART_STATE_READY;
 80116ac:	2120      	movs	r1, #32
  __HAL_UART_ENABLE(huart);
 80116ae:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80116b2:	60da      	str	r2, [r3, #12]
  return HAL_OK;
 80116b4:	4628      	mov	r0, r5
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80116b6:	63e5      	str	r5, [r4, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 80116b8:	f884 1039 	strb.w	r1, [r4, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 80116bc:	f884 103a 	strb.w	r1, [r4, #58]	; 0x3a
}
 80116c0:	bd38      	pop	{r3, r4, r5, pc}
    huart->Lock = HAL_UNLOCKED;
 80116c2:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_UART_MspInit(huart);
 80116c6:	f7fc fa3b 	bl	800db40 <HAL_UART_MspInit>
 80116ca:	e7d9      	b.n	8011680 <HAL_UART_Init+0x10>
    return HAL_ERROR;
 80116cc:	2001      	movs	r0, #1
}
 80116ce:	4770      	bx	lr

080116d0 <HAL_UART_Transmit>:
{
 80116d0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80116d4:	460f      	mov	r7, r1
  if (huart->gState == HAL_UART_STATE_READY)
 80116d6:	f890 1039 	ldrb.w	r1, [r0, #57]	; 0x39
 80116da:	2920      	cmp	r1, #32
{
 80116dc:	b083      	sub	sp, #12
  if (huart->gState == HAL_UART_STATE_READY)
 80116de:	d130      	bne.n	8011742 <HAL_UART_Transmit+0x72>
    if ((pData == NULL) || (Size == 0U))
 80116e0:	2f00      	cmp	r7, #0
 80116e2:	d032      	beq.n	801174a <HAL_UART_Transmit+0x7a>
 80116e4:	9201      	str	r2, [sp, #4]
 80116e6:	b382      	cbz	r2, 801174a <HAL_UART_Transmit+0x7a>
 80116e8:	4698      	mov	r8, r3
    __HAL_LOCK(huart);
 80116ea:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 80116ee:	2b01      	cmp	r3, #1
 80116f0:	4604      	mov	r4, r0
 80116f2:	d026      	beq.n	8011742 <HAL_UART_Transmit+0x72>
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80116f4:	2500      	movs	r5, #0
    __HAL_LOCK(huart);
 80116f6:	2101      	movs	r1, #1
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80116f8:	2321      	movs	r3, #33	; 0x21
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80116fa:	63c5      	str	r5, [r0, #60]	; 0x3c
    __HAL_LOCK(huart);
 80116fc:	f880 1038 	strb.w	r1, [r0, #56]	; 0x38
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8011700:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
    tickstart = HAL_GetTick();
 8011704:	f7fd fb76 	bl	800edf4 <HAL_GetTick>
    huart->TxXferSize = Size;
 8011708:	9a01      	ldr	r2, [sp, #4]
    __HAL_UNLOCK(huart);
 801170a:	f884 5038 	strb.w	r5, [r4, #56]	; 0x38
    tickstart = HAL_GetTick();
 801170e:	4681      	mov	r9, r0
    huart->TxXferSize = Size;
 8011710:	84a2      	strh	r2, [r4, #36]	; 0x24
    huart->TxXferCount = Size;
 8011712:	84e2      	strh	r2, [r4, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8011714:	8ce5      	ldrh	r5, [r4, #38]	; 0x26
 8011716:	b2ad      	uxth	r5, r5
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8011718:	4643      	mov	r3, r8
 801171a:	464a      	mov	r2, r9
 801171c:	2180      	movs	r1, #128	; 0x80
 801171e:	4620      	mov	r0, r4
    while (huart->TxXferCount > 0U)
 8011720:	b355      	cbz	r5, 8011778 <HAL_UART_Transmit+0xa8>
      huart->TxXferCount--;
 8011722:	8ce5      	ldrh	r5, [r4, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8011724:	68a6      	ldr	r6, [r4, #8]
      huart->TxXferCount--;
 8011726:	3d01      	subs	r5, #1
 8011728:	b2ad      	uxth	r5, r5
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 801172a:	f5b6 5f80 	cmp.w	r6, #4096	; 0x1000
      huart->TxXferCount--;
 801172e:	84e5      	strh	r5, [r4, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8011730:	d00f      	beq.n	8011752 <HAL_UART_Transmit+0x82>
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8011732:	f7ff ff71 	bl	8011618 <UART_WaitOnFlagUntilTimeout.constprop.3>
 8011736:	b9e8      	cbnz	r0, 8011774 <HAL_UART_Transmit+0xa4>
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8011738:	6823      	ldr	r3, [r4, #0]
 801173a:	783a      	ldrb	r2, [r7, #0]
 801173c:	605a      	str	r2, [r3, #4]
 801173e:	3701      	adds	r7, #1
 8011740:	e7e8      	b.n	8011714 <HAL_UART_Transmit+0x44>
    return HAL_BUSY;
 8011742:	2002      	movs	r0, #2
}
 8011744:	b003      	add	sp, #12
 8011746:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      return  HAL_ERROR;
 801174a:	2001      	movs	r0, #1
}
 801174c:	b003      	add	sp, #12
 801174e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8011752:	4643      	mov	r3, r8
 8011754:	464a      	mov	r2, r9
 8011756:	2180      	movs	r1, #128	; 0x80
 8011758:	4620      	mov	r0, r4
 801175a:	f7ff ff5d 	bl	8011618 <UART_WaitOnFlagUntilTimeout.constprop.3>
 801175e:	b948      	cbnz	r0, 8011774 <HAL_UART_Transmit+0xa4>
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8011760:	883b      	ldrh	r3, [r7, #0]
 8011762:	6821      	ldr	r1, [r4, #0]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8011764:	6922      	ldr	r2, [r4, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8011766:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801176a:	604b      	str	r3, [r1, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 801176c:	2a00      	cmp	r2, #0
 801176e:	d1e6      	bne.n	801173e <HAL_UART_Transmit+0x6e>
          pData += 2U;
 8011770:	3702      	adds	r7, #2
 8011772:	e7cf      	b.n	8011714 <HAL_UART_Transmit+0x44>
          return HAL_TIMEOUT;
 8011774:	2003      	movs	r0, #3
 8011776:	e7e5      	b.n	8011744 <HAL_UART_Transmit+0x74>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8011778:	2140      	movs	r1, #64	; 0x40
 801177a:	f7ff ff4d 	bl	8011618 <UART_WaitOnFlagUntilTimeout.constprop.3>
 801177e:	2800      	cmp	r0, #0
 8011780:	d1f8      	bne.n	8011774 <HAL_UART_Transmit+0xa4>
    huart->gState = HAL_UART_STATE_READY;
 8011782:	2320      	movs	r3, #32
 8011784:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
    return HAL_OK;
 8011788:	e7dc      	b.n	8011744 <HAL_UART_Transmit+0x74>
 801178a:	bf00      	nop

0801178c <HAL_UART_Receive>:
{
 801178c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8011790:	460f      	mov	r7, r1
  if (huart->RxState == HAL_UART_STATE_READY)
 8011792:	f890 103a 	ldrb.w	r1, [r0, #58]	; 0x3a
 8011796:	2920      	cmp	r1, #32
{
 8011798:	b083      	sub	sp, #12
  if (huart->RxState == HAL_UART_STATE_READY)
 801179a:	d135      	bne.n	8011808 <HAL_UART_Receive+0x7c>
    if ((pData == NULL) || (Size == 0U))
 801179c:	2f00      	cmp	r7, #0
 801179e:	d037      	beq.n	8011810 <HAL_UART_Receive+0x84>
 80117a0:	9201      	str	r2, [sp, #4]
 80117a2:	2a00      	cmp	r2, #0
 80117a4:	d034      	beq.n	8011810 <HAL_UART_Receive+0x84>
 80117a6:	4698      	mov	r8, r3
    __HAL_LOCK(huart);
 80117a8:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 80117ac:	2b01      	cmp	r3, #1
 80117ae:	4604      	mov	r4, r0
 80117b0:	d02a      	beq.n	8011808 <HAL_UART_Receive+0x7c>
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80117b2:	2500      	movs	r5, #0
    __HAL_LOCK(huart);
 80117b4:	2101      	movs	r1, #1
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80117b6:	2322      	movs	r3, #34	; 0x22
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80117b8:	63c5      	str	r5, [r0, #60]	; 0x3c
    __HAL_LOCK(huart);
 80117ba:	f880 1038 	strb.w	r1, [r0, #56]	; 0x38
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80117be:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
    tickstart = HAL_GetTick();
 80117c2:	f7fd fb17 	bl	800edf4 <HAL_GetTick>
    huart->RxXferSize = Size;
 80117c6:	9a01      	ldr	r2, [sp, #4]
    __HAL_UNLOCK(huart);
 80117c8:	f884 5038 	strb.w	r5, [r4, #56]	; 0x38
    tickstart = HAL_GetTick();
 80117cc:	4681      	mov	r9, r0
    huart->RxXferSize = Size;
 80117ce:	85a2      	strh	r2, [r4, #44]	; 0x2c
    huart->RxXferCount = Size;
 80117d0:	85e2      	strh	r2, [r4, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 80117d2:	8de5      	ldrh	r5, [r4, #46]	; 0x2e
 80117d4:	b2ad      	uxth	r5, r5
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80117d6:	4643      	mov	r3, r8
 80117d8:	464a      	mov	r2, r9
 80117da:	2120      	movs	r1, #32
 80117dc:	4620      	mov	r0, r4
    while (huart->RxXferCount > 0U)
 80117de:	2d00      	cmp	r5, #0
 80117e0:	d036      	beq.n	8011850 <HAL_UART_Receive+0xc4>
      huart->RxXferCount--;
 80117e2:	8de5      	ldrh	r5, [r4, #46]	; 0x2e
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80117e4:	68a6      	ldr	r6, [r4, #8]
      huart->RxXferCount--;
 80117e6:	3d01      	subs	r5, #1
 80117e8:	b2ad      	uxth	r5, r5
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80117ea:	f5b6 5f80 	cmp.w	r6, #4096	; 0x1000
      huart->RxXferCount--;
 80117ee:	85e5      	strh	r5, [r4, #46]	; 0x2e
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80117f0:	d012      	beq.n	8011818 <HAL_UART_Receive+0x8c>
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80117f2:	f7ff ff11 	bl	8011618 <UART_WaitOnFlagUntilTimeout.constprop.3>
 80117f6:	bb78      	cbnz	r0, 8011858 <HAL_UART_Receive+0xcc>
        if (huart->Init.Parity == UART_PARITY_NONE)
 80117f8:	6923      	ldr	r3, [r4, #16]
 80117fa:	6821      	ldr	r1, [r4, #0]
 80117fc:	1c7a      	adds	r2, r7, #1
 80117fe:	b9db      	cbnz	r3, 8011838 <HAL_UART_Receive+0xac>
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8011800:	684b      	ldr	r3, [r1, #4]
 8011802:	703b      	strb	r3, [r7, #0]
 8011804:	4617      	mov	r7, r2
 8011806:	e7e4      	b.n	80117d2 <HAL_UART_Receive+0x46>
    return HAL_BUSY;
 8011808:	2002      	movs	r0, #2
}
 801180a:	b003      	add	sp, #12
 801180c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      return  HAL_ERROR;
 8011810:	2001      	movs	r0, #1
}
 8011812:	b003      	add	sp, #12
 8011814:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8011818:	4643      	mov	r3, r8
 801181a:	464a      	mov	r2, r9
 801181c:	2120      	movs	r1, #32
 801181e:	4620      	mov	r0, r4
 8011820:	f7ff fefa 	bl	8011618 <UART_WaitOnFlagUntilTimeout.constprop.3>
 8011824:	b9c0      	cbnz	r0, 8011858 <HAL_UART_Receive+0xcc>
        if (huart->Init.Parity == UART_PARITY_NONE)
 8011826:	6923      	ldr	r3, [r4, #16]
 8011828:	b963      	cbnz	r3, 8011844 <HAL_UART_Receive+0xb8>
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 801182a:	6823      	ldr	r3, [r4, #0]
 801182c:	685b      	ldr	r3, [r3, #4]
 801182e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8011832:	f827 3b02 	strh.w	r3, [r7], #2
 8011836:	e7cc      	b.n	80117d2 <HAL_UART_Receive+0x46>
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8011838:	684b      	ldr	r3, [r1, #4]
 801183a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801183e:	703b      	strb	r3, [r7, #0]
 8011840:	4617      	mov	r7, r2
 8011842:	e7c6      	b.n	80117d2 <HAL_UART_Receive+0x46>
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8011844:	6823      	ldr	r3, [r4, #0]
 8011846:	685b      	ldr	r3, [r3, #4]
 8011848:	b2db      	uxtb	r3, r3
 801184a:	f827 3b01 	strh.w	r3, [r7], #1
 801184e:	e7c0      	b.n	80117d2 <HAL_UART_Receive+0x46>
    return HAL_OK;
 8011850:	4628      	mov	r0, r5
    huart->RxState = HAL_UART_STATE_READY;
 8011852:	f884 103a 	strb.w	r1, [r4, #58]	; 0x3a
    return HAL_OK;
 8011856:	e7d8      	b.n	801180a <HAL_UART_Receive+0x7e>
          return HAL_TIMEOUT;
 8011858:	2003      	movs	r0, #3
 801185a:	e7d6      	b.n	801180a <HAL_UART_Receive+0x7e>

0801185c <round>:
 801185c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801185e:	ec57 6b10 	vmov	r6, r7, d0
 8011862:	f3c7 500a 	ubfx	r0, r7, #20, #11
 8011866:	f2a0 34ff 	subw	r4, r0, #1023	; 0x3ff
 801186a:	2c13      	cmp	r4, #19
 801186c:	463b      	mov	r3, r7
 801186e:	463d      	mov	r5, r7
 8011870:	dc17      	bgt.n	80118a2 <round+0x46>
 8011872:	2c00      	cmp	r4, #0
 8011874:	da09      	bge.n	801188a <round+0x2e>
 8011876:	3401      	adds	r4, #1
 8011878:	f007 4300 	and.w	r3, r7, #2147483648	; 0x80000000
 801187c:	d103      	bne.n	8011886 <round+0x2a>
 801187e:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8011882:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8011886:	2100      	movs	r1, #0
 8011888:	e02c      	b.n	80118e4 <round+0x88>
 801188a:	4a18      	ldr	r2, [pc, #96]	; (80118ec <round+0x90>)
 801188c:	4122      	asrs	r2, r4
 801188e:	4217      	tst	r7, r2
 8011890:	d100      	bne.n	8011894 <round+0x38>
 8011892:	b19e      	cbz	r6, 80118bc <round+0x60>
 8011894:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8011898:	4123      	asrs	r3, r4
 801189a:	442b      	add	r3, r5
 801189c:	ea23 0302 	bic.w	r3, r3, r2
 80118a0:	e7f1      	b.n	8011886 <round+0x2a>
 80118a2:	2c33      	cmp	r4, #51	; 0x33
 80118a4:	dd0d      	ble.n	80118c2 <round+0x66>
 80118a6:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
 80118aa:	d107      	bne.n	80118bc <round+0x60>
 80118ac:	4630      	mov	r0, r6
 80118ae:	4639      	mov	r1, r7
 80118b0:	ee10 2a10 	vmov	r2, s0
 80118b4:	f7f6 fc22 	bl	80080fc <__adddf3>
 80118b8:	4606      	mov	r6, r0
 80118ba:	460f      	mov	r7, r1
 80118bc:	ec47 6b10 	vmov	d0, r6, r7
 80118c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80118c2:	f2a0 4213 	subw	r2, r0, #1043	; 0x413
 80118c6:	f04f 30ff 	mov.w	r0, #4294967295
 80118ca:	40d0      	lsrs	r0, r2
 80118cc:	4206      	tst	r6, r0
 80118ce:	d0f5      	beq.n	80118bc <round+0x60>
 80118d0:	2201      	movs	r2, #1
 80118d2:	f1c4 0433 	rsb	r4, r4, #51	; 0x33
 80118d6:	fa02 f404 	lsl.w	r4, r2, r4
 80118da:	1931      	adds	r1, r6, r4
 80118dc:	bf28      	it	cs
 80118de:	189b      	addcs	r3, r3, r2
 80118e0:	ea21 0100 	bic.w	r1, r1, r0
 80118e4:	461f      	mov	r7, r3
 80118e6:	460e      	mov	r6, r1
 80118e8:	e7e8      	b.n	80118bc <round+0x60>
 80118ea:	bf00      	nop
 80118ec:	000fffff 	.word	0x000fffff

080118f0 <__errno>:
 80118f0:	4b01      	ldr	r3, [pc, #4]	; (80118f8 <__errno+0x8>)
 80118f2:	6818      	ldr	r0, [r3, #0]
 80118f4:	4770      	bx	lr
 80118f6:	bf00      	nop
 80118f8:	20000018 	.word	0x20000018

080118fc <__sflush_r>:
 80118fc:	898a      	ldrh	r2, [r1, #12]
 80118fe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011902:	4605      	mov	r5, r0
 8011904:	0710      	lsls	r0, r2, #28
 8011906:	460c      	mov	r4, r1
 8011908:	d458      	bmi.n	80119bc <__sflush_r+0xc0>
 801190a:	684b      	ldr	r3, [r1, #4]
 801190c:	2b00      	cmp	r3, #0
 801190e:	dc05      	bgt.n	801191c <__sflush_r+0x20>
 8011910:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8011912:	2b00      	cmp	r3, #0
 8011914:	dc02      	bgt.n	801191c <__sflush_r+0x20>
 8011916:	2000      	movs	r0, #0
 8011918:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801191c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801191e:	2e00      	cmp	r6, #0
 8011920:	d0f9      	beq.n	8011916 <__sflush_r+0x1a>
 8011922:	2300      	movs	r3, #0
 8011924:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8011928:	682f      	ldr	r7, [r5, #0]
 801192a:	6a21      	ldr	r1, [r4, #32]
 801192c:	602b      	str	r3, [r5, #0]
 801192e:	d032      	beq.n	8011996 <__sflush_r+0x9a>
 8011930:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8011932:	89a3      	ldrh	r3, [r4, #12]
 8011934:	075a      	lsls	r2, r3, #29
 8011936:	d505      	bpl.n	8011944 <__sflush_r+0x48>
 8011938:	6863      	ldr	r3, [r4, #4]
 801193a:	1ac0      	subs	r0, r0, r3
 801193c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801193e:	b10b      	cbz	r3, 8011944 <__sflush_r+0x48>
 8011940:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8011942:	1ac0      	subs	r0, r0, r3
 8011944:	2300      	movs	r3, #0
 8011946:	4602      	mov	r2, r0
 8011948:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801194a:	6a21      	ldr	r1, [r4, #32]
 801194c:	4628      	mov	r0, r5
 801194e:	47b0      	blx	r6
 8011950:	1c43      	adds	r3, r0, #1
 8011952:	89a3      	ldrh	r3, [r4, #12]
 8011954:	d106      	bne.n	8011964 <__sflush_r+0x68>
 8011956:	6829      	ldr	r1, [r5, #0]
 8011958:	291d      	cmp	r1, #29
 801195a:	d848      	bhi.n	80119ee <__sflush_r+0xf2>
 801195c:	4a29      	ldr	r2, [pc, #164]	; (8011a04 <__sflush_r+0x108>)
 801195e:	40ca      	lsrs	r2, r1
 8011960:	07d6      	lsls	r6, r2, #31
 8011962:	d544      	bpl.n	80119ee <__sflush_r+0xf2>
 8011964:	2200      	movs	r2, #0
 8011966:	6062      	str	r2, [r4, #4]
 8011968:	04d9      	lsls	r1, r3, #19
 801196a:	6922      	ldr	r2, [r4, #16]
 801196c:	6022      	str	r2, [r4, #0]
 801196e:	d504      	bpl.n	801197a <__sflush_r+0x7e>
 8011970:	1c42      	adds	r2, r0, #1
 8011972:	d101      	bne.n	8011978 <__sflush_r+0x7c>
 8011974:	682b      	ldr	r3, [r5, #0]
 8011976:	b903      	cbnz	r3, 801197a <__sflush_r+0x7e>
 8011978:	6560      	str	r0, [r4, #84]	; 0x54
 801197a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801197c:	602f      	str	r7, [r5, #0]
 801197e:	2900      	cmp	r1, #0
 8011980:	d0c9      	beq.n	8011916 <__sflush_r+0x1a>
 8011982:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8011986:	4299      	cmp	r1, r3
 8011988:	d002      	beq.n	8011990 <__sflush_r+0x94>
 801198a:	4628      	mov	r0, r5
 801198c:	f000 f9fa 	bl	8011d84 <_free_r>
 8011990:	2000      	movs	r0, #0
 8011992:	6360      	str	r0, [r4, #52]	; 0x34
 8011994:	e7c0      	b.n	8011918 <__sflush_r+0x1c>
 8011996:	2301      	movs	r3, #1
 8011998:	4628      	mov	r0, r5
 801199a:	47b0      	blx	r6
 801199c:	1c41      	adds	r1, r0, #1
 801199e:	d1c8      	bne.n	8011932 <__sflush_r+0x36>
 80119a0:	682b      	ldr	r3, [r5, #0]
 80119a2:	2b00      	cmp	r3, #0
 80119a4:	d0c5      	beq.n	8011932 <__sflush_r+0x36>
 80119a6:	2b1d      	cmp	r3, #29
 80119a8:	d001      	beq.n	80119ae <__sflush_r+0xb2>
 80119aa:	2b16      	cmp	r3, #22
 80119ac:	d101      	bne.n	80119b2 <__sflush_r+0xb6>
 80119ae:	602f      	str	r7, [r5, #0]
 80119b0:	e7b1      	b.n	8011916 <__sflush_r+0x1a>
 80119b2:	89a3      	ldrh	r3, [r4, #12]
 80119b4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80119b8:	81a3      	strh	r3, [r4, #12]
 80119ba:	e7ad      	b.n	8011918 <__sflush_r+0x1c>
 80119bc:	690f      	ldr	r7, [r1, #16]
 80119be:	2f00      	cmp	r7, #0
 80119c0:	d0a9      	beq.n	8011916 <__sflush_r+0x1a>
 80119c2:	0793      	lsls	r3, r2, #30
 80119c4:	680e      	ldr	r6, [r1, #0]
 80119c6:	bf08      	it	eq
 80119c8:	694b      	ldreq	r3, [r1, #20]
 80119ca:	600f      	str	r7, [r1, #0]
 80119cc:	bf18      	it	ne
 80119ce:	2300      	movne	r3, #0
 80119d0:	eba6 0807 	sub.w	r8, r6, r7
 80119d4:	608b      	str	r3, [r1, #8]
 80119d6:	f1b8 0f00 	cmp.w	r8, #0
 80119da:	dd9c      	ble.n	8011916 <__sflush_r+0x1a>
 80119dc:	4643      	mov	r3, r8
 80119de:	463a      	mov	r2, r7
 80119e0:	6a21      	ldr	r1, [r4, #32]
 80119e2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80119e4:	4628      	mov	r0, r5
 80119e6:	47b0      	blx	r6
 80119e8:	2800      	cmp	r0, #0
 80119ea:	dc06      	bgt.n	80119fa <__sflush_r+0xfe>
 80119ec:	89a3      	ldrh	r3, [r4, #12]
 80119ee:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80119f2:	81a3      	strh	r3, [r4, #12]
 80119f4:	f04f 30ff 	mov.w	r0, #4294967295
 80119f8:	e78e      	b.n	8011918 <__sflush_r+0x1c>
 80119fa:	4407      	add	r7, r0
 80119fc:	eba8 0800 	sub.w	r8, r8, r0
 8011a00:	e7e9      	b.n	80119d6 <__sflush_r+0xda>
 8011a02:	bf00      	nop
 8011a04:	20400001 	.word	0x20400001

08011a08 <_fflush_r>:
 8011a08:	b538      	push	{r3, r4, r5, lr}
 8011a0a:	690b      	ldr	r3, [r1, #16]
 8011a0c:	4605      	mov	r5, r0
 8011a0e:	460c      	mov	r4, r1
 8011a10:	b1db      	cbz	r3, 8011a4a <_fflush_r+0x42>
 8011a12:	b118      	cbz	r0, 8011a1c <_fflush_r+0x14>
 8011a14:	6983      	ldr	r3, [r0, #24]
 8011a16:	b90b      	cbnz	r3, 8011a1c <_fflush_r+0x14>
 8011a18:	f000 f872 	bl	8011b00 <__sinit>
 8011a1c:	4b0c      	ldr	r3, [pc, #48]	; (8011a50 <_fflush_r+0x48>)
 8011a1e:	429c      	cmp	r4, r3
 8011a20:	d109      	bne.n	8011a36 <_fflush_r+0x2e>
 8011a22:	686c      	ldr	r4, [r5, #4]
 8011a24:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011a28:	b17b      	cbz	r3, 8011a4a <_fflush_r+0x42>
 8011a2a:	4621      	mov	r1, r4
 8011a2c:	4628      	mov	r0, r5
 8011a2e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8011a32:	f7ff bf63 	b.w	80118fc <__sflush_r>
 8011a36:	4b07      	ldr	r3, [pc, #28]	; (8011a54 <_fflush_r+0x4c>)
 8011a38:	429c      	cmp	r4, r3
 8011a3a:	d101      	bne.n	8011a40 <_fflush_r+0x38>
 8011a3c:	68ac      	ldr	r4, [r5, #8]
 8011a3e:	e7f1      	b.n	8011a24 <_fflush_r+0x1c>
 8011a40:	4b05      	ldr	r3, [pc, #20]	; (8011a58 <_fflush_r+0x50>)
 8011a42:	429c      	cmp	r4, r3
 8011a44:	bf08      	it	eq
 8011a46:	68ec      	ldreq	r4, [r5, #12]
 8011a48:	e7ec      	b.n	8011a24 <_fflush_r+0x1c>
 8011a4a:	2000      	movs	r0, #0
 8011a4c:	bd38      	pop	{r3, r4, r5, pc}
 8011a4e:	bf00      	nop
 8011a50:	0801709c 	.word	0x0801709c
 8011a54:	080170bc 	.word	0x080170bc
 8011a58:	0801707c 	.word	0x0801707c

08011a5c <fflush>:
 8011a5c:	4601      	mov	r1, r0
 8011a5e:	b920      	cbnz	r0, 8011a6a <fflush+0xe>
 8011a60:	4b04      	ldr	r3, [pc, #16]	; (8011a74 <fflush+0x18>)
 8011a62:	4905      	ldr	r1, [pc, #20]	; (8011a78 <fflush+0x1c>)
 8011a64:	6818      	ldr	r0, [r3, #0]
 8011a66:	f000 b8d3 	b.w	8011c10 <_fwalk_reent>
 8011a6a:	4b04      	ldr	r3, [pc, #16]	; (8011a7c <fflush+0x20>)
 8011a6c:	6818      	ldr	r0, [r3, #0]
 8011a6e:	f7ff bfcb 	b.w	8011a08 <_fflush_r>
 8011a72:	bf00      	nop
 8011a74:	080170dc 	.word	0x080170dc
 8011a78:	08011a09 	.word	0x08011a09
 8011a7c:	20000018 	.word	0x20000018

08011a80 <std>:
 8011a80:	2300      	movs	r3, #0
 8011a82:	b510      	push	{r4, lr}
 8011a84:	4604      	mov	r4, r0
 8011a86:	e9c0 3300 	strd	r3, r3, [r0]
 8011a8a:	6083      	str	r3, [r0, #8]
 8011a8c:	8181      	strh	r1, [r0, #12]
 8011a8e:	6643      	str	r3, [r0, #100]	; 0x64
 8011a90:	81c2      	strh	r2, [r0, #14]
 8011a92:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8011a96:	6183      	str	r3, [r0, #24]
 8011a98:	4619      	mov	r1, r3
 8011a9a:	2208      	movs	r2, #8
 8011a9c:	305c      	adds	r0, #92	; 0x5c
 8011a9e:	f000 f968 	bl	8011d72 <memset>
 8011aa2:	4b05      	ldr	r3, [pc, #20]	; (8011ab8 <std+0x38>)
 8011aa4:	6263      	str	r3, [r4, #36]	; 0x24
 8011aa6:	4b05      	ldr	r3, [pc, #20]	; (8011abc <std+0x3c>)
 8011aa8:	62a3      	str	r3, [r4, #40]	; 0x28
 8011aaa:	4b05      	ldr	r3, [pc, #20]	; (8011ac0 <std+0x40>)
 8011aac:	62e3      	str	r3, [r4, #44]	; 0x2c
 8011aae:	4b05      	ldr	r3, [pc, #20]	; (8011ac4 <std+0x44>)
 8011ab0:	6224      	str	r4, [r4, #32]
 8011ab2:	6323      	str	r3, [r4, #48]	; 0x30
 8011ab4:	bd10      	pop	{r4, pc}
 8011ab6:	bf00      	nop
 8011ab8:	08013ae5 	.word	0x08013ae5
 8011abc:	08013b07 	.word	0x08013b07
 8011ac0:	08013b3f 	.word	0x08013b3f
 8011ac4:	08013b63 	.word	0x08013b63

08011ac8 <_cleanup_r>:
 8011ac8:	4901      	ldr	r1, [pc, #4]	; (8011ad0 <_cleanup_r+0x8>)
 8011aca:	f000 b8a1 	b.w	8011c10 <_fwalk_reent>
 8011ace:	bf00      	nop
 8011ad0:	08011a09 	.word	0x08011a09

08011ad4 <__sfmoreglue>:
 8011ad4:	b570      	push	{r4, r5, r6, lr}
 8011ad6:	1e4a      	subs	r2, r1, #1
 8011ad8:	2568      	movs	r5, #104	; 0x68
 8011ada:	4355      	muls	r5, r2
 8011adc:	460e      	mov	r6, r1
 8011ade:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8011ae2:	f000 f99d 	bl	8011e20 <_malloc_r>
 8011ae6:	4604      	mov	r4, r0
 8011ae8:	b140      	cbz	r0, 8011afc <__sfmoreglue+0x28>
 8011aea:	2100      	movs	r1, #0
 8011aec:	e9c0 1600 	strd	r1, r6, [r0]
 8011af0:	300c      	adds	r0, #12
 8011af2:	60a0      	str	r0, [r4, #8]
 8011af4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8011af8:	f000 f93b 	bl	8011d72 <memset>
 8011afc:	4620      	mov	r0, r4
 8011afe:	bd70      	pop	{r4, r5, r6, pc}

08011b00 <__sinit>:
 8011b00:	6983      	ldr	r3, [r0, #24]
 8011b02:	b510      	push	{r4, lr}
 8011b04:	4604      	mov	r4, r0
 8011b06:	bb33      	cbnz	r3, 8011b56 <__sinit+0x56>
 8011b08:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8011b0c:	6503      	str	r3, [r0, #80]	; 0x50
 8011b0e:	4b12      	ldr	r3, [pc, #72]	; (8011b58 <__sinit+0x58>)
 8011b10:	4a12      	ldr	r2, [pc, #72]	; (8011b5c <__sinit+0x5c>)
 8011b12:	681b      	ldr	r3, [r3, #0]
 8011b14:	6282      	str	r2, [r0, #40]	; 0x28
 8011b16:	4298      	cmp	r0, r3
 8011b18:	bf04      	itt	eq
 8011b1a:	2301      	moveq	r3, #1
 8011b1c:	6183      	streq	r3, [r0, #24]
 8011b1e:	f000 f81f 	bl	8011b60 <__sfp>
 8011b22:	6060      	str	r0, [r4, #4]
 8011b24:	4620      	mov	r0, r4
 8011b26:	f000 f81b 	bl	8011b60 <__sfp>
 8011b2a:	60a0      	str	r0, [r4, #8]
 8011b2c:	4620      	mov	r0, r4
 8011b2e:	f000 f817 	bl	8011b60 <__sfp>
 8011b32:	2200      	movs	r2, #0
 8011b34:	60e0      	str	r0, [r4, #12]
 8011b36:	2104      	movs	r1, #4
 8011b38:	6860      	ldr	r0, [r4, #4]
 8011b3a:	f7ff ffa1 	bl	8011a80 <std>
 8011b3e:	2201      	movs	r2, #1
 8011b40:	2109      	movs	r1, #9
 8011b42:	68a0      	ldr	r0, [r4, #8]
 8011b44:	f7ff ff9c 	bl	8011a80 <std>
 8011b48:	2202      	movs	r2, #2
 8011b4a:	2112      	movs	r1, #18
 8011b4c:	68e0      	ldr	r0, [r4, #12]
 8011b4e:	f7ff ff97 	bl	8011a80 <std>
 8011b52:	2301      	movs	r3, #1
 8011b54:	61a3      	str	r3, [r4, #24]
 8011b56:	bd10      	pop	{r4, pc}
 8011b58:	080170dc 	.word	0x080170dc
 8011b5c:	08011ac9 	.word	0x08011ac9

08011b60 <__sfp>:
 8011b60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011b62:	4b1b      	ldr	r3, [pc, #108]	; (8011bd0 <__sfp+0x70>)
 8011b64:	681e      	ldr	r6, [r3, #0]
 8011b66:	69b3      	ldr	r3, [r6, #24]
 8011b68:	4607      	mov	r7, r0
 8011b6a:	b913      	cbnz	r3, 8011b72 <__sfp+0x12>
 8011b6c:	4630      	mov	r0, r6
 8011b6e:	f7ff ffc7 	bl	8011b00 <__sinit>
 8011b72:	3648      	adds	r6, #72	; 0x48
 8011b74:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8011b78:	3b01      	subs	r3, #1
 8011b7a:	d503      	bpl.n	8011b84 <__sfp+0x24>
 8011b7c:	6833      	ldr	r3, [r6, #0]
 8011b7e:	b133      	cbz	r3, 8011b8e <__sfp+0x2e>
 8011b80:	6836      	ldr	r6, [r6, #0]
 8011b82:	e7f7      	b.n	8011b74 <__sfp+0x14>
 8011b84:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8011b88:	b16d      	cbz	r5, 8011ba6 <__sfp+0x46>
 8011b8a:	3468      	adds	r4, #104	; 0x68
 8011b8c:	e7f4      	b.n	8011b78 <__sfp+0x18>
 8011b8e:	2104      	movs	r1, #4
 8011b90:	4638      	mov	r0, r7
 8011b92:	f7ff ff9f 	bl	8011ad4 <__sfmoreglue>
 8011b96:	6030      	str	r0, [r6, #0]
 8011b98:	2800      	cmp	r0, #0
 8011b9a:	d1f1      	bne.n	8011b80 <__sfp+0x20>
 8011b9c:	230c      	movs	r3, #12
 8011b9e:	603b      	str	r3, [r7, #0]
 8011ba0:	4604      	mov	r4, r0
 8011ba2:	4620      	mov	r0, r4
 8011ba4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011ba6:	4b0b      	ldr	r3, [pc, #44]	; (8011bd4 <__sfp+0x74>)
 8011ba8:	6665      	str	r5, [r4, #100]	; 0x64
 8011baa:	e9c4 5500 	strd	r5, r5, [r4]
 8011bae:	60a5      	str	r5, [r4, #8]
 8011bb0:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8011bb4:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8011bb8:	2208      	movs	r2, #8
 8011bba:	4629      	mov	r1, r5
 8011bbc:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8011bc0:	f000 f8d7 	bl	8011d72 <memset>
 8011bc4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8011bc8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8011bcc:	e7e9      	b.n	8011ba2 <__sfp+0x42>
 8011bce:	bf00      	nop
 8011bd0:	080170dc 	.word	0x080170dc
 8011bd4:	ffff0001 	.word	0xffff0001

08011bd8 <_fwalk>:
 8011bd8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011bdc:	4688      	mov	r8, r1
 8011bde:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8011be2:	2600      	movs	r6, #0
 8011be4:	b914      	cbnz	r4, 8011bec <_fwalk+0x14>
 8011be6:	4630      	mov	r0, r6
 8011be8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011bec:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8011bf0:	3f01      	subs	r7, #1
 8011bf2:	d501      	bpl.n	8011bf8 <_fwalk+0x20>
 8011bf4:	6824      	ldr	r4, [r4, #0]
 8011bf6:	e7f5      	b.n	8011be4 <_fwalk+0xc>
 8011bf8:	89ab      	ldrh	r3, [r5, #12]
 8011bfa:	2b01      	cmp	r3, #1
 8011bfc:	d906      	bls.n	8011c0c <_fwalk+0x34>
 8011bfe:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8011c02:	3301      	adds	r3, #1
 8011c04:	d002      	beq.n	8011c0c <_fwalk+0x34>
 8011c06:	4628      	mov	r0, r5
 8011c08:	47c0      	blx	r8
 8011c0a:	4306      	orrs	r6, r0
 8011c0c:	3568      	adds	r5, #104	; 0x68
 8011c0e:	e7ef      	b.n	8011bf0 <_fwalk+0x18>

08011c10 <_fwalk_reent>:
 8011c10:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011c14:	4680      	mov	r8, r0
 8011c16:	4689      	mov	r9, r1
 8011c18:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8011c1c:	2600      	movs	r6, #0
 8011c1e:	b914      	cbnz	r4, 8011c26 <_fwalk_reent+0x16>
 8011c20:	4630      	mov	r0, r6
 8011c22:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011c26:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8011c2a:	3f01      	subs	r7, #1
 8011c2c:	d501      	bpl.n	8011c32 <_fwalk_reent+0x22>
 8011c2e:	6824      	ldr	r4, [r4, #0]
 8011c30:	e7f5      	b.n	8011c1e <_fwalk_reent+0xe>
 8011c32:	89ab      	ldrh	r3, [r5, #12]
 8011c34:	2b01      	cmp	r3, #1
 8011c36:	d907      	bls.n	8011c48 <_fwalk_reent+0x38>
 8011c38:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8011c3c:	3301      	adds	r3, #1
 8011c3e:	d003      	beq.n	8011c48 <_fwalk_reent+0x38>
 8011c40:	4629      	mov	r1, r5
 8011c42:	4640      	mov	r0, r8
 8011c44:	47c8      	blx	r9
 8011c46:	4306      	orrs	r6, r0
 8011c48:	3568      	adds	r5, #104	; 0x68
 8011c4a:	e7ee      	b.n	8011c2a <_fwalk_reent+0x1a>

08011c4c <__libc_init_array>:
 8011c4c:	b570      	push	{r4, r5, r6, lr}
 8011c4e:	4e0d      	ldr	r6, [pc, #52]	; (8011c84 <__libc_init_array+0x38>)
 8011c50:	4c0d      	ldr	r4, [pc, #52]	; (8011c88 <__libc_init_array+0x3c>)
 8011c52:	1ba4      	subs	r4, r4, r6
 8011c54:	10a4      	asrs	r4, r4, #2
 8011c56:	2500      	movs	r5, #0
 8011c58:	42a5      	cmp	r5, r4
 8011c5a:	d109      	bne.n	8011c70 <__libc_init_array+0x24>
 8011c5c:	4e0b      	ldr	r6, [pc, #44]	; (8011c8c <__libc_init_array+0x40>)
 8011c5e:	4c0c      	ldr	r4, [pc, #48]	; (8011c90 <__libc_init_array+0x44>)
 8011c60:	f005 f838 	bl	8016cd4 <_init>
 8011c64:	1ba4      	subs	r4, r4, r6
 8011c66:	10a4      	asrs	r4, r4, #2
 8011c68:	2500      	movs	r5, #0
 8011c6a:	42a5      	cmp	r5, r4
 8011c6c:	d105      	bne.n	8011c7a <__libc_init_array+0x2e>
 8011c6e:	bd70      	pop	{r4, r5, r6, pc}
 8011c70:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8011c74:	4798      	blx	r3
 8011c76:	3501      	adds	r5, #1
 8011c78:	e7ee      	b.n	8011c58 <__libc_init_array+0xc>
 8011c7a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8011c7e:	4798      	blx	r3
 8011c80:	3501      	adds	r5, #1
 8011c82:	e7f2      	b.n	8011c6a <__libc_init_array+0x1e>
 8011c84:	080173b8 	.word	0x080173b8
 8011c88:	080173b8 	.word	0x080173b8
 8011c8c:	080173b8 	.word	0x080173b8
 8011c90:	080173bc 	.word	0x080173bc

08011c94 <__swhatbuf_r>:
 8011c94:	b570      	push	{r4, r5, r6, lr}
 8011c96:	460e      	mov	r6, r1
 8011c98:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011c9c:	2900      	cmp	r1, #0
 8011c9e:	b096      	sub	sp, #88	; 0x58
 8011ca0:	4614      	mov	r4, r2
 8011ca2:	461d      	mov	r5, r3
 8011ca4:	da07      	bge.n	8011cb6 <__swhatbuf_r+0x22>
 8011ca6:	2300      	movs	r3, #0
 8011ca8:	602b      	str	r3, [r5, #0]
 8011caa:	89b3      	ldrh	r3, [r6, #12]
 8011cac:	061a      	lsls	r2, r3, #24
 8011cae:	d410      	bmi.n	8011cd2 <__swhatbuf_r+0x3e>
 8011cb0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8011cb4:	e00e      	b.n	8011cd4 <__swhatbuf_r+0x40>
 8011cb6:	466a      	mov	r2, sp
 8011cb8:	f003 fe66 	bl	8015988 <_fstat_r>
 8011cbc:	2800      	cmp	r0, #0
 8011cbe:	dbf2      	blt.n	8011ca6 <__swhatbuf_r+0x12>
 8011cc0:	9a01      	ldr	r2, [sp, #4]
 8011cc2:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8011cc6:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8011cca:	425a      	negs	r2, r3
 8011ccc:	415a      	adcs	r2, r3
 8011cce:	602a      	str	r2, [r5, #0]
 8011cd0:	e7ee      	b.n	8011cb0 <__swhatbuf_r+0x1c>
 8011cd2:	2340      	movs	r3, #64	; 0x40
 8011cd4:	2000      	movs	r0, #0
 8011cd6:	6023      	str	r3, [r4, #0]
 8011cd8:	b016      	add	sp, #88	; 0x58
 8011cda:	bd70      	pop	{r4, r5, r6, pc}

08011cdc <__smakebuf_r>:
 8011cdc:	898b      	ldrh	r3, [r1, #12]
 8011cde:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8011ce0:	079d      	lsls	r5, r3, #30
 8011ce2:	4606      	mov	r6, r0
 8011ce4:	460c      	mov	r4, r1
 8011ce6:	d507      	bpl.n	8011cf8 <__smakebuf_r+0x1c>
 8011ce8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8011cec:	6023      	str	r3, [r4, #0]
 8011cee:	6123      	str	r3, [r4, #16]
 8011cf0:	2301      	movs	r3, #1
 8011cf2:	6163      	str	r3, [r4, #20]
 8011cf4:	b002      	add	sp, #8
 8011cf6:	bd70      	pop	{r4, r5, r6, pc}
 8011cf8:	ab01      	add	r3, sp, #4
 8011cfa:	466a      	mov	r2, sp
 8011cfc:	f7ff ffca 	bl	8011c94 <__swhatbuf_r>
 8011d00:	9900      	ldr	r1, [sp, #0]
 8011d02:	4605      	mov	r5, r0
 8011d04:	4630      	mov	r0, r6
 8011d06:	f000 f88b 	bl	8011e20 <_malloc_r>
 8011d0a:	b948      	cbnz	r0, 8011d20 <__smakebuf_r+0x44>
 8011d0c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011d10:	059a      	lsls	r2, r3, #22
 8011d12:	d4ef      	bmi.n	8011cf4 <__smakebuf_r+0x18>
 8011d14:	f023 0303 	bic.w	r3, r3, #3
 8011d18:	f043 0302 	orr.w	r3, r3, #2
 8011d1c:	81a3      	strh	r3, [r4, #12]
 8011d1e:	e7e3      	b.n	8011ce8 <__smakebuf_r+0xc>
 8011d20:	4b0d      	ldr	r3, [pc, #52]	; (8011d58 <__smakebuf_r+0x7c>)
 8011d22:	62b3      	str	r3, [r6, #40]	; 0x28
 8011d24:	89a3      	ldrh	r3, [r4, #12]
 8011d26:	6020      	str	r0, [r4, #0]
 8011d28:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011d2c:	81a3      	strh	r3, [r4, #12]
 8011d2e:	9b00      	ldr	r3, [sp, #0]
 8011d30:	6163      	str	r3, [r4, #20]
 8011d32:	9b01      	ldr	r3, [sp, #4]
 8011d34:	6120      	str	r0, [r4, #16]
 8011d36:	b15b      	cbz	r3, 8011d50 <__smakebuf_r+0x74>
 8011d38:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8011d3c:	4630      	mov	r0, r6
 8011d3e:	f004 f95b 	bl	8015ff8 <_isatty_r>
 8011d42:	b128      	cbz	r0, 8011d50 <__smakebuf_r+0x74>
 8011d44:	89a3      	ldrh	r3, [r4, #12]
 8011d46:	f023 0303 	bic.w	r3, r3, #3
 8011d4a:	f043 0301 	orr.w	r3, r3, #1
 8011d4e:	81a3      	strh	r3, [r4, #12]
 8011d50:	89a3      	ldrh	r3, [r4, #12]
 8011d52:	431d      	orrs	r5, r3
 8011d54:	81a5      	strh	r5, [r4, #12]
 8011d56:	e7cd      	b.n	8011cf4 <__smakebuf_r+0x18>
 8011d58:	08011ac9 	.word	0x08011ac9

08011d5c <memcpy>:
 8011d5c:	b510      	push	{r4, lr}
 8011d5e:	1e43      	subs	r3, r0, #1
 8011d60:	440a      	add	r2, r1
 8011d62:	4291      	cmp	r1, r2
 8011d64:	d100      	bne.n	8011d68 <memcpy+0xc>
 8011d66:	bd10      	pop	{r4, pc}
 8011d68:	f811 4b01 	ldrb.w	r4, [r1], #1
 8011d6c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8011d70:	e7f7      	b.n	8011d62 <memcpy+0x6>

08011d72 <memset>:
 8011d72:	4402      	add	r2, r0
 8011d74:	4603      	mov	r3, r0
 8011d76:	4293      	cmp	r3, r2
 8011d78:	d100      	bne.n	8011d7c <memset+0xa>
 8011d7a:	4770      	bx	lr
 8011d7c:	f803 1b01 	strb.w	r1, [r3], #1
 8011d80:	e7f9      	b.n	8011d76 <memset+0x4>
	...

08011d84 <_free_r>:
 8011d84:	b538      	push	{r3, r4, r5, lr}
 8011d86:	4605      	mov	r5, r0
 8011d88:	2900      	cmp	r1, #0
 8011d8a:	d045      	beq.n	8011e18 <_free_r+0x94>
 8011d8c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8011d90:	1f0c      	subs	r4, r1, #4
 8011d92:	2b00      	cmp	r3, #0
 8011d94:	bfb8      	it	lt
 8011d96:	18e4      	addlt	r4, r4, r3
 8011d98:	f004 f9a5 	bl	80160e6 <__malloc_lock>
 8011d9c:	4a1f      	ldr	r2, [pc, #124]	; (8011e1c <_free_r+0x98>)
 8011d9e:	6813      	ldr	r3, [r2, #0]
 8011da0:	4610      	mov	r0, r2
 8011da2:	b933      	cbnz	r3, 8011db2 <_free_r+0x2e>
 8011da4:	6063      	str	r3, [r4, #4]
 8011da6:	6014      	str	r4, [r2, #0]
 8011da8:	4628      	mov	r0, r5
 8011daa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8011dae:	f004 b99b 	b.w	80160e8 <__malloc_unlock>
 8011db2:	42a3      	cmp	r3, r4
 8011db4:	d90c      	bls.n	8011dd0 <_free_r+0x4c>
 8011db6:	6821      	ldr	r1, [r4, #0]
 8011db8:	1862      	adds	r2, r4, r1
 8011dba:	4293      	cmp	r3, r2
 8011dbc:	bf04      	itt	eq
 8011dbe:	681a      	ldreq	r2, [r3, #0]
 8011dc0:	685b      	ldreq	r3, [r3, #4]
 8011dc2:	6063      	str	r3, [r4, #4]
 8011dc4:	bf04      	itt	eq
 8011dc6:	1852      	addeq	r2, r2, r1
 8011dc8:	6022      	streq	r2, [r4, #0]
 8011dca:	6004      	str	r4, [r0, #0]
 8011dcc:	e7ec      	b.n	8011da8 <_free_r+0x24>
 8011dce:	4613      	mov	r3, r2
 8011dd0:	685a      	ldr	r2, [r3, #4]
 8011dd2:	b10a      	cbz	r2, 8011dd8 <_free_r+0x54>
 8011dd4:	42a2      	cmp	r2, r4
 8011dd6:	d9fa      	bls.n	8011dce <_free_r+0x4a>
 8011dd8:	6819      	ldr	r1, [r3, #0]
 8011dda:	1858      	adds	r0, r3, r1
 8011ddc:	42a0      	cmp	r0, r4
 8011dde:	d10b      	bne.n	8011df8 <_free_r+0x74>
 8011de0:	6820      	ldr	r0, [r4, #0]
 8011de2:	4401      	add	r1, r0
 8011de4:	1858      	adds	r0, r3, r1
 8011de6:	4282      	cmp	r2, r0
 8011de8:	6019      	str	r1, [r3, #0]
 8011dea:	d1dd      	bne.n	8011da8 <_free_r+0x24>
 8011dec:	6810      	ldr	r0, [r2, #0]
 8011dee:	6852      	ldr	r2, [r2, #4]
 8011df0:	605a      	str	r2, [r3, #4]
 8011df2:	4401      	add	r1, r0
 8011df4:	6019      	str	r1, [r3, #0]
 8011df6:	e7d7      	b.n	8011da8 <_free_r+0x24>
 8011df8:	d902      	bls.n	8011e00 <_free_r+0x7c>
 8011dfa:	230c      	movs	r3, #12
 8011dfc:	602b      	str	r3, [r5, #0]
 8011dfe:	e7d3      	b.n	8011da8 <_free_r+0x24>
 8011e00:	6820      	ldr	r0, [r4, #0]
 8011e02:	1821      	adds	r1, r4, r0
 8011e04:	428a      	cmp	r2, r1
 8011e06:	bf04      	itt	eq
 8011e08:	6811      	ldreq	r1, [r2, #0]
 8011e0a:	6852      	ldreq	r2, [r2, #4]
 8011e0c:	6062      	str	r2, [r4, #4]
 8011e0e:	bf04      	itt	eq
 8011e10:	1809      	addeq	r1, r1, r0
 8011e12:	6021      	streq	r1, [r4, #0]
 8011e14:	605c      	str	r4, [r3, #4]
 8011e16:	e7c7      	b.n	8011da8 <_free_r+0x24>
 8011e18:	bd38      	pop	{r3, r4, r5, pc}
 8011e1a:	bf00      	nop
 8011e1c:	20001500 	.word	0x20001500

08011e20 <_malloc_r>:
 8011e20:	b570      	push	{r4, r5, r6, lr}
 8011e22:	1ccd      	adds	r5, r1, #3
 8011e24:	f025 0503 	bic.w	r5, r5, #3
 8011e28:	3508      	adds	r5, #8
 8011e2a:	2d0c      	cmp	r5, #12
 8011e2c:	bf38      	it	cc
 8011e2e:	250c      	movcc	r5, #12
 8011e30:	2d00      	cmp	r5, #0
 8011e32:	4606      	mov	r6, r0
 8011e34:	db01      	blt.n	8011e3a <_malloc_r+0x1a>
 8011e36:	42a9      	cmp	r1, r5
 8011e38:	d903      	bls.n	8011e42 <_malloc_r+0x22>
 8011e3a:	230c      	movs	r3, #12
 8011e3c:	6033      	str	r3, [r6, #0]
 8011e3e:	2000      	movs	r0, #0
 8011e40:	bd70      	pop	{r4, r5, r6, pc}
 8011e42:	f004 f950 	bl	80160e6 <__malloc_lock>
 8011e46:	4a21      	ldr	r2, [pc, #132]	; (8011ecc <_malloc_r+0xac>)
 8011e48:	6814      	ldr	r4, [r2, #0]
 8011e4a:	4621      	mov	r1, r4
 8011e4c:	b991      	cbnz	r1, 8011e74 <_malloc_r+0x54>
 8011e4e:	4c20      	ldr	r4, [pc, #128]	; (8011ed0 <_malloc_r+0xb0>)
 8011e50:	6823      	ldr	r3, [r4, #0]
 8011e52:	b91b      	cbnz	r3, 8011e5c <_malloc_r+0x3c>
 8011e54:	4630      	mov	r0, r6
 8011e56:	f001 fd0f 	bl	8013878 <_sbrk_r>
 8011e5a:	6020      	str	r0, [r4, #0]
 8011e5c:	4629      	mov	r1, r5
 8011e5e:	4630      	mov	r0, r6
 8011e60:	f001 fd0a 	bl	8013878 <_sbrk_r>
 8011e64:	1c43      	adds	r3, r0, #1
 8011e66:	d124      	bne.n	8011eb2 <_malloc_r+0x92>
 8011e68:	230c      	movs	r3, #12
 8011e6a:	6033      	str	r3, [r6, #0]
 8011e6c:	4630      	mov	r0, r6
 8011e6e:	f004 f93b 	bl	80160e8 <__malloc_unlock>
 8011e72:	e7e4      	b.n	8011e3e <_malloc_r+0x1e>
 8011e74:	680b      	ldr	r3, [r1, #0]
 8011e76:	1b5b      	subs	r3, r3, r5
 8011e78:	d418      	bmi.n	8011eac <_malloc_r+0x8c>
 8011e7a:	2b0b      	cmp	r3, #11
 8011e7c:	d90f      	bls.n	8011e9e <_malloc_r+0x7e>
 8011e7e:	600b      	str	r3, [r1, #0]
 8011e80:	50cd      	str	r5, [r1, r3]
 8011e82:	18cc      	adds	r4, r1, r3
 8011e84:	4630      	mov	r0, r6
 8011e86:	f004 f92f 	bl	80160e8 <__malloc_unlock>
 8011e8a:	f104 000b 	add.w	r0, r4, #11
 8011e8e:	1d23      	adds	r3, r4, #4
 8011e90:	f020 0007 	bic.w	r0, r0, #7
 8011e94:	1ac3      	subs	r3, r0, r3
 8011e96:	d0d3      	beq.n	8011e40 <_malloc_r+0x20>
 8011e98:	425a      	negs	r2, r3
 8011e9a:	50e2      	str	r2, [r4, r3]
 8011e9c:	e7d0      	b.n	8011e40 <_malloc_r+0x20>
 8011e9e:	428c      	cmp	r4, r1
 8011ea0:	684b      	ldr	r3, [r1, #4]
 8011ea2:	bf16      	itet	ne
 8011ea4:	6063      	strne	r3, [r4, #4]
 8011ea6:	6013      	streq	r3, [r2, #0]
 8011ea8:	460c      	movne	r4, r1
 8011eaa:	e7eb      	b.n	8011e84 <_malloc_r+0x64>
 8011eac:	460c      	mov	r4, r1
 8011eae:	6849      	ldr	r1, [r1, #4]
 8011eb0:	e7cc      	b.n	8011e4c <_malloc_r+0x2c>
 8011eb2:	1cc4      	adds	r4, r0, #3
 8011eb4:	f024 0403 	bic.w	r4, r4, #3
 8011eb8:	42a0      	cmp	r0, r4
 8011eba:	d005      	beq.n	8011ec8 <_malloc_r+0xa8>
 8011ebc:	1a21      	subs	r1, r4, r0
 8011ebe:	4630      	mov	r0, r6
 8011ec0:	f001 fcda 	bl	8013878 <_sbrk_r>
 8011ec4:	3001      	adds	r0, #1
 8011ec6:	d0cf      	beq.n	8011e68 <_malloc_r+0x48>
 8011ec8:	6025      	str	r5, [r4, #0]
 8011eca:	e7db      	b.n	8011e84 <_malloc_r+0x64>
 8011ecc:	20001500 	.word	0x20001500
 8011ed0:	20001504 	.word	0x20001504

08011ed4 <__sfputc_r>:
 8011ed4:	6893      	ldr	r3, [r2, #8]
 8011ed6:	3b01      	subs	r3, #1
 8011ed8:	2b00      	cmp	r3, #0
 8011eda:	b410      	push	{r4}
 8011edc:	6093      	str	r3, [r2, #8]
 8011ede:	da08      	bge.n	8011ef2 <__sfputc_r+0x1e>
 8011ee0:	6994      	ldr	r4, [r2, #24]
 8011ee2:	42a3      	cmp	r3, r4
 8011ee4:	db01      	blt.n	8011eea <__sfputc_r+0x16>
 8011ee6:	290a      	cmp	r1, #10
 8011ee8:	d103      	bne.n	8011ef2 <__sfputc_r+0x1e>
 8011eea:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011eee:	f002 be25 	b.w	8014b3c <__swbuf_r>
 8011ef2:	6813      	ldr	r3, [r2, #0]
 8011ef4:	1c58      	adds	r0, r3, #1
 8011ef6:	6010      	str	r0, [r2, #0]
 8011ef8:	7019      	strb	r1, [r3, #0]
 8011efa:	4608      	mov	r0, r1
 8011efc:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011f00:	4770      	bx	lr

08011f02 <__sfputs_r>:
 8011f02:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011f04:	4606      	mov	r6, r0
 8011f06:	460f      	mov	r7, r1
 8011f08:	4614      	mov	r4, r2
 8011f0a:	18d5      	adds	r5, r2, r3
 8011f0c:	42ac      	cmp	r4, r5
 8011f0e:	d101      	bne.n	8011f14 <__sfputs_r+0x12>
 8011f10:	2000      	movs	r0, #0
 8011f12:	e007      	b.n	8011f24 <__sfputs_r+0x22>
 8011f14:	463a      	mov	r2, r7
 8011f16:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011f1a:	4630      	mov	r0, r6
 8011f1c:	f7ff ffda 	bl	8011ed4 <__sfputc_r>
 8011f20:	1c43      	adds	r3, r0, #1
 8011f22:	d1f3      	bne.n	8011f0c <__sfputs_r+0xa>
 8011f24:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08011f28 <_vfiprintf_r>:
 8011f28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011f2c:	460c      	mov	r4, r1
 8011f2e:	b09d      	sub	sp, #116	; 0x74
 8011f30:	4617      	mov	r7, r2
 8011f32:	461d      	mov	r5, r3
 8011f34:	4606      	mov	r6, r0
 8011f36:	b118      	cbz	r0, 8011f40 <_vfiprintf_r+0x18>
 8011f38:	6983      	ldr	r3, [r0, #24]
 8011f3a:	b90b      	cbnz	r3, 8011f40 <_vfiprintf_r+0x18>
 8011f3c:	f7ff fde0 	bl	8011b00 <__sinit>
 8011f40:	4b7c      	ldr	r3, [pc, #496]	; (8012134 <_vfiprintf_r+0x20c>)
 8011f42:	429c      	cmp	r4, r3
 8011f44:	d158      	bne.n	8011ff8 <_vfiprintf_r+0xd0>
 8011f46:	6874      	ldr	r4, [r6, #4]
 8011f48:	89a3      	ldrh	r3, [r4, #12]
 8011f4a:	0718      	lsls	r0, r3, #28
 8011f4c:	d55e      	bpl.n	801200c <_vfiprintf_r+0xe4>
 8011f4e:	6923      	ldr	r3, [r4, #16]
 8011f50:	2b00      	cmp	r3, #0
 8011f52:	d05b      	beq.n	801200c <_vfiprintf_r+0xe4>
 8011f54:	2300      	movs	r3, #0
 8011f56:	9309      	str	r3, [sp, #36]	; 0x24
 8011f58:	2320      	movs	r3, #32
 8011f5a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8011f5e:	2330      	movs	r3, #48	; 0x30
 8011f60:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8011f64:	9503      	str	r5, [sp, #12]
 8011f66:	f04f 0b01 	mov.w	fp, #1
 8011f6a:	46b8      	mov	r8, r7
 8011f6c:	4645      	mov	r5, r8
 8011f6e:	f815 3b01 	ldrb.w	r3, [r5], #1
 8011f72:	b10b      	cbz	r3, 8011f78 <_vfiprintf_r+0x50>
 8011f74:	2b25      	cmp	r3, #37	; 0x25
 8011f76:	d154      	bne.n	8012022 <_vfiprintf_r+0xfa>
 8011f78:	ebb8 0a07 	subs.w	sl, r8, r7
 8011f7c:	d00b      	beq.n	8011f96 <_vfiprintf_r+0x6e>
 8011f7e:	4653      	mov	r3, sl
 8011f80:	463a      	mov	r2, r7
 8011f82:	4621      	mov	r1, r4
 8011f84:	4630      	mov	r0, r6
 8011f86:	f7ff ffbc 	bl	8011f02 <__sfputs_r>
 8011f8a:	3001      	adds	r0, #1
 8011f8c:	f000 80c2 	beq.w	8012114 <_vfiprintf_r+0x1ec>
 8011f90:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011f92:	4453      	add	r3, sl
 8011f94:	9309      	str	r3, [sp, #36]	; 0x24
 8011f96:	f898 3000 	ldrb.w	r3, [r8]
 8011f9a:	2b00      	cmp	r3, #0
 8011f9c:	f000 80ba 	beq.w	8012114 <_vfiprintf_r+0x1ec>
 8011fa0:	2300      	movs	r3, #0
 8011fa2:	f04f 32ff 	mov.w	r2, #4294967295
 8011fa6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8011faa:	9304      	str	r3, [sp, #16]
 8011fac:	9307      	str	r3, [sp, #28]
 8011fae:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8011fb2:	931a      	str	r3, [sp, #104]	; 0x68
 8011fb4:	46a8      	mov	r8, r5
 8011fb6:	2205      	movs	r2, #5
 8011fb8:	f818 1b01 	ldrb.w	r1, [r8], #1
 8011fbc:	485e      	ldr	r0, [pc, #376]	; (8012138 <_vfiprintf_r+0x210>)
 8011fbe:	f7f6 f847 	bl	8008050 <memchr>
 8011fc2:	9b04      	ldr	r3, [sp, #16]
 8011fc4:	bb78      	cbnz	r0, 8012026 <_vfiprintf_r+0xfe>
 8011fc6:	06d9      	lsls	r1, r3, #27
 8011fc8:	bf44      	itt	mi
 8011fca:	2220      	movmi	r2, #32
 8011fcc:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8011fd0:	071a      	lsls	r2, r3, #28
 8011fd2:	bf44      	itt	mi
 8011fd4:	222b      	movmi	r2, #43	; 0x2b
 8011fd6:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8011fda:	782a      	ldrb	r2, [r5, #0]
 8011fdc:	2a2a      	cmp	r2, #42	; 0x2a
 8011fde:	d02a      	beq.n	8012036 <_vfiprintf_r+0x10e>
 8011fe0:	9a07      	ldr	r2, [sp, #28]
 8011fe2:	46a8      	mov	r8, r5
 8011fe4:	2000      	movs	r0, #0
 8011fe6:	250a      	movs	r5, #10
 8011fe8:	4641      	mov	r1, r8
 8011fea:	f811 3b01 	ldrb.w	r3, [r1], #1
 8011fee:	3b30      	subs	r3, #48	; 0x30
 8011ff0:	2b09      	cmp	r3, #9
 8011ff2:	d969      	bls.n	80120c8 <_vfiprintf_r+0x1a0>
 8011ff4:	b360      	cbz	r0, 8012050 <_vfiprintf_r+0x128>
 8011ff6:	e024      	b.n	8012042 <_vfiprintf_r+0x11a>
 8011ff8:	4b50      	ldr	r3, [pc, #320]	; (801213c <_vfiprintf_r+0x214>)
 8011ffa:	429c      	cmp	r4, r3
 8011ffc:	d101      	bne.n	8012002 <_vfiprintf_r+0xda>
 8011ffe:	68b4      	ldr	r4, [r6, #8]
 8012000:	e7a2      	b.n	8011f48 <_vfiprintf_r+0x20>
 8012002:	4b4f      	ldr	r3, [pc, #316]	; (8012140 <_vfiprintf_r+0x218>)
 8012004:	429c      	cmp	r4, r3
 8012006:	bf08      	it	eq
 8012008:	68f4      	ldreq	r4, [r6, #12]
 801200a:	e79d      	b.n	8011f48 <_vfiprintf_r+0x20>
 801200c:	4621      	mov	r1, r4
 801200e:	4630      	mov	r0, r6
 8012010:	f002 fdf8 	bl	8014c04 <__swsetup_r>
 8012014:	2800      	cmp	r0, #0
 8012016:	d09d      	beq.n	8011f54 <_vfiprintf_r+0x2c>
 8012018:	f04f 30ff 	mov.w	r0, #4294967295
 801201c:	b01d      	add	sp, #116	; 0x74
 801201e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012022:	46a8      	mov	r8, r5
 8012024:	e7a2      	b.n	8011f6c <_vfiprintf_r+0x44>
 8012026:	4a44      	ldr	r2, [pc, #272]	; (8012138 <_vfiprintf_r+0x210>)
 8012028:	1a80      	subs	r0, r0, r2
 801202a:	fa0b f000 	lsl.w	r0, fp, r0
 801202e:	4318      	orrs	r0, r3
 8012030:	9004      	str	r0, [sp, #16]
 8012032:	4645      	mov	r5, r8
 8012034:	e7be      	b.n	8011fb4 <_vfiprintf_r+0x8c>
 8012036:	9a03      	ldr	r2, [sp, #12]
 8012038:	1d11      	adds	r1, r2, #4
 801203a:	6812      	ldr	r2, [r2, #0]
 801203c:	9103      	str	r1, [sp, #12]
 801203e:	2a00      	cmp	r2, #0
 8012040:	db01      	blt.n	8012046 <_vfiprintf_r+0x11e>
 8012042:	9207      	str	r2, [sp, #28]
 8012044:	e004      	b.n	8012050 <_vfiprintf_r+0x128>
 8012046:	4252      	negs	r2, r2
 8012048:	f043 0302 	orr.w	r3, r3, #2
 801204c:	9207      	str	r2, [sp, #28]
 801204e:	9304      	str	r3, [sp, #16]
 8012050:	f898 3000 	ldrb.w	r3, [r8]
 8012054:	2b2e      	cmp	r3, #46	; 0x2e
 8012056:	d10e      	bne.n	8012076 <_vfiprintf_r+0x14e>
 8012058:	f898 3001 	ldrb.w	r3, [r8, #1]
 801205c:	2b2a      	cmp	r3, #42	; 0x2a
 801205e:	d138      	bne.n	80120d2 <_vfiprintf_r+0x1aa>
 8012060:	9b03      	ldr	r3, [sp, #12]
 8012062:	1d1a      	adds	r2, r3, #4
 8012064:	681b      	ldr	r3, [r3, #0]
 8012066:	9203      	str	r2, [sp, #12]
 8012068:	2b00      	cmp	r3, #0
 801206a:	bfb8      	it	lt
 801206c:	f04f 33ff 	movlt.w	r3, #4294967295
 8012070:	f108 0802 	add.w	r8, r8, #2
 8012074:	9305      	str	r3, [sp, #20]
 8012076:	4d33      	ldr	r5, [pc, #204]	; (8012144 <_vfiprintf_r+0x21c>)
 8012078:	f898 1000 	ldrb.w	r1, [r8]
 801207c:	2203      	movs	r2, #3
 801207e:	4628      	mov	r0, r5
 8012080:	f7f5 ffe6 	bl	8008050 <memchr>
 8012084:	b140      	cbz	r0, 8012098 <_vfiprintf_r+0x170>
 8012086:	2340      	movs	r3, #64	; 0x40
 8012088:	1b40      	subs	r0, r0, r5
 801208a:	fa03 f000 	lsl.w	r0, r3, r0
 801208e:	9b04      	ldr	r3, [sp, #16]
 8012090:	4303      	orrs	r3, r0
 8012092:	f108 0801 	add.w	r8, r8, #1
 8012096:	9304      	str	r3, [sp, #16]
 8012098:	f898 1000 	ldrb.w	r1, [r8]
 801209c:	482a      	ldr	r0, [pc, #168]	; (8012148 <_vfiprintf_r+0x220>)
 801209e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80120a2:	2206      	movs	r2, #6
 80120a4:	f108 0701 	add.w	r7, r8, #1
 80120a8:	f7f5 ffd2 	bl	8008050 <memchr>
 80120ac:	2800      	cmp	r0, #0
 80120ae:	d037      	beq.n	8012120 <_vfiprintf_r+0x1f8>
 80120b0:	4b26      	ldr	r3, [pc, #152]	; (801214c <_vfiprintf_r+0x224>)
 80120b2:	bb1b      	cbnz	r3, 80120fc <_vfiprintf_r+0x1d4>
 80120b4:	9b03      	ldr	r3, [sp, #12]
 80120b6:	3307      	adds	r3, #7
 80120b8:	f023 0307 	bic.w	r3, r3, #7
 80120bc:	3308      	adds	r3, #8
 80120be:	9303      	str	r3, [sp, #12]
 80120c0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80120c2:	444b      	add	r3, r9
 80120c4:	9309      	str	r3, [sp, #36]	; 0x24
 80120c6:	e750      	b.n	8011f6a <_vfiprintf_r+0x42>
 80120c8:	fb05 3202 	mla	r2, r5, r2, r3
 80120cc:	2001      	movs	r0, #1
 80120ce:	4688      	mov	r8, r1
 80120d0:	e78a      	b.n	8011fe8 <_vfiprintf_r+0xc0>
 80120d2:	2300      	movs	r3, #0
 80120d4:	f108 0801 	add.w	r8, r8, #1
 80120d8:	9305      	str	r3, [sp, #20]
 80120da:	4619      	mov	r1, r3
 80120dc:	250a      	movs	r5, #10
 80120de:	4640      	mov	r0, r8
 80120e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80120e4:	3a30      	subs	r2, #48	; 0x30
 80120e6:	2a09      	cmp	r2, #9
 80120e8:	d903      	bls.n	80120f2 <_vfiprintf_r+0x1ca>
 80120ea:	2b00      	cmp	r3, #0
 80120ec:	d0c3      	beq.n	8012076 <_vfiprintf_r+0x14e>
 80120ee:	9105      	str	r1, [sp, #20]
 80120f0:	e7c1      	b.n	8012076 <_vfiprintf_r+0x14e>
 80120f2:	fb05 2101 	mla	r1, r5, r1, r2
 80120f6:	2301      	movs	r3, #1
 80120f8:	4680      	mov	r8, r0
 80120fa:	e7f0      	b.n	80120de <_vfiprintf_r+0x1b6>
 80120fc:	ab03      	add	r3, sp, #12
 80120fe:	9300      	str	r3, [sp, #0]
 8012100:	4622      	mov	r2, r4
 8012102:	4b13      	ldr	r3, [pc, #76]	; (8012150 <_vfiprintf_r+0x228>)
 8012104:	a904      	add	r1, sp, #16
 8012106:	4630      	mov	r0, r6
 8012108:	f000 f8b8 	bl	801227c <_printf_float>
 801210c:	f1b0 3fff 	cmp.w	r0, #4294967295
 8012110:	4681      	mov	r9, r0
 8012112:	d1d5      	bne.n	80120c0 <_vfiprintf_r+0x198>
 8012114:	89a3      	ldrh	r3, [r4, #12]
 8012116:	065b      	lsls	r3, r3, #25
 8012118:	f53f af7e 	bmi.w	8012018 <_vfiprintf_r+0xf0>
 801211c:	9809      	ldr	r0, [sp, #36]	; 0x24
 801211e:	e77d      	b.n	801201c <_vfiprintf_r+0xf4>
 8012120:	ab03      	add	r3, sp, #12
 8012122:	9300      	str	r3, [sp, #0]
 8012124:	4622      	mov	r2, r4
 8012126:	4b0a      	ldr	r3, [pc, #40]	; (8012150 <_vfiprintf_r+0x228>)
 8012128:	a904      	add	r1, sp, #16
 801212a:	4630      	mov	r0, r6
 801212c:	f000 fb5c 	bl	80127e8 <_printf_i>
 8012130:	e7ec      	b.n	801210c <_vfiprintf_r+0x1e4>
 8012132:	bf00      	nop
 8012134:	0801709c 	.word	0x0801709c
 8012138:	080170e0 	.word	0x080170e0
 801213c:	080170bc 	.word	0x080170bc
 8012140:	0801707c 	.word	0x0801707c
 8012144:	080170e6 	.word	0x080170e6
 8012148:	080170ea 	.word	0x080170ea
 801214c:	0801227d 	.word	0x0801227d
 8012150:	08011f03 	.word	0x08011f03

08012154 <__cvt>:
 8012154:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8012158:	ec55 4b10 	vmov	r4, r5, d0
 801215c:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 801215e:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8012162:	2d00      	cmp	r5, #0
 8012164:	460e      	mov	r6, r1
 8012166:	4691      	mov	r9, r2
 8012168:	4619      	mov	r1, r3
 801216a:	bfb8      	it	lt
 801216c:	4622      	movlt	r2, r4
 801216e:	462b      	mov	r3, r5
 8012170:	f027 0720 	bic.w	r7, r7, #32
 8012174:	bfbb      	ittet	lt
 8012176:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 801217a:	461d      	movlt	r5, r3
 801217c:	2300      	movge	r3, #0
 801217e:	232d      	movlt	r3, #45	; 0x2d
 8012180:	bfb8      	it	lt
 8012182:	4614      	movlt	r4, r2
 8012184:	2f46      	cmp	r7, #70	; 0x46
 8012186:	700b      	strb	r3, [r1, #0]
 8012188:	d004      	beq.n	8012194 <__cvt+0x40>
 801218a:	2f45      	cmp	r7, #69	; 0x45
 801218c:	d100      	bne.n	8012190 <__cvt+0x3c>
 801218e:	3601      	adds	r6, #1
 8012190:	2102      	movs	r1, #2
 8012192:	e000      	b.n	8012196 <__cvt+0x42>
 8012194:	2103      	movs	r1, #3
 8012196:	ab03      	add	r3, sp, #12
 8012198:	9301      	str	r3, [sp, #4]
 801219a:	ab02      	add	r3, sp, #8
 801219c:	9300      	str	r3, [sp, #0]
 801219e:	4632      	mov	r2, r6
 80121a0:	4653      	mov	r3, sl
 80121a2:	ec45 4b10 	vmov	d0, r4, r5
 80121a6:	f002 fe37 	bl	8014e18 <_dtoa_r>
 80121aa:	2f47      	cmp	r7, #71	; 0x47
 80121ac:	4680      	mov	r8, r0
 80121ae:	d102      	bne.n	80121b6 <__cvt+0x62>
 80121b0:	f019 0f01 	tst.w	r9, #1
 80121b4:	d026      	beq.n	8012204 <__cvt+0xb0>
 80121b6:	2f46      	cmp	r7, #70	; 0x46
 80121b8:	eb08 0906 	add.w	r9, r8, r6
 80121bc:	d111      	bne.n	80121e2 <__cvt+0x8e>
 80121be:	f898 3000 	ldrb.w	r3, [r8]
 80121c2:	2b30      	cmp	r3, #48	; 0x30
 80121c4:	d10a      	bne.n	80121dc <__cvt+0x88>
 80121c6:	2200      	movs	r2, #0
 80121c8:	2300      	movs	r3, #0
 80121ca:	4620      	mov	r0, r4
 80121cc:	4629      	mov	r1, r5
 80121ce:	f7f6 fbb3 	bl	8008938 <__aeabi_dcmpeq>
 80121d2:	b918      	cbnz	r0, 80121dc <__cvt+0x88>
 80121d4:	f1c6 0601 	rsb	r6, r6, #1
 80121d8:	f8ca 6000 	str.w	r6, [sl]
 80121dc:	f8da 3000 	ldr.w	r3, [sl]
 80121e0:	4499      	add	r9, r3
 80121e2:	2200      	movs	r2, #0
 80121e4:	2300      	movs	r3, #0
 80121e6:	4620      	mov	r0, r4
 80121e8:	4629      	mov	r1, r5
 80121ea:	f7f6 fba5 	bl	8008938 <__aeabi_dcmpeq>
 80121ee:	b938      	cbnz	r0, 8012200 <__cvt+0xac>
 80121f0:	2230      	movs	r2, #48	; 0x30
 80121f2:	9b03      	ldr	r3, [sp, #12]
 80121f4:	454b      	cmp	r3, r9
 80121f6:	d205      	bcs.n	8012204 <__cvt+0xb0>
 80121f8:	1c59      	adds	r1, r3, #1
 80121fa:	9103      	str	r1, [sp, #12]
 80121fc:	701a      	strb	r2, [r3, #0]
 80121fe:	e7f8      	b.n	80121f2 <__cvt+0x9e>
 8012200:	f8cd 900c 	str.w	r9, [sp, #12]
 8012204:	9b03      	ldr	r3, [sp, #12]
 8012206:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8012208:	eba3 0308 	sub.w	r3, r3, r8
 801220c:	4640      	mov	r0, r8
 801220e:	6013      	str	r3, [r2, #0]
 8012210:	b004      	add	sp, #16
 8012212:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08012216 <__exponent>:
 8012216:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8012218:	2900      	cmp	r1, #0
 801221a:	4604      	mov	r4, r0
 801221c:	bfba      	itte	lt
 801221e:	4249      	neglt	r1, r1
 8012220:	232d      	movlt	r3, #45	; 0x2d
 8012222:	232b      	movge	r3, #43	; 0x2b
 8012224:	2909      	cmp	r1, #9
 8012226:	f804 2b02 	strb.w	r2, [r4], #2
 801222a:	7043      	strb	r3, [r0, #1]
 801222c:	dd20      	ble.n	8012270 <__exponent+0x5a>
 801222e:	f10d 0307 	add.w	r3, sp, #7
 8012232:	461f      	mov	r7, r3
 8012234:	260a      	movs	r6, #10
 8012236:	fb91 f5f6 	sdiv	r5, r1, r6
 801223a:	fb06 1115 	mls	r1, r6, r5, r1
 801223e:	3130      	adds	r1, #48	; 0x30
 8012240:	2d09      	cmp	r5, #9
 8012242:	f803 1c01 	strb.w	r1, [r3, #-1]
 8012246:	f103 32ff 	add.w	r2, r3, #4294967295
 801224a:	4629      	mov	r1, r5
 801224c:	dc09      	bgt.n	8012262 <__exponent+0x4c>
 801224e:	3130      	adds	r1, #48	; 0x30
 8012250:	3b02      	subs	r3, #2
 8012252:	f802 1c01 	strb.w	r1, [r2, #-1]
 8012256:	42bb      	cmp	r3, r7
 8012258:	4622      	mov	r2, r4
 801225a:	d304      	bcc.n	8012266 <__exponent+0x50>
 801225c:	1a10      	subs	r0, r2, r0
 801225e:	b003      	add	sp, #12
 8012260:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012262:	4613      	mov	r3, r2
 8012264:	e7e7      	b.n	8012236 <__exponent+0x20>
 8012266:	f813 2b01 	ldrb.w	r2, [r3], #1
 801226a:	f804 2b01 	strb.w	r2, [r4], #1
 801226e:	e7f2      	b.n	8012256 <__exponent+0x40>
 8012270:	2330      	movs	r3, #48	; 0x30
 8012272:	4419      	add	r1, r3
 8012274:	7083      	strb	r3, [r0, #2]
 8012276:	1d02      	adds	r2, r0, #4
 8012278:	70c1      	strb	r1, [r0, #3]
 801227a:	e7ef      	b.n	801225c <__exponent+0x46>

0801227c <_printf_float>:
 801227c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012280:	b08d      	sub	sp, #52	; 0x34
 8012282:	460c      	mov	r4, r1
 8012284:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 8012288:	4616      	mov	r6, r2
 801228a:	461f      	mov	r7, r3
 801228c:	4605      	mov	r5, r0
 801228e:	f003 fed7 	bl	8016040 <_localeconv_r>
 8012292:	6803      	ldr	r3, [r0, #0]
 8012294:	9304      	str	r3, [sp, #16]
 8012296:	4618      	mov	r0, r3
 8012298:	f7f5 fed2 	bl	8008040 <strlen>
 801229c:	2300      	movs	r3, #0
 801229e:	930a      	str	r3, [sp, #40]	; 0x28
 80122a0:	f8d8 3000 	ldr.w	r3, [r8]
 80122a4:	9005      	str	r0, [sp, #20]
 80122a6:	3307      	adds	r3, #7
 80122a8:	f023 0307 	bic.w	r3, r3, #7
 80122ac:	f103 0208 	add.w	r2, r3, #8
 80122b0:	f894 a018 	ldrb.w	sl, [r4, #24]
 80122b4:	f8d4 b000 	ldr.w	fp, [r4]
 80122b8:	f8c8 2000 	str.w	r2, [r8]
 80122bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80122c0:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80122c4:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 80122c8:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80122cc:	9307      	str	r3, [sp, #28]
 80122ce:	f8cd 8018 	str.w	r8, [sp, #24]
 80122d2:	f04f 32ff 	mov.w	r2, #4294967295
 80122d6:	4ba7      	ldr	r3, [pc, #668]	; (8012574 <_printf_float+0x2f8>)
 80122d8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80122dc:	f7f6 fb5e 	bl	800899c <__aeabi_dcmpun>
 80122e0:	bb70      	cbnz	r0, 8012340 <_printf_float+0xc4>
 80122e2:	f04f 32ff 	mov.w	r2, #4294967295
 80122e6:	4ba3      	ldr	r3, [pc, #652]	; (8012574 <_printf_float+0x2f8>)
 80122e8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80122ec:	f7f6 fb38 	bl	8008960 <__aeabi_dcmple>
 80122f0:	bb30      	cbnz	r0, 8012340 <_printf_float+0xc4>
 80122f2:	2200      	movs	r2, #0
 80122f4:	2300      	movs	r3, #0
 80122f6:	4640      	mov	r0, r8
 80122f8:	4649      	mov	r1, r9
 80122fa:	f7f6 fb27 	bl	800894c <__aeabi_dcmplt>
 80122fe:	b110      	cbz	r0, 8012306 <_printf_float+0x8a>
 8012300:	232d      	movs	r3, #45	; 0x2d
 8012302:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8012306:	4a9c      	ldr	r2, [pc, #624]	; (8012578 <_printf_float+0x2fc>)
 8012308:	4b9c      	ldr	r3, [pc, #624]	; (801257c <_printf_float+0x300>)
 801230a:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 801230e:	bf8c      	ite	hi
 8012310:	4690      	movhi	r8, r2
 8012312:	4698      	movls	r8, r3
 8012314:	2303      	movs	r3, #3
 8012316:	f02b 0204 	bic.w	r2, fp, #4
 801231a:	6123      	str	r3, [r4, #16]
 801231c:	6022      	str	r2, [r4, #0]
 801231e:	f04f 0900 	mov.w	r9, #0
 8012322:	9700      	str	r7, [sp, #0]
 8012324:	4633      	mov	r3, r6
 8012326:	aa0b      	add	r2, sp, #44	; 0x2c
 8012328:	4621      	mov	r1, r4
 801232a:	4628      	mov	r0, r5
 801232c:	f000 f9e6 	bl	80126fc <_printf_common>
 8012330:	3001      	adds	r0, #1
 8012332:	f040 808d 	bne.w	8012450 <_printf_float+0x1d4>
 8012336:	f04f 30ff 	mov.w	r0, #4294967295
 801233a:	b00d      	add	sp, #52	; 0x34
 801233c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012340:	4642      	mov	r2, r8
 8012342:	464b      	mov	r3, r9
 8012344:	4640      	mov	r0, r8
 8012346:	4649      	mov	r1, r9
 8012348:	f7f6 fb28 	bl	800899c <__aeabi_dcmpun>
 801234c:	b110      	cbz	r0, 8012354 <_printf_float+0xd8>
 801234e:	4a8c      	ldr	r2, [pc, #560]	; (8012580 <_printf_float+0x304>)
 8012350:	4b8c      	ldr	r3, [pc, #560]	; (8012584 <_printf_float+0x308>)
 8012352:	e7da      	b.n	801230a <_printf_float+0x8e>
 8012354:	6861      	ldr	r1, [r4, #4]
 8012356:	1c4b      	adds	r3, r1, #1
 8012358:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 801235c:	a80a      	add	r0, sp, #40	; 0x28
 801235e:	d13e      	bne.n	80123de <_printf_float+0x162>
 8012360:	2306      	movs	r3, #6
 8012362:	6063      	str	r3, [r4, #4]
 8012364:	2300      	movs	r3, #0
 8012366:	e9cd 0302 	strd	r0, r3, [sp, #8]
 801236a:	ab09      	add	r3, sp, #36	; 0x24
 801236c:	9300      	str	r3, [sp, #0]
 801236e:	ec49 8b10 	vmov	d0, r8, r9
 8012372:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8012376:	6022      	str	r2, [r4, #0]
 8012378:	f8cd a004 	str.w	sl, [sp, #4]
 801237c:	6861      	ldr	r1, [r4, #4]
 801237e:	4628      	mov	r0, r5
 8012380:	f7ff fee8 	bl	8012154 <__cvt>
 8012384:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 8012388:	2b47      	cmp	r3, #71	; 0x47
 801238a:	4680      	mov	r8, r0
 801238c:	d109      	bne.n	80123a2 <_printf_float+0x126>
 801238e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012390:	1cd8      	adds	r0, r3, #3
 8012392:	db02      	blt.n	801239a <_printf_float+0x11e>
 8012394:	6862      	ldr	r2, [r4, #4]
 8012396:	4293      	cmp	r3, r2
 8012398:	dd47      	ble.n	801242a <_printf_float+0x1ae>
 801239a:	f1aa 0a02 	sub.w	sl, sl, #2
 801239e:	fa5f fa8a 	uxtb.w	sl, sl
 80123a2:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 80123a6:	9909      	ldr	r1, [sp, #36]	; 0x24
 80123a8:	d824      	bhi.n	80123f4 <_printf_float+0x178>
 80123aa:	3901      	subs	r1, #1
 80123ac:	4652      	mov	r2, sl
 80123ae:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80123b2:	9109      	str	r1, [sp, #36]	; 0x24
 80123b4:	f7ff ff2f 	bl	8012216 <__exponent>
 80123b8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80123ba:	1813      	adds	r3, r2, r0
 80123bc:	2a01      	cmp	r2, #1
 80123be:	4681      	mov	r9, r0
 80123c0:	6123      	str	r3, [r4, #16]
 80123c2:	dc02      	bgt.n	80123ca <_printf_float+0x14e>
 80123c4:	6822      	ldr	r2, [r4, #0]
 80123c6:	07d1      	lsls	r1, r2, #31
 80123c8:	d501      	bpl.n	80123ce <_printf_float+0x152>
 80123ca:	3301      	adds	r3, #1
 80123cc:	6123      	str	r3, [r4, #16]
 80123ce:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80123d2:	2b00      	cmp	r3, #0
 80123d4:	d0a5      	beq.n	8012322 <_printf_float+0xa6>
 80123d6:	232d      	movs	r3, #45	; 0x2d
 80123d8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80123dc:	e7a1      	b.n	8012322 <_printf_float+0xa6>
 80123de:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 80123e2:	f000 8177 	beq.w	80126d4 <_printf_float+0x458>
 80123e6:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 80123ea:	d1bb      	bne.n	8012364 <_printf_float+0xe8>
 80123ec:	2900      	cmp	r1, #0
 80123ee:	d1b9      	bne.n	8012364 <_printf_float+0xe8>
 80123f0:	2301      	movs	r3, #1
 80123f2:	e7b6      	b.n	8012362 <_printf_float+0xe6>
 80123f4:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 80123f8:	d119      	bne.n	801242e <_printf_float+0x1b2>
 80123fa:	2900      	cmp	r1, #0
 80123fc:	6863      	ldr	r3, [r4, #4]
 80123fe:	dd0c      	ble.n	801241a <_printf_float+0x19e>
 8012400:	6121      	str	r1, [r4, #16]
 8012402:	b913      	cbnz	r3, 801240a <_printf_float+0x18e>
 8012404:	6822      	ldr	r2, [r4, #0]
 8012406:	07d2      	lsls	r2, r2, #31
 8012408:	d502      	bpl.n	8012410 <_printf_float+0x194>
 801240a:	3301      	adds	r3, #1
 801240c:	440b      	add	r3, r1
 801240e:	6123      	str	r3, [r4, #16]
 8012410:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012412:	65a3      	str	r3, [r4, #88]	; 0x58
 8012414:	f04f 0900 	mov.w	r9, #0
 8012418:	e7d9      	b.n	80123ce <_printf_float+0x152>
 801241a:	b913      	cbnz	r3, 8012422 <_printf_float+0x1a6>
 801241c:	6822      	ldr	r2, [r4, #0]
 801241e:	07d0      	lsls	r0, r2, #31
 8012420:	d501      	bpl.n	8012426 <_printf_float+0x1aa>
 8012422:	3302      	adds	r3, #2
 8012424:	e7f3      	b.n	801240e <_printf_float+0x192>
 8012426:	2301      	movs	r3, #1
 8012428:	e7f1      	b.n	801240e <_printf_float+0x192>
 801242a:	f04f 0a67 	mov.w	sl, #103	; 0x67
 801242e:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8012432:	4293      	cmp	r3, r2
 8012434:	db05      	blt.n	8012442 <_printf_float+0x1c6>
 8012436:	6822      	ldr	r2, [r4, #0]
 8012438:	6123      	str	r3, [r4, #16]
 801243a:	07d1      	lsls	r1, r2, #31
 801243c:	d5e8      	bpl.n	8012410 <_printf_float+0x194>
 801243e:	3301      	adds	r3, #1
 8012440:	e7e5      	b.n	801240e <_printf_float+0x192>
 8012442:	2b00      	cmp	r3, #0
 8012444:	bfd4      	ite	le
 8012446:	f1c3 0302 	rsble	r3, r3, #2
 801244a:	2301      	movgt	r3, #1
 801244c:	4413      	add	r3, r2
 801244e:	e7de      	b.n	801240e <_printf_float+0x192>
 8012450:	6823      	ldr	r3, [r4, #0]
 8012452:	055a      	lsls	r2, r3, #21
 8012454:	d407      	bmi.n	8012466 <_printf_float+0x1ea>
 8012456:	6923      	ldr	r3, [r4, #16]
 8012458:	4642      	mov	r2, r8
 801245a:	4631      	mov	r1, r6
 801245c:	4628      	mov	r0, r5
 801245e:	47b8      	blx	r7
 8012460:	3001      	adds	r0, #1
 8012462:	d12b      	bne.n	80124bc <_printf_float+0x240>
 8012464:	e767      	b.n	8012336 <_printf_float+0xba>
 8012466:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 801246a:	f240 80dc 	bls.w	8012626 <_printf_float+0x3aa>
 801246e:	2200      	movs	r2, #0
 8012470:	2300      	movs	r3, #0
 8012472:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8012476:	f7f6 fa5f 	bl	8008938 <__aeabi_dcmpeq>
 801247a:	2800      	cmp	r0, #0
 801247c:	d033      	beq.n	80124e6 <_printf_float+0x26a>
 801247e:	2301      	movs	r3, #1
 8012480:	4a41      	ldr	r2, [pc, #260]	; (8012588 <_printf_float+0x30c>)
 8012482:	4631      	mov	r1, r6
 8012484:	4628      	mov	r0, r5
 8012486:	47b8      	blx	r7
 8012488:	3001      	adds	r0, #1
 801248a:	f43f af54 	beq.w	8012336 <_printf_float+0xba>
 801248e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8012492:	429a      	cmp	r2, r3
 8012494:	db02      	blt.n	801249c <_printf_float+0x220>
 8012496:	6823      	ldr	r3, [r4, #0]
 8012498:	07d8      	lsls	r0, r3, #31
 801249a:	d50f      	bpl.n	80124bc <_printf_float+0x240>
 801249c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80124a0:	4631      	mov	r1, r6
 80124a2:	4628      	mov	r0, r5
 80124a4:	47b8      	blx	r7
 80124a6:	3001      	adds	r0, #1
 80124a8:	f43f af45 	beq.w	8012336 <_printf_float+0xba>
 80124ac:	f04f 0800 	mov.w	r8, #0
 80124b0:	f104 091a 	add.w	r9, r4, #26
 80124b4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80124b6:	3b01      	subs	r3, #1
 80124b8:	4543      	cmp	r3, r8
 80124ba:	dc09      	bgt.n	80124d0 <_printf_float+0x254>
 80124bc:	6823      	ldr	r3, [r4, #0]
 80124be:	079b      	lsls	r3, r3, #30
 80124c0:	f100 8103 	bmi.w	80126ca <_printf_float+0x44e>
 80124c4:	68e0      	ldr	r0, [r4, #12]
 80124c6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80124c8:	4298      	cmp	r0, r3
 80124ca:	bfb8      	it	lt
 80124cc:	4618      	movlt	r0, r3
 80124ce:	e734      	b.n	801233a <_printf_float+0xbe>
 80124d0:	2301      	movs	r3, #1
 80124d2:	464a      	mov	r2, r9
 80124d4:	4631      	mov	r1, r6
 80124d6:	4628      	mov	r0, r5
 80124d8:	47b8      	blx	r7
 80124da:	3001      	adds	r0, #1
 80124dc:	f43f af2b 	beq.w	8012336 <_printf_float+0xba>
 80124e0:	f108 0801 	add.w	r8, r8, #1
 80124e4:	e7e6      	b.n	80124b4 <_printf_float+0x238>
 80124e6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80124e8:	2b00      	cmp	r3, #0
 80124ea:	dc2b      	bgt.n	8012544 <_printf_float+0x2c8>
 80124ec:	2301      	movs	r3, #1
 80124ee:	4a26      	ldr	r2, [pc, #152]	; (8012588 <_printf_float+0x30c>)
 80124f0:	4631      	mov	r1, r6
 80124f2:	4628      	mov	r0, r5
 80124f4:	47b8      	blx	r7
 80124f6:	3001      	adds	r0, #1
 80124f8:	f43f af1d 	beq.w	8012336 <_printf_float+0xba>
 80124fc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80124fe:	b923      	cbnz	r3, 801250a <_printf_float+0x28e>
 8012500:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012502:	b913      	cbnz	r3, 801250a <_printf_float+0x28e>
 8012504:	6823      	ldr	r3, [r4, #0]
 8012506:	07d9      	lsls	r1, r3, #31
 8012508:	d5d8      	bpl.n	80124bc <_printf_float+0x240>
 801250a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801250e:	4631      	mov	r1, r6
 8012510:	4628      	mov	r0, r5
 8012512:	47b8      	blx	r7
 8012514:	3001      	adds	r0, #1
 8012516:	f43f af0e 	beq.w	8012336 <_printf_float+0xba>
 801251a:	f04f 0900 	mov.w	r9, #0
 801251e:	f104 0a1a 	add.w	sl, r4, #26
 8012522:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012524:	425b      	negs	r3, r3
 8012526:	454b      	cmp	r3, r9
 8012528:	dc01      	bgt.n	801252e <_printf_float+0x2b2>
 801252a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801252c:	e794      	b.n	8012458 <_printf_float+0x1dc>
 801252e:	2301      	movs	r3, #1
 8012530:	4652      	mov	r2, sl
 8012532:	4631      	mov	r1, r6
 8012534:	4628      	mov	r0, r5
 8012536:	47b8      	blx	r7
 8012538:	3001      	adds	r0, #1
 801253a:	f43f aefc 	beq.w	8012336 <_printf_float+0xba>
 801253e:	f109 0901 	add.w	r9, r9, #1
 8012542:	e7ee      	b.n	8012522 <_printf_float+0x2a6>
 8012544:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8012546:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8012548:	429a      	cmp	r2, r3
 801254a:	bfa8      	it	ge
 801254c:	461a      	movge	r2, r3
 801254e:	2a00      	cmp	r2, #0
 8012550:	4691      	mov	r9, r2
 8012552:	dd07      	ble.n	8012564 <_printf_float+0x2e8>
 8012554:	4613      	mov	r3, r2
 8012556:	4631      	mov	r1, r6
 8012558:	4642      	mov	r2, r8
 801255a:	4628      	mov	r0, r5
 801255c:	47b8      	blx	r7
 801255e:	3001      	adds	r0, #1
 8012560:	f43f aee9 	beq.w	8012336 <_printf_float+0xba>
 8012564:	f104 031a 	add.w	r3, r4, #26
 8012568:	f04f 0b00 	mov.w	fp, #0
 801256c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8012570:	9306      	str	r3, [sp, #24]
 8012572:	e015      	b.n	80125a0 <_printf_float+0x324>
 8012574:	7fefffff 	.word	0x7fefffff
 8012578:	080170f5 	.word	0x080170f5
 801257c:	080170f1 	.word	0x080170f1
 8012580:	080170fd 	.word	0x080170fd
 8012584:	080170f9 	.word	0x080170f9
 8012588:	0801713e 	.word	0x0801713e
 801258c:	2301      	movs	r3, #1
 801258e:	9a06      	ldr	r2, [sp, #24]
 8012590:	4631      	mov	r1, r6
 8012592:	4628      	mov	r0, r5
 8012594:	47b8      	blx	r7
 8012596:	3001      	adds	r0, #1
 8012598:	f43f aecd 	beq.w	8012336 <_printf_float+0xba>
 801259c:	f10b 0b01 	add.w	fp, fp, #1
 80125a0:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 80125a4:	ebaa 0309 	sub.w	r3, sl, r9
 80125a8:	455b      	cmp	r3, fp
 80125aa:	dcef      	bgt.n	801258c <_printf_float+0x310>
 80125ac:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80125b0:	429a      	cmp	r2, r3
 80125b2:	44d0      	add	r8, sl
 80125b4:	db15      	blt.n	80125e2 <_printf_float+0x366>
 80125b6:	6823      	ldr	r3, [r4, #0]
 80125b8:	07da      	lsls	r2, r3, #31
 80125ba:	d412      	bmi.n	80125e2 <_printf_float+0x366>
 80125bc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80125be:	9909      	ldr	r1, [sp, #36]	; 0x24
 80125c0:	eba3 020a 	sub.w	r2, r3, sl
 80125c4:	eba3 0a01 	sub.w	sl, r3, r1
 80125c8:	4592      	cmp	sl, r2
 80125ca:	bfa8      	it	ge
 80125cc:	4692      	movge	sl, r2
 80125ce:	f1ba 0f00 	cmp.w	sl, #0
 80125d2:	dc0e      	bgt.n	80125f2 <_printf_float+0x376>
 80125d4:	f04f 0800 	mov.w	r8, #0
 80125d8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80125dc:	f104 091a 	add.w	r9, r4, #26
 80125e0:	e019      	b.n	8012616 <_printf_float+0x39a>
 80125e2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80125e6:	4631      	mov	r1, r6
 80125e8:	4628      	mov	r0, r5
 80125ea:	47b8      	blx	r7
 80125ec:	3001      	adds	r0, #1
 80125ee:	d1e5      	bne.n	80125bc <_printf_float+0x340>
 80125f0:	e6a1      	b.n	8012336 <_printf_float+0xba>
 80125f2:	4653      	mov	r3, sl
 80125f4:	4642      	mov	r2, r8
 80125f6:	4631      	mov	r1, r6
 80125f8:	4628      	mov	r0, r5
 80125fa:	47b8      	blx	r7
 80125fc:	3001      	adds	r0, #1
 80125fe:	d1e9      	bne.n	80125d4 <_printf_float+0x358>
 8012600:	e699      	b.n	8012336 <_printf_float+0xba>
 8012602:	2301      	movs	r3, #1
 8012604:	464a      	mov	r2, r9
 8012606:	4631      	mov	r1, r6
 8012608:	4628      	mov	r0, r5
 801260a:	47b8      	blx	r7
 801260c:	3001      	adds	r0, #1
 801260e:	f43f ae92 	beq.w	8012336 <_printf_float+0xba>
 8012612:	f108 0801 	add.w	r8, r8, #1
 8012616:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801261a:	1a9b      	subs	r3, r3, r2
 801261c:	eba3 030a 	sub.w	r3, r3, sl
 8012620:	4543      	cmp	r3, r8
 8012622:	dcee      	bgt.n	8012602 <_printf_float+0x386>
 8012624:	e74a      	b.n	80124bc <_printf_float+0x240>
 8012626:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8012628:	2a01      	cmp	r2, #1
 801262a:	dc01      	bgt.n	8012630 <_printf_float+0x3b4>
 801262c:	07db      	lsls	r3, r3, #31
 801262e:	d53a      	bpl.n	80126a6 <_printf_float+0x42a>
 8012630:	2301      	movs	r3, #1
 8012632:	4642      	mov	r2, r8
 8012634:	4631      	mov	r1, r6
 8012636:	4628      	mov	r0, r5
 8012638:	47b8      	blx	r7
 801263a:	3001      	adds	r0, #1
 801263c:	f43f ae7b 	beq.w	8012336 <_printf_float+0xba>
 8012640:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8012644:	4631      	mov	r1, r6
 8012646:	4628      	mov	r0, r5
 8012648:	47b8      	blx	r7
 801264a:	3001      	adds	r0, #1
 801264c:	f108 0801 	add.w	r8, r8, #1
 8012650:	f43f ae71 	beq.w	8012336 <_printf_float+0xba>
 8012654:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012656:	2200      	movs	r2, #0
 8012658:	f103 3aff 	add.w	sl, r3, #4294967295
 801265c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8012660:	2300      	movs	r3, #0
 8012662:	f7f6 f969 	bl	8008938 <__aeabi_dcmpeq>
 8012666:	b9c8      	cbnz	r0, 801269c <_printf_float+0x420>
 8012668:	4653      	mov	r3, sl
 801266a:	4642      	mov	r2, r8
 801266c:	4631      	mov	r1, r6
 801266e:	4628      	mov	r0, r5
 8012670:	47b8      	blx	r7
 8012672:	3001      	adds	r0, #1
 8012674:	d10e      	bne.n	8012694 <_printf_float+0x418>
 8012676:	e65e      	b.n	8012336 <_printf_float+0xba>
 8012678:	2301      	movs	r3, #1
 801267a:	4652      	mov	r2, sl
 801267c:	4631      	mov	r1, r6
 801267e:	4628      	mov	r0, r5
 8012680:	47b8      	blx	r7
 8012682:	3001      	adds	r0, #1
 8012684:	f43f ae57 	beq.w	8012336 <_printf_float+0xba>
 8012688:	f108 0801 	add.w	r8, r8, #1
 801268c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801268e:	3b01      	subs	r3, #1
 8012690:	4543      	cmp	r3, r8
 8012692:	dcf1      	bgt.n	8012678 <_printf_float+0x3fc>
 8012694:	464b      	mov	r3, r9
 8012696:	f104 0250 	add.w	r2, r4, #80	; 0x50
 801269a:	e6de      	b.n	801245a <_printf_float+0x1de>
 801269c:	f04f 0800 	mov.w	r8, #0
 80126a0:	f104 0a1a 	add.w	sl, r4, #26
 80126a4:	e7f2      	b.n	801268c <_printf_float+0x410>
 80126a6:	2301      	movs	r3, #1
 80126a8:	e7df      	b.n	801266a <_printf_float+0x3ee>
 80126aa:	2301      	movs	r3, #1
 80126ac:	464a      	mov	r2, r9
 80126ae:	4631      	mov	r1, r6
 80126b0:	4628      	mov	r0, r5
 80126b2:	47b8      	blx	r7
 80126b4:	3001      	adds	r0, #1
 80126b6:	f43f ae3e 	beq.w	8012336 <_printf_float+0xba>
 80126ba:	f108 0801 	add.w	r8, r8, #1
 80126be:	68e3      	ldr	r3, [r4, #12]
 80126c0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80126c2:	1a9b      	subs	r3, r3, r2
 80126c4:	4543      	cmp	r3, r8
 80126c6:	dcf0      	bgt.n	80126aa <_printf_float+0x42e>
 80126c8:	e6fc      	b.n	80124c4 <_printf_float+0x248>
 80126ca:	f04f 0800 	mov.w	r8, #0
 80126ce:	f104 0919 	add.w	r9, r4, #25
 80126d2:	e7f4      	b.n	80126be <_printf_float+0x442>
 80126d4:	2900      	cmp	r1, #0
 80126d6:	f43f ae8b 	beq.w	80123f0 <_printf_float+0x174>
 80126da:	2300      	movs	r3, #0
 80126dc:	e9cd 0302 	strd	r0, r3, [sp, #8]
 80126e0:	ab09      	add	r3, sp, #36	; 0x24
 80126e2:	9300      	str	r3, [sp, #0]
 80126e4:	ec49 8b10 	vmov	d0, r8, r9
 80126e8:	6022      	str	r2, [r4, #0]
 80126ea:	f8cd a004 	str.w	sl, [sp, #4]
 80126ee:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80126f2:	4628      	mov	r0, r5
 80126f4:	f7ff fd2e 	bl	8012154 <__cvt>
 80126f8:	4680      	mov	r8, r0
 80126fa:	e648      	b.n	801238e <_printf_float+0x112>

080126fc <_printf_common>:
 80126fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012700:	4691      	mov	r9, r2
 8012702:	461f      	mov	r7, r3
 8012704:	688a      	ldr	r2, [r1, #8]
 8012706:	690b      	ldr	r3, [r1, #16]
 8012708:	f8dd 8020 	ldr.w	r8, [sp, #32]
 801270c:	4293      	cmp	r3, r2
 801270e:	bfb8      	it	lt
 8012710:	4613      	movlt	r3, r2
 8012712:	f8c9 3000 	str.w	r3, [r9]
 8012716:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 801271a:	4606      	mov	r6, r0
 801271c:	460c      	mov	r4, r1
 801271e:	b112      	cbz	r2, 8012726 <_printf_common+0x2a>
 8012720:	3301      	adds	r3, #1
 8012722:	f8c9 3000 	str.w	r3, [r9]
 8012726:	6823      	ldr	r3, [r4, #0]
 8012728:	0699      	lsls	r1, r3, #26
 801272a:	bf42      	ittt	mi
 801272c:	f8d9 3000 	ldrmi.w	r3, [r9]
 8012730:	3302      	addmi	r3, #2
 8012732:	f8c9 3000 	strmi.w	r3, [r9]
 8012736:	6825      	ldr	r5, [r4, #0]
 8012738:	f015 0506 	ands.w	r5, r5, #6
 801273c:	d107      	bne.n	801274e <_printf_common+0x52>
 801273e:	f104 0a19 	add.w	sl, r4, #25
 8012742:	68e3      	ldr	r3, [r4, #12]
 8012744:	f8d9 2000 	ldr.w	r2, [r9]
 8012748:	1a9b      	subs	r3, r3, r2
 801274a:	42ab      	cmp	r3, r5
 801274c:	dc28      	bgt.n	80127a0 <_printf_common+0xa4>
 801274e:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8012752:	6822      	ldr	r2, [r4, #0]
 8012754:	3300      	adds	r3, #0
 8012756:	bf18      	it	ne
 8012758:	2301      	movne	r3, #1
 801275a:	0692      	lsls	r2, r2, #26
 801275c:	d42d      	bmi.n	80127ba <_printf_common+0xbe>
 801275e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8012762:	4639      	mov	r1, r7
 8012764:	4630      	mov	r0, r6
 8012766:	47c0      	blx	r8
 8012768:	3001      	adds	r0, #1
 801276a:	d020      	beq.n	80127ae <_printf_common+0xb2>
 801276c:	6823      	ldr	r3, [r4, #0]
 801276e:	68e5      	ldr	r5, [r4, #12]
 8012770:	f8d9 2000 	ldr.w	r2, [r9]
 8012774:	f003 0306 	and.w	r3, r3, #6
 8012778:	2b04      	cmp	r3, #4
 801277a:	bf08      	it	eq
 801277c:	1aad      	subeq	r5, r5, r2
 801277e:	68a3      	ldr	r3, [r4, #8]
 8012780:	6922      	ldr	r2, [r4, #16]
 8012782:	bf0c      	ite	eq
 8012784:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8012788:	2500      	movne	r5, #0
 801278a:	4293      	cmp	r3, r2
 801278c:	bfc4      	itt	gt
 801278e:	1a9b      	subgt	r3, r3, r2
 8012790:	18ed      	addgt	r5, r5, r3
 8012792:	f04f 0900 	mov.w	r9, #0
 8012796:	341a      	adds	r4, #26
 8012798:	454d      	cmp	r5, r9
 801279a:	d11a      	bne.n	80127d2 <_printf_common+0xd6>
 801279c:	2000      	movs	r0, #0
 801279e:	e008      	b.n	80127b2 <_printf_common+0xb6>
 80127a0:	2301      	movs	r3, #1
 80127a2:	4652      	mov	r2, sl
 80127a4:	4639      	mov	r1, r7
 80127a6:	4630      	mov	r0, r6
 80127a8:	47c0      	blx	r8
 80127aa:	3001      	adds	r0, #1
 80127ac:	d103      	bne.n	80127b6 <_printf_common+0xba>
 80127ae:	f04f 30ff 	mov.w	r0, #4294967295
 80127b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80127b6:	3501      	adds	r5, #1
 80127b8:	e7c3      	b.n	8012742 <_printf_common+0x46>
 80127ba:	18e1      	adds	r1, r4, r3
 80127bc:	1c5a      	adds	r2, r3, #1
 80127be:	2030      	movs	r0, #48	; 0x30
 80127c0:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80127c4:	4422      	add	r2, r4
 80127c6:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80127ca:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80127ce:	3302      	adds	r3, #2
 80127d0:	e7c5      	b.n	801275e <_printf_common+0x62>
 80127d2:	2301      	movs	r3, #1
 80127d4:	4622      	mov	r2, r4
 80127d6:	4639      	mov	r1, r7
 80127d8:	4630      	mov	r0, r6
 80127da:	47c0      	blx	r8
 80127dc:	3001      	adds	r0, #1
 80127de:	d0e6      	beq.n	80127ae <_printf_common+0xb2>
 80127e0:	f109 0901 	add.w	r9, r9, #1
 80127e4:	e7d8      	b.n	8012798 <_printf_common+0x9c>
	...

080127e8 <_printf_i>:
 80127e8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80127ec:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 80127f0:	460c      	mov	r4, r1
 80127f2:	7e09      	ldrb	r1, [r1, #24]
 80127f4:	b085      	sub	sp, #20
 80127f6:	296e      	cmp	r1, #110	; 0x6e
 80127f8:	4617      	mov	r7, r2
 80127fa:	4606      	mov	r6, r0
 80127fc:	4698      	mov	r8, r3
 80127fe:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8012800:	f000 80b3 	beq.w	801296a <_printf_i+0x182>
 8012804:	d822      	bhi.n	801284c <_printf_i+0x64>
 8012806:	2963      	cmp	r1, #99	; 0x63
 8012808:	d036      	beq.n	8012878 <_printf_i+0x90>
 801280a:	d80a      	bhi.n	8012822 <_printf_i+0x3a>
 801280c:	2900      	cmp	r1, #0
 801280e:	f000 80b9 	beq.w	8012984 <_printf_i+0x19c>
 8012812:	2958      	cmp	r1, #88	; 0x58
 8012814:	f000 8083 	beq.w	801291e <_printf_i+0x136>
 8012818:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801281c:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8012820:	e032      	b.n	8012888 <_printf_i+0xa0>
 8012822:	2964      	cmp	r1, #100	; 0x64
 8012824:	d001      	beq.n	801282a <_printf_i+0x42>
 8012826:	2969      	cmp	r1, #105	; 0x69
 8012828:	d1f6      	bne.n	8012818 <_printf_i+0x30>
 801282a:	6820      	ldr	r0, [r4, #0]
 801282c:	6813      	ldr	r3, [r2, #0]
 801282e:	0605      	lsls	r5, r0, #24
 8012830:	f103 0104 	add.w	r1, r3, #4
 8012834:	d52a      	bpl.n	801288c <_printf_i+0xa4>
 8012836:	681b      	ldr	r3, [r3, #0]
 8012838:	6011      	str	r1, [r2, #0]
 801283a:	2b00      	cmp	r3, #0
 801283c:	da03      	bge.n	8012846 <_printf_i+0x5e>
 801283e:	222d      	movs	r2, #45	; 0x2d
 8012840:	425b      	negs	r3, r3
 8012842:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8012846:	486f      	ldr	r0, [pc, #444]	; (8012a04 <_printf_i+0x21c>)
 8012848:	220a      	movs	r2, #10
 801284a:	e039      	b.n	80128c0 <_printf_i+0xd8>
 801284c:	2973      	cmp	r1, #115	; 0x73
 801284e:	f000 809d 	beq.w	801298c <_printf_i+0x1a4>
 8012852:	d808      	bhi.n	8012866 <_printf_i+0x7e>
 8012854:	296f      	cmp	r1, #111	; 0x6f
 8012856:	d020      	beq.n	801289a <_printf_i+0xb2>
 8012858:	2970      	cmp	r1, #112	; 0x70
 801285a:	d1dd      	bne.n	8012818 <_printf_i+0x30>
 801285c:	6823      	ldr	r3, [r4, #0]
 801285e:	f043 0320 	orr.w	r3, r3, #32
 8012862:	6023      	str	r3, [r4, #0]
 8012864:	e003      	b.n	801286e <_printf_i+0x86>
 8012866:	2975      	cmp	r1, #117	; 0x75
 8012868:	d017      	beq.n	801289a <_printf_i+0xb2>
 801286a:	2978      	cmp	r1, #120	; 0x78
 801286c:	d1d4      	bne.n	8012818 <_printf_i+0x30>
 801286e:	2378      	movs	r3, #120	; 0x78
 8012870:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8012874:	4864      	ldr	r0, [pc, #400]	; (8012a08 <_printf_i+0x220>)
 8012876:	e055      	b.n	8012924 <_printf_i+0x13c>
 8012878:	6813      	ldr	r3, [r2, #0]
 801287a:	1d19      	adds	r1, r3, #4
 801287c:	681b      	ldr	r3, [r3, #0]
 801287e:	6011      	str	r1, [r2, #0]
 8012880:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8012884:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8012888:	2301      	movs	r3, #1
 801288a:	e08c      	b.n	80129a6 <_printf_i+0x1be>
 801288c:	681b      	ldr	r3, [r3, #0]
 801288e:	6011      	str	r1, [r2, #0]
 8012890:	f010 0f40 	tst.w	r0, #64	; 0x40
 8012894:	bf18      	it	ne
 8012896:	b21b      	sxthne	r3, r3
 8012898:	e7cf      	b.n	801283a <_printf_i+0x52>
 801289a:	6813      	ldr	r3, [r2, #0]
 801289c:	6825      	ldr	r5, [r4, #0]
 801289e:	1d18      	adds	r0, r3, #4
 80128a0:	6010      	str	r0, [r2, #0]
 80128a2:	0628      	lsls	r0, r5, #24
 80128a4:	d501      	bpl.n	80128aa <_printf_i+0xc2>
 80128a6:	681b      	ldr	r3, [r3, #0]
 80128a8:	e002      	b.n	80128b0 <_printf_i+0xc8>
 80128aa:	0668      	lsls	r0, r5, #25
 80128ac:	d5fb      	bpl.n	80128a6 <_printf_i+0xbe>
 80128ae:	881b      	ldrh	r3, [r3, #0]
 80128b0:	4854      	ldr	r0, [pc, #336]	; (8012a04 <_printf_i+0x21c>)
 80128b2:	296f      	cmp	r1, #111	; 0x6f
 80128b4:	bf14      	ite	ne
 80128b6:	220a      	movne	r2, #10
 80128b8:	2208      	moveq	r2, #8
 80128ba:	2100      	movs	r1, #0
 80128bc:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80128c0:	6865      	ldr	r5, [r4, #4]
 80128c2:	60a5      	str	r5, [r4, #8]
 80128c4:	2d00      	cmp	r5, #0
 80128c6:	f2c0 8095 	blt.w	80129f4 <_printf_i+0x20c>
 80128ca:	6821      	ldr	r1, [r4, #0]
 80128cc:	f021 0104 	bic.w	r1, r1, #4
 80128d0:	6021      	str	r1, [r4, #0]
 80128d2:	2b00      	cmp	r3, #0
 80128d4:	d13d      	bne.n	8012952 <_printf_i+0x16a>
 80128d6:	2d00      	cmp	r5, #0
 80128d8:	f040 808e 	bne.w	80129f8 <_printf_i+0x210>
 80128dc:	4665      	mov	r5, ip
 80128de:	2a08      	cmp	r2, #8
 80128e0:	d10b      	bne.n	80128fa <_printf_i+0x112>
 80128e2:	6823      	ldr	r3, [r4, #0]
 80128e4:	07db      	lsls	r3, r3, #31
 80128e6:	d508      	bpl.n	80128fa <_printf_i+0x112>
 80128e8:	6923      	ldr	r3, [r4, #16]
 80128ea:	6862      	ldr	r2, [r4, #4]
 80128ec:	429a      	cmp	r2, r3
 80128ee:	bfde      	ittt	le
 80128f0:	2330      	movle	r3, #48	; 0x30
 80128f2:	f805 3c01 	strble.w	r3, [r5, #-1]
 80128f6:	f105 35ff 	addle.w	r5, r5, #4294967295
 80128fa:	ebac 0305 	sub.w	r3, ip, r5
 80128fe:	6123      	str	r3, [r4, #16]
 8012900:	f8cd 8000 	str.w	r8, [sp]
 8012904:	463b      	mov	r3, r7
 8012906:	aa03      	add	r2, sp, #12
 8012908:	4621      	mov	r1, r4
 801290a:	4630      	mov	r0, r6
 801290c:	f7ff fef6 	bl	80126fc <_printf_common>
 8012910:	3001      	adds	r0, #1
 8012912:	d14d      	bne.n	80129b0 <_printf_i+0x1c8>
 8012914:	f04f 30ff 	mov.w	r0, #4294967295
 8012918:	b005      	add	sp, #20
 801291a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801291e:	4839      	ldr	r0, [pc, #228]	; (8012a04 <_printf_i+0x21c>)
 8012920:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8012924:	6813      	ldr	r3, [r2, #0]
 8012926:	6821      	ldr	r1, [r4, #0]
 8012928:	1d1d      	adds	r5, r3, #4
 801292a:	681b      	ldr	r3, [r3, #0]
 801292c:	6015      	str	r5, [r2, #0]
 801292e:	060a      	lsls	r2, r1, #24
 8012930:	d50b      	bpl.n	801294a <_printf_i+0x162>
 8012932:	07ca      	lsls	r2, r1, #31
 8012934:	bf44      	itt	mi
 8012936:	f041 0120 	orrmi.w	r1, r1, #32
 801293a:	6021      	strmi	r1, [r4, #0]
 801293c:	b91b      	cbnz	r3, 8012946 <_printf_i+0x15e>
 801293e:	6822      	ldr	r2, [r4, #0]
 8012940:	f022 0220 	bic.w	r2, r2, #32
 8012944:	6022      	str	r2, [r4, #0]
 8012946:	2210      	movs	r2, #16
 8012948:	e7b7      	b.n	80128ba <_printf_i+0xd2>
 801294a:	064d      	lsls	r5, r1, #25
 801294c:	bf48      	it	mi
 801294e:	b29b      	uxthmi	r3, r3
 8012950:	e7ef      	b.n	8012932 <_printf_i+0x14a>
 8012952:	4665      	mov	r5, ip
 8012954:	fbb3 f1f2 	udiv	r1, r3, r2
 8012958:	fb02 3311 	mls	r3, r2, r1, r3
 801295c:	5cc3      	ldrb	r3, [r0, r3]
 801295e:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8012962:	460b      	mov	r3, r1
 8012964:	2900      	cmp	r1, #0
 8012966:	d1f5      	bne.n	8012954 <_printf_i+0x16c>
 8012968:	e7b9      	b.n	80128de <_printf_i+0xf6>
 801296a:	6813      	ldr	r3, [r2, #0]
 801296c:	6825      	ldr	r5, [r4, #0]
 801296e:	6961      	ldr	r1, [r4, #20]
 8012970:	1d18      	adds	r0, r3, #4
 8012972:	6010      	str	r0, [r2, #0]
 8012974:	0628      	lsls	r0, r5, #24
 8012976:	681b      	ldr	r3, [r3, #0]
 8012978:	d501      	bpl.n	801297e <_printf_i+0x196>
 801297a:	6019      	str	r1, [r3, #0]
 801297c:	e002      	b.n	8012984 <_printf_i+0x19c>
 801297e:	066a      	lsls	r2, r5, #25
 8012980:	d5fb      	bpl.n	801297a <_printf_i+0x192>
 8012982:	8019      	strh	r1, [r3, #0]
 8012984:	2300      	movs	r3, #0
 8012986:	6123      	str	r3, [r4, #16]
 8012988:	4665      	mov	r5, ip
 801298a:	e7b9      	b.n	8012900 <_printf_i+0x118>
 801298c:	6813      	ldr	r3, [r2, #0]
 801298e:	1d19      	adds	r1, r3, #4
 8012990:	6011      	str	r1, [r2, #0]
 8012992:	681d      	ldr	r5, [r3, #0]
 8012994:	6862      	ldr	r2, [r4, #4]
 8012996:	2100      	movs	r1, #0
 8012998:	4628      	mov	r0, r5
 801299a:	f7f5 fb59 	bl	8008050 <memchr>
 801299e:	b108      	cbz	r0, 80129a4 <_printf_i+0x1bc>
 80129a0:	1b40      	subs	r0, r0, r5
 80129a2:	6060      	str	r0, [r4, #4]
 80129a4:	6863      	ldr	r3, [r4, #4]
 80129a6:	6123      	str	r3, [r4, #16]
 80129a8:	2300      	movs	r3, #0
 80129aa:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80129ae:	e7a7      	b.n	8012900 <_printf_i+0x118>
 80129b0:	6923      	ldr	r3, [r4, #16]
 80129b2:	462a      	mov	r2, r5
 80129b4:	4639      	mov	r1, r7
 80129b6:	4630      	mov	r0, r6
 80129b8:	47c0      	blx	r8
 80129ba:	3001      	adds	r0, #1
 80129bc:	d0aa      	beq.n	8012914 <_printf_i+0x12c>
 80129be:	6823      	ldr	r3, [r4, #0]
 80129c0:	079b      	lsls	r3, r3, #30
 80129c2:	d413      	bmi.n	80129ec <_printf_i+0x204>
 80129c4:	68e0      	ldr	r0, [r4, #12]
 80129c6:	9b03      	ldr	r3, [sp, #12]
 80129c8:	4298      	cmp	r0, r3
 80129ca:	bfb8      	it	lt
 80129cc:	4618      	movlt	r0, r3
 80129ce:	e7a3      	b.n	8012918 <_printf_i+0x130>
 80129d0:	2301      	movs	r3, #1
 80129d2:	464a      	mov	r2, r9
 80129d4:	4639      	mov	r1, r7
 80129d6:	4630      	mov	r0, r6
 80129d8:	47c0      	blx	r8
 80129da:	3001      	adds	r0, #1
 80129dc:	d09a      	beq.n	8012914 <_printf_i+0x12c>
 80129de:	3501      	adds	r5, #1
 80129e0:	68e3      	ldr	r3, [r4, #12]
 80129e2:	9a03      	ldr	r2, [sp, #12]
 80129e4:	1a9b      	subs	r3, r3, r2
 80129e6:	42ab      	cmp	r3, r5
 80129e8:	dcf2      	bgt.n	80129d0 <_printf_i+0x1e8>
 80129ea:	e7eb      	b.n	80129c4 <_printf_i+0x1dc>
 80129ec:	2500      	movs	r5, #0
 80129ee:	f104 0919 	add.w	r9, r4, #25
 80129f2:	e7f5      	b.n	80129e0 <_printf_i+0x1f8>
 80129f4:	2b00      	cmp	r3, #0
 80129f6:	d1ac      	bne.n	8012952 <_printf_i+0x16a>
 80129f8:	7803      	ldrb	r3, [r0, #0]
 80129fa:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80129fe:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8012a02:	e76c      	b.n	80128de <_printf_i+0xf6>
 8012a04:	08017101 	.word	0x08017101
 8012a08:	08017112 	.word	0x08017112

08012a0c <__svfiscanf_r>:
 8012a0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012a10:	f5ad 7d23 	sub.w	sp, sp, #652	; 0x28c
 8012a14:	460c      	mov	r4, r1
 8012a16:	2100      	movs	r1, #0
 8012a18:	9144      	str	r1, [sp, #272]	; 0x110
 8012a1a:	9145      	str	r1, [sp, #276]	; 0x114
 8012a1c:	499f      	ldr	r1, [pc, #636]	; (8012c9c <__svfiscanf_r+0x290>)
 8012a1e:	91a0      	str	r1, [sp, #640]	; 0x280
 8012a20:	f10d 0804 	add.w	r8, sp, #4
 8012a24:	499e      	ldr	r1, [pc, #632]	; (8012ca0 <__svfiscanf_r+0x294>)
 8012a26:	f8df 927c 	ldr.w	r9, [pc, #636]	; 8012ca4 <__svfiscanf_r+0x298>
 8012a2a:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 8012a2e:	4606      	mov	r6, r0
 8012a30:	4692      	mov	sl, r2
 8012a32:	91a1      	str	r1, [sp, #644]	; 0x284
 8012a34:	9300      	str	r3, [sp, #0]
 8012a36:	270a      	movs	r7, #10
 8012a38:	f89a 3000 	ldrb.w	r3, [sl]
 8012a3c:	2b00      	cmp	r3, #0
 8012a3e:	f000 812a 	beq.w	8012c96 <__svfiscanf_r+0x28a>
 8012a42:	4655      	mov	r5, sl
 8012a44:	f003 faec 	bl	8016020 <__locale_ctype_ptr>
 8012a48:	f815 bb01 	ldrb.w	fp, [r5], #1
 8012a4c:	4458      	add	r0, fp
 8012a4e:	7843      	ldrb	r3, [r0, #1]
 8012a50:	f013 0308 	ands.w	r3, r3, #8
 8012a54:	d01c      	beq.n	8012a90 <__svfiscanf_r+0x84>
 8012a56:	6863      	ldr	r3, [r4, #4]
 8012a58:	2b00      	cmp	r3, #0
 8012a5a:	dd12      	ble.n	8012a82 <__svfiscanf_r+0x76>
 8012a5c:	f003 fae0 	bl	8016020 <__locale_ctype_ptr>
 8012a60:	6823      	ldr	r3, [r4, #0]
 8012a62:	781a      	ldrb	r2, [r3, #0]
 8012a64:	4410      	add	r0, r2
 8012a66:	7842      	ldrb	r2, [r0, #1]
 8012a68:	0712      	lsls	r2, r2, #28
 8012a6a:	d401      	bmi.n	8012a70 <__svfiscanf_r+0x64>
 8012a6c:	46aa      	mov	sl, r5
 8012a6e:	e7e3      	b.n	8012a38 <__svfiscanf_r+0x2c>
 8012a70:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8012a72:	3201      	adds	r2, #1
 8012a74:	9245      	str	r2, [sp, #276]	; 0x114
 8012a76:	6862      	ldr	r2, [r4, #4]
 8012a78:	3301      	adds	r3, #1
 8012a7a:	3a01      	subs	r2, #1
 8012a7c:	6062      	str	r2, [r4, #4]
 8012a7e:	6023      	str	r3, [r4, #0]
 8012a80:	e7e9      	b.n	8012a56 <__svfiscanf_r+0x4a>
 8012a82:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8012a84:	4621      	mov	r1, r4
 8012a86:	4630      	mov	r0, r6
 8012a88:	4798      	blx	r3
 8012a8a:	2800      	cmp	r0, #0
 8012a8c:	d0e6      	beq.n	8012a5c <__svfiscanf_r+0x50>
 8012a8e:	e7ed      	b.n	8012a6c <__svfiscanf_r+0x60>
 8012a90:	f1bb 0f25 	cmp.w	fp, #37	; 0x25
 8012a94:	f040 8082 	bne.w	8012b9c <__svfiscanf_r+0x190>
 8012a98:	9343      	str	r3, [sp, #268]	; 0x10c
 8012a9a:	9341      	str	r3, [sp, #260]	; 0x104
 8012a9c:	f89a 3001 	ldrb.w	r3, [sl, #1]
 8012aa0:	2b2a      	cmp	r3, #42	; 0x2a
 8012aa2:	d103      	bne.n	8012aac <__svfiscanf_r+0xa0>
 8012aa4:	2310      	movs	r3, #16
 8012aa6:	9341      	str	r3, [sp, #260]	; 0x104
 8012aa8:	f10a 0502 	add.w	r5, sl, #2
 8012aac:	46aa      	mov	sl, r5
 8012aae:	f815 1b01 	ldrb.w	r1, [r5], #1
 8012ab2:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 8012ab6:	2a09      	cmp	r2, #9
 8012ab8:	d922      	bls.n	8012b00 <__svfiscanf_r+0xf4>
 8012aba:	2203      	movs	r2, #3
 8012abc:	4879      	ldr	r0, [pc, #484]	; (8012ca4 <__svfiscanf_r+0x298>)
 8012abe:	f7f5 fac7 	bl	8008050 <memchr>
 8012ac2:	b138      	cbz	r0, 8012ad4 <__svfiscanf_r+0xc8>
 8012ac4:	eba0 0309 	sub.w	r3, r0, r9
 8012ac8:	2001      	movs	r0, #1
 8012aca:	4098      	lsls	r0, r3
 8012acc:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8012ace:	4318      	orrs	r0, r3
 8012ad0:	9041      	str	r0, [sp, #260]	; 0x104
 8012ad2:	46aa      	mov	sl, r5
 8012ad4:	f89a 3000 	ldrb.w	r3, [sl]
 8012ad8:	2b67      	cmp	r3, #103	; 0x67
 8012ada:	f10a 0501 	add.w	r5, sl, #1
 8012ade:	d82b      	bhi.n	8012b38 <__svfiscanf_r+0x12c>
 8012ae0:	2b65      	cmp	r3, #101	; 0x65
 8012ae2:	f080 809f 	bcs.w	8012c24 <__svfiscanf_r+0x218>
 8012ae6:	2b47      	cmp	r3, #71	; 0x47
 8012ae8:	d810      	bhi.n	8012b0c <__svfiscanf_r+0x100>
 8012aea:	2b45      	cmp	r3, #69	; 0x45
 8012aec:	f080 809a 	bcs.w	8012c24 <__svfiscanf_r+0x218>
 8012af0:	2b00      	cmp	r3, #0
 8012af2:	d06c      	beq.n	8012bce <__svfiscanf_r+0x1c2>
 8012af4:	2b25      	cmp	r3, #37	; 0x25
 8012af6:	d051      	beq.n	8012b9c <__svfiscanf_r+0x190>
 8012af8:	2303      	movs	r3, #3
 8012afa:	9347      	str	r3, [sp, #284]	; 0x11c
 8012afc:	9742      	str	r7, [sp, #264]	; 0x108
 8012afe:	e027      	b.n	8012b50 <__svfiscanf_r+0x144>
 8012b00:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 8012b02:	fb07 1303 	mla	r3, r7, r3, r1
 8012b06:	3b30      	subs	r3, #48	; 0x30
 8012b08:	9343      	str	r3, [sp, #268]	; 0x10c
 8012b0a:	e7cf      	b.n	8012aac <__svfiscanf_r+0xa0>
 8012b0c:	2b5b      	cmp	r3, #91	; 0x5b
 8012b0e:	d06a      	beq.n	8012be6 <__svfiscanf_r+0x1da>
 8012b10:	d80c      	bhi.n	8012b2c <__svfiscanf_r+0x120>
 8012b12:	2b58      	cmp	r3, #88	; 0x58
 8012b14:	d1f0      	bne.n	8012af8 <__svfiscanf_r+0xec>
 8012b16:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8012b18:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8012b1c:	9241      	str	r2, [sp, #260]	; 0x104
 8012b1e:	2210      	movs	r2, #16
 8012b20:	9242      	str	r2, [sp, #264]	; 0x108
 8012b22:	2b6e      	cmp	r3, #110	; 0x6e
 8012b24:	bf8c      	ite	hi
 8012b26:	2304      	movhi	r3, #4
 8012b28:	2303      	movls	r3, #3
 8012b2a:	e010      	b.n	8012b4e <__svfiscanf_r+0x142>
 8012b2c:	2b63      	cmp	r3, #99	; 0x63
 8012b2e:	d065      	beq.n	8012bfc <__svfiscanf_r+0x1f0>
 8012b30:	2b64      	cmp	r3, #100	; 0x64
 8012b32:	d1e1      	bne.n	8012af8 <__svfiscanf_r+0xec>
 8012b34:	9742      	str	r7, [sp, #264]	; 0x108
 8012b36:	e7f4      	b.n	8012b22 <__svfiscanf_r+0x116>
 8012b38:	2b70      	cmp	r3, #112	; 0x70
 8012b3a:	d04b      	beq.n	8012bd4 <__svfiscanf_r+0x1c8>
 8012b3c:	d826      	bhi.n	8012b8c <__svfiscanf_r+0x180>
 8012b3e:	2b6e      	cmp	r3, #110	; 0x6e
 8012b40:	d062      	beq.n	8012c08 <__svfiscanf_r+0x1fc>
 8012b42:	d84c      	bhi.n	8012bde <__svfiscanf_r+0x1d2>
 8012b44:	2b69      	cmp	r3, #105	; 0x69
 8012b46:	d1d7      	bne.n	8012af8 <__svfiscanf_r+0xec>
 8012b48:	2300      	movs	r3, #0
 8012b4a:	9342      	str	r3, [sp, #264]	; 0x108
 8012b4c:	2303      	movs	r3, #3
 8012b4e:	9347      	str	r3, [sp, #284]	; 0x11c
 8012b50:	6863      	ldr	r3, [r4, #4]
 8012b52:	2b00      	cmp	r3, #0
 8012b54:	dd68      	ble.n	8012c28 <__svfiscanf_r+0x21c>
 8012b56:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8012b58:	0659      	lsls	r1, r3, #25
 8012b5a:	d407      	bmi.n	8012b6c <__svfiscanf_r+0x160>
 8012b5c:	f003 fa60 	bl	8016020 <__locale_ctype_ptr>
 8012b60:	6823      	ldr	r3, [r4, #0]
 8012b62:	781a      	ldrb	r2, [r3, #0]
 8012b64:	4410      	add	r0, r2
 8012b66:	7842      	ldrb	r2, [r0, #1]
 8012b68:	0712      	lsls	r2, r2, #28
 8012b6a:	d464      	bmi.n	8012c36 <__svfiscanf_r+0x22a>
 8012b6c:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 8012b6e:	2b02      	cmp	r3, #2
 8012b70:	dc73      	bgt.n	8012c5a <__svfiscanf_r+0x24e>
 8012b72:	466b      	mov	r3, sp
 8012b74:	4622      	mov	r2, r4
 8012b76:	a941      	add	r1, sp, #260	; 0x104
 8012b78:	4630      	mov	r0, r6
 8012b7a:	f000 faa1 	bl	80130c0 <_scanf_chars>
 8012b7e:	2801      	cmp	r0, #1
 8012b80:	f000 8089 	beq.w	8012c96 <__svfiscanf_r+0x28a>
 8012b84:	2802      	cmp	r0, #2
 8012b86:	f47f af71 	bne.w	8012a6c <__svfiscanf_r+0x60>
 8012b8a:	e01d      	b.n	8012bc8 <__svfiscanf_r+0x1bc>
 8012b8c:	2b75      	cmp	r3, #117	; 0x75
 8012b8e:	d0d1      	beq.n	8012b34 <__svfiscanf_r+0x128>
 8012b90:	2b78      	cmp	r3, #120	; 0x78
 8012b92:	d0c0      	beq.n	8012b16 <__svfiscanf_r+0x10a>
 8012b94:	2b73      	cmp	r3, #115	; 0x73
 8012b96:	d1af      	bne.n	8012af8 <__svfiscanf_r+0xec>
 8012b98:	2302      	movs	r3, #2
 8012b9a:	e7d8      	b.n	8012b4e <__svfiscanf_r+0x142>
 8012b9c:	6863      	ldr	r3, [r4, #4]
 8012b9e:	2b00      	cmp	r3, #0
 8012ba0:	dd0c      	ble.n	8012bbc <__svfiscanf_r+0x1b0>
 8012ba2:	6823      	ldr	r3, [r4, #0]
 8012ba4:	781a      	ldrb	r2, [r3, #0]
 8012ba6:	455a      	cmp	r2, fp
 8012ba8:	d175      	bne.n	8012c96 <__svfiscanf_r+0x28a>
 8012baa:	3301      	adds	r3, #1
 8012bac:	6862      	ldr	r2, [r4, #4]
 8012bae:	6023      	str	r3, [r4, #0]
 8012bb0:	9b45      	ldr	r3, [sp, #276]	; 0x114
 8012bb2:	3a01      	subs	r2, #1
 8012bb4:	3301      	adds	r3, #1
 8012bb6:	6062      	str	r2, [r4, #4]
 8012bb8:	9345      	str	r3, [sp, #276]	; 0x114
 8012bba:	e757      	b.n	8012a6c <__svfiscanf_r+0x60>
 8012bbc:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8012bbe:	4621      	mov	r1, r4
 8012bc0:	4630      	mov	r0, r6
 8012bc2:	4798      	blx	r3
 8012bc4:	2800      	cmp	r0, #0
 8012bc6:	d0ec      	beq.n	8012ba2 <__svfiscanf_r+0x196>
 8012bc8:	9844      	ldr	r0, [sp, #272]	; 0x110
 8012bca:	2800      	cmp	r0, #0
 8012bcc:	d159      	bne.n	8012c82 <__svfiscanf_r+0x276>
 8012bce:	f04f 30ff 	mov.w	r0, #4294967295
 8012bd2:	e05c      	b.n	8012c8e <__svfiscanf_r+0x282>
 8012bd4:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8012bd6:	f042 0220 	orr.w	r2, r2, #32
 8012bda:	9241      	str	r2, [sp, #260]	; 0x104
 8012bdc:	e79b      	b.n	8012b16 <__svfiscanf_r+0x10a>
 8012bde:	2308      	movs	r3, #8
 8012be0:	9342      	str	r3, [sp, #264]	; 0x108
 8012be2:	2304      	movs	r3, #4
 8012be4:	e7b3      	b.n	8012b4e <__svfiscanf_r+0x142>
 8012be6:	4629      	mov	r1, r5
 8012be8:	4640      	mov	r0, r8
 8012bea:	f000 fe6d 	bl	80138c8 <__sccl>
 8012bee:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8012bf0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8012bf4:	9341      	str	r3, [sp, #260]	; 0x104
 8012bf6:	4605      	mov	r5, r0
 8012bf8:	2301      	movs	r3, #1
 8012bfa:	e7a8      	b.n	8012b4e <__svfiscanf_r+0x142>
 8012bfc:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8012bfe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8012c02:	9341      	str	r3, [sp, #260]	; 0x104
 8012c04:	2300      	movs	r3, #0
 8012c06:	e7a2      	b.n	8012b4e <__svfiscanf_r+0x142>
 8012c08:	9841      	ldr	r0, [sp, #260]	; 0x104
 8012c0a:	06c3      	lsls	r3, r0, #27
 8012c0c:	f53f af2e 	bmi.w	8012a6c <__svfiscanf_r+0x60>
 8012c10:	9b00      	ldr	r3, [sp, #0]
 8012c12:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8012c14:	1d19      	adds	r1, r3, #4
 8012c16:	9100      	str	r1, [sp, #0]
 8012c18:	681b      	ldr	r3, [r3, #0]
 8012c1a:	07c0      	lsls	r0, r0, #31
 8012c1c:	bf4c      	ite	mi
 8012c1e:	801a      	strhmi	r2, [r3, #0]
 8012c20:	601a      	strpl	r2, [r3, #0]
 8012c22:	e723      	b.n	8012a6c <__svfiscanf_r+0x60>
 8012c24:	2305      	movs	r3, #5
 8012c26:	e792      	b.n	8012b4e <__svfiscanf_r+0x142>
 8012c28:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8012c2a:	4621      	mov	r1, r4
 8012c2c:	4630      	mov	r0, r6
 8012c2e:	4798      	blx	r3
 8012c30:	2800      	cmp	r0, #0
 8012c32:	d090      	beq.n	8012b56 <__svfiscanf_r+0x14a>
 8012c34:	e7c8      	b.n	8012bc8 <__svfiscanf_r+0x1bc>
 8012c36:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8012c38:	3201      	adds	r2, #1
 8012c3a:	9245      	str	r2, [sp, #276]	; 0x114
 8012c3c:	6862      	ldr	r2, [r4, #4]
 8012c3e:	3a01      	subs	r2, #1
 8012c40:	2a00      	cmp	r2, #0
 8012c42:	6062      	str	r2, [r4, #4]
 8012c44:	dd02      	ble.n	8012c4c <__svfiscanf_r+0x240>
 8012c46:	3301      	adds	r3, #1
 8012c48:	6023      	str	r3, [r4, #0]
 8012c4a:	e787      	b.n	8012b5c <__svfiscanf_r+0x150>
 8012c4c:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8012c4e:	4621      	mov	r1, r4
 8012c50:	4630      	mov	r0, r6
 8012c52:	4798      	blx	r3
 8012c54:	2800      	cmp	r0, #0
 8012c56:	d081      	beq.n	8012b5c <__svfiscanf_r+0x150>
 8012c58:	e7b6      	b.n	8012bc8 <__svfiscanf_r+0x1bc>
 8012c5a:	2b04      	cmp	r3, #4
 8012c5c:	dc06      	bgt.n	8012c6c <__svfiscanf_r+0x260>
 8012c5e:	466b      	mov	r3, sp
 8012c60:	4622      	mov	r2, r4
 8012c62:	a941      	add	r1, sp, #260	; 0x104
 8012c64:	4630      	mov	r0, r6
 8012c66:	f000 fa8f 	bl	8013188 <_scanf_i>
 8012c6a:	e788      	b.n	8012b7e <__svfiscanf_r+0x172>
 8012c6c:	4b0e      	ldr	r3, [pc, #56]	; (8012ca8 <__svfiscanf_r+0x29c>)
 8012c6e:	2b00      	cmp	r3, #0
 8012c70:	f43f aefc 	beq.w	8012a6c <__svfiscanf_r+0x60>
 8012c74:	466b      	mov	r3, sp
 8012c76:	4622      	mov	r2, r4
 8012c78:	a941      	add	r1, sp, #260	; 0x104
 8012c7a:	4630      	mov	r0, r6
 8012c7c:	f000 f83e 	bl	8012cfc <_scanf_float>
 8012c80:	e77d      	b.n	8012b7e <__svfiscanf_r+0x172>
 8012c82:	89a3      	ldrh	r3, [r4, #12]
 8012c84:	f013 0f40 	tst.w	r3, #64	; 0x40
 8012c88:	bf18      	it	ne
 8012c8a:	f04f 30ff 	movne.w	r0, #4294967295
 8012c8e:	f50d 7d23 	add.w	sp, sp, #652	; 0x28c
 8012c92:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012c96:	9844      	ldr	r0, [sp, #272]	; 0x110
 8012c98:	e7f9      	b.n	8012c8e <__svfiscanf_r+0x282>
 8012c9a:	bf00      	nop
 8012c9c:	08014a59 	.word	0x08014a59
 8012ca0:	08013761 	.word	0x08013761
 8012ca4:	080170e6 	.word	0x080170e6
 8012ca8:	08012cfd 	.word	0x08012cfd

08012cac <_vfiscanf_r>:
 8012cac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012cb0:	460c      	mov	r4, r1
 8012cb2:	4616      	mov	r6, r2
 8012cb4:	461f      	mov	r7, r3
 8012cb6:	4605      	mov	r5, r0
 8012cb8:	b118      	cbz	r0, 8012cc2 <_vfiscanf_r+0x16>
 8012cba:	6983      	ldr	r3, [r0, #24]
 8012cbc:	b90b      	cbnz	r3, 8012cc2 <_vfiscanf_r+0x16>
 8012cbe:	f7fe ff1f 	bl	8011b00 <__sinit>
 8012cc2:	4b0b      	ldr	r3, [pc, #44]	; (8012cf0 <_vfiscanf_r+0x44>)
 8012cc4:	429c      	cmp	r4, r3
 8012cc6:	d108      	bne.n	8012cda <_vfiscanf_r+0x2e>
 8012cc8:	686c      	ldr	r4, [r5, #4]
 8012cca:	463b      	mov	r3, r7
 8012ccc:	4632      	mov	r2, r6
 8012cce:	4621      	mov	r1, r4
 8012cd0:	4628      	mov	r0, r5
 8012cd2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8012cd6:	f7ff be99 	b.w	8012a0c <__svfiscanf_r>
 8012cda:	4b06      	ldr	r3, [pc, #24]	; (8012cf4 <_vfiscanf_r+0x48>)
 8012cdc:	429c      	cmp	r4, r3
 8012cde:	d101      	bne.n	8012ce4 <_vfiscanf_r+0x38>
 8012ce0:	68ac      	ldr	r4, [r5, #8]
 8012ce2:	e7f2      	b.n	8012cca <_vfiscanf_r+0x1e>
 8012ce4:	4b04      	ldr	r3, [pc, #16]	; (8012cf8 <_vfiscanf_r+0x4c>)
 8012ce6:	429c      	cmp	r4, r3
 8012ce8:	bf08      	it	eq
 8012cea:	68ec      	ldreq	r4, [r5, #12]
 8012cec:	e7ed      	b.n	8012cca <_vfiscanf_r+0x1e>
 8012cee:	bf00      	nop
 8012cf0:	0801709c 	.word	0x0801709c
 8012cf4:	080170bc 	.word	0x080170bc
 8012cf8:	0801707c 	.word	0x0801707c

08012cfc <_scanf_float>:
 8012cfc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012d00:	469a      	mov	sl, r3
 8012d02:	688b      	ldr	r3, [r1, #8]
 8012d04:	4616      	mov	r6, r2
 8012d06:	1e5a      	subs	r2, r3, #1
 8012d08:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8012d0c:	b087      	sub	sp, #28
 8012d0e:	bf83      	ittte	hi
 8012d10:	f46f 72ae 	mvnhi.w	r2, #348	; 0x15c
 8012d14:	189b      	addhi	r3, r3, r2
 8012d16:	9301      	strhi	r3, [sp, #4]
 8012d18:	2300      	movls	r3, #0
 8012d1a:	bf86      	itte	hi
 8012d1c:	f240 135d 	movwhi	r3, #349	; 0x15d
 8012d20:	608b      	strhi	r3, [r1, #8]
 8012d22:	9301      	strls	r3, [sp, #4]
 8012d24:	680b      	ldr	r3, [r1, #0]
 8012d26:	4688      	mov	r8, r1
 8012d28:	f04f 0b00 	mov.w	fp, #0
 8012d2c:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8012d30:	f848 3b1c 	str.w	r3, [r8], #28
 8012d34:	e9cd bb03 	strd	fp, fp, [sp, #12]
 8012d38:	4607      	mov	r7, r0
 8012d3a:	460c      	mov	r4, r1
 8012d3c:	4645      	mov	r5, r8
 8012d3e:	465a      	mov	r2, fp
 8012d40:	46d9      	mov	r9, fp
 8012d42:	f8cd b008 	str.w	fp, [sp, #8]
 8012d46:	68a1      	ldr	r1, [r4, #8]
 8012d48:	b181      	cbz	r1, 8012d6c <_scanf_float+0x70>
 8012d4a:	6833      	ldr	r3, [r6, #0]
 8012d4c:	781b      	ldrb	r3, [r3, #0]
 8012d4e:	2b49      	cmp	r3, #73	; 0x49
 8012d50:	d071      	beq.n	8012e36 <_scanf_float+0x13a>
 8012d52:	d84d      	bhi.n	8012df0 <_scanf_float+0xf4>
 8012d54:	2b39      	cmp	r3, #57	; 0x39
 8012d56:	d840      	bhi.n	8012dda <_scanf_float+0xde>
 8012d58:	2b31      	cmp	r3, #49	; 0x31
 8012d5a:	f080 8088 	bcs.w	8012e6e <_scanf_float+0x172>
 8012d5e:	2b2d      	cmp	r3, #45	; 0x2d
 8012d60:	f000 8090 	beq.w	8012e84 <_scanf_float+0x188>
 8012d64:	d815      	bhi.n	8012d92 <_scanf_float+0x96>
 8012d66:	2b2b      	cmp	r3, #43	; 0x2b
 8012d68:	f000 808c 	beq.w	8012e84 <_scanf_float+0x188>
 8012d6c:	f1b9 0f00 	cmp.w	r9, #0
 8012d70:	d003      	beq.n	8012d7a <_scanf_float+0x7e>
 8012d72:	6823      	ldr	r3, [r4, #0]
 8012d74:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8012d78:	6023      	str	r3, [r4, #0]
 8012d7a:	3a01      	subs	r2, #1
 8012d7c:	2a01      	cmp	r2, #1
 8012d7e:	f200 80ea 	bhi.w	8012f56 <_scanf_float+0x25a>
 8012d82:	4545      	cmp	r5, r8
 8012d84:	f200 80dc 	bhi.w	8012f40 <_scanf_float+0x244>
 8012d88:	2601      	movs	r6, #1
 8012d8a:	4630      	mov	r0, r6
 8012d8c:	b007      	add	sp, #28
 8012d8e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012d92:	2b2e      	cmp	r3, #46	; 0x2e
 8012d94:	f000 809f 	beq.w	8012ed6 <_scanf_float+0x1da>
 8012d98:	2b30      	cmp	r3, #48	; 0x30
 8012d9a:	d1e7      	bne.n	8012d6c <_scanf_float+0x70>
 8012d9c:	6820      	ldr	r0, [r4, #0]
 8012d9e:	f410 7f80 	tst.w	r0, #256	; 0x100
 8012da2:	d064      	beq.n	8012e6e <_scanf_float+0x172>
 8012da4:	9b01      	ldr	r3, [sp, #4]
 8012da6:	f020 0080 	bic.w	r0, r0, #128	; 0x80
 8012daa:	6020      	str	r0, [r4, #0]
 8012dac:	f109 0901 	add.w	r9, r9, #1
 8012db0:	b11b      	cbz	r3, 8012dba <_scanf_float+0xbe>
 8012db2:	3b01      	subs	r3, #1
 8012db4:	3101      	adds	r1, #1
 8012db6:	9301      	str	r3, [sp, #4]
 8012db8:	60a1      	str	r1, [r4, #8]
 8012dba:	68a3      	ldr	r3, [r4, #8]
 8012dbc:	3b01      	subs	r3, #1
 8012dbe:	60a3      	str	r3, [r4, #8]
 8012dc0:	6923      	ldr	r3, [r4, #16]
 8012dc2:	3301      	adds	r3, #1
 8012dc4:	6123      	str	r3, [r4, #16]
 8012dc6:	6873      	ldr	r3, [r6, #4]
 8012dc8:	3b01      	subs	r3, #1
 8012dca:	2b00      	cmp	r3, #0
 8012dcc:	6073      	str	r3, [r6, #4]
 8012dce:	f340 80ac 	ble.w	8012f2a <_scanf_float+0x22e>
 8012dd2:	6833      	ldr	r3, [r6, #0]
 8012dd4:	3301      	adds	r3, #1
 8012dd6:	6033      	str	r3, [r6, #0]
 8012dd8:	e7b5      	b.n	8012d46 <_scanf_float+0x4a>
 8012dda:	2b45      	cmp	r3, #69	; 0x45
 8012ddc:	f000 8085 	beq.w	8012eea <_scanf_float+0x1ee>
 8012de0:	2b46      	cmp	r3, #70	; 0x46
 8012de2:	d06a      	beq.n	8012eba <_scanf_float+0x1be>
 8012de4:	2b41      	cmp	r3, #65	; 0x41
 8012de6:	d1c1      	bne.n	8012d6c <_scanf_float+0x70>
 8012de8:	2a01      	cmp	r2, #1
 8012dea:	d1bf      	bne.n	8012d6c <_scanf_float+0x70>
 8012dec:	2202      	movs	r2, #2
 8012dee:	e046      	b.n	8012e7e <_scanf_float+0x182>
 8012df0:	2b65      	cmp	r3, #101	; 0x65
 8012df2:	d07a      	beq.n	8012eea <_scanf_float+0x1ee>
 8012df4:	d818      	bhi.n	8012e28 <_scanf_float+0x12c>
 8012df6:	2b54      	cmp	r3, #84	; 0x54
 8012df8:	d066      	beq.n	8012ec8 <_scanf_float+0x1cc>
 8012dfa:	d811      	bhi.n	8012e20 <_scanf_float+0x124>
 8012dfc:	2b4e      	cmp	r3, #78	; 0x4e
 8012dfe:	d1b5      	bne.n	8012d6c <_scanf_float+0x70>
 8012e00:	2a00      	cmp	r2, #0
 8012e02:	d146      	bne.n	8012e92 <_scanf_float+0x196>
 8012e04:	f1b9 0f00 	cmp.w	r9, #0
 8012e08:	d145      	bne.n	8012e96 <_scanf_float+0x19a>
 8012e0a:	6821      	ldr	r1, [r4, #0]
 8012e0c:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 8012e10:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 8012e14:	d13f      	bne.n	8012e96 <_scanf_float+0x19a>
 8012e16:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 8012e1a:	6021      	str	r1, [r4, #0]
 8012e1c:	2201      	movs	r2, #1
 8012e1e:	e02e      	b.n	8012e7e <_scanf_float+0x182>
 8012e20:	2b59      	cmp	r3, #89	; 0x59
 8012e22:	d01e      	beq.n	8012e62 <_scanf_float+0x166>
 8012e24:	2b61      	cmp	r3, #97	; 0x61
 8012e26:	e7de      	b.n	8012de6 <_scanf_float+0xea>
 8012e28:	2b6e      	cmp	r3, #110	; 0x6e
 8012e2a:	d0e9      	beq.n	8012e00 <_scanf_float+0x104>
 8012e2c:	d815      	bhi.n	8012e5a <_scanf_float+0x15e>
 8012e2e:	2b66      	cmp	r3, #102	; 0x66
 8012e30:	d043      	beq.n	8012eba <_scanf_float+0x1be>
 8012e32:	2b69      	cmp	r3, #105	; 0x69
 8012e34:	d19a      	bne.n	8012d6c <_scanf_float+0x70>
 8012e36:	f1bb 0f00 	cmp.w	fp, #0
 8012e3a:	d138      	bne.n	8012eae <_scanf_float+0x1b2>
 8012e3c:	f1b9 0f00 	cmp.w	r9, #0
 8012e40:	d197      	bne.n	8012d72 <_scanf_float+0x76>
 8012e42:	6821      	ldr	r1, [r4, #0]
 8012e44:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 8012e48:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 8012e4c:	d195      	bne.n	8012d7a <_scanf_float+0x7e>
 8012e4e:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 8012e52:	6021      	str	r1, [r4, #0]
 8012e54:	f04f 0b01 	mov.w	fp, #1
 8012e58:	e011      	b.n	8012e7e <_scanf_float+0x182>
 8012e5a:	2b74      	cmp	r3, #116	; 0x74
 8012e5c:	d034      	beq.n	8012ec8 <_scanf_float+0x1cc>
 8012e5e:	2b79      	cmp	r3, #121	; 0x79
 8012e60:	d184      	bne.n	8012d6c <_scanf_float+0x70>
 8012e62:	f1bb 0f07 	cmp.w	fp, #7
 8012e66:	d181      	bne.n	8012d6c <_scanf_float+0x70>
 8012e68:	f04f 0b08 	mov.w	fp, #8
 8012e6c:	e007      	b.n	8012e7e <_scanf_float+0x182>
 8012e6e:	eb12 0f0b 	cmn.w	r2, fp
 8012e72:	f47f af7b 	bne.w	8012d6c <_scanf_float+0x70>
 8012e76:	6821      	ldr	r1, [r4, #0]
 8012e78:	f421 71c0 	bic.w	r1, r1, #384	; 0x180
 8012e7c:	6021      	str	r1, [r4, #0]
 8012e7e:	702b      	strb	r3, [r5, #0]
 8012e80:	3501      	adds	r5, #1
 8012e82:	e79a      	b.n	8012dba <_scanf_float+0xbe>
 8012e84:	6821      	ldr	r1, [r4, #0]
 8012e86:	0608      	lsls	r0, r1, #24
 8012e88:	f57f af70 	bpl.w	8012d6c <_scanf_float+0x70>
 8012e8c:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8012e90:	e7f4      	b.n	8012e7c <_scanf_float+0x180>
 8012e92:	2a02      	cmp	r2, #2
 8012e94:	d047      	beq.n	8012f26 <_scanf_float+0x22a>
 8012e96:	f1bb 0f01 	cmp.w	fp, #1
 8012e9a:	d003      	beq.n	8012ea4 <_scanf_float+0x1a8>
 8012e9c:	f1bb 0f04 	cmp.w	fp, #4
 8012ea0:	f47f af64 	bne.w	8012d6c <_scanf_float+0x70>
 8012ea4:	f10b 0b01 	add.w	fp, fp, #1
 8012ea8:	fa5f fb8b 	uxtb.w	fp, fp
 8012eac:	e7e7      	b.n	8012e7e <_scanf_float+0x182>
 8012eae:	f1bb 0f03 	cmp.w	fp, #3
 8012eb2:	d0f7      	beq.n	8012ea4 <_scanf_float+0x1a8>
 8012eb4:	f1bb 0f05 	cmp.w	fp, #5
 8012eb8:	e7f2      	b.n	8012ea0 <_scanf_float+0x1a4>
 8012eba:	f1bb 0f02 	cmp.w	fp, #2
 8012ebe:	f47f af55 	bne.w	8012d6c <_scanf_float+0x70>
 8012ec2:	f04f 0b03 	mov.w	fp, #3
 8012ec6:	e7da      	b.n	8012e7e <_scanf_float+0x182>
 8012ec8:	f1bb 0f06 	cmp.w	fp, #6
 8012ecc:	f47f af4e 	bne.w	8012d6c <_scanf_float+0x70>
 8012ed0:	f04f 0b07 	mov.w	fp, #7
 8012ed4:	e7d3      	b.n	8012e7e <_scanf_float+0x182>
 8012ed6:	6821      	ldr	r1, [r4, #0]
 8012ed8:	0588      	lsls	r0, r1, #22
 8012eda:	f57f af47 	bpl.w	8012d6c <_scanf_float+0x70>
 8012ede:	f421 7120 	bic.w	r1, r1, #640	; 0x280
 8012ee2:	6021      	str	r1, [r4, #0]
 8012ee4:	f8cd 9008 	str.w	r9, [sp, #8]
 8012ee8:	e7c9      	b.n	8012e7e <_scanf_float+0x182>
 8012eea:	6821      	ldr	r1, [r4, #0]
 8012eec:	f401 60a0 	and.w	r0, r1, #1280	; 0x500
 8012ef0:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 8012ef4:	d006      	beq.n	8012f04 <_scanf_float+0x208>
 8012ef6:	0548      	lsls	r0, r1, #21
 8012ef8:	f57f af38 	bpl.w	8012d6c <_scanf_float+0x70>
 8012efc:	f1b9 0f00 	cmp.w	r9, #0
 8012f00:	f43f af3b 	beq.w	8012d7a <_scanf_float+0x7e>
 8012f04:	0588      	lsls	r0, r1, #22
 8012f06:	bf58      	it	pl
 8012f08:	9802      	ldrpl	r0, [sp, #8]
 8012f0a:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 8012f0e:	bf58      	it	pl
 8012f10:	eba9 0000 	subpl.w	r0, r9, r0
 8012f14:	f441 71c0 	orr.w	r1, r1, #384	; 0x180
 8012f18:	bf58      	it	pl
 8012f1a:	e9cd 0503 	strdpl	r0, r5, [sp, #12]
 8012f1e:	6021      	str	r1, [r4, #0]
 8012f20:	f04f 0900 	mov.w	r9, #0
 8012f24:	e7ab      	b.n	8012e7e <_scanf_float+0x182>
 8012f26:	2203      	movs	r2, #3
 8012f28:	e7a9      	b.n	8012e7e <_scanf_float+0x182>
 8012f2a:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8012f2e:	9205      	str	r2, [sp, #20]
 8012f30:	4631      	mov	r1, r6
 8012f32:	4638      	mov	r0, r7
 8012f34:	4798      	blx	r3
 8012f36:	9a05      	ldr	r2, [sp, #20]
 8012f38:	2800      	cmp	r0, #0
 8012f3a:	f43f af04 	beq.w	8012d46 <_scanf_float+0x4a>
 8012f3e:	e715      	b.n	8012d6c <_scanf_float+0x70>
 8012f40:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8012f44:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8012f48:	4632      	mov	r2, r6
 8012f4a:	4638      	mov	r0, r7
 8012f4c:	4798      	blx	r3
 8012f4e:	6923      	ldr	r3, [r4, #16]
 8012f50:	3b01      	subs	r3, #1
 8012f52:	6123      	str	r3, [r4, #16]
 8012f54:	e715      	b.n	8012d82 <_scanf_float+0x86>
 8012f56:	f10b 33ff 	add.w	r3, fp, #4294967295
 8012f5a:	2b06      	cmp	r3, #6
 8012f5c:	d80a      	bhi.n	8012f74 <_scanf_float+0x278>
 8012f5e:	f1bb 0f02 	cmp.w	fp, #2
 8012f62:	d968      	bls.n	8013036 <_scanf_float+0x33a>
 8012f64:	f1ab 0b03 	sub.w	fp, fp, #3
 8012f68:	fa5f fb8b 	uxtb.w	fp, fp
 8012f6c:	eba5 0b0b 	sub.w	fp, r5, fp
 8012f70:	455d      	cmp	r5, fp
 8012f72:	d14b      	bne.n	801300c <_scanf_float+0x310>
 8012f74:	6823      	ldr	r3, [r4, #0]
 8012f76:	05da      	lsls	r2, r3, #23
 8012f78:	d51f      	bpl.n	8012fba <_scanf_float+0x2be>
 8012f7a:	055b      	lsls	r3, r3, #21
 8012f7c:	d468      	bmi.n	8013050 <_scanf_float+0x354>
 8012f7e:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8012f82:	6923      	ldr	r3, [r4, #16]
 8012f84:	2965      	cmp	r1, #101	; 0x65
 8012f86:	f103 33ff 	add.w	r3, r3, #4294967295
 8012f8a:	f105 3bff 	add.w	fp, r5, #4294967295
 8012f8e:	6123      	str	r3, [r4, #16]
 8012f90:	d00d      	beq.n	8012fae <_scanf_float+0x2b2>
 8012f92:	2945      	cmp	r1, #69	; 0x45
 8012f94:	d00b      	beq.n	8012fae <_scanf_float+0x2b2>
 8012f96:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8012f9a:	4632      	mov	r2, r6
 8012f9c:	4638      	mov	r0, r7
 8012f9e:	4798      	blx	r3
 8012fa0:	6923      	ldr	r3, [r4, #16]
 8012fa2:	f815 1c02 	ldrb.w	r1, [r5, #-2]
 8012fa6:	3b01      	subs	r3, #1
 8012fa8:	f1a5 0b02 	sub.w	fp, r5, #2
 8012fac:	6123      	str	r3, [r4, #16]
 8012fae:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8012fb2:	4632      	mov	r2, r6
 8012fb4:	4638      	mov	r0, r7
 8012fb6:	4798      	blx	r3
 8012fb8:	465d      	mov	r5, fp
 8012fba:	6826      	ldr	r6, [r4, #0]
 8012fbc:	f016 0610 	ands.w	r6, r6, #16
 8012fc0:	d17a      	bne.n	80130b8 <_scanf_float+0x3bc>
 8012fc2:	702e      	strb	r6, [r5, #0]
 8012fc4:	6823      	ldr	r3, [r4, #0]
 8012fc6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8012fca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8012fce:	d142      	bne.n	8013056 <_scanf_float+0x35a>
 8012fd0:	9b02      	ldr	r3, [sp, #8]
 8012fd2:	eba9 0303 	sub.w	r3, r9, r3
 8012fd6:	425a      	negs	r2, r3
 8012fd8:	2b00      	cmp	r3, #0
 8012fda:	d149      	bne.n	8013070 <_scanf_float+0x374>
 8012fdc:	2200      	movs	r2, #0
 8012fde:	4641      	mov	r1, r8
 8012fe0:	4638      	mov	r0, r7
 8012fe2:	f001 fbd5 	bl	8014790 <_strtod_r>
 8012fe6:	6825      	ldr	r5, [r4, #0]
 8012fe8:	f8da 3000 	ldr.w	r3, [sl]
 8012fec:	f015 0f02 	tst.w	r5, #2
 8012ff0:	f103 0204 	add.w	r2, r3, #4
 8012ff4:	ec59 8b10 	vmov	r8, r9, d0
 8012ff8:	f8ca 2000 	str.w	r2, [sl]
 8012ffc:	d043      	beq.n	8013086 <_scanf_float+0x38a>
 8012ffe:	681b      	ldr	r3, [r3, #0]
 8013000:	e9c3 8900 	strd	r8, r9, [r3]
 8013004:	68e3      	ldr	r3, [r4, #12]
 8013006:	3301      	adds	r3, #1
 8013008:	60e3      	str	r3, [r4, #12]
 801300a:	e6be      	b.n	8012d8a <_scanf_float+0x8e>
 801300c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8013010:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8013014:	4632      	mov	r2, r6
 8013016:	4638      	mov	r0, r7
 8013018:	4798      	blx	r3
 801301a:	6923      	ldr	r3, [r4, #16]
 801301c:	3b01      	subs	r3, #1
 801301e:	6123      	str	r3, [r4, #16]
 8013020:	e7a6      	b.n	8012f70 <_scanf_float+0x274>
 8013022:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8013026:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 801302a:	4632      	mov	r2, r6
 801302c:	4638      	mov	r0, r7
 801302e:	4798      	blx	r3
 8013030:	6923      	ldr	r3, [r4, #16]
 8013032:	3b01      	subs	r3, #1
 8013034:	6123      	str	r3, [r4, #16]
 8013036:	4545      	cmp	r5, r8
 8013038:	d8f3      	bhi.n	8013022 <_scanf_float+0x326>
 801303a:	e6a5      	b.n	8012d88 <_scanf_float+0x8c>
 801303c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8013040:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8013044:	4632      	mov	r2, r6
 8013046:	4638      	mov	r0, r7
 8013048:	4798      	blx	r3
 801304a:	6923      	ldr	r3, [r4, #16]
 801304c:	3b01      	subs	r3, #1
 801304e:	6123      	str	r3, [r4, #16]
 8013050:	4545      	cmp	r5, r8
 8013052:	d8f3      	bhi.n	801303c <_scanf_float+0x340>
 8013054:	e698      	b.n	8012d88 <_scanf_float+0x8c>
 8013056:	9b03      	ldr	r3, [sp, #12]
 8013058:	2b00      	cmp	r3, #0
 801305a:	d0bf      	beq.n	8012fdc <_scanf_float+0x2e0>
 801305c:	9904      	ldr	r1, [sp, #16]
 801305e:	230a      	movs	r3, #10
 8013060:	4632      	mov	r2, r6
 8013062:	3101      	adds	r1, #1
 8013064:	4638      	mov	r0, r7
 8013066:	f001 fc1f 	bl	80148a8 <_strtol_r>
 801306a:	9b03      	ldr	r3, [sp, #12]
 801306c:	9d04      	ldr	r5, [sp, #16]
 801306e:	1ac2      	subs	r2, r0, r3
 8013070:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8013074:	429d      	cmp	r5, r3
 8013076:	bf28      	it	cs
 8013078:	f504 75b7 	addcs.w	r5, r4, #366	; 0x16e
 801307c:	490f      	ldr	r1, [pc, #60]	; (80130bc <_scanf_float+0x3c0>)
 801307e:	4628      	mov	r0, r5
 8013080:	f000 fd10 	bl	8013aa4 <siprintf>
 8013084:	e7aa      	b.n	8012fdc <_scanf_float+0x2e0>
 8013086:	f015 0504 	ands.w	r5, r5, #4
 801308a:	d1b8      	bne.n	8012ffe <_scanf_float+0x302>
 801308c:	681f      	ldr	r7, [r3, #0]
 801308e:	ee10 2a10 	vmov	r2, s0
 8013092:	464b      	mov	r3, r9
 8013094:	ee10 0a10 	vmov	r0, s0
 8013098:	4649      	mov	r1, r9
 801309a:	f7f5 fc7f 	bl	800899c <__aeabi_dcmpun>
 801309e:	b128      	cbz	r0, 80130ac <_scanf_float+0x3b0>
 80130a0:	4628      	mov	r0, r5
 80130a2:	f000 fcf9 	bl	8013a98 <nanf>
 80130a6:	ed87 0a00 	vstr	s0, [r7]
 80130aa:	e7ab      	b.n	8013004 <_scanf_float+0x308>
 80130ac:	4640      	mov	r0, r8
 80130ae:	4649      	mov	r1, r9
 80130b0:	f7f5 fcd2 	bl	8008a58 <__aeabi_d2f>
 80130b4:	6038      	str	r0, [r7, #0]
 80130b6:	e7a5      	b.n	8013004 <_scanf_float+0x308>
 80130b8:	2600      	movs	r6, #0
 80130ba:	e666      	b.n	8012d8a <_scanf_float+0x8e>
 80130bc:	08017123 	.word	0x08017123

080130c0 <_scanf_chars>:
 80130c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80130c4:	4615      	mov	r5, r2
 80130c6:	688a      	ldr	r2, [r1, #8]
 80130c8:	4680      	mov	r8, r0
 80130ca:	460c      	mov	r4, r1
 80130cc:	b932      	cbnz	r2, 80130dc <_scanf_chars+0x1c>
 80130ce:	698a      	ldr	r2, [r1, #24]
 80130d0:	2a00      	cmp	r2, #0
 80130d2:	bf14      	ite	ne
 80130d4:	f04f 32ff 	movne.w	r2, #4294967295
 80130d8:	2201      	moveq	r2, #1
 80130da:	608a      	str	r2, [r1, #8]
 80130dc:	6822      	ldr	r2, [r4, #0]
 80130de:	06d1      	lsls	r1, r2, #27
 80130e0:	bf5f      	itttt	pl
 80130e2:	681a      	ldrpl	r2, [r3, #0]
 80130e4:	1d11      	addpl	r1, r2, #4
 80130e6:	6019      	strpl	r1, [r3, #0]
 80130e8:	6817      	ldrpl	r7, [r2, #0]
 80130ea:	2600      	movs	r6, #0
 80130ec:	69a3      	ldr	r3, [r4, #24]
 80130ee:	b1db      	cbz	r3, 8013128 <_scanf_chars+0x68>
 80130f0:	2b01      	cmp	r3, #1
 80130f2:	d107      	bne.n	8013104 <_scanf_chars+0x44>
 80130f4:	682b      	ldr	r3, [r5, #0]
 80130f6:	6962      	ldr	r2, [r4, #20]
 80130f8:	781b      	ldrb	r3, [r3, #0]
 80130fa:	5cd3      	ldrb	r3, [r2, r3]
 80130fc:	b9a3      	cbnz	r3, 8013128 <_scanf_chars+0x68>
 80130fe:	2e00      	cmp	r6, #0
 8013100:	d132      	bne.n	8013168 <_scanf_chars+0xa8>
 8013102:	e006      	b.n	8013112 <_scanf_chars+0x52>
 8013104:	2b02      	cmp	r3, #2
 8013106:	d007      	beq.n	8013118 <_scanf_chars+0x58>
 8013108:	2e00      	cmp	r6, #0
 801310a:	d12d      	bne.n	8013168 <_scanf_chars+0xa8>
 801310c:	69a3      	ldr	r3, [r4, #24]
 801310e:	2b01      	cmp	r3, #1
 8013110:	d12a      	bne.n	8013168 <_scanf_chars+0xa8>
 8013112:	2001      	movs	r0, #1
 8013114:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013118:	f002 ff82 	bl	8016020 <__locale_ctype_ptr>
 801311c:	682b      	ldr	r3, [r5, #0]
 801311e:	781b      	ldrb	r3, [r3, #0]
 8013120:	4418      	add	r0, r3
 8013122:	7843      	ldrb	r3, [r0, #1]
 8013124:	071b      	lsls	r3, r3, #28
 8013126:	d4ef      	bmi.n	8013108 <_scanf_chars+0x48>
 8013128:	6823      	ldr	r3, [r4, #0]
 801312a:	06da      	lsls	r2, r3, #27
 801312c:	bf5e      	ittt	pl
 801312e:	682b      	ldrpl	r3, [r5, #0]
 8013130:	781b      	ldrbpl	r3, [r3, #0]
 8013132:	703b      	strbpl	r3, [r7, #0]
 8013134:	682a      	ldr	r2, [r5, #0]
 8013136:	686b      	ldr	r3, [r5, #4]
 8013138:	f102 0201 	add.w	r2, r2, #1
 801313c:	602a      	str	r2, [r5, #0]
 801313e:	68a2      	ldr	r2, [r4, #8]
 8013140:	f103 33ff 	add.w	r3, r3, #4294967295
 8013144:	f102 32ff 	add.w	r2, r2, #4294967295
 8013148:	606b      	str	r3, [r5, #4]
 801314a:	f106 0601 	add.w	r6, r6, #1
 801314e:	bf58      	it	pl
 8013150:	3701      	addpl	r7, #1
 8013152:	60a2      	str	r2, [r4, #8]
 8013154:	b142      	cbz	r2, 8013168 <_scanf_chars+0xa8>
 8013156:	2b00      	cmp	r3, #0
 8013158:	dcc8      	bgt.n	80130ec <_scanf_chars+0x2c>
 801315a:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 801315e:	4629      	mov	r1, r5
 8013160:	4640      	mov	r0, r8
 8013162:	4798      	blx	r3
 8013164:	2800      	cmp	r0, #0
 8013166:	d0c1      	beq.n	80130ec <_scanf_chars+0x2c>
 8013168:	6823      	ldr	r3, [r4, #0]
 801316a:	f013 0310 	ands.w	r3, r3, #16
 801316e:	d105      	bne.n	801317c <_scanf_chars+0xbc>
 8013170:	68e2      	ldr	r2, [r4, #12]
 8013172:	3201      	adds	r2, #1
 8013174:	60e2      	str	r2, [r4, #12]
 8013176:	69a2      	ldr	r2, [r4, #24]
 8013178:	b102      	cbz	r2, 801317c <_scanf_chars+0xbc>
 801317a:	703b      	strb	r3, [r7, #0]
 801317c:	6923      	ldr	r3, [r4, #16]
 801317e:	441e      	add	r6, r3
 8013180:	6126      	str	r6, [r4, #16]
 8013182:	2000      	movs	r0, #0
 8013184:	e7c6      	b.n	8013114 <_scanf_chars+0x54>
	...

08013188 <_scanf_i>:
 8013188:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801318c:	469a      	mov	sl, r3
 801318e:	4b74      	ldr	r3, [pc, #464]	; (8013360 <_scanf_i+0x1d8>)
 8013190:	460c      	mov	r4, r1
 8013192:	4683      	mov	fp, r0
 8013194:	4616      	mov	r6, r2
 8013196:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 801319a:	b087      	sub	sp, #28
 801319c:	ab03      	add	r3, sp, #12
 801319e:	68a7      	ldr	r7, [r4, #8]
 80131a0:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80131a4:	4b6f      	ldr	r3, [pc, #444]	; (8013364 <_scanf_i+0x1dc>)
 80131a6:	69a1      	ldr	r1, [r4, #24]
 80131a8:	4a6f      	ldr	r2, [pc, #444]	; (8013368 <_scanf_i+0x1e0>)
 80131aa:	2903      	cmp	r1, #3
 80131ac:	bf08      	it	eq
 80131ae:	461a      	moveq	r2, r3
 80131b0:	1e7b      	subs	r3, r7, #1
 80131b2:	f5b3 7fae 	cmp.w	r3, #348	; 0x15c
 80131b6:	bf84      	itt	hi
 80131b8:	f240 135d 	movwhi	r3, #349	; 0x15d
 80131bc:	60a3      	strhi	r3, [r4, #8]
 80131be:	6823      	ldr	r3, [r4, #0]
 80131c0:	9200      	str	r2, [sp, #0]
 80131c2:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 80131c6:	bf88      	it	hi
 80131c8:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 80131cc:	f104 091c 	add.w	r9, r4, #28
 80131d0:	6023      	str	r3, [r4, #0]
 80131d2:	bf8c      	ite	hi
 80131d4:	197f      	addhi	r7, r7, r5
 80131d6:	2700      	movls	r7, #0
 80131d8:	464b      	mov	r3, r9
 80131da:	f04f 0800 	mov.w	r8, #0
 80131de:	9301      	str	r3, [sp, #4]
 80131e0:	6831      	ldr	r1, [r6, #0]
 80131e2:	ab03      	add	r3, sp, #12
 80131e4:	2202      	movs	r2, #2
 80131e6:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 80131ea:	7809      	ldrb	r1, [r1, #0]
 80131ec:	f7f4 ff30 	bl	8008050 <memchr>
 80131f0:	9b01      	ldr	r3, [sp, #4]
 80131f2:	b330      	cbz	r0, 8013242 <_scanf_i+0xba>
 80131f4:	f1b8 0f01 	cmp.w	r8, #1
 80131f8:	d15a      	bne.n	80132b0 <_scanf_i+0x128>
 80131fa:	6862      	ldr	r2, [r4, #4]
 80131fc:	b92a      	cbnz	r2, 801320a <_scanf_i+0x82>
 80131fe:	6822      	ldr	r2, [r4, #0]
 8013200:	2108      	movs	r1, #8
 8013202:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8013206:	6061      	str	r1, [r4, #4]
 8013208:	6022      	str	r2, [r4, #0]
 801320a:	6822      	ldr	r2, [r4, #0]
 801320c:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 8013210:	6022      	str	r2, [r4, #0]
 8013212:	68a2      	ldr	r2, [r4, #8]
 8013214:	1e51      	subs	r1, r2, #1
 8013216:	60a1      	str	r1, [r4, #8]
 8013218:	b19a      	cbz	r2, 8013242 <_scanf_i+0xba>
 801321a:	6832      	ldr	r2, [r6, #0]
 801321c:	1c51      	adds	r1, r2, #1
 801321e:	6031      	str	r1, [r6, #0]
 8013220:	7812      	ldrb	r2, [r2, #0]
 8013222:	701a      	strb	r2, [r3, #0]
 8013224:	1c5d      	adds	r5, r3, #1
 8013226:	6873      	ldr	r3, [r6, #4]
 8013228:	3b01      	subs	r3, #1
 801322a:	2b00      	cmp	r3, #0
 801322c:	6073      	str	r3, [r6, #4]
 801322e:	dc07      	bgt.n	8013240 <_scanf_i+0xb8>
 8013230:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8013234:	4631      	mov	r1, r6
 8013236:	4658      	mov	r0, fp
 8013238:	4798      	blx	r3
 801323a:	2800      	cmp	r0, #0
 801323c:	f040 8086 	bne.w	801334c <_scanf_i+0x1c4>
 8013240:	462b      	mov	r3, r5
 8013242:	f108 0801 	add.w	r8, r8, #1
 8013246:	f1b8 0f03 	cmp.w	r8, #3
 801324a:	d1c8      	bne.n	80131de <_scanf_i+0x56>
 801324c:	6862      	ldr	r2, [r4, #4]
 801324e:	b90a      	cbnz	r2, 8013254 <_scanf_i+0xcc>
 8013250:	220a      	movs	r2, #10
 8013252:	6062      	str	r2, [r4, #4]
 8013254:	6862      	ldr	r2, [r4, #4]
 8013256:	4945      	ldr	r1, [pc, #276]	; (801336c <_scanf_i+0x1e4>)
 8013258:	6960      	ldr	r0, [r4, #20]
 801325a:	9301      	str	r3, [sp, #4]
 801325c:	1a89      	subs	r1, r1, r2
 801325e:	f000 fb33 	bl	80138c8 <__sccl>
 8013262:	9b01      	ldr	r3, [sp, #4]
 8013264:	f04f 0800 	mov.w	r8, #0
 8013268:	461d      	mov	r5, r3
 801326a:	68a3      	ldr	r3, [r4, #8]
 801326c:	6822      	ldr	r2, [r4, #0]
 801326e:	2b00      	cmp	r3, #0
 8013270:	d03a      	beq.n	80132e8 <_scanf_i+0x160>
 8013272:	6831      	ldr	r1, [r6, #0]
 8013274:	6960      	ldr	r0, [r4, #20]
 8013276:	f891 c000 	ldrb.w	ip, [r1]
 801327a:	f810 000c 	ldrb.w	r0, [r0, ip]
 801327e:	2800      	cmp	r0, #0
 8013280:	d032      	beq.n	80132e8 <_scanf_i+0x160>
 8013282:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 8013286:	d121      	bne.n	80132cc <_scanf_i+0x144>
 8013288:	0510      	lsls	r0, r2, #20
 801328a:	d51f      	bpl.n	80132cc <_scanf_i+0x144>
 801328c:	f108 0801 	add.w	r8, r8, #1
 8013290:	b117      	cbz	r7, 8013298 <_scanf_i+0x110>
 8013292:	3301      	adds	r3, #1
 8013294:	3f01      	subs	r7, #1
 8013296:	60a3      	str	r3, [r4, #8]
 8013298:	6873      	ldr	r3, [r6, #4]
 801329a:	3b01      	subs	r3, #1
 801329c:	2b00      	cmp	r3, #0
 801329e:	6073      	str	r3, [r6, #4]
 80132a0:	dd1b      	ble.n	80132da <_scanf_i+0x152>
 80132a2:	6833      	ldr	r3, [r6, #0]
 80132a4:	3301      	adds	r3, #1
 80132a6:	6033      	str	r3, [r6, #0]
 80132a8:	68a3      	ldr	r3, [r4, #8]
 80132aa:	3b01      	subs	r3, #1
 80132ac:	60a3      	str	r3, [r4, #8]
 80132ae:	e7dc      	b.n	801326a <_scanf_i+0xe2>
 80132b0:	f1b8 0f02 	cmp.w	r8, #2
 80132b4:	d1ad      	bne.n	8013212 <_scanf_i+0x8a>
 80132b6:	6822      	ldr	r2, [r4, #0]
 80132b8:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 80132bc:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 80132c0:	d1bf      	bne.n	8013242 <_scanf_i+0xba>
 80132c2:	2110      	movs	r1, #16
 80132c4:	6061      	str	r1, [r4, #4]
 80132c6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80132ca:	e7a1      	b.n	8013210 <_scanf_i+0x88>
 80132cc:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 80132d0:	6022      	str	r2, [r4, #0]
 80132d2:	780b      	ldrb	r3, [r1, #0]
 80132d4:	702b      	strb	r3, [r5, #0]
 80132d6:	3501      	adds	r5, #1
 80132d8:	e7de      	b.n	8013298 <_scanf_i+0x110>
 80132da:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80132de:	4631      	mov	r1, r6
 80132e0:	4658      	mov	r0, fp
 80132e2:	4798      	blx	r3
 80132e4:	2800      	cmp	r0, #0
 80132e6:	d0df      	beq.n	80132a8 <_scanf_i+0x120>
 80132e8:	6823      	ldr	r3, [r4, #0]
 80132ea:	05d9      	lsls	r1, r3, #23
 80132ec:	d50c      	bpl.n	8013308 <_scanf_i+0x180>
 80132ee:	454d      	cmp	r5, r9
 80132f0:	d908      	bls.n	8013304 <_scanf_i+0x17c>
 80132f2:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 80132f6:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80132fa:	4632      	mov	r2, r6
 80132fc:	4658      	mov	r0, fp
 80132fe:	4798      	blx	r3
 8013300:	1e6f      	subs	r7, r5, #1
 8013302:	463d      	mov	r5, r7
 8013304:	454d      	cmp	r5, r9
 8013306:	d029      	beq.n	801335c <_scanf_i+0x1d4>
 8013308:	6822      	ldr	r2, [r4, #0]
 801330a:	f012 0210 	ands.w	r2, r2, #16
 801330e:	d113      	bne.n	8013338 <_scanf_i+0x1b0>
 8013310:	702a      	strb	r2, [r5, #0]
 8013312:	6863      	ldr	r3, [r4, #4]
 8013314:	9e00      	ldr	r6, [sp, #0]
 8013316:	4649      	mov	r1, r9
 8013318:	4658      	mov	r0, fp
 801331a:	47b0      	blx	r6
 801331c:	f8da 3000 	ldr.w	r3, [sl]
 8013320:	6821      	ldr	r1, [r4, #0]
 8013322:	1d1a      	adds	r2, r3, #4
 8013324:	f8ca 2000 	str.w	r2, [sl]
 8013328:	f011 0f20 	tst.w	r1, #32
 801332c:	681b      	ldr	r3, [r3, #0]
 801332e:	d010      	beq.n	8013352 <_scanf_i+0x1ca>
 8013330:	6018      	str	r0, [r3, #0]
 8013332:	68e3      	ldr	r3, [r4, #12]
 8013334:	3301      	adds	r3, #1
 8013336:	60e3      	str	r3, [r4, #12]
 8013338:	eba5 0509 	sub.w	r5, r5, r9
 801333c:	44a8      	add	r8, r5
 801333e:	6925      	ldr	r5, [r4, #16]
 8013340:	4445      	add	r5, r8
 8013342:	6125      	str	r5, [r4, #16]
 8013344:	2000      	movs	r0, #0
 8013346:	b007      	add	sp, #28
 8013348:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801334c:	f04f 0800 	mov.w	r8, #0
 8013350:	e7ca      	b.n	80132e8 <_scanf_i+0x160>
 8013352:	07ca      	lsls	r2, r1, #31
 8013354:	bf4c      	ite	mi
 8013356:	8018      	strhmi	r0, [r3, #0]
 8013358:	6018      	strpl	r0, [r3, #0]
 801335a:	e7ea      	b.n	8013332 <_scanf_i+0x1aa>
 801335c:	2001      	movs	r0, #1
 801335e:	e7f2      	b.n	8013346 <_scanf_i+0x1be>
 8013360:	08016cf0 	.word	0x08016cf0
 8013364:	080148a9 	.word	0x080148a9
 8013368:	080149c1 	.word	0x080149c1
 801336c:	08017138 	.word	0x08017138

08013370 <iprintf>:
 8013370:	b40f      	push	{r0, r1, r2, r3}
 8013372:	4b0a      	ldr	r3, [pc, #40]	; (801339c <iprintf+0x2c>)
 8013374:	b513      	push	{r0, r1, r4, lr}
 8013376:	681c      	ldr	r4, [r3, #0]
 8013378:	b124      	cbz	r4, 8013384 <iprintf+0x14>
 801337a:	69a3      	ldr	r3, [r4, #24]
 801337c:	b913      	cbnz	r3, 8013384 <iprintf+0x14>
 801337e:	4620      	mov	r0, r4
 8013380:	f7fe fbbe 	bl	8011b00 <__sinit>
 8013384:	ab05      	add	r3, sp, #20
 8013386:	9a04      	ldr	r2, [sp, #16]
 8013388:	68a1      	ldr	r1, [r4, #8]
 801338a:	9301      	str	r3, [sp, #4]
 801338c:	4620      	mov	r0, r4
 801338e:	f7fe fdcb 	bl	8011f28 <_vfiprintf_r>
 8013392:	b002      	add	sp, #8
 8013394:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8013398:	b004      	add	sp, #16
 801339a:	4770      	bx	lr
 801339c:	20000018 	.word	0x20000018

080133a0 <putchar>:
 80133a0:	b538      	push	{r3, r4, r5, lr}
 80133a2:	4b08      	ldr	r3, [pc, #32]	; (80133c4 <putchar+0x24>)
 80133a4:	681c      	ldr	r4, [r3, #0]
 80133a6:	4605      	mov	r5, r0
 80133a8:	b124      	cbz	r4, 80133b4 <putchar+0x14>
 80133aa:	69a3      	ldr	r3, [r4, #24]
 80133ac:	b913      	cbnz	r3, 80133b4 <putchar+0x14>
 80133ae:	4620      	mov	r0, r4
 80133b0:	f7fe fba6 	bl	8011b00 <__sinit>
 80133b4:	68a2      	ldr	r2, [r4, #8]
 80133b6:	4629      	mov	r1, r5
 80133b8:	4620      	mov	r0, r4
 80133ba:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80133be:	f003 bc19 	b.w	8016bf4 <_putc_r>
 80133c2:	bf00      	nop
 80133c4:	20000018 	.word	0x20000018

080133c8 <_puts_r>:
 80133c8:	b570      	push	{r4, r5, r6, lr}
 80133ca:	460e      	mov	r6, r1
 80133cc:	4605      	mov	r5, r0
 80133ce:	b118      	cbz	r0, 80133d8 <_puts_r+0x10>
 80133d0:	6983      	ldr	r3, [r0, #24]
 80133d2:	b90b      	cbnz	r3, 80133d8 <_puts_r+0x10>
 80133d4:	f7fe fb94 	bl	8011b00 <__sinit>
 80133d8:	69ab      	ldr	r3, [r5, #24]
 80133da:	68ac      	ldr	r4, [r5, #8]
 80133dc:	b913      	cbnz	r3, 80133e4 <_puts_r+0x1c>
 80133de:	4628      	mov	r0, r5
 80133e0:	f7fe fb8e 	bl	8011b00 <__sinit>
 80133e4:	4b23      	ldr	r3, [pc, #140]	; (8013474 <_puts_r+0xac>)
 80133e6:	429c      	cmp	r4, r3
 80133e8:	d117      	bne.n	801341a <_puts_r+0x52>
 80133ea:	686c      	ldr	r4, [r5, #4]
 80133ec:	89a3      	ldrh	r3, [r4, #12]
 80133ee:	071b      	lsls	r3, r3, #28
 80133f0:	d51d      	bpl.n	801342e <_puts_r+0x66>
 80133f2:	6923      	ldr	r3, [r4, #16]
 80133f4:	b1db      	cbz	r3, 801342e <_puts_r+0x66>
 80133f6:	3e01      	subs	r6, #1
 80133f8:	68a3      	ldr	r3, [r4, #8]
 80133fa:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80133fe:	3b01      	subs	r3, #1
 8013400:	60a3      	str	r3, [r4, #8]
 8013402:	b9e9      	cbnz	r1, 8013440 <_puts_r+0x78>
 8013404:	2b00      	cmp	r3, #0
 8013406:	da2e      	bge.n	8013466 <_puts_r+0x9e>
 8013408:	4622      	mov	r2, r4
 801340a:	210a      	movs	r1, #10
 801340c:	4628      	mov	r0, r5
 801340e:	f001 fb95 	bl	8014b3c <__swbuf_r>
 8013412:	3001      	adds	r0, #1
 8013414:	d011      	beq.n	801343a <_puts_r+0x72>
 8013416:	200a      	movs	r0, #10
 8013418:	e011      	b.n	801343e <_puts_r+0x76>
 801341a:	4b17      	ldr	r3, [pc, #92]	; (8013478 <_puts_r+0xb0>)
 801341c:	429c      	cmp	r4, r3
 801341e:	d101      	bne.n	8013424 <_puts_r+0x5c>
 8013420:	68ac      	ldr	r4, [r5, #8]
 8013422:	e7e3      	b.n	80133ec <_puts_r+0x24>
 8013424:	4b15      	ldr	r3, [pc, #84]	; (801347c <_puts_r+0xb4>)
 8013426:	429c      	cmp	r4, r3
 8013428:	bf08      	it	eq
 801342a:	68ec      	ldreq	r4, [r5, #12]
 801342c:	e7de      	b.n	80133ec <_puts_r+0x24>
 801342e:	4621      	mov	r1, r4
 8013430:	4628      	mov	r0, r5
 8013432:	f001 fbe7 	bl	8014c04 <__swsetup_r>
 8013436:	2800      	cmp	r0, #0
 8013438:	d0dd      	beq.n	80133f6 <_puts_r+0x2e>
 801343a:	f04f 30ff 	mov.w	r0, #4294967295
 801343e:	bd70      	pop	{r4, r5, r6, pc}
 8013440:	2b00      	cmp	r3, #0
 8013442:	da04      	bge.n	801344e <_puts_r+0x86>
 8013444:	69a2      	ldr	r2, [r4, #24]
 8013446:	429a      	cmp	r2, r3
 8013448:	dc06      	bgt.n	8013458 <_puts_r+0x90>
 801344a:	290a      	cmp	r1, #10
 801344c:	d004      	beq.n	8013458 <_puts_r+0x90>
 801344e:	6823      	ldr	r3, [r4, #0]
 8013450:	1c5a      	adds	r2, r3, #1
 8013452:	6022      	str	r2, [r4, #0]
 8013454:	7019      	strb	r1, [r3, #0]
 8013456:	e7cf      	b.n	80133f8 <_puts_r+0x30>
 8013458:	4622      	mov	r2, r4
 801345a:	4628      	mov	r0, r5
 801345c:	f001 fb6e 	bl	8014b3c <__swbuf_r>
 8013460:	3001      	adds	r0, #1
 8013462:	d1c9      	bne.n	80133f8 <_puts_r+0x30>
 8013464:	e7e9      	b.n	801343a <_puts_r+0x72>
 8013466:	6823      	ldr	r3, [r4, #0]
 8013468:	200a      	movs	r0, #10
 801346a:	1c5a      	adds	r2, r3, #1
 801346c:	6022      	str	r2, [r4, #0]
 801346e:	7018      	strb	r0, [r3, #0]
 8013470:	e7e5      	b.n	801343e <_puts_r+0x76>
 8013472:	bf00      	nop
 8013474:	0801709c 	.word	0x0801709c
 8013478:	080170bc 	.word	0x080170bc
 801347c:	0801707c 	.word	0x0801707c

08013480 <puts>:
 8013480:	4b02      	ldr	r3, [pc, #8]	; (801348c <puts+0xc>)
 8013482:	4601      	mov	r1, r0
 8013484:	6818      	ldr	r0, [r3, #0]
 8013486:	f7ff bf9f 	b.w	80133c8 <_puts_r>
 801348a:	bf00      	nop
 801348c:	20000018 	.word	0x20000018

08013490 <swapfunc>:
 8013490:	2b02      	cmp	r3, #2
 8013492:	b510      	push	{r4, lr}
 8013494:	d00a      	beq.n	80134ac <swapfunc+0x1c>
 8013496:	0892      	lsrs	r2, r2, #2
 8013498:	3a01      	subs	r2, #1
 801349a:	6803      	ldr	r3, [r0, #0]
 801349c:	680c      	ldr	r4, [r1, #0]
 801349e:	f840 4b04 	str.w	r4, [r0], #4
 80134a2:	2a00      	cmp	r2, #0
 80134a4:	f841 3b04 	str.w	r3, [r1], #4
 80134a8:	dcf6      	bgt.n	8013498 <swapfunc+0x8>
 80134aa:	bd10      	pop	{r4, pc}
 80134ac:	4402      	add	r2, r0
 80134ae:	780c      	ldrb	r4, [r1, #0]
 80134b0:	7803      	ldrb	r3, [r0, #0]
 80134b2:	f800 4b01 	strb.w	r4, [r0], #1
 80134b6:	f801 3b01 	strb.w	r3, [r1], #1
 80134ba:	1a13      	subs	r3, r2, r0
 80134bc:	2b00      	cmp	r3, #0
 80134be:	dcf6      	bgt.n	80134ae <swapfunc+0x1e>
 80134c0:	e7f3      	b.n	80134aa <swapfunc+0x1a>

080134c2 <med3.isra.1>:
 80134c2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80134c4:	460c      	mov	r4, r1
 80134c6:	4615      	mov	r5, r2
 80134c8:	4607      	mov	r7, r0
 80134ca:	461e      	mov	r6, r3
 80134cc:	4798      	blx	r3
 80134ce:	2800      	cmp	r0, #0
 80134d0:	4629      	mov	r1, r5
 80134d2:	4620      	mov	r0, r4
 80134d4:	da0a      	bge.n	80134ec <med3.isra.1+0x2a>
 80134d6:	47b0      	blx	r6
 80134d8:	2800      	cmp	r0, #0
 80134da:	db05      	blt.n	80134e8 <med3.isra.1+0x26>
 80134dc:	4629      	mov	r1, r5
 80134de:	4638      	mov	r0, r7
 80134e0:	47b0      	blx	r6
 80134e2:	2800      	cmp	r0, #0
 80134e4:	db0a      	blt.n	80134fc <med3.isra.1+0x3a>
 80134e6:	463c      	mov	r4, r7
 80134e8:	4620      	mov	r0, r4
 80134ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80134ec:	47b0      	blx	r6
 80134ee:	2800      	cmp	r0, #0
 80134f0:	dcfa      	bgt.n	80134e8 <med3.isra.1+0x26>
 80134f2:	4629      	mov	r1, r5
 80134f4:	4638      	mov	r0, r7
 80134f6:	47b0      	blx	r6
 80134f8:	2800      	cmp	r0, #0
 80134fa:	dbf4      	blt.n	80134e6 <med3.isra.1+0x24>
 80134fc:	462c      	mov	r4, r5
 80134fe:	e7f3      	b.n	80134e8 <med3.isra.1+0x26>

08013500 <qsort>:
 8013500:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013504:	b085      	sub	sp, #20
 8013506:	4606      	mov	r6, r0
 8013508:	468a      	mov	sl, r1
 801350a:	4614      	mov	r4, r2
 801350c:	9300      	str	r3, [sp, #0]
 801350e:	07b2      	lsls	r2, r6, #30
 8013510:	d110      	bne.n	8013534 <qsort+0x34>
 8013512:	07a3      	lsls	r3, r4, #30
 8013514:	d10e      	bne.n	8013534 <qsort+0x34>
 8013516:	1f27      	subs	r7, r4, #4
 8013518:	bf18      	it	ne
 801351a:	2701      	movne	r7, #1
 801351c:	f1ba 0f06 	cmp.w	sl, #6
 8013520:	eb06 0b04 	add.w	fp, r6, r4
 8013524:	d828      	bhi.n	8013578 <qsort+0x78>
 8013526:	fb04 6a0a 	mla	sl, r4, sl, r6
 801352a:	45da      	cmp	sl, fp
 801352c:	d80b      	bhi.n	8013546 <qsort+0x46>
 801352e:	b005      	add	sp, #20
 8013530:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013534:	2702      	movs	r7, #2
 8013536:	e7f1      	b.n	801351c <qsort+0x1c>
 8013538:	463b      	mov	r3, r7
 801353a:	4622      	mov	r2, r4
 801353c:	4649      	mov	r1, r9
 801353e:	4640      	mov	r0, r8
 8013540:	f7ff ffa6 	bl	8013490 <swapfunc>
 8013544:	e013      	b.n	801356e <qsort+0x6e>
 8013546:	46d8      	mov	r8, fp
 8013548:	e012      	b.n	8013570 <qsort+0x70>
 801354a:	eba8 0904 	sub.w	r9, r8, r4
 801354e:	4641      	mov	r1, r8
 8013550:	4648      	mov	r0, r9
 8013552:	9b00      	ldr	r3, [sp, #0]
 8013554:	4798      	blx	r3
 8013556:	2800      	cmp	r0, #0
 8013558:	dd0c      	ble.n	8013574 <qsort+0x74>
 801355a:	2f00      	cmp	r7, #0
 801355c:	d1ec      	bne.n	8013538 <qsort+0x38>
 801355e:	f8d8 3000 	ldr.w	r3, [r8]
 8013562:	f8d9 2000 	ldr.w	r2, [r9]
 8013566:	f8c8 2000 	str.w	r2, [r8]
 801356a:	f8c9 3000 	str.w	r3, [r9]
 801356e:	46c8      	mov	r8, r9
 8013570:	4546      	cmp	r6, r8
 8013572:	d3ea      	bcc.n	801354a <qsort+0x4a>
 8013574:	44a3      	add	fp, r4
 8013576:	e7d8      	b.n	801352a <qsort+0x2a>
 8013578:	ea4f 085a 	mov.w	r8, sl, lsr #1
 801357c:	f10a 35ff 	add.w	r5, sl, #4294967295
 8013580:	f1ba 0f07 	cmp.w	sl, #7
 8013584:	fb04 6808 	mla	r8, r4, r8, r6
 8013588:	fb04 6505 	mla	r5, r4, r5, r6
 801358c:	d027      	beq.n	80135de <qsort+0xde>
 801358e:	f1ba 0f28 	cmp.w	sl, #40	; 0x28
 8013592:	d94a      	bls.n	801362a <qsort+0x12a>
 8013594:	ea4f 09da 	mov.w	r9, sl, lsr #3
 8013598:	fb04 f909 	mul.w	r9, r4, r9
 801359c:	eb06 0109 	add.w	r1, r6, r9
 80135a0:	eb01 0209 	add.w	r2, r1, r9
 80135a4:	9b00      	ldr	r3, [sp, #0]
 80135a6:	4630      	mov	r0, r6
 80135a8:	f7ff ff8b 	bl	80134c2 <med3.isra.1>
 80135ac:	eb08 0209 	add.w	r2, r8, r9
 80135b0:	4641      	mov	r1, r8
 80135b2:	9001      	str	r0, [sp, #4]
 80135b4:	9b00      	ldr	r3, [sp, #0]
 80135b6:	eba8 0009 	sub.w	r0, r8, r9
 80135ba:	f7ff ff82 	bl	80134c2 <med3.isra.1>
 80135be:	4680      	mov	r8, r0
 80135c0:	eba5 0049 	sub.w	r0, r5, r9, lsl #1
 80135c4:	462a      	mov	r2, r5
 80135c6:	9b00      	ldr	r3, [sp, #0]
 80135c8:	eb00 0109 	add.w	r1, r0, r9
 80135cc:	f7ff ff79 	bl	80134c2 <med3.isra.1>
 80135d0:	4602      	mov	r2, r0
 80135d2:	4641      	mov	r1, r8
 80135d4:	9b00      	ldr	r3, [sp, #0]
 80135d6:	9801      	ldr	r0, [sp, #4]
 80135d8:	f7ff ff73 	bl	80134c2 <med3.isra.1>
 80135dc:	4680      	mov	r8, r0
 80135de:	bb3f      	cbnz	r7, 8013630 <qsort+0x130>
 80135e0:	6833      	ldr	r3, [r6, #0]
 80135e2:	f8d8 2000 	ldr.w	r2, [r8]
 80135e6:	6032      	str	r2, [r6, #0]
 80135e8:	f8c8 3000 	str.w	r3, [r8]
 80135ec:	46d8      	mov	r8, fp
 80135ee:	46a9      	mov	r9, r5
 80135f0:	f8cd b004 	str.w	fp, [sp, #4]
 80135f4:	2300      	movs	r3, #0
 80135f6:	45a8      	cmp	r8, r5
 80135f8:	d857      	bhi.n	80136aa <qsort+0x1aa>
 80135fa:	9302      	str	r3, [sp, #8]
 80135fc:	4631      	mov	r1, r6
 80135fe:	9b00      	ldr	r3, [sp, #0]
 8013600:	4640      	mov	r0, r8
 8013602:	4798      	blx	r3
 8013604:	2800      	cmp	r0, #0
 8013606:	9b02      	ldr	r3, [sp, #8]
 8013608:	dc2e      	bgt.n	8013668 <qsort+0x168>
 801360a:	d10c      	bne.n	8013626 <qsort+0x126>
 801360c:	b9bf      	cbnz	r7, 801363e <qsort+0x13e>
 801360e:	9b01      	ldr	r3, [sp, #4]
 8013610:	9901      	ldr	r1, [sp, #4]
 8013612:	681b      	ldr	r3, [r3, #0]
 8013614:	f8d8 2000 	ldr.w	r2, [r8]
 8013618:	600a      	str	r2, [r1, #0]
 801361a:	f8c8 3000 	str.w	r3, [r8]
 801361e:	9b01      	ldr	r3, [sp, #4]
 8013620:	4423      	add	r3, r4
 8013622:	9301      	str	r3, [sp, #4]
 8013624:	2301      	movs	r3, #1
 8013626:	44a0      	add	r8, r4
 8013628:	e7e5      	b.n	80135f6 <qsort+0xf6>
 801362a:	462a      	mov	r2, r5
 801362c:	9601      	str	r6, [sp, #4]
 801362e:	e7d0      	b.n	80135d2 <qsort+0xd2>
 8013630:	463b      	mov	r3, r7
 8013632:	4622      	mov	r2, r4
 8013634:	4641      	mov	r1, r8
 8013636:	4630      	mov	r0, r6
 8013638:	f7ff ff2a 	bl	8013490 <swapfunc>
 801363c:	e7d6      	b.n	80135ec <qsort+0xec>
 801363e:	463b      	mov	r3, r7
 8013640:	4622      	mov	r2, r4
 8013642:	4641      	mov	r1, r8
 8013644:	9801      	ldr	r0, [sp, #4]
 8013646:	f7ff ff23 	bl	8013490 <swapfunc>
 801364a:	e7e8      	b.n	801361e <qsort+0x11e>
 801364c:	d109      	bne.n	8013662 <qsort+0x162>
 801364e:	b9f7      	cbnz	r7, 801368e <qsort+0x18e>
 8013650:	682b      	ldr	r3, [r5, #0]
 8013652:	f8d9 2000 	ldr.w	r2, [r9]
 8013656:	602a      	str	r2, [r5, #0]
 8013658:	f8c9 3000 	str.w	r3, [r9]
 801365c:	eba9 0904 	sub.w	r9, r9, r4
 8013660:	2301      	movs	r3, #1
 8013662:	9d02      	ldr	r5, [sp, #8]
 8013664:	45a8      	cmp	r8, r5
 8013666:	d820      	bhi.n	80136aa <qsort+0x1aa>
 8013668:	9303      	str	r3, [sp, #12]
 801366a:	4631      	mov	r1, r6
 801366c:	9b00      	ldr	r3, [sp, #0]
 801366e:	4628      	mov	r0, r5
 8013670:	4798      	blx	r3
 8013672:	1b2b      	subs	r3, r5, r4
 8013674:	2800      	cmp	r0, #0
 8013676:	9302      	str	r3, [sp, #8]
 8013678:	9b03      	ldr	r3, [sp, #12]
 801367a:	dae7      	bge.n	801364c <qsort+0x14c>
 801367c:	b977      	cbnz	r7, 801369c <qsort+0x19c>
 801367e:	f8d8 3000 	ldr.w	r3, [r8]
 8013682:	682a      	ldr	r2, [r5, #0]
 8013684:	f8c8 2000 	str.w	r2, [r8]
 8013688:	602b      	str	r3, [r5, #0]
 801368a:	9d02      	ldr	r5, [sp, #8]
 801368c:	e7ca      	b.n	8013624 <qsort+0x124>
 801368e:	463b      	mov	r3, r7
 8013690:	4622      	mov	r2, r4
 8013692:	4649      	mov	r1, r9
 8013694:	4628      	mov	r0, r5
 8013696:	f7ff fefb 	bl	8013490 <swapfunc>
 801369a:	e7df      	b.n	801365c <qsort+0x15c>
 801369c:	463b      	mov	r3, r7
 801369e:	4622      	mov	r2, r4
 80136a0:	4629      	mov	r1, r5
 80136a2:	4640      	mov	r0, r8
 80136a4:	f7ff fef4 	bl	8013490 <swapfunc>
 80136a8:	e7ef      	b.n	801368a <qsort+0x18a>
 80136aa:	fb04 6a0a 	mla	sl, r4, sl, r6
 80136ae:	bb03      	cbnz	r3, 80136f2 <qsort+0x1f2>
 80136b0:	45d3      	cmp	fp, sl
 80136b2:	f4bf af3c 	bcs.w	801352e <qsort+0x2e>
 80136b6:	465d      	mov	r5, fp
 80136b8:	e017      	b.n	80136ea <qsort+0x1ea>
 80136ba:	463b      	mov	r3, r7
 80136bc:	4622      	mov	r2, r4
 80136be:	4641      	mov	r1, r8
 80136c0:	4628      	mov	r0, r5
 80136c2:	f7ff fee5 	bl	8013490 <swapfunc>
 80136c6:	e00f      	b.n	80136e8 <qsort+0x1e8>
 80136c8:	eba5 0804 	sub.w	r8, r5, r4
 80136cc:	4629      	mov	r1, r5
 80136ce:	4640      	mov	r0, r8
 80136d0:	9b00      	ldr	r3, [sp, #0]
 80136d2:	4798      	blx	r3
 80136d4:	2800      	cmp	r0, #0
 80136d6:	dd0a      	ble.n	80136ee <qsort+0x1ee>
 80136d8:	2f00      	cmp	r7, #0
 80136da:	d1ee      	bne.n	80136ba <qsort+0x1ba>
 80136dc:	682b      	ldr	r3, [r5, #0]
 80136de:	f8d8 2000 	ldr.w	r2, [r8]
 80136e2:	602a      	str	r2, [r5, #0]
 80136e4:	f8c8 3000 	str.w	r3, [r8]
 80136e8:	4645      	mov	r5, r8
 80136ea:	42ae      	cmp	r6, r5
 80136ec:	d3ec      	bcc.n	80136c8 <qsort+0x1c8>
 80136ee:	44a3      	add	fp, r4
 80136f0:	e7de      	b.n	80136b0 <qsort+0x1b0>
 80136f2:	9b01      	ldr	r3, [sp, #4]
 80136f4:	eba8 0b03 	sub.w	fp, r8, r3
 80136f8:	1b9a      	subs	r2, r3, r6
 80136fa:	455a      	cmp	r2, fp
 80136fc:	bfa8      	it	ge
 80136fe:	465a      	movge	r2, fp
 8013700:	b12a      	cbz	r2, 801370e <qsort+0x20e>
 8013702:	463b      	mov	r3, r7
 8013704:	eba8 0102 	sub.w	r1, r8, r2
 8013708:	4630      	mov	r0, r6
 801370a:	f7ff fec1 	bl	8013490 <swapfunc>
 801370e:	ebaa 0209 	sub.w	r2, sl, r9
 8013712:	eba9 0505 	sub.w	r5, r9, r5
 8013716:	1b12      	subs	r2, r2, r4
 8013718:	42aa      	cmp	r2, r5
 801371a:	bf28      	it	cs
 801371c:	462a      	movcs	r2, r5
 801371e:	b12a      	cbz	r2, 801372c <qsort+0x22c>
 8013720:	463b      	mov	r3, r7
 8013722:	ebaa 0102 	sub.w	r1, sl, r2
 8013726:	4640      	mov	r0, r8
 8013728:	f7ff feb2 	bl	8013490 <swapfunc>
 801372c:	455c      	cmp	r4, fp
 801372e:	d206      	bcs.n	801373e <qsort+0x23e>
 8013730:	fbbb f1f4 	udiv	r1, fp, r4
 8013734:	9b00      	ldr	r3, [sp, #0]
 8013736:	4622      	mov	r2, r4
 8013738:	4630      	mov	r0, r6
 801373a:	f7ff fee1 	bl	8013500 <qsort>
 801373e:	42a5      	cmp	r5, r4
 8013740:	f67f aef5 	bls.w	801352e <qsort+0x2e>
 8013744:	ebaa 0605 	sub.w	r6, sl, r5
 8013748:	fbb5 faf4 	udiv	sl, r5, r4
 801374c:	e6df      	b.n	801350e <qsort+0xe>

0801374e <lflush>:
 801374e:	8983      	ldrh	r3, [r0, #12]
 8013750:	f003 0309 	and.w	r3, r3, #9
 8013754:	2b09      	cmp	r3, #9
 8013756:	d101      	bne.n	801375c <lflush+0xe>
 8013758:	f7fe b980 	b.w	8011a5c <fflush>
 801375c:	2000      	movs	r0, #0
 801375e:	4770      	bx	lr

08013760 <__srefill_r>:
 8013760:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013762:	460c      	mov	r4, r1
 8013764:	4605      	mov	r5, r0
 8013766:	b118      	cbz	r0, 8013770 <__srefill_r+0x10>
 8013768:	6983      	ldr	r3, [r0, #24]
 801376a:	b90b      	cbnz	r3, 8013770 <__srefill_r+0x10>
 801376c:	f7fe f9c8 	bl	8011b00 <__sinit>
 8013770:	4b3c      	ldr	r3, [pc, #240]	; (8013864 <__srefill_r+0x104>)
 8013772:	429c      	cmp	r4, r3
 8013774:	d10a      	bne.n	801378c <__srefill_r+0x2c>
 8013776:	686c      	ldr	r4, [r5, #4]
 8013778:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801377c:	2300      	movs	r3, #0
 801377e:	6063      	str	r3, [r4, #4]
 8013780:	b293      	uxth	r3, r2
 8013782:	069e      	lsls	r6, r3, #26
 8013784:	d50c      	bpl.n	80137a0 <__srefill_r+0x40>
 8013786:	f04f 30ff 	mov.w	r0, #4294967295
 801378a:	e067      	b.n	801385c <__srefill_r+0xfc>
 801378c:	4b36      	ldr	r3, [pc, #216]	; (8013868 <__srefill_r+0x108>)
 801378e:	429c      	cmp	r4, r3
 8013790:	d101      	bne.n	8013796 <__srefill_r+0x36>
 8013792:	68ac      	ldr	r4, [r5, #8]
 8013794:	e7f0      	b.n	8013778 <__srefill_r+0x18>
 8013796:	4b35      	ldr	r3, [pc, #212]	; (801386c <__srefill_r+0x10c>)
 8013798:	429c      	cmp	r4, r3
 801379a:	bf08      	it	eq
 801379c:	68ec      	ldreq	r4, [r5, #12]
 801379e:	e7eb      	b.n	8013778 <__srefill_r+0x18>
 80137a0:	0758      	lsls	r0, r3, #29
 80137a2:	d449      	bmi.n	8013838 <__srefill_r+0xd8>
 80137a4:	06d9      	lsls	r1, r3, #27
 80137a6:	d405      	bmi.n	80137b4 <__srefill_r+0x54>
 80137a8:	2309      	movs	r3, #9
 80137aa:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80137ae:	602b      	str	r3, [r5, #0]
 80137b0:	81a2      	strh	r2, [r4, #12]
 80137b2:	e7e8      	b.n	8013786 <__srefill_r+0x26>
 80137b4:	071a      	lsls	r2, r3, #28
 80137b6:	d50b      	bpl.n	80137d0 <__srefill_r+0x70>
 80137b8:	4621      	mov	r1, r4
 80137ba:	4628      	mov	r0, r5
 80137bc:	f7fe f924 	bl	8011a08 <_fflush_r>
 80137c0:	2800      	cmp	r0, #0
 80137c2:	d1e0      	bne.n	8013786 <__srefill_r+0x26>
 80137c4:	89a3      	ldrh	r3, [r4, #12]
 80137c6:	60a0      	str	r0, [r4, #8]
 80137c8:	f023 0308 	bic.w	r3, r3, #8
 80137cc:	81a3      	strh	r3, [r4, #12]
 80137ce:	61a0      	str	r0, [r4, #24]
 80137d0:	89a3      	ldrh	r3, [r4, #12]
 80137d2:	f043 0304 	orr.w	r3, r3, #4
 80137d6:	81a3      	strh	r3, [r4, #12]
 80137d8:	6923      	ldr	r3, [r4, #16]
 80137da:	b91b      	cbnz	r3, 80137e4 <__srefill_r+0x84>
 80137dc:	4621      	mov	r1, r4
 80137de:	4628      	mov	r0, r5
 80137e0:	f7fe fa7c 	bl	8011cdc <__smakebuf_r>
 80137e4:	f9b4 700c 	ldrsh.w	r7, [r4, #12]
 80137e8:	b2be      	uxth	r6, r7
 80137ea:	07b3      	lsls	r3, r6, #30
 80137ec:	d00f      	beq.n	801380e <__srefill_r+0xae>
 80137ee:	2301      	movs	r3, #1
 80137f0:	81a3      	strh	r3, [r4, #12]
 80137f2:	4b1f      	ldr	r3, [pc, #124]	; (8013870 <__srefill_r+0x110>)
 80137f4:	491f      	ldr	r1, [pc, #124]	; (8013874 <__srefill_r+0x114>)
 80137f6:	6818      	ldr	r0, [r3, #0]
 80137f8:	f006 0609 	and.w	r6, r6, #9
 80137fc:	f7fe f9ec 	bl	8011bd8 <_fwalk>
 8013800:	2e09      	cmp	r6, #9
 8013802:	81a7      	strh	r7, [r4, #12]
 8013804:	d103      	bne.n	801380e <__srefill_r+0xae>
 8013806:	4621      	mov	r1, r4
 8013808:	4628      	mov	r0, r5
 801380a:	f7fe f877 	bl	80118fc <__sflush_r>
 801380e:	6922      	ldr	r2, [r4, #16]
 8013810:	6022      	str	r2, [r4, #0]
 8013812:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8013814:	6963      	ldr	r3, [r4, #20]
 8013816:	6a21      	ldr	r1, [r4, #32]
 8013818:	4628      	mov	r0, r5
 801381a:	47b0      	blx	r6
 801381c:	2800      	cmp	r0, #0
 801381e:	6060      	str	r0, [r4, #4]
 8013820:	dc1d      	bgt.n	801385e <__srefill_r+0xfe>
 8013822:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8013826:	bf17      	itett	ne
 8013828:	2200      	movne	r2, #0
 801382a:	f043 0320 	orreq.w	r3, r3, #32
 801382e:	f043 0340 	orrne.w	r3, r3, #64	; 0x40
 8013832:	6062      	strne	r2, [r4, #4]
 8013834:	81a3      	strh	r3, [r4, #12]
 8013836:	e7a6      	b.n	8013786 <__srefill_r+0x26>
 8013838:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801383a:	2900      	cmp	r1, #0
 801383c:	d0cc      	beq.n	80137d8 <__srefill_r+0x78>
 801383e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8013842:	4299      	cmp	r1, r3
 8013844:	d002      	beq.n	801384c <__srefill_r+0xec>
 8013846:	4628      	mov	r0, r5
 8013848:	f7fe fa9c 	bl	8011d84 <_free_r>
 801384c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801384e:	6063      	str	r3, [r4, #4]
 8013850:	2000      	movs	r0, #0
 8013852:	6360      	str	r0, [r4, #52]	; 0x34
 8013854:	2b00      	cmp	r3, #0
 8013856:	d0bf      	beq.n	80137d8 <__srefill_r+0x78>
 8013858:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 801385a:	6023      	str	r3, [r4, #0]
 801385c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801385e:	2000      	movs	r0, #0
 8013860:	e7fc      	b.n	801385c <__srefill_r+0xfc>
 8013862:	bf00      	nop
 8013864:	0801709c 	.word	0x0801709c
 8013868:	080170bc 	.word	0x080170bc
 801386c:	0801707c 	.word	0x0801707c
 8013870:	080170dc 	.word	0x080170dc
 8013874:	0801374f 	.word	0x0801374f

08013878 <_sbrk_r>:
 8013878:	b538      	push	{r3, r4, r5, lr}
 801387a:	4c06      	ldr	r4, [pc, #24]	; (8013894 <_sbrk_r+0x1c>)
 801387c:	2300      	movs	r3, #0
 801387e:	4605      	mov	r5, r0
 8013880:	4608      	mov	r0, r1
 8013882:	6023      	str	r3, [r4, #0]
 8013884:	f7fa f9fa 	bl	800dc7c <_sbrk>
 8013888:	1c43      	adds	r3, r0, #1
 801388a:	d102      	bne.n	8013892 <_sbrk_r+0x1a>
 801388c:	6823      	ldr	r3, [r4, #0]
 801388e:	b103      	cbz	r3, 8013892 <_sbrk_r+0x1a>
 8013890:	602b      	str	r3, [r5, #0]
 8013892:	bd38      	pop	{r3, r4, r5, pc}
 8013894:	20002044 	.word	0x20002044

08013898 <iscanf>:
 8013898:	b40f      	push	{r0, r1, r2, r3}
 801389a:	4b0a      	ldr	r3, [pc, #40]	; (80138c4 <iscanf+0x2c>)
 801389c:	b513      	push	{r0, r1, r4, lr}
 801389e:	681c      	ldr	r4, [r3, #0]
 80138a0:	b124      	cbz	r4, 80138ac <iscanf+0x14>
 80138a2:	69a3      	ldr	r3, [r4, #24]
 80138a4:	b913      	cbnz	r3, 80138ac <iscanf+0x14>
 80138a6:	4620      	mov	r0, r4
 80138a8:	f7fe f92a 	bl	8011b00 <__sinit>
 80138ac:	ab05      	add	r3, sp, #20
 80138ae:	9a04      	ldr	r2, [sp, #16]
 80138b0:	6861      	ldr	r1, [r4, #4]
 80138b2:	9301      	str	r3, [sp, #4]
 80138b4:	4620      	mov	r0, r4
 80138b6:	f7ff f9f9 	bl	8012cac <_vfiscanf_r>
 80138ba:	b002      	add	sp, #8
 80138bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80138c0:	b004      	add	sp, #16
 80138c2:	4770      	bx	lr
 80138c4:	20000018 	.word	0x20000018

080138c8 <__sccl>:
 80138c8:	b570      	push	{r4, r5, r6, lr}
 80138ca:	780b      	ldrb	r3, [r1, #0]
 80138cc:	2b5e      	cmp	r3, #94	; 0x5e
 80138ce:	bf13      	iteet	ne
 80138d0:	1c4a      	addne	r2, r1, #1
 80138d2:	1c8a      	addeq	r2, r1, #2
 80138d4:	784b      	ldrbeq	r3, [r1, #1]
 80138d6:	2100      	movne	r1, #0
 80138d8:	bf08      	it	eq
 80138da:	2101      	moveq	r1, #1
 80138dc:	1e44      	subs	r4, r0, #1
 80138de:	f100 05ff 	add.w	r5, r0, #255	; 0xff
 80138e2:	f804 1f01 	strb.w	r1, [r4, #1]!
 80138e6:	42ac      	cmp	r4, r5
 80138e8:	d1fb      	bne.n	80138e2 <__sccl+0x1a>
 80138ea:	b913      	cbnz	r3, 80138f2 <__sccl+0x2a>
 80138ec:	3a01      	subs	r2, #1
 80138ee:	4610      	mov	r0, r2
 80138f0:	bd70      	pop	{r4, r5, r6, pc}
 80138f2:	f081 0401 	eor.w	r4, r1, #1
 80138f6:	54c4      	strb	r4, [r0, r3]
 80138f8:	1c51      	adds	r1, r2, #1
 80138fa:	f811 5c01 	ldrb.w	r5, [r1, #-1]
 80138fe:	2d2d      	cmp	r5, #45	; 0x2d
 8013900:	f101 36ff 	add.w	r6, r1, #4294967295
 8013904:	460a      	mov	r2, r1
 8013906:	d006      	beq.n	8013916 <__sccl+0x4e>
 8013908:	2d5d      	cmp	r5, #93	; 0x5d
 801390a:	d0f0      	beq.n	80138ee <__sccl+0x26>
 801390c:	b90d      	cbnz	r5, 8013912 <__sccl+0x4a>
 801390e:	4632      	mov	r2, r6
 8013910:	e7ed      	b.n	80138ee <__sccl+0x26>
 8013912:	462b      	mov	r3, r5
 8013914:	e7ef      	b.n	80138f6 <__sccl+0x2e>
 8013916:	780e      	ldrb	r6, [r1, #0]
 8013918:	2e5d      	cmp	r6, #93	; 0x5d
 801391a:	d0fa      	beq.n	8013912 <__sccl+0x4a>
 801391c:	42b3      	cmp	r3, r6
 801391e:	dcf8      	bgt.n	8013912 <__sccl+0x4a>
 8013920:	3301      	adds	r3, #1
 8013922:	429e      	cmp	r6, r3
 8013924:	54c4      	strb	r4, [r0, r3]
 8013926:	dcfb      	bgt.n	8013920 <__sccl+0x58>
 8013928:	3102      	adds	r1, #2
 801392a:	e7e6      	b.n	80138fa <__sccl+0x32>

0801392c <setbuf>:
 801392c:	2900      	cmp	r1, #0
 801392e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8013932:	bf0c      	ite	eq
 8013934:	2202      	moveq	r2, #2
 8013936:	2200      	movne	r2, #0
 8013938:	f000 b800 	b.w	801393c <setvbuf>

0801393c <setvbuf>:
 801393c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8013940:	461d      	mov	r5, r3
 8013942:	4b51      	ldr	r3, [pc, #324]	; (8013a88 <setvbuf+0x14c>)
 8013944:	681e      	ldr	r6, [r3, #0]
 8013946:	4604      	mov	r4, r0
 8013948:	460f      	mov	r7, r1
 801394a:	4690      	mov	r8, r2
 801394c:	b126      	cbz	r6, 8013958 <setvbuf+0x1c>
 801394e:	69b3      	ldr	r3, [r6, #24]
 8013950:	b913      	cbnz	r3, 8013958 <setvbuf+0x1c>
 8013952:	4630      	mov	r0, r6
 8013954:	f7fe f8d4 	bl	8011b00 <__sinit>
 8013958:	4b4c      	ldr	r3, [pc, #304]	; (8013a8c <setvbuf+0x150>)
 801395a:	429c      	cmp	r4, r3
 801395c:	d152      	bne.n	8013a04 <setvbuf+0xc8>
 801395e:	6874      	ldr	r4, [r6, #4]
 8013960:	f1b8 0f02 	cmp.w	r8, #2
 8013964:	d006      	beq.n	8013974 <setvbuf+0x38>
 8013966:	f1b8 0f01 	cmp.w	r8, #1
 801396a:	f200 8089 	bhi.w	8013a80 <setvbuf+0x144>
 801396e:	2d00      	cmp	r5, #0
 8013970:	f2c0 8086 	blt.w	8013a80 <setvbuf+0x144>
 8013974:	4621      	mov	r1, r4
 8013976:	4630      	mov	r0, r6
 8013978:	f7fe f846 	bl	8011a08 <_fflush_r>
 801397c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801397e:	b141      	cbz	r1, 8013992 <setvbuf+0x56>
 8013980:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8013984:	4299      	cmp	r1, r3
 8013986:	d002      	beq.n	801398e <setvbuf+0x52>
 8013988:	4630      	mov	r0, r6
 801398a:	f7fe f9fb 	bl	8011d84 <_free_r>
 801398e:	2300      	movs	r3, #0
 8013990:	6363      	str	r3, [r4, #52]	; 0x34
 8013992:	2300      	movs	r3, #0
 8013994:	61a3      	str	r3, [r4, #24]
 8013996:	6063      	str	r3, [r4, #4]
 8013998:	89a3      	ldrh	r3, [r4, #12]
 801399a:	061b      	lsls	r3, r3, #24
 801399c:	d503      	bpl.n	80139a6 <setvbuf+0x6a>
 801399e:	6921      	ldr	r1, [r4, #16]
 80139a0:	4630      	mov	r0, r6
 80139a2:	f7fe f9ef 	bl	8011d84 <_free_r>
 80139a6:	89a3      	ldrh	r3, [r4, #12]
 80139a8:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 80139ac:	f023 0303 	bic.w	r3, r3, #3
 80139b0:	f1b8 0f02 	cmp.w	r8, #2
 80139b4:	81a3      	strh	r3, [r4, #12]
 80139b6:	d05d      	beq.n	8013a74 <setvbuf+0x138>
 80139b8:	ab01      	add	r3, sp, #4
 80139ba:	466a      	mov	r2, sp
 80139bc:	4621      	mov	r1, r4
 80139be:	4630      	mov	r0, r6
 80139c0:	f7fe f968 	bl	8011c94 <__swhatbuf_r>
 80139c4:	89a3      	ldrh	r3, [r4, #12]
 80139c6:	4318      	orrs	r0, r3
 80139c8:	81a0      	strh	r0, [r4, #12]
 80139ca:	bb2d      	cbnz	r5, 8013a18 <setvbuf+0xdc>
 80139cc:	9d00      	ldr	r5, [sp, #0]
 80139ce:	4628      	mov	r0, r5
 80139d0:	f002 fb56 	bl	8016080 <malloc>
 80139d4:	4607      	mov	r7, r0
 80139d6:	2800      	cmp	r0, #0
 80139d8:	d14e      	bne.n	8013a78 <setvbuf+0x13c>
 80139da:	f8dd 9000 	ldr.w	r9, [sp]
 80139de:	45a9      	cmp	r9, r5
 80139e0:	d13c      	bne.n	8013a5c <setvbuf+0x120>
 80139e2:	f04f 30ff 	mov.w	r0, #4294967295
 80139e6:	89a3      	ldrh	r3, [r4, #12]
 80139e8:	f043 0302 	orr.w	r3, r3, #2
 80139ec:	81a3      	strh	r3, [r4, #12]
 80139ee:	2300      	movs	r3, #0
 80139f0:	60a3      	str	r3, [r4, #8]
 80139f2:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80139f6:	6023      	str	r3, [r4, #0]
 80139f8:	6123      	str	r3, [r4, #16]
 80139fa:	2301      	movs	r3, #1
 80139fc:	6163      	str	r3, [r4, #20]
 80139fe:	b003      	add	sp, #12
 8013a00:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8013a04:	4b22      	ldr	r3, [pc, #136]	; (8013a90 <setvbuf+0x154>)
 8013a06:	429c      	cmp	r4, r3
 8013a08:	d101      	bne.n	8013a0e <setvbuf+0xd2>
 8013a0a:	68b4      	ldr	r4, [r6, #8]
 8013a0c:	e7a8      	b.n	8013960 <setvbuf+0x24>
 8013a0e:	4b21      	ldr	r3, [pc, #132]	; (8013a94 <setvbuf+0x158>)
 8013a10:	429c      	cmp	r4, r3
 8013a12:	bf08      	it	eq
 8013a14:	68f4      	ldreq	r4, [r6, #12]
 8013a16:	e7a3      	b.n	8013960 <setvbuf+0x24>
 8013a18:	2f00      	cmp	r7, #0
 8013a1a:	d0d8      	beq.n	80139ce <setvbuf+0x92>
 8013a1c:	69b3      	ldr	r3, [r6, #24]
 8013a1e:	b913      	cbnz	r3, 8013a26 <setvbuf+0xea>
 8013a20:	4630      	mov	r0, r6
 8013a22:	f7fe f86d 	bl	8011b00 <__sinit>
 8013a26:	f1b8 0f01 	cmp.w	r8, #1
 8013a2a:	bf08      	it	eq
 8013a2c:	89a3      	ldrheq	r3, [r4, #12]
 8013a2e:	6027      	str	r7, [r4, #0]
 8013a30:	bf04      	itt	eq
 8013a32:	f043 0301 	orreq.w	r3, r3, #1
 8013a36:	81a3      	strheq	r3, [r4, #12]
 8013a38:	89a3      	ldrh	r3, [r4, #12]
 8013a3a:	f013 0008 	ands.w	r0, r3, #8
 8013a3e:	e9c4 7504 	strd	r7, r5, [r4, #16]
 8013a42:	d01b      	beq.n	8013a7c <setvbuf+0x140>
 8013a44:	f013 0001 	ands.w	r0, r3, #1
 8013a48:	bf18      	it	ne
 8013a4a:	426d      	negne	r5, r5
 8013a4c:	f04f 0300 	mov.w	r3, #0
 8013a50:	bf1d      	ittte	ne
 8013a52:	60a3      	strne	r3, [r4, #8]
 8013a54:	61a5      	strne	r5, [r4, #24]
 8013a56:	4618      	movne	r0, r3
 8013a58:	60a5      	streq	r5, [r4, #8]
 8013a5a:	e7d0      	b.n	80139fe <setvbuf+0xc2>
 8013a5c:	4648      	mov	r0, r9
 8013a5e:	f002 fb0f 	bl	8016080 <malloc>
 8013a62:	4607      	mov	r7, r0
 8013a64:	2800      	cmp	r0, #0
 8013a66:	d0bc      	beq.n	80139e2 <setvbuf+0xa6>
 8013a68:	89a3      	ldrh	r3, [r4, #12]
 8013a6a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8013a6e:	81a3      	strh	r3, [r4, #12]
 8013a70:	464d      	mov	r5, r9
 8013a72:	e7d3      	b.n	8013a1c <setvbuf+0xe0>
 8013a74:	2000      	movs	r0, #0
 8013a76:	e7b6      	b.n	80139e6 <setvbuf+0xaa>
 8013a78:	46a9      	mov	r9, r5
 8013a7a:	e7f5      	b.n	8013a68 <setvbuf+0x12c>
 8013a7c:	60a0      	str	r0, [r4, #8]
 8013a7e:	e7be      	b.n	80139fe <setvbuf+0xc2>
 8013a80:	f04f 30ff 	mov.w	r0, #4294967295
 8013a84:	e7bb      	b.n	80139fe <setvbuf+0xc2>
 8013a86:	bf00      	nop
 8013a88:	20000018 	.word	0x20000018
 8013a8c:	0801709c 	.word	0x0801709c
 8013a90:	080170bc 	.word	0x080170bc
 8013a94:	0801707c 	.word	0x0801707c

08013a98 <nanf>:
 8013a98:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8013aa0 <nanf+0x8>
 8013a9c:	4770      	bx	lr
 8013a9e:	bf00      	nop
 8013aa0:	7fc00000 	.word	0x7fc00000

08013aa4 <siprintf>:
 8013aa4:	b40e      	push	{r1, r2, r3}
 8013aa6:	b500      	push	{lr}
 8013aa8:	b09c      	sub	sp, #112	; 0x70
 8013aaa:	ab1d      	add	r3, sp, #116	; 0x74
 8013aac:	9002      	str	r0, [sp, #8]
 8013aae:	9006      	str	r0, [sp, #24]
 8013ab0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8013ab4:	4809      	ldr	r0, [pc, #36]	; (8013adc <siprintf+0x38>)
 8013ab6:	9107      	str	r1, [sp, #28]
 8013ab8:	9104      	str	r1, [sp, #16]
 8013aba:	4909      	ldr	r1, [pc, #36]	; (8013ae0 <siprintf+0x3c>)
 8013abc:	f853 2b04 	ldr.w	r2, [r3], #4
 8013ac0:	9105      	str	r1, [sp, #20]
 8013ac2:	6800      	ldr	r0, [r0, #0]
 8013ac4:	9301      	str	r3, [sp, #4]
 8013ac6:	a902      	add	r1, sp, #8
 8013ac8:	f002 ff9c 	bl	8016a04 <_svfiprintf_r>
 8013acc:	9b02      	ldr	r3, [sp, #8]
 8013ace:	2200      	movs	r2, #0
 8013ad0:	701a      	strb	r2, [r3, #0]
 8013ad2:	b01c      	add	sp, #112	; 0x70
 8013ad4:	f85d eb04 	ldr.w	lr, [sp], #4
 8013ad8:	b003      	add	sp, #12
 8013ada:	4770      	bx	lr
 8013adc:	20000018 	.word	0x20000018
 8013ae0:	ffff0208 	.word	0xffff0208

08013ae4 <__sread>:
 8013ae4:	b510      	push	{r4, lr}
 8013ae6:	460c      	mov	r4, r1
 8013ae8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013aec:	f003 f8b8 	bl	8016c60 <_read_r>
 8013af0:	2800      	cmp	r0, #0
 8013af2:	bfab      	itete	ge
 8013af4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8013af6:	89a3      	ldrhlt	r3, [r4, #12]
 8013af8:	181b      	addge	r3, r3, r0
 8013afa:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8013afe:	bfac      	ite	ge
 8013b00:	6563      	strge	r3, [r4, #84]	; 0x54
 8013b02:	81a3      	strhlt	r3, [r4, #12]
 8013b04:	bd10      	pop	{r4, pc}

08013b06 <__swrite>:
 8013b06:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013b0a:	461f      	mov	r7, r3
 8013b0c:	898b      	ldrh	r3, [r1, #12]
 8013b0e:	05db      	lsls	r3, r3, #23
 8013b10:	4605      	mov	r5, r0
 8013b12:	460c      	mov	r4, r1
 8013b14:	4616      	mov	r6, r2
 8013b16:	d505      	bpl.n	8013b24 <__swrite+0x1e>
 8013b18:	2302      	movs	r3, #2
 8013b1a:	2200      	movs	r2, #0
 8013b1c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013b20:	f002 fa9c 	bl	801605c <_lseek_r>
 8013b24:	89a3      	ldrh	r3, [r4, #12]
 8013b26:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8013b2a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8013b2e:	81a3      	strh	r3, [r4, #12]
 8013b30:	4632      	mov	r2, r6
 8013b32:	463b      	mov	r3, r7
 8013b34:	4628      	mov	r0, r5
 8013b36:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8013b3a:	f001 b851 	b.w	8014be0 <_write_r>

08013b3e <__sseek>:
 8013b3e:	b510      	push	{r4, lr}
 8013b40:	460c      	mov	r4, r1
 8013b42:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013b46:	f002 fa89 	bl	801605c <_lseek_r>
 8013b4a:	1c43      	adds	r3, r0, #1
 8013b4c:	89a3      	ldrh	r3, [r4, #12]
 8013b4e:	bf15      	itete	ne
 8013b50:	6560      	strne	r0, [r4, #84]	; 0x54
 8013b52:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8013b56:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8013b5a:	81a3      	strheq	r3, [r4, #12]
 8013b5c:	bf18      	it	ne
 8013b5e:	81a3      	strhne	r3, [r4, #12]
 8013b60:	bd10      	pop	{r4, pc}

08013b62 <__sclose>:
 8013b62:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013b66:	f001 b8bb 	b.w	8014ce0 <_close_r>

08013b6a <sulp>:
 8013b6a:	b570      	push	{r4, r5, r6, lr}
 8013b6c:	4604      	mov	r4, r0
 8013b6e:	460d      	mov	r5, r1
 8013b70:	ec45 4b10 	vmov	d0, r4, r5
 8013b74:	4616      	mov	r6, r2
 8013b76:	f002 fd83 	bl	8016680 <__ulp>
 8013b7a:	ec51 0b10 	vmov	r0, r1, d0
 8013b7e:	b17e      	cbz	r6, 8013ba0 <sulp+0x36>
 8013b80:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8013b84:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8013b88:	2b00      	cmp	r3, #0
 8013b8a:	dd09      	ble.n	8013ba0 <sulp+0x36>
 8013b8c:	051b      	lsls	r3, r3, #20
 8013b8e:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8013b92:	2400      	movs	r4, #0
 8013b94:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8013b98:	4622      	mov	r2, r4
 8013b9a:	462b      	mov	r3, r5
 8013b9c:	f7f4 fc64 	bl	8008468 <__aeabi_dmul>
 8013ba0:	bd70      	pop	{r4, r5, r6, pc}
 8013ba2:	0000      	movs	r0, r0
 8013ba4:	0000      	movs	r0, r0
	...

08013ba8 <_strtod_l>:
 8013ba8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013bac:	461f      	mov	r7, r3
 8013bae:	b0a1      	sub	sp, #132	; 0x84
 8013bb0:	2300      	movs	r3, #0
 8013bb2:	4681      	mov	r9, r0
 8013bb4:	4638      	mov	r0, r7
 8013bb6:	460e      	mov	r6, r1
 8013bb8:	9217      	str	r2, [sp, #92]	; 0x5c
 8013bba:	931c      	str	r3, [sp, #112]	; 0x70
 8013bbc:	f002 fa3e 	bl	801603c <__localeconv_l>
 8013bc0:	4680      	mov	r8, r0
 8013bc2:	6800      	ldr	r0, [r0, #0]
 8013bc4:	f7f4 fa3c 	bl	8008040 <strlen>
 8013bc8:	f04f 0a00 	mov.w	sl, #0
 8013bcc:	4604      	mov	r4, r0
 8013bce:	f04f 0b00 	mov.w	fp, #0
 8013bd2:	961b      	str	r6, [sp, #108]	; 0x6c
 8013bd4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8013bd6:	781a      	ldrb	r2, [r3, #0]
 8013bd8:	2a0d      	cmp	r2, #13
 8013bda:	d832      	bhi.n	8013c42 <_strtod_l+0x9a>
 8013bdc:	2a09      	cmp	r2, #9
 8013bde:	d236      	bcs.n	8013c4e <_strtod_l+0xa6>
 8013be0:	2a00      	cmp	r2, #0
 8013be2:	d03e      	beq.n	8013c62 <_strtod_l+0xba>
 8013be4:	2300      	movs	r3, #0
 8013be6:	930d      	str	r3, [sp, #52]	; 0x34
 8013be8:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 8013bea:	782b      	ldrb	r3, [r5, #0]
 8013bec:	2b30      	cmp	r3, #48	; 0x30
 8013bee:	f040 80ac 	bne.w	8013d4a <_strtod_l+0x1a2>
 8013bf2:	786b      	ldrb	r3, [r5, #1]
 8013bf4:	2b58      	cmp	r3, #88	; 0x58
 8013bf6:	d001      	beq.n	8013bfc <_strtod_l+0x54>
 8013bf8:	2b78      	cmp	r3, #120	; 0x78
 8013bfa:	d167      	bne.n	8013ccc <_strtod_l+0x124>
 8013bfc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8013bfe:	9301      	str	r3, [sp, #4]
 8013c00:	ab1c      	add	r3, sp, #112	; 0x70
 8013c02:	9300      	str	r3, [sp, #0]
 8013c04:	9702      	str	r7, [sp, #8]
 8013c06:	ab1d      	add	r3, sp, #116	; 0x74
 8013c08:	4a88      	ldr	r2, [pc, #544]	; (8013e2c <_strtod_l+0x284>)
 8013c0a:	a91b      	add	r1, sp, #108	; 0x6c
 8013c0c:	4648      	mov	r0, r9
 8013c0e:	f001 ff1c 	bl	8015a4a <__gethex>
 8013c12:	f010 0407 	ands.w	r4, r0, #7
 8013c16:	4606      	mov	r6, r0
 8013c18:	d005      	beq.n	8013c26 <_strtod_l+0x7e>
 8013c1a:	2c06      	cmp	r4, #6
 8013c1c:	d12b      	bne.n	8013c76 <_strtod_l+0xce>
 8013c1e:	3501      	adds	r5, #1
 8013c20:	2300      	movs	r3, #0
 8013c22:	951b      	str	r5, [sp, #108]	; 0x6c
 8013c24:	930d      	str	r3, [sp, #52]	; 0x34
 8013c26:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8013c28:	2b00      	cmp	r3, #0
 8013c2a:	f040 859a 	bne.w	8014762 <_strtod_l+0xbba>
 8013c2e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8013c30:	b1e3      	cbz	r3, 8013c6c <_strtod_l+0xc4>
 8013c32:	4652      	mov	r2, sl
 8013c34:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8013c38:	ec43 2b10 	vmov	d0, r2, r3
 8013c3c:	b021      	add	sp, #132	; 0x84
 8013c3e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013c42:	2a2b      	cmp	r2, #43	; 0x2b
 8013c44:	d015      	beq.n	8013c72 <_strtod_l+0xca>
 8013c46:	2a2d      	cmp	r2, #45	; 0x2d
 8013c48:	d004      	beq.n	8013c54 <_strtod_l+0xac>
 8013c4a:	2a20      	cmp	r2, #32
 8013c4c:	d1ca      	bne.n	8013be4 <_strtod_l+0x3c>
 8013c4e:	3301      	adds	r3, #1
 8013c50:	931b      	str	r3, [sp, #108]	; 0x6c
 8013c52:	e7bf      	b.n	8013bd4 <_strtod_l+0x2c>
 8013c54:	2201      	movs	r2, #1
 8013c56:	920d      	str	r2, [sp, #52]	; 0x34
 8013c58:	1c5a      	adds	r2, r3, #1
 8013c5a:	921b      	str	r2, [sp, #108]	; 0x6c
 8013c5c:	785b      	ldrb	r3, [r3, #1]
 8013c5e:	2b00      	cmp	r3, #0
 8013c60:	d1c2      	bne.n	8013be8 <_strtod_l+0x40>
 8013c62:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8013c64:	961b      	str	r6, [sp, #108]	; 0x6c
 8013c66:	2b00      	cmp	r3, #0
 8013c68:	f040 8579 	bne.w	801475e <_strtod_l+0xbb6>
 8013c6c:	4652      	mov	r2, sl
 8013c6e:	465b      	mov	r3, fp
 8013c70:	e7e2      	b.n	8013c38 <_strtod_l+0x90>
 8013c72:	2200      	movs	r2, #0
 8013c74:	e7ef      	b.n	8013c56 <_strtod_l+0xae>
 8013c76:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8013c78:	b13a      	cbz	r2, 8013c8a <_strtod_l+0xe2>
 8013c7a:	2135      	movs	r1, #53	; 0x35
 8013c7c:	a81e      	add	r0, sp, #120	; 0x78
 8013c7e:	f002 fdf7 	bl	8016870 <__copybits>
 8013c82:	991c      	ldr	r1, [sp, #112]	; 0x70
 8013c84:	4648      	mov	r0, r9
 8013c86:	f002 fa64 	bl	8016152 <_Bfree>
 8013c8a:	3c01      	subs	r4, #1
 8013c8c:	2c04      	cmp	r4, #4
 8013c8e:	d806      	bhi.n	8013c9e <_strtod_l+0xf6>
 8013c90:	e8df f004 	tbb	[pc, r4]
 8013c94:	1714030a 	.word	0x1714030a
 8013c98:	0a          	.byte	0x0a
 8013c99:	00          	.byte	0x00
 8013c9a:	e9dd ab1e 	ldrd	sl, fp, [sp, #120]	; 0x78
 8013c9e:	0730      	lsls	r0, r6, #28
 8013ca0:	d5c1      	bpl.n	8013c26 <_strtod_l+0x7e>
 8013ca2:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 8013ca6:	e7be      	b.n	8013c26 <_strtod_l+0x7e>
 8013ca8:	e9dd a31e 	ldrd	sl, r3, [sp, #120]	; 0x78
 8013cac:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8013cae:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8013cb2:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8013cb6:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8013cba:	e7f0      	b.n	8013c9e <_strtod_l+0xf6>
 8013cbc:	f8df b170 	ldr.w	fp, [pc, #368]	; 8013e30 <_strtod_l+0x288>
 8013cc0:	e7ed      	b.n	8013c9e <_strtod_l+0xf6>
 8013cc2:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 8013cc6:	f04f 3aff 	mov.w	sl, #4294967295
 8013cca:	e7e8      	b.n	8013c9e <_strtod_l+0xf6>
 8013ccc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8013cce:	1c5a      	adds	r2, r3, #1
 8013cd0:	921b      	str	r2, [sp, #108]	; 0x6c
 8013cd2:	785b      	ldrb	r3, [r3, #1]
 8013cd4:	2b30      	cmp	r3, #48	; 0x30
 8013cd6:	d0f9      	beq.n	8013ccc <_strtod_l+0x124>
 8013cd8:	2b00      	cmp	r3, #0
 8013cda:	d0a4      	beq.n	8013c26 <_strtod_l+0x7e>
 8013cdc:	2301      	movs	r3, #1
 8013cde:	2500      	movs	r5, #0
 8013ce0:	9306      	str	r3, [sp, #24]
 8013ce2:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8013ce4:	9308      	str	r3, [sp, #32]
 8013ce6:	9507      	str	r5, [sp, #28]
 8013ce8:	9505      	str	r5, [sp, #20]
 8013cea:	220a      	movs	r2, #10
 8013cec:	981b      	ldr	r0, [sp, #108]	; 0x6c
 8013cee:	7807      	ldrb	r7, [r0, #0]
 8013cf0:	f1a7 0330 	sub.w	r3, r7, #48	; 0x30
 8013cf4:	b2d9      	uxtb	r1, r3
 8013cf6:	2909      	cmp	r1, #9
 8013cf8:	d929      	bls.n	8013d4e <_strtod_l+0x1a6>
 8013cfa:	4622      	mov	r2, r4
 8013cfc:	f8d8 1000 	ldr.w	r1, [r8]
 8013d00:	f002 ffc0 	bl	8016c84 <strncmp>
 8013d04:	2800      	cmp	r0, #0
 8013d06:	d031      	beq.n	8013d6c <_strtod_l+0x1c4>
 8013d08:	2000      	movs	r0, #0
 8013d0a:	9c05      	ldr	r4, [sp, #20]
 8013d0c:	9004      	str	r0, [sp, #16]
 8013d0e:	463b      	mov	r3, r7
 8013d10:	4602      	mov	r2, r0
 8013d12:	2b65      	cmp	r3, #101	; 0x65
 8013d14:	d001      	beq.n	8013d1a <_strtod_l+0x172>
 8013d16:	2b45      	cmp	r3, #69	; 0x45
 8013d18:	d114      	bne.n	8013d44 <_strtod_l+0x19c>
 8013d1a:	b924      	cbnz	r4, 8013d26 <_strtod_l+0x17e>
 8013d1c:	b910      	cbnz	r0, 8013d24 <_strtod_l+0x17c>
 8013d1e:	9b06      	ldr	r3, [sp, #24]
 8013d20:	2b00      	cmp	r3, #0
 8013d22:	d09e      	beq.n	8013c62 <_strtod_l+0xba>
 8013d24:	2400      	movs	r4, #0
 8013d26:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 8013d28:	1c73      	adds	r3, r6, #1
 8013d2a:	931b      	str	r3, [sp, #108]	; 0x6c
 8013d2c:	7873      	ldrb	r3, [r6, #1]
 8013d2e:	2b2b      	cmp	r3, #43	; 0x2b
 8013d30:	d078      	beq.n	8013e24 <_strtod_l+0x27c>
 8013d32:	2b2d      	cmp	r3, #45	; 0x2d
 8013d34:	d070      	beq.n	8013e18 <_strtod_l+0x270>
 8013d36:	f04f 0c00 	mov.w	ip, #0
 8013d3a:	f1a3 0730 	sub.w	r7, r3, #48	; 0x30
 8013d3e:	2f09      	cmp	r7, #9
 8013d40:	d97c      	bls.n	8013e3c <_strtod_l+0x294>
 8013d42:	961b      	str	r6, [sp, #108]	; 0x6c
 8013d44:	f04f 0e00 	mov.w	lr, #0
 8013d48:	e09a      	b.n	8013e80 <_strtod_l+0x2d8>
 8013d4a:	2300      	movs	r3, #0
 8013d4c:	e7c7      	b.n	8013cde <_strtod_l+0x136>
 8013d4e:	9905      	ldr	r1, [sp, #20]
 8013d50:	2908      	cmp	r1, #8
 8013d52:	bfdd      	ittte	le
 8013d54:	9907      	ldrle	r1, [sp, #28]
 8013d56:	fb02 3301 	mlale	r3, r2, r1, r3
 8013d5a:	9307      	strle	r3, [sp, #28]
 8013d5c:	fb02 3505 	mlagt	r5, r2, r5, r3
 8013d60:	9b05      	ldr	r3, [sp, #20]
 8013d62:	3001      	adds	r0, #1
 8013d64:	3301      	adds	r3, #1
 8013d66:	9305      	str	r3, [sp, #20]
 8013d68:	901b      	str	r0, [sp, #108]	; 0x6c
 8013d6a:	e7bf      	b.n	8013cec <_strtod_l+0x144>
 8013d6c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8013d6e:	191a      	adds	r2, r3, r4
 8013d70:	921b      	str	r2, [sp, #108]	; 0x6c
 8013d72:	9a05      	ldr	r2, [sp, #20]
 8013d74:	5d1b      	ldrb	r3, [r3, r4]
 8013d76:	2a00      	cmp	r2, #0
 8013d78:	d037      	beq.n	8013dea <_strtod_l+0x242>
 8013d7a:	9c05      	ldr	r4, [sp, #20]
 8013d7c:	4602      	mov	r2, r0
 8013d7e:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 8013d82:	2909      	cmp	r1, #9
 8013d84:	d913      	bls.n	8013dae <_strtod_l+0x206>
 8013d86:	2101      	movs	r1, #1
 8013d88:	9104      	str	r1, [sp, #16]
 8013d8a:	e7c2      	b.n	8013d12 <_strtod_l+0x16a>
 8013d8c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8013d8e:	1c5a      	adds	r2, r3, #1
 8013d90:	921b      	str	r2, [sp, #108]	; 0x6c
 8013d92:	785b      	ldrb	r3, [r3, #1]
 8013d94:	3001      	adds	r0, #1
 8013d96:	2b30      	cmp	r3, #48	; 0x30
 8013d98:	d0f8      	beq.n	8013d8c <_strtod_l+0x1e4>
 8013d9a:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 8013d9e:	2a08      	cmp	r2, #8
 8013da0:	f200 84e4 	bhi.w	801476c <_strtod_l+0xbc4>
 8013da4:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8013da6:	9208      	str	r2, [sp, #32]
 8013da8:	4602      	mov	r2, r0
 8013daa:	2000      	movs	r0, #0
 8013dac:	4604      	mov	r4, r0
 8013dae:	f1b3 0e30 	subs.w	lr, r3, #48	; 0x30
 8013db2:	f100 0101 	add.w	r1, r0, #1
 8013db6:	d012      	beq.n	8013dde <_strtod_l+0x236>
 8013db8:	440a      	add	r2, r1
 8013dba:	eb00 0c04 	add.w	ip, r0, r4
 8013dbe:	4621      	mov	r1, r4
 8013dc0:	270a      	movs	r7, #10
 8013dc2:	458c      	cmp	ip, r1
 8013dc4:	d113      	bne.n	8013dee <_strtod_l+0x246>
 8013dc6:	1821      	adds	r1, r4, r0
 8013dc8:	2908      	cmp	r1, #8
 8013dca:	f104 0401 	add.w	r4, r4, #1
 8013dce:	4404      	add	r4, r0
 8013dd0:	dc19      	bgt.n	8013e06 <_strtod_l+0x25e>
 8013dd2:	9b07      	ldr	r3, [sp, #28]
 8013dd4:	210a      	movs	r1, #10
 8013dd6:	fb01 e303 	mla	r3, r1, r3, lr
 8013dda:	9307      	str	r3, [sp, #28]
 8013ddc:	2100      	movs	r1, #0
 8013dde:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8013de0:	1c58      	adds	r0, r3, #1
 8013de2:	901b      	str	r0, [sp, #108]	; 0x6c
 8013de4:	785b      	ldrb	r3, [r3, #1]
 8013de6:	4608      	mov	r0, r1
 8013de8:	e7c9      	b.n	8013d7e <_strtod_l+0x1d6>
 8013dea:	9805      	ldr	r0, [sp, #20]
 8013dec:	e7d3      	b.n	8013d96 <_strtod_l+0x1ee>
 8013dee:	2908      	cmp	r1, #8
 8013df0:	f101 0101 	add.w	r1, r1, #1
 8013df4:	dc03      	bgt.n	8013dfe <_strtod_l+0x256>
 8013df6:	9b07      	ldr	r3, [sp, #28]
 8013df8:	437b      	muls	r3, r7
 8013dfa:	9307      	str	r3, [sp, #28]
 8013dfc:	e7e1      	b.n	8013dc2 <_strtod_l+0x21a>
 8013dfe:	2910      	cmp	r1, #16
 8013e00:	bfd8      	it	le
 8013e02:	437d      	mulle	r5, r7
 8013e04:	e7dd      	b.n	8013dc2 <_strtod_l+0x21a>
 8013e06:	2c10      	cmp	r4, #16
 8013e08:	bfdc      	itt	le
 8013e0a:	210a      	movle	r1, #10
 8013e0c:	fb01 e505 	mlale	r5, r1, r5, lr
 8013e10:	e7e4      	b.n	8013ddc <_strtod_l+0x234>
 8013e12:	2301      	movs	r3, #1
 8013e14:	9304      	str	r3, [sp, #16]
 8013e16:	e781      	b.n	8013d1c <_strtod_l+0x174>
 8013e18:	f04f 0c01 	mov.w	ip, #1
 8013e1c:	1cb3      	adds	r3, r6, #2
 8013e1e:	931b      	str	r3, [sp, #108]	; 0x6c
 8013e20:	78b3      	ldrb	r3, [r6, #2]
 8013e22:	e78a      	b.n	8013d3a <_strtod_l+0x192>
 8013e24:	f04f 0c00 	mov.w	ip, #0
 8013e28:	e7f8      	b.n	8013e1c <_strtod_l+0x274>
 8013e2a:	bf00      	nop
 8013e2c:	08017144 	.word	0x08017144
 8013e30:	7ff00000 	.word	0x7ff00000
 8013e34:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8013e36:	1c5f      	adds	r7, r3, #1
 8013e38:	971b      	str	r7, [sp, #108]	; 0x6c
 8013e3a:	785b      	ldrb	r3, [r3, #1]
 8013e3c:	2b30      	cmp	r3, #48	; 0x30
 8013e3e:	d0f9      	beq.n	8013e34 <_strtod_l+0x28c>
 8013e40:	f1a3 0731 	sub.w	r7, r3, #49	; 0x31
 8013e44:	2f08      	cmp	r7, #8
 8013e46:	f63f af7d 	bhi.w	8013d44 <_strtod_l+0x19c>
 8013e4a:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 8013e4e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8013e50:	930a      	str	r3, [sp, #40]	; 0x28
 8013e52:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8013e54:	1c5f      	adds	r7, r3, #1
 8013e56:	971b      	str	r7, [sp, #108]	; 0x6c
 8013e58:	785b      	ldrb	r3, [r3, #1]
 8013e5a:	f1a3 0830 	sub.w	r8, r3, #48	; 0x30
 8013e5e:	f1b8 0f09 	cmp.w	r8, #9
 8013e62:	d937      	bls.n	8013ed4 <_strtod_l+0x32c>
 8013e64:	990a      	ldr	r1, [sp, #40]	; 0x28
 8013e66:	1a7f      	subs	r7, r7, r1
 8013e68:	2f08      	cmp	r7, #8
 8013e6a:	f644 671f 	movw	r7, #19999	; 0x4e1f
 8013e6e:	dc37      	bgt.n	8013ee0 <_strtod_l+0x338>
 8013e70:	45be      	cmp	lr, r7
 8013e72:	bfa8      	it	ge
 8013e74:	46be      	movge	lr, r7
 8013e76:	f1bc 0f00 	cmp.w	ip, #0
 8013e7a:	d001      	beq.n	8013e80 <_strtod_l+0x2d8>
 8013e7c:	f1ce 0e00 	rsb	lr, lr, #0
 8013e80:	2c00      	cmp	r4, #0
 8013e82:	d151      	bne.n	8013f28 <_strtod_l+0x380>
 8013e84:	2800      	cmp	r0, #0
 8013e86:	f47f aece 	bne.w	8013c26 <_strtod_l+0x7e>
 8013e8a:	9a06      	ldr	r2, [sp, #24]
 8013e8c:	2a00      	cmp	r2, #0
 8013e8e:	f47f aeca 	bne.w	8013c26 <_strtod_l+0x7e>
 8013e92:	9a04      	ldr	r2, [sp, #16]
 8013e94:	2a00      	cmp	r2, #0
 8013e96:	f47f aee4 	bne.w	8013c62 <_strtod_l+0xba>
 8013e9a:	2b4e      	cmp	r3, #78	; 0x4e
 8013e9c:	d027      	beq.n	8013eee <_strtod_l+0x346>
 8013e9e:	dc21      	bgt.n	8013ee4 <_strtod_l+0x33c>
 8013ea0:	2b49      	cmp	r3, #73	; 0x49
 8013ea2:	f47f aede 	bne.w	8013c62 <_strtod_l+0xba>
 8013ea6:	49a0      	ldr	r1, [pc, #640]	; (8014128 <_strtod_l+0x580>)
 8013ea8:	a81b      	add	r0, sp, #108	; 0x6c
 8013eaa:	f002 f801 	bl	8015eb0 <__match>
 8013eae:	2800      	cmp	r0, #0
 8013eb0:	f43f aed7 	beq.w	8013c62 <_strtod_l+0xba>
 8013eb4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8013eb6:	499d      	ldr	r1, [pc, #628]	; (801412c <_strtod_l+0x584>)
 8013eb8:	3b01      	subs	r3, #1
 8013eba:	a81b      	add	r0, sp, #108	; 0x6c
 8013ebc:	931b      	str	r3, [sp, #108]	; 0x6c
 8013ebe:	f001 fff7 	bl	8015eb0 <__match>
 8013ec2:	b910      	cbnz	r0, 8013eca <_strtod_l+0x322>
 8013ec4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8013ec6:	3301      	adds	r3, #1
 8013ec8:	931b      	str	r3, [sp, #108]	; 0x6c
 8013eca:	f8df b274 	ldr.w	fp, [pc, #628]	; 8014140 <_strtod_l+0x598>
 8013ece:	f04f 0a00 	mov.w	sl, #0
 8013ed2:	e6a8      	b.n	8013c26 <_strtod_l+0x7e>
 8013ed4:	210a      	movs	r1, #10
 8013ed6:	fb01 3e0e 	mla	lr, r1, lr, r3
 8013eda:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8013ede:	e7b8      	b.n	8013e52 <_strtod_l+0x2aa>
 8013ee0:	46be      	mov	lr, r7
 8013ee2:	e7c8      	b.n	8013e76 <_strtod_l+0x2ce>
 8013ee4:	2b69      	cmp	r3, #105	; 0x69
 8013ee6:	d0de      	beq.n	8013ea6 <_strtod_l+0x2fe>
 8013ee8:	2b6e      	cmp	r3, #110	; 0x6e
 8013eea:	f47f aeba 	bne.w	8013c62 <_strtod_l+0xba>
 8013eee:	4990      	ldr	r1, [pc, #576]	; (8014130 <_strtod_l+0x588>)
 8013ef0:	a81b      	add	r0, sp, #108	; 0x6c
 8013ef2:	f001 ffdd 	bl	8015eb0 <__match>
 8013ef6:	2800      	cmp	r0, #0
 8013ef8:	f43f aeb3 	beq.w	8013c62 <_strtod_l+0xba>
 8013efc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8013efe:	781b      	ldrb	r3, [r3, #0]
 8013f00:	2b28      	cmp	r3, #40	; 0x28
 8013f02:	d10e      	bne.n	8013f22 <_strtod_l+0x37a>
 8013f04:	aa1e      	add	r2, sp, #120	; 0x78
 8013f06:	498b      	ldr	r1, [pc, #556]	; (8014134 <_strtod_l+0x58c>)
 8013f08:	a81b      	add	r0, sp, #108	; 0x6c
 8013f0a:	f001 ffe5 	bl	8015ed8 <__hexnan>
 8013f0e:	2805      	cmp	r0, #5
 8013f10:	d107      	bne.n	8013f22 <_strtod_l+0x37a>
 8013f12:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8013f14:	f8dd a078 	ldr.w	sl, [sp, #120]	; 0x78
 8013f18:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8013f1c:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8013f20:	e681      	b.n	8013c26 <_strtod_l+0x7e>
 8013f22:	f8df b224 	ldr.w	fp, [pc, #548]	; 8014148 <_strtod_l+0x5a0>
 8013f26:	e7d2      	b.n	8013ece <_strtod_l+0x326>
 8013f28:	ebae 0302 	sub.w	r3, lr, r2
 8013f2c:	9306      	str	r3, [sp, #24]
 8013f2e:	9b05      	ldr	r3, [sp, #20]
 8013f30:	9807      	ldr	r0, [sp, #28]
 8013f32:	2b00      	cmp	r3, #0
 8013f34:	bf08      	it	eq
 8013f36:	4623      	moveq	r3, r4
 8013f38:	2c10      	cmp	r4, #16
 8013f3a:	9305      	str	r3, [sp, #20]
 8013f3c:	46a0      	mov	r8, r4
 8013f3e:	bfa8      	it	ge
 8013f40:	f04f 0810 	movge.w	r8, #16
 8013f44:	f7f4 fa16 	bl	8008374 <__aeabi_ui2d>
 8013f48:	2c09      	cmp	r4, #9
 8013f4a:	4682      	mov	sl, r0
 8013f4c:	468b      	mov	fp, r1
 8013f4e:	dc13      	bgt.n	8013f78 <_strtod_l+0x3d0>
 8013f50:	9b06      	ldr	r3, [sp, #24]
 8013f52:	2b00      	cmp	r3, #0
 8013f54:	f43f ae67 	beq.w	8013c26 <_strtod_l+0x7e>
 8013f58:	9b06      	ldr	r3, [sp, #24]
 8013f5a:	dd7a      	ble.n	8014052 <_strtod_l+0x4aa>
 8013f5c:	2b16      	cmp	r3, #22
 8013f5e:	dc61      	bgt.n	8014024 <_strtod_l+0x47c>
 8013f60:	4a75      	ldr	r2, [pc, #468]	; (8014138 <_strtod_l+0x590>)
 8013f62:	eb02 0ec3 	add.w	lr, r2, r3, lsl #3
 8013f66:	e9de 0100 	ldrd	r0, r1, [lr]
 8013f6a:	4652      	mov	r2, sl
 8013f6c:	465b      	mov	r3, fp
 8013f6e:	f7f4 fa7b 	bl	8008468 <__aeabi_dmul>
 8013f72:	4682      	mov	sl, r0
 8013f74:	468b      	mov	fp, r1
 8013f76:	e656      	b.n	8013c26 <_strtod_l+0x7e>
 8013f78:	4b6f      	ldr	r3, [pc, #444]	; (8014138 <_strtod_l+0x590>)
 8013f7a:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8013f7e:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8013f82:	f7f4 fa71 	bl	8008468 <__aeabi_dmul>
 8013f86:	4606      	mov	r6, r0
 8013f88:	4628      	mov	r0, r5
 8013f8a:	460f      	mov	r7, r1
 8013f8c:	f7f4 f9f2 	bl	8008374 <__aeabi_ui2d>
 8013f90:	4602      	mov	r2, r0
 8013f92:	460b      	mov	r3, r1
 8013f94:	4630      	mov	r0, r6
 8013f96:	4639      	mov	r1, r7
 8013f98:	f7f4 f8b0 	bl	80080fc <__adddf3>
 8013f9c:	2c0f      	cmp	r4, #15
 8013f9e:	4682      	mov	sl, r0
 8013fa0:	468b      	mov	fp, r1
 8013fa2:	ddd5      	ble.n	8013f50 <_strtod_l+0x3a8>
 8013fa4:	9b06      	ldr	r3, [sp, #24]
 8013fa6:	eba4 0808 	sub.w	r8, r4, r8
 8013faa:	4498      	add	r8, r3
 8013fac:	f1b8 0f00 	cmp.w	r8, #0
 8013fb0:	f340 8096 	ble.w	80140e0 <_strtod_l+0x538>
 8013fb4:	f018 030f 	ands.w	r3, r8, #15
 8013fb8:	d00a      	beq.n	8013fd0 <_strtod_l+0x428>
 8013fba:	495f      	ldr	r1, [pc, #380]	; (8014138 <_strtod_l+0x590>)
 8013fbc:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8013fc0:	4652      	mov	r2, sl
 8013fc2:	465b      	mov	r3, fp
 8013fc4:	e9d1 0100 	ldrd	r0, r1, [r1]
 8013fc8:	f7f4 fa4e 	bl	8008468 <__aeabi_dmul>
 8013fcc:	4682      	mov	sl, r0
 8013fce:	468b      	mov	fp, r1
 8013fd0:	f038 080f 	bics.w	r8, r8, #15
 8013fd4:	d073      	beq.n	80140be <_strtod_l+0x516>
 8013fd6:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 8013fda:	dd47      	ble.n	801406c <_strtod_l+0x4c4>
 8013fdc:	2400      	movs	r4, #0
 8013fde:	46a0      	mov	r8, r4
 8013fe0:	9407      	str	r4, [sp, #28]
 8013fe2:	9405      	str	r4, [sp, #20]
 8013fe4:	2322      	movs	r3, #34	; 0x22
 8013fe6:	f8df b158 	ldr.w	fp, [pc, #344]	; 8014140 <_strtod_l+0x598>
 8013fea:	f8c9 3000 	str.w	r3, [r9]
 8013fee:	f04f 0a00 	mov.w	sl, #0
 8013ff2:	9b07      	ldr	r3, [sp, #28]
 8013ff4:	2b00      	cmp	r3, #0
 8013ff6:	f43f ae16 	beq.w	8013c26 <_strtod_l+0x7e>
 8013ffa:	991c      	ldr	r1, [sp, #112]	; 0x70
 8013ffc:	4648      	mov	r0, r9
 8013ffe:	f002 f8a8 	bl	8016152 <_Bfree>
 8014002:	9905      	ldr	r1, [sp, #20]
 8014004:	4648      	mov	r0, r9
 8014006:	f002 f8a4 	bl	8016152 <_Bfree>
 801400a:	4641      	mov	r1, r8
 801400c:	4648      	mov	r0, r9
 801400e:	f002 f8a0 	bl	8016152 <_Bfree>
 8014012:	9907      	ldr	r1, [sp, #28]
 8014014:	4648      	mov	r0, r9
 8014016:	f002 f89c 	bl	8016152 <_Bfree>
 801401a:	4621      	mov	r1, r4
 801401c:	4648      	mov	r0, r9
 801401e:	f002 f898 	bl	8016152 <_Bfree>
 8014022:	e600      	b.n	8013c26 <_strtod_l+0x7e>
 8014024:	9a06      	ldr	r2, [sp, #24]
 8014026:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 801402a:	4293      	cmp	r3, r2
 801402c:	dbba      	blt.n	8013fa4 <_strtod_l+0x3fc>
 801402e:	4d42      	ldr	r5, [pc, #264]	; (8014138 <_strtod_l+0x590>)
 8014030:	f1c4 040f 	rsb	r4, r4, #15
 8014034:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 8014038:	4652      	mov	r2, sl
 801403a:	465b      	mov	r3, fp
 801403c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8014040:	f7f4 fa12 	bl	8008468 <__aeabi_dmul>
 8014044:	9b06      	ldr	r3, [sp, #24]
 8014046:	1b1c      	subs	r4, r3, r4
 8014048:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 801404c:	e9d5 2300 	ldrd	r2, r3, [r5]
 8014050:	e78d      	b.n	8013f6e <_strtod_l+0x3c6>
 8014052:	f113 0f16 	cmn.w	r3, #22
 8014056:	dba5      	blt.n	8013fa4 <_strtod_l+0x3fc>
 8014058:	4a37      	ldr	r2, [pc, #220]	; (8014138 <_strtod_l+0x590>)
 801405a:	eba2 02c3 	sub.w	r2, r2, r3, lsl #3
 801405e:	e9d2 2300 	ldrd	r2, r3, [r2]
 8014062:	4650      	mov	r0, sl
 8014064:	4659      	mov	r1, fp
 8014066:	f7f4 fb29 	bl	80086bc <__aeabi_ddiv>
 801406a:	e782      	b.n	8013f72 <_strtod_l+0x3ca>
 801406c:	2300      	movs	r3, #0
 801406e:	4e33      	ldr	r6, [pc, #204]	; (801413c <_strtod_l+0x594>)
 8014070:	ea4f 1828 	mov.w	r8, r8, asr #4
 8014074:	4650      	mov	r0, sl
 8014076:	4659      	mov	r1, fp
 8014078:	461d      	mov	r5, r3
 801407a:	f1b8 0f01 	cmp.w	r8, #1
 801407e:	dc21      	bgt.n	80140c4 <_strtod_l+0x51c>
 8014080:	b10b      	cbz	r3, 8014086 <_strtod_l+0x4de>
 8014082:	4682      	mov	sl, r0
 8014084:	468b      	mov	fp, r1
 8014086:	4b2d      	ldr	r3, [pc, #180]	; (801413c <_strtod_l+0x594>)
 8014088:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 801408c:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8014090:	4652      	mov	r2, sl
 8014092:	465b      	mov	r3, fp
 8014094:	e9d5 0100 	ldrd	r0, r1, [r5]
 8014098:	f7f4 f9e6 	bl	8008468 <__aeabi_dmul>
 801409c:	4b28      	ldr	r3, [pc, #160]	; (8014140 <_strtod_l+0x598>)
 801409e:	460a      	mov	r2, r1
 80140a0:	400b      	ands	r3, r1
 80140a2:	4928      	ldr	r1, [pc, #160]	; (8014144 <_strtod_l+0x59c>)
 80140a4:	428b      	cmp	r3, r1
 80140a6:	4682      	mov	sl, r0
 80140a8:	d898      	bhi.n	8013fdc <_strtod_l+0x434>
 80140aa:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 80140ae:	428b      	cmp	r3, r1
 80140b0:	bf86      	itte	hi
 80140b2:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 801414c <_strtod_l+0x5a4>
 80140b6:	f04f 3aff 	movhi.w	sl, #4294967295
 80140ba:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 80140be:	2300      	movs	r3, #0
 80140c0:	9304      	str	r3, [sp, #16]
 80140c2:	e077      	b.n	80141b4 <_strtod_l+0x60c>
 80140c4:	f018 0f01 	tst.w	r8, #1
 80140c8:	d006      	beq.n	80140d8 <_strtod_l+0x530>
 80140ca:	eb06 03c5 	add.w	r3, r6, r5, lsl #3
 80140ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80140d2:	f7f4 f9c9 	bl	8008468 <__aeabi_dmul>
 80140d6:	2301      	movs	r3, #1
 80140d8:	3501      	adds	r5, #1
 80140da:	ea4f 0868 	mov.w	r8, r8, asr #1
 80140de:	e7cc      	b.n	801407a <_strtod_l+0x4d2>
 80140e0:	d0ed      	beq.n	80140be <_strtod_l+0x516>
 80140e2:	f1c8 0800 	rsb	r8, r8, #0
 80140e6:	f018 020f 	ands.w	r2, r8, #15
 80140ea:	d00a      	beq.n	8014102 <_strtod_l+0x55a>
 80140ec:	4b12      	ldr	r3, [pc, #72]	; (8014138 <_strtod_l+0x590>)
 80140ee:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80140f2:	4650      	mov	r0, sl
 80140f4:	4659      	mov	r1, fp
 80140f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80140fa:	f7f4 fadf 	bl	80086bc <__aeabi_ddiv>
 80140fe:	4682      	mov	sl, r0
 8014100:	468b      	mov	fp, r1
 8014102:	ea5f 1828 	movs.w	r8, r8, asr #4
 8014106:	d0da      	beq.n	80140be <_strtod_l+0x516>
 8014108:	f1b8 0f1f 	cmp.w	r8, #31
 801410c:	dd20      	ble.n	8014150 <_strtod_l+0x5a8>
 801410e:	2400      	movs	r4, #0
 8014110:	46a0      	mov	r8, r4
 8014112:	9407      	str	r4, [sp, #28]
 8014114:	9405      	str	r4, [sp, #20]
 8014116:	2322      	movs	r3, #34	; 0x22
 8014118:	f04f 0a00 	mov.w	sl, #0
 801411c:	f04f 0b00 	mov.w	fp, #0
 8014120:	f8c9 3000 	str.w	r3, [r9]
 8014124:	e765      	b.n	8013ff2 <_strtod_l+0x44a>
 8014126:	bf00      	nop
 8014128:	080170f6 	.word	0x080170f6
 801412c:	0801719b 	.word	0x0801719b
 8014130:	080170fe 	.word	0x080170fe
 8014134:	08017158 	.word	0x08017158
 8014138:	080171d8 	.word	0x080171d8
 801413c:	080171b0 	.word	0x080171b0
 8014140:	7ff00000 	.word	0x7ff00000
 8014144:	7ca00000 	.word	0x7ca00000
 8014148:	fff80000 	.word	0xfff80000
 801414c:	7fefffff 	.word	0x7fefffff
 8014150:	f018 0310 	ands.w	r3, r8, #16
 8014154:	bf18      	it	ne
 8014156:	236a      	movne	r3, #106	; 0x6a
 8014158:	4da0      	ldr	r5, [pc, #640]	; (80143dc <_strtod_l+0x834>)
 801415a:	9304      	str	r3, [sp, #16]
 801415c:	4650      	mov	r0, sl
 801415e:	4659      	mov	r1, fp
 8014160:	2300      	movs	r3, #0
 8014162:	f1b8 0f00 	cmp.w	r8, #0
 8014166:	f300 810a 	bgt.w	801437e <_strtod_l+0x7d6>
 801416a:	b10b      	cbz	r3, 8014170 <_strtod_l+0x5c8>
 801416c:	4682      	mov	sl, r0
 801416e:	468b      	mov	fp, r1
 8014170:	9b04      	ldr	r3, [sp, #16]
 8014172:	b1bb      	cbz	r3, 80141a4 <_strtod_l+0x5fc>
 8014174:	f3cb 530a 	ubfx	r3, fp, #20, #11
 8014178:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 801417c:	2b00      	cmp	r3, #0
 801417e:	4659      	mov	r1, fp
 8014180:	dd10      	ble.n	80141a4 <_strtod_l+0x5fc>
 8014182:	2b1f      	cmp	r3, #31
 8014184:	f340 8107 	ble.w	8014396 <_strtod_l+0x7ee>
 8014188:	2b34      	cmp	r3, #52	; 0x34
 801418a:	bfde      	ittt	le
 801418c:	3b20      	suble	r3, #32
 801418e:	f04f 32ff 	movle.w	r2, #4294967295
 8014192:	fa02 f303 	lslle.w	r3, r2, r3
 8014196:	f04f 0a00 	mov.w	sl, #0
 801419a:	bfcc      	ite	gt
 801419c:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 80141a0:	ea03 0b01 	andle.w	fp, r3, r1
 80141a4:	2200      	movs	r2, #0
 80141a6:	2300      	movs	r3, #0
 80141a8:	4650      	mov	r0, sl
 80141aa:	4659      	mov	r1, fp
 80141ac:	f7f4 fbc4 	bl	8008938 <__aeabi_dcmpeq>
 80141b0:	2800      	cmp	r0, #0
 80141b2:	d1ac      	bne.n	801410e <_strtod_l+0x566>
 80141b4:	9b07      	ldr	r3, [sp, #28]
 80141b6:	9300      	str	r3, [sp, #0]
 80141b8:	9a05      	ldr	r2, [sp, #20]
 80141ba:	9908      	ldr	r1, [sp, #32]
 80141bc:	4623      	mov	r3, r4
 80141be:	4648      	mov	r0, r9
 80141c0:	f002 f819 	bl	80161f6 <__s2b>
 80141c4:	9007      	str	r0, [sp, #28]
 80141c6:	2800      	cmp	r0, #0
 80141c8:	f43f af08 	beq.w	8013fdc <_strtod_l+0x434>
 80141cc:	9a06      	ldr	r2, [sp, #24]
 80141ce:	9b06      	ldr	r3, [sp, #24]
 80141d0:	2a00      	cmp	r2, #0
 80141d2:	f1c3 0300 	rsb	r3, r3, #0
 80141d6:	bfa8      	it	ge
 80141d8:	2300      	movge	r3, #0
 80141da:	930e      	str	r3, [sp, #56]	; 0x38
 80141dc:	2400      	movs	r4, #0
 80141de:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 80141e2:	9316      	str	r3, [sp, #88]	; 0x58
 80141e4:	46a0      	mov	r8, r4
 80141e6:	9b07      	ldr	r3, [sp, #28]
 80141e8:	4648      	mov	r0, r9
 80141ea:	6859      	ldr	r1, [r3, #4]
 80141ec:	f001 ff7d 	bl	80160ea <_Balloc>
 80141f0:	9005      	str	r0, [sp, #20]
 80141f2:	2800      	cmp	r0, #0
 80141f4:	f43f aef6 	beq.w	8013fe4 <_strtod_l+0x43c>
 80141f8:	9b07      	ldr	r3, [sp, #28]
 80141fa:	691a      	ldr	r2, [r3, #16]
 80141fc:	3202      	adds	r2, #2
 80141fe:	f103 010c 	add.w	r1, r3, #12
 8014202:	0092      	lsls	r2, r2, #2
 8014204:	300c      	adds	r0, #12
 8014206:	f7fd fda9 	bl	8011d5c <memcpy>
 801420a:	aa1e      	add	r2, sp, #120	; 0x78
 801420c:	a91d      	add	r1, sp, #116	; 0x74
 801420e:	ec4b ab10 	vmov	d0, sl, fp
 8014212:	4648      	mov	r0, r9
 8014214:	e9cd ab08 	strd	sl, fp, [sp, #32]
 8014218:	f002 faa8 	bl	801676c <__d2b>
 801421c:	901c      	str	r0, [sp, #112]	; 0x70
 801421e:	2800      	cmp	r0, #0
 8014220:	f43f aee0 	beq.w	8013fe4 <_strtod_l+0x43c>
 8014224:	2101      	movs	r1, #1
 8014226:	4648      	mov	r0, r9
 8014228:	f002 f871 	bl	801630e <__i2b>
 801422c:	4680      	mov	r8, r0
 801422e:	2800      	cmp	r0, #0
 8014230:	f43f aed8 	beq.w	8013fe4 <_strtod_l+0x43c>
 8014234:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 8014236:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8014238:	2e00      	cmp	r6, #0
 801423a:	bfab      	itete	ge
 801423c:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 801423e:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 8014240:	9d16      	ldrge	r5, [sp, #88]	; 0x58
 8014242:	9f0e      	ldrlt	r7, [sp, #56]	; 0x38
 8014244:	bfac      	ite	ge
 8014246:	18f7      	addge	r7, r6, r3
 8014248:	1b9d      	sublt	r5, r3, r6
 801424a:	9b04      	ldr	r3, [sp, #16]
 801424c:	1af6      	subs	r6, r6, r3
 801424e:	4416      	add	r6, r2
 8014250:	4b63      	ldr	r3, [pc, #396]	; (80143e0 <_strtod_l+0x838>)
 8014252:	3e01      	subs	r6, #1
 8014254:	429e      	cmp	r6, r3
 8014256:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 801425a:	f280 80af 	bge.w	80143bc <_strtod_l+0x814>
 801425e:	1b9b      	subs	r3, r3, r6
 8014260:	2b1f      	cmp	r3, #31
 8014262:	eba2 0203 	sub.w	r2, r2, r3
 8014266:	f04f 0101 	mov.w	r1, #1
 801426a:	f300 809b 	bgt.w	80143a4 <_strtod_l+0x7fc>
 801426e:	fa01 f303 	lsl.w	r3, r1, r3
 8014272:	930f      	str	r3, [sp, #60]	; 0x3c
 8014274:	2300      	movs	r3, #0
 8014276:	930a      	str	r3, [sp, #40]	; 0x28
 8014278:	18be      	adds	r6, r7, r2
 801427a:	9b04      	ldr	r3, [sp, #16]
 801427c:	42b7      	cmp	r7, r6
 801427e:	4415      	add	r5, r2
 8014280:	441d      	add	r5, r3
 8014282:	463b      	mov	r3, r7
 8014284:	bfa8      	it	ge
 8014286:	4633      	movge	r3, r6
 8014288:	42ab      	cmp	r3, r5
 801428a:	bfa8      	it	ge
 801428c:	462b      	movge	r3, r5
 801428e:	2b00      	cmp	r3, #0
 8014290:	bfc2      	ittt	gt
 8014292:	1af6      	subgt	r6, r6, r3
 8014294:	1aed      	subgt	r5, r5, r3
 8014296:	1aff      	subgt	r7, r7, r3
 8014298:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801429a:	b1bb      	cbz	r3, 80142cc <_strtod_l+0x724>
 801429c:	4641      	mov	r1, r8
 801429e:	461a      	mov	r2, r3
 80142a0:	4648      	mov	r0, r9
 80142a2:	f002 f8d3 	bl	801644c <__pow5mult>
 80142a6:	4680      	mov	r8, r0
 80142a8:	2800      	cmp	r0, #0
 80142aa:	f43f ae9b 	beq.w	8013fe4 <_strtod_l+0x43c>
 80142ae:	4601      	mov	r1, r0
 80142b0:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 80142b2:	4648      	mov	r0, r9
 80142b4:	f002 f834 	bl	8016320 <__multiply>
 80142b8:	900c      	str	r0, [sp, #48]	; 0x30
 80142ba:	2800      	cmp	r0, #0
 80142bc:	f43f ae92 	beq.w	8013fe4 <_strtod_l+0x43c>
 80142c0:	991c      	ldr	r1, [sp, #112]	; 0x70
 80142c2:	4648      	mov	r0, r9
 80142c4:	f001 ff45 	bl	8016152 <_Bfree>
 80142c8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80142ca:	931c      	str	r3, [sp, #112]	; 0x70
 80142cc:	2e00      	cmp	r6, #0
 80142ce:	dc7a      	bgt.n	80143c6 <_strtod_l+0x81e>
 80142d0:	9b06      	ldr	r3, [sp, #24]
 80142d2:	2b00      	cmp	r3, #0
 80142d4:	dd08      	ble.n	80142e8 <_strtod_l+0x740>
 80142d6:	9a16      	ldr	r2, [sp, #88]	; 0x58
 80142d8:	9905      	ldr	r1, [sp, #20]
 80142da:	4648      	mov	r0, r9
 80142dc:	f002 f8b6 	bl	801644c <__pow5mult>
 80142e0:	9005      	str	r0, [sp, #20]
 80142e2:	2800      	cmp	r0, #0
 80142e4:	f43f ae7e 	beq.w	8013fe4 <_strtod_l+0x43c>
 80142e8:	2d00      	cmp	r5, #0
 80142ea:	dd08      	ble.n	80142fe <_strtod_l+0x756>
 80142ec:	462a      	mov	r2, r5
 80142ee:	9905      	ldr	r1, [sp, #20]
 80142f0:	4648      	mov	r0, r9
 80142f2:	f002 f8f9 	bl	80164e8 <__lshift>
 80142f6:	9005      	str	r0, [sp, #20]
 80142f8:	2800      	cmp	r0, #0
 80142fa:	f43f ae73 	beq.w	8013fe4 <_strtod_l+0x43c>
 80142fe:	2f00      	cmp	r7, #0
 8014300:	dd08      	ble.n	8014314 <_strtod_l+0x76c>
 8014302:	4641      	mov	r1, r8
 8014304:	463a      	mov	r2, r7
 8014306:	4648      	mov	r0, r9
 8014308:	f002 f8ee 	bl	80164e8 <__lshift>
 801430c:	4680      	mov	r8, r0
 801430e:	2800      	cmp	r0, #0
 8014310:	f43f ae68 	beq.w	8013fe4 <_strtod_l+0x43c>
 8014314:	9a05      	ldr	r2, [sp, #20]
 8014316:	991c      	ldr	r1, [sp, #112]	; 0x70
 8014318:	4648      	mov	r0, r9
 801431a:	f002 f953 	bl	80165c4 <__mdiff>
 801431e:	4604      	mov	r4, r0
 8014320:	2800      	cmp	r0, #0
 8014322:	f43f ae5f 	beq.w	8013fe4 <_strtod_l+0x43c>
 8014326:	68c3      	ldr	r3, [r0, #12]
 8014328:	930c      	str	r3, [sp, #48]	; 0x30
 801432a:	2300      	movs	r3, #0
 801432c:	60c3      	str	r3, [r0, #12]
 801432e:	4641      	mov	r1, r8
 8014330:	f002 f92e 	bl	8016590 <__mcmp>
 8014334:	2800      	cmp	r0, #0
 8014336:	da55      	bge.n	80143e4 <_strtod_l+0x83c>
 8014338:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801433a:	b9e3      	cbnz	r3, 8014376 <_strtod_l+0x7ce>
 801433c:	f1ba 0f00 	cmp.w	sl, #0
 8014340:	d119      	bne.n	8014376 <_strtod_l+0x7ce>
 8014342:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8014346:	b9b3      	cbnz	r3, 8014376 <_strtod_l+0x7ce>
 8014348:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 801434c:	0d1b      	lsrs	r3, r3, #20
 801434e:	051b      	lsls	r3, r3, #20
 8014350:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8014354:	d90f      	bls.n	8014376 <_strtod_l+0x7ce>
 8014356:	6963      	ldr	r3, [r4, #20]
 8014358:	b913      	cbnz	r3, 8014360 <_strtod_l+0x7b8>
 801435a:	6923      	ldr	r3, [r4, #16]
 801435c:	2b01      	cmp	r3, #1
 801435e:	dd0a      	ble.n	8014376 <_strtod_l+0x7ce>
 8014360:	4621      	mov	r1, r4
 8014362:	2201      	movs	r2, #1
 8014364:	4648      	mov	r0, r9
 8014366:	f002 f8bf 	bl	80164e8 <__lshift>
 801436a:	4641      	mov	r1, r8
 801436c:	4604      	mov	r4, r0
 801436e:	f002 f90f 	bl	8016590 <__mcmp>
 8014372:	2800      	cmp	r0, #0
 8014374:	dc67      	bgt.n	8014446 <_strtod_l+0x89e>
 8014376:	9b04      	ldr	r3, [sp, #16]
 8014378:	2b00      	cmp	r3, #0
 801437a:	d171      	bne.n	8014460 <_strtod_l+0x8b8>
 801437c:	e63d      	b.n	8013ffa <_strtod_l+0x452>
 801437e:	f018 0f01 	tst.w	r8, #1
 8014382:	d004      	beq.n	801438e <_strtod_l+0x7e6>
 8014384:	e9d5 2300 	ldrd	r2, r3, [r5]
 8014388:	f7f4 f86e 	bl	8008468 <__aeabi_dmul>
 801438c:	2301      	movs	r3, #1
 801438e:	ea4f 0868 	mov.w	r8, r8, asr #1
 8014392:	3508      	adds	r5, #8
 8014394:	e6e5      	b.n	8014162 <_strtod_l+0x5ba>
 8014396:	f04f 32ff 	mov.w	r2, #4294967295
 801439a:	fa02 f303 	lsl.w	r3, r2, r3
 801439e:	ea03 0a0a 	and.w	sl, r3, sl
 80143a2:	e6ff      	b.n	80141a4 <_strtod_l+0x5fc>
 80143a4:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 80143a8:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 80143ac:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 80143b0:	36e2      	adds	r6, #226	; 0xe2
 80143b2:	fa01 f306 	lsl.w	r3, r1, r6
 80143b6:	930a      	str	r3, [sp, #40]	; 0x28
 80143b8:	910f      	str	r1, [sp, #60]	; 0x3c
 80143ba:	e75d      	b.n	8014278 <_strtod_l+0x6d0>
 80143bc:	2300      	movs	r3, #0
 80143be:	930a      	str	r3, [sp, #40]	; 0x28
 80143c0:	2301      	movs	r3, #1
 80143c2:	930f      	str	r3, [sp, #60]	; 0x3c
 80143c4:	e758      	b.n	8014278 <_strtod_l+0x6d0>
 80143c6:	4632      	mov	r2, r6
 80143c8:	991c      	ldr	r1, [sp, #112]	; 0x70
 80143ca:	4648      	mov	r0, r9
 80143cc:	f002 f88c 	bl	80164e8 <__lshift>
 80143d0:	901c      	str	r0, [sp, #112]	; 0x70
 80143d2:	2800      	cmp	r0, #0
 80143d4:	f47f af7c 	bne.w	80142d0 <_strtod_l+0x728>
 80143d8:	e604      	b.n	8013fe4 <_strtod_l+0x43c>
 80143da:	bf00      	nop
 80143dc:	08017170 	.word	0x08017170
 80143e0:	fffffc02 	.word	0xfffffc02
 80143e4:	465d      	mov	r5, fp
 80143e6:	f040 8086 	bne.w	80144f6 <_strtod_l+0x94e>
 80143ea:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80143ec:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80143f0:	b32a      	cbz	r2, 801443e <_strtod_l+0x896>
 80143f2:	4aaf      	ldr	r2, [pc, #700]	; (80146b0 <_strtod_l+0xb08>)
 80143f4:	4293      	cmp	r3, r2
 80143f6:	d153      	bne.n	80144a0 <_strtod_l+0x8f8>
 80143f8:	9b04      	ldr	r3, [sp, #16]
 80143fa:	4650      	mov	r0, sl
 80143fc:	b1d3      	cbz	r3, 8014434 <_strtod_l+0x88c>
 80143fe:	4aad      	ldr	r2, [pc, #692]	; (80146b4 <_strtod_l+0xb0c>)
 8014400:	402a      	ands	r2, r5
 8014402:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 8014406:	f04f 31ff 	mov.w	r1, #4294967295
 801440a:	d816      	bhi.n	801443a <_strtod_l+0x892>
 801440c:	0d12      	lsrs	r2, r2, #20
 801440e:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8014412:	fa01 f303 	lsl.w	r3, r1, r3
 8014416:	4298      	cmp	r0, r3
 8014418:	d142      	bne.n	80144a0 <_strtod_l+0x8f8>
 801441a:	4ba7      	ldr	r3, [pc, #668]	; (80146b8 <_strtod_l+0xb10>)
 801441c:	429d      	cmp	r5, r3
 801441e:	d102      	bne.n	8014426 <_strtod_l+0x87e>
 8014420:	3001      	adds	r0, #1
 8014422:	f43f addf 	beq.w	8013fe4 <_strtod_l+0x43c>
 8014426:	4ba3      	ldr	r3, [pc, #652]	; (80146b4 <_strtod_l+0xb0c>)
 8014428:	402b      	ands	r3, r5
 801442a:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 801442e:	f04f 0a00 	mov.w	sl, #0
 8014432:	e7a0      	b.n	8014376 <_strtod_l+0x7ce>
 8014434:	f04f 33ff 	mov.w	r3, #4294967295
 8014438:	e7ed      	b.n	8014416 <_strtod_l+0x86e>
 801443a:	460b      	mov	r3, r1
 801443c:	e7eb      	b.n	8014416 <_strtod_l+0x86e>
 801443e:	bb7b      	cbnz	r3, 80144a0 <_strtod_l+0x8f8>
 8014440:	f1ba 0f00 	cmp.w	sl, #0
 8014444:	d12c      	bne.n	80144a0 <_strtod_l+0x8f8>
 8014446:	9904      	ldr	r1, [sp, #16]
 8014448:	4a9a      	ldr	r2, [pc, #616]	; (80146b4 <_strtod_l+0xb0c>)
 801444a:	465b      	mov	r3, fp
 801444c:	b1f1      	cbz	r1, 801448c <_strtod_l+0x8e4>
 801444e:	ea02 010b 	and.w	r1, r2, fp
 8014452:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8014456:	dc19      	bgt.n	801448c <_strtod_l+0x8e4>
 8014458:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 801445c:	f77f ae5b 	ble.w	8014116 <_strtod_l+0x56e>
 8014460:	4a96      	ldr	r2, [pc, #600]	; (80146bc <_strtod_l+0xb14>)
 8014462:	2300      	movs	r3, #0
 8014464:	e9cd 3214 	strd	r3, r2, [sp, #80]	; 0x50
 8014468:	4650      	mov	r0, sl
 801446a:	4659      	mov	r1, fp
 801446c:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8014470:	f7f3 fffa 	bl	8008468 <__aeabi_dmul>
 8014474:	4682      	mov	sl, r0
 8014476:	468b      	mov	fp, r1
 8014478:	2900      	cmp	r1, #0
 801447a:	f47f adbe 	bne.w	8013ffa <_strtod_l+0x452>
 801447e:	2800      	cmp	r0, #0
 8014480:	f47f adbb 	bne.w	8013ffa <_strtod_l+0x452>
 8014484:	2322      	movs	r3, #34	; 0x22
 8014486:	f8c9 3000 	str.w	r3, [r9]
 801448a:	e5b6      	b.n	8013ffa <_strtod_l+0x452>
 801448c:	4013      	ands	r3, r2
 801448e:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8014492:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8014496:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 801449a:	f04f 3aff 	mov.w	sl, #4294967295
 801449e:	e76a      	b.n	8014376 <_strtod_l+0x7ce>
 80144a0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80144a2:	b193      	cbz	r3, 80144ca <_strtod_l+0x922>
 80144a4:	422b      	tst	r3, r5
 80144a6:	f43f af66 	beq.w	8014376 <_strtod_l+0x7ce>
 80144aa:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80144ac:	9a04      	ldr	r2, [sp, #16]
 80144ae:	4650      	mov	r0, sl
 80144b0:	4659      	mov	r1, fp
 80144b2:	b173      	cbz	r3, 80144d2 <_strtod_l+0x92a>
 80144b4:	f7ff fb59 	bl	8013b6a <sulp>
 80144b8:	4602      	mov	r2, r0
 80144ba:	460b      	mov	r3, r1
 80144bc:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80144c0:	f7f3 fe1c 	bl	80080fc <__adddf3>
 80144c4:	4682      	mov	sl, r0
 80144c6:	468b      	mov	fp, r1
 80144c8:	e755      	b.n	8014376 <_strtod_l+0x7ce>
 80144ca:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80144cc:	ea13 0f0a 	tst.w	r3, sl
 80144d0:	e7e9      	b.n	80144a6 <_strtod_l+0x8fe>
 80144d2:	f7ff fb4a 	bl	8013b6a <sulp>
 80144d6:	4602      	mov	r2, r0
 80144d8:	460b      	mov	r3, r1
 80144da:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80144de:	f7f3 fe0b 	bl	80080f8 <__aeabi_dsub>
 80144e2:	2200      	movs	r2, #0
 80144e4:	2300      	movs	r3, #0
 80144e6:	4682      	mov	sl, r0
 80144e8:	468b      	mov	fp, r1
 80144ea:	f7f4 fa25 	bl	8008938 <__aeabi_dcmpeq>
 80144ee:	2800      	cmp	r0, #0
 80144f0:	f47f ae11 	bne.w	8014116 <_strtod_l+0x56e>
 80144f4:	e73f      	b.n	8014376 <_strtod_l+0x7ce>
 80144f6:	4641      	mov	r1, r8
 80144f8:	4620      	mov	r0, r4
 80144fa:	f002 f986 	bl	801680a <__ratio>
 80144fe:	ec57 6b10 	vmov	r6, r7, d0
 8014502:	2200      	movs	r2, #0
 8014504:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8014508:	ee10 0a10 	vmov	r0, s0
 801450c:	4639      	mov	r1, r7
 801450e:	f7f4 fa27 	bl	8008960 <__aeabi_dcmple>
 8014512:	2800      	cmp	r0, #0
 8014514:	d077      	beq.n	8014606 <_strtod_l+0xa5e>
 8014516:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8014518:	2b00      	cmp	r3, #0
 801451a:	d04a      	beq.n	80145b2 <_strtod_l+0xa0a>
 801451c:	4b68      	ldr	r3, [pc, #416]	; (80146c0 <_strtod_l+0xb18>)
 801451e:	2200      	movs	r2, #0
 8014520:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8014524:	4f66      	ldr	r7, [pc, #408]	; (80146c0 <_strtod_l+0xb18>)
 8014526:	2600      	movs	r6, #0
 8014528:	4b62      	ldr	r3, [pc, #392]	; (80146b4 <_strtod_l+0xb0c>)
 801452a:	402b      	ands	r3, r5
 801452c:	930f      	str	r3, [sp, #60]	; 0x3c
 801452e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8014530:	4b64      	ldr	r3, [pc, #400]	; (80146c4 <_strtod_l+0xb1c>)
 8014532:	429a      	cmp	r2, r3
 8014534:	f040 80ce 	bne.w	80146d4 <_strtod_l+0xb2c>
 8014538:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 801453c:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8014540:	f1a5 7b54 	sub.w	fp, r5, #55574528	; 0x3500000
 8014544:	ec4b ab10 	vmov	d0, sl, fp
 8014548:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 801454c:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8014550:	f002 f896 	bl	8016680 <__ulp>
 8014554:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8014558:	ec53 2b10 	vmov	r2, r3, d0
 801455c:	f7f3 ff84 	bl	8008468 <__aeabi_dmul>
 8014560:	4652      	mov	r2, sl
 8014562:	465b      	mov	r3, fp
 8014564:	f7f3 fdca 	bl	80080fc <__adddf3>
 8014568:	460b      	mov	r3, r1
 801456a:	4952      	ldr	r1, [pc, #328]	; (80146b4 <_strtod_l+0xb0c>)
 801456c:	4a56      	ldr	r2, [pc, #344]	; (80146c8 <_strtod_l+0xb20>)
 801456e:	4019      	ands	r1, r3
 8014570:	4291      	cmp	r1, r2
 8014572:	4682      	mov	sl, r0
 8014574:	d95b      	bls.n	801462e <_strtod_l+0xa86>
 8014576:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014578:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 801457c:	4293      	cmp	r3, r2
 801457e:	d103      	bne.n	8014588 <_strtod_l+0x9e0>
 8014580:	9b08      	ldr	r3, [sp, #32]
 8014582:	3301      	adds	r3, #1
 8014584:	f43f ad2e 	beq.w	8013fe4 <_strtod_l+0x43c>
 8014588:	f8df b12c 	ldr.w	fp, [pc, #300]	; 80146b8 <_strtod_l+0xb10>
 801458c:	f04f 3aff 	mov.w	sl, #4294967295
 8014590:	991c      	ldr	r1, [sp, #112]	; 0x70
 8014592:	4648      	mov	r0, r9
 8014594:	f001 fddd 	bl	8016152 <_Bfree>
 8014598:	9905      	ldr	r1, [sp, #20]
 801459a:	4648      	mov	r0, r9
 801459c:	f001 fdd9 	bl	8016152 <_Bfree>
 80145a0:	4641      	mov	r1, r8
 80145a2:	4648      	mov	r0, r9
 80145a4:	f001 fdd5 	bl	8016152 <_Bfree>
 80145a8:	4621      	mov	r1, r4
 80145aa:	4648      	mov	r0, r9
 80145ac:	f001 fdd1 	bl	8016152 <_Bfree>
 80145b0:	e619      	b.n	80141e6 <_strtod_l+0x63e>
 80145b2:	f1ba 0f00 	cmp.w	sl, #0
 80145b6:	d11a      	bne.n	80145ee <_strtod_l+0xa46>
 80145b8:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80145bc:	b9eb      	cbnz	r3, 80145fa <_strtod_l+0xa52>
 80145be:	2200      	movs	r2, #0
 80145c0:	4b3f      	ldr	r3, [pc, #252]	; (80146c0 <_strtod_l+0xb18>)
 80145c2:	4630      	mov	r0, r6
 80145c4:	4639      	mov	r1, r7
 80145c6:	f7f4 f9c1 	bl	800894c <__aeabi_dcmplt>
 80145ca:	b9c8      	cbnz	r0, 8014600 <_strtod_l+0xa58>
 80145cc:	4630      	mov	r0, r6
 80145ce:	4639      	mov	r1, r7
 80145d0:	2200      	movs	r2, #0
 80145d2:	4b3e      	ldr	r3, [pc, #248]	; (80146cc <_strtod_l+0xb24>)
 80145d4:	f7f3 ff48 	bl	8008468 <__aeabi_dmul>
 80145d8:	4606      	mov	r6, r0
 80145da:	460f      	mov	r7, r1
 80145dc:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 80145e0:	9618      	str	r6, [sp, #96]	; 0x60
 80145e2:	9319      	str	r3, [sp, #100]	; 0x64
 80145e4:	e9dd 2318 	ldrd	r2, r3, [sp, #96]	; 0x60
 80145e8:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 80145ec:	e79c      	b.n	8014528 <_strtod_l+0x980>
 80145ee:	f1ba 0f01 	cmp.w	sl, #1
 80145f2:	d102      	bne.n	80145fa <_strtod_l+0xa52>
 80145f4:	2d00      	cmp	r5, #0
 80145f6:	f43f ad8e 	beq.w	8014116 <_strtod_l+0x56e>
 80145fa:	2200      	movs	r2, #0
 80145fc:	4b34      	ldr	r3, [pc, #208]	; (80146d0 <_strtod_l+0xb28>)
 80145fe:	e78f      	b.n	8014520 <_strtod_l+0x978>
 8014600:	2600      	movs	r6, #0
 8014602:	4f32      	ldr	r7, [pc, #200]	; (80146cc <_strtod_l+0xb24>)
 8014604:	e7ea      	b.n	80145dc <_strtod_l+0xa34>
 8014606:	4b31      	ldr	r3, [pc, #196]	; (80146cc <_strtod_l+0xb24>)
 8014608:	4630      	mov	r0, r6
 801460a:	4639      	mov	r1, r7
 801460c:	2200      	movs	r2, #0
 801460e:	f7f3 ff2b 	bl	8008468 <__aeabi_dmul>
 8014612:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8014614:	4606      	mov	r6, r0
 8014616:	460f      	mov	r7, r1
 8014618:	b933      	cbnz	r3, 8014628 <_strtod_l+0xa80>
 801461a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801461e:	9010      	str	r0, [sp, #64]	; 0x40
 8014620:	9311      	str	r3, [sp, #68]	; 0x44
 8014622:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8014626:	e7df      	b.n	80145e8 <_strtod_l+0xa40>
 8014628:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 801462c:	e7f9      	b.n	8014622 <_strtod_l+0xa7a>
 801462e:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 8014632:	9b04      	ldr	r3, [sp, #16]
 8014634:	2b00      	cmp	r3, #0
 8014636:	d1ab      	bne.n	8014590 <_strtod_l+0x9e8>
 8014638:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 801463c:	0d1b      	lsrs	r3, r3, #20
 801463e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8014640:	051b      	lsls	r3, r3, #20
 8014642:	429a      	cmp	r2, r3
 8014644:	465d      	mov	r5, fp
 8014646:	d1a3      	bne.n	8014590 <_strtod_l+0x9e8>
 8014648:	4639      	mov	r1, r7
 801464a:	4630      	mov	r0, r6
 801464c:	f7f4 f9bc 	bl	80089c8 <__aeabi_d2iz>
 8014650:	f7f3 fea0 	bl	8008394 <__aeabi_i2d>
 8014654:	460b      	mov	r3, r1
 8014656:	4602      	mov	r2, r0
 8014658:	4639      	mov	r1, r7
 801465a:	4630      	mov	r0, r6
 801465c:	f7f3 fd4c 	bl	80080f8 <__aeabi_dsub>
 8014660:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8014662:	4606      	mov	r6, r0
 8014664:	460f      	mov	r7, r1
 8014666:	b933      	cbnz	r3, 8014676 <_strtod_l+0xace>
 8014668:	f1ba 0f00 	cmp.w	sl, #0
 801466c:	d103      	bne.n	8014676 <_strtod_l+0xace>
 801466e:	f3cb 0513 	ubfx	r5, fp, #0, #20
 8014672:	2d00      	cmp	r5, #0
 8014674:	d06d      	beq.n	8014752 <_strtod_l+0xbaa>
 8014676:	a30a      	add	r3, pc, #40	; (adr r3, 80146a0 <_strtod_l+0xaf8>)
 8014678:	e9d3 2300 	ldrd	r2, r3, [r3]
 801467c:	4630      	mov	r0, r6
 801467e:	4639      	mov	r1, r7
 8014680:	f7f4 f964 	bl	800894c <__aeabi_dcmplt>
 8014684:	2800      	cmp	r0, #0
 8014686:	f47f acb8 	bne.w	8013ffa <_strtod_l+0x452>
 801468a:	a307      	add	r3, pc, #28	; (adr r3, 80146a8 <_strtod_l+0xb00>)
 801468c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014690:	4630      	mov	r0, r6
 8014692:	4639      	mov	r1, r7
 8014694:	f7f4 f978 	bl	8008988 <__aeabi_dcmpgt>
 8014698:	2800      	cmp	r0, #0
 801469a:	f43f af79 	beq.w	8014590 <_strtod_l+0x9e8>
 801469e:	e4ac      	b.n	8013ffa <_strtod_l+0x452>
 80146a0:	94a03595 	.word	0x94a03595
 80146a4:	3fdfffff 	.word	0x3fdfffff
 80146a8:	35afe535 	.word	0x35afe535
 80146ac:	3fe00000 	.word	0x3fe00000
 80146b0:	000fffff 	.word	0x000fffff
 80146b4:	7ff00000 	.word	0x7ff00000
 80146b8:	7fefffff 	.word	0x7fefffff
 80146bc:	39500000 	.word	0x39500000
 80146c0:	3ff00000 	.word	0x3ff00000
 80146c4:	7fe00000 	.word	0x7fe00000
 80146c8:	7c9fffff 	.word	0x7c9fffff
 80146cc:	3fe00000 	.word	0x3fe00000
 80146d0:	bff00000 	.word	0xbff00000
 80146d4:	9b04      	ldr	r3, [sp, #16]
 80146d6:	b333      	cbz	r3, 8014726 <_strtod_l+0xb7e>
 80146d8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80146da:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 80146de:	d822      	bhi.n	8014726 <_strtod_l+0xb7e>
 80146e0:	a327      	add	r3, pc, #156	; (adr r3, 8014780 <_strtod_l+0xbd8>)
 80146e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80146e6:	4630      	mov	r0, r6
 80146e8:	4639      	mov	r1, r7
 80146ea:	f7f4 f939 	bl	8008960 <__aeabi_dcmple>
 80146ee:	b1a0      	cbz	r0, 801471a <_strtod_l+0xb72>
 80146f0:	4639      	mov	r1, r7
 80146f2:	4630      	mov	r0, r6
 80146f4:	f7f4 f990 	bl	8008a18 <__aeabi_d2uiz>
 80146f8:	2800      	cmp	r0, #0
 80146fa:	bf08      	it	eq
 80146fc:	2001      	moveq	r0, #1
 80146fe:	f7f3 fe39 	bl	8008374 <__aeabi_ui2d>
 8014702:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8014704:	4606      	mov	r6, r0
 8014706:	460f      	mov	r7, r1
 8014708:	bb03      	cbnz	r3, 801474c <_strtod_l+0xba4>
 801470a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801470e:	9012      	str	r0, [sp, #72]	; 0x48
 8014710:	9313      	str	r3, [sp, #76]	; 0x4c
 8014712:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 8014716:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 801471a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801471c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801471e:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8014722:	1a9b      	subs	r3, r3, r2
 8014724:	930b      	str	r3, [sp, #44]	; 0x2c
 8014726:	ed9d 0b08 	vldr	d0, [sp, #32]
 801472a:	e9dd ab0a 	ldrd	sl, fp, [sp, #40]	; 0x28
 801472e:	f001 ffa7 	bl	8016680 <__ulp>
 8014732:	4650      	mov	r0, sl
 8014734:	ec53 2b10 	vmov	r2, r3, d0
 8014738:	4659      	mov	r1, fp
 801473a:	f7f3 fe95 	bl	8008468 <__aeabi_dmul>
 801473e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8014742:	f7f3 fcdb 	bl	80080fc <__adddf3>
 8014746:	4682      	mov	sl, r0
 8014748:	468b      	mov	fp, r1
 801474a:	e772      	b.n	8014632 <_strtod_l+0xa8a>
 801474c:	e9cd 6712 	strd	r6, r7, [sp, #72]	; 0x48
 8014750:	e7df      	b.n	8014712 <_strtod_l+0xb6a>
 8014752:	a30d      	add	r3, pc, #52	; (adr r3, 8014788 <_strtod_l+0xbe0>)
 8014754:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014758:	f7f4 f8f8 	bl	800894c <__aeabi_dcmplt>
 801475c:	e79c      	b.n	8014698 <_strtod_l+0xaf0>
 801475e:	2300      	movs	r3, #0
 8014760:	930d      	str	r3, [sp, #52]	; 0x34
 8014762:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8014764:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8014766:	6013      	str	r3, [r2, #0]
 8014768:	f7ff ba61 	b.w	8013c2e <_strtod_l+0x86>
 801476c:	2b65      	cmp	r3, #101	; 0x65
 801476e:	f04f 0200 	mov.w	r2, #0
 8014772:	f43f ab4e 	beq.w	8013e12 <_strtod_l+0x26a>
 8014776:	2101      	movs	r1, #1
 8014778:	4614      	mov	r4, r2
 801477a:	9104      	str	r1, [sp, #16]
 801477c:	f7ff bacb 	b.w	8013d16 <_strtod_l+0x16e>
 8014780:	ffc00000 	.word	0xffc00000
 8014784:	41dfffff 	.word	0x41dfffff
 8014788:	94a03595 	.word	0x94a03595
 801478c:	3fcfffff 	.word	0x3fcfffff

08014790 <_strtod_r>:
 8014790:	4b05      	ldr	r3, [pc, #20]	; (80147a8 <_strtod_r+0x18>)
 8014792:	681b      	ldr	r3, [r3, #0]
 8014794:	b410      	push	{r4}
 8014796:	6a1b      	ldr	r3, [r3, #32]
 8014798:	4c04      	ldr	r4, [pc, #16]	; (80147ac <_strtod_r+0x1c>)
 801479a:	2b00      	cmp	r3, #0
 801479c:	bf08      	it	eq
 801479e:	4623      	moveq	r3, r4
 80147a0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80147a4:	f7ff ba00 	b.w	8013ba8 <_strtod_l>
 80147a8:	20000018 	.word	0x20000018
 80147ac:	2000007c 	.word	0x2000007c

080147b0 <_strtol_l.isra.0>:
 80147b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80147b4:	4680      	mov	r8, r0
 80147b6:	4689      	mov	r9, r1
 80147b8:	4692      	mov	sl, r2
 80147ba:	461e      	mov	r6, r3
 80147bc:	460f      	mov	r7, r1
 80147be:	463d      	mov	r5, r7
 80147c0:	9808      	ldr	r0, [sp, #32]
 80147c2:	f815 4b01 	ldrb.w	r4, [r5], #1
 80147c6:	f001 fc27 	bl	8016018 <__locale_ctype_ptr_l>
 80147ca:	4420      	add	r0, r4
 80147cc:	7843      	ldrb	r3, [r0, #1]
 80147ce:	f013 0308 	ands.w	r3, r3, #8
 80147d2:	d132      	bne.n	801483a <_strtol_l.isra.0+0x8a>
 80147d4:	2c2d      	cmp	r4, #45	; 0x2d
 80147d6:	d132      	bne.n	801483e <_strtol_l.isra.0+0x8e>
 80147d8:	787c      	ldrb	r4, [r7, #1]
 80147da:	1cbd      	adds	r5, r7, #2
 80147dc:	2201      	movs	r2, #1
 80147de:	2e00      	cmp	r6, #0
 80147e0:	d05d      	beq.n	801489e <_strtol_l.isra.0+0xee>
 80147e2:	2e10      	cmp	r6, #16
 80147e4:	d109      	bne.n	80147fa <_strtol_l.isra.0+0x4a>
 80147e6:	2c30      	cmp	r4, #48	; 0x30
 80147e8:	d107      	bne.n	80147fa <_strtol_l.isra.0+0x4a>
 80147ea:	782b      	ldrb	r3, [r5, #0]
 80147ec:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80147f0:	2b58      	cmp	r3, #88	; 0x58
 80147f2:	d14f      	bne.n	8014894 <_strtol_l.isra.0+0xe4>
 80147f4:	786c      	ldrb	r4, [r5, #1]
 80147f6:	2610      	movs	r6, #16
 80147f8:	3502      	adds	r5, #2
 80147fa:	2a00      	cmp	r2, #0
 80147fc:	bf14      	ite	ne
 80147fe:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 8014802:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 8014806:	2700      	movs	r7, #0
 8014808:	fbb1 fcf6 	udiv	ip, r1, r6
 801480c:	4638      	mov	r0, r7
 801480e:	fb06 1e1c 	mls	lr, r6, ip, r1
 8014812:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 8014816:	2b09      	cmp	r3, #9
 8014818:	d817      	bhi.n	801484a <_strtol_l.isra.0+0x9a>
 801481a:	461c      	mov	r4, r3
 801481c:	42a6      	cmp	r6, r4
 801481e:	dd23      	ble.n	8014868 <_strtol_l.isra.0+0xb8>
 8014820:	1c7b      	adds	r3, r7, #1
 8014822:	d007      	beq.n	8014834 <_strtol_l.isra.0+0x84>
 8014824:	4584      	cmp	ip, r0
 8014826:	d31c      	bcc.n	8014862 <_strtol_l.isra.0+0xb2>
 8014828:	d101      	bne.n	801482e <_strtol_l.isra.0+0x7e>
 801482a:	45a6      	cmp	lr, r4
 801482c:	db19      	blt.n	8014862 <_strtol_l.isra.0+0xb2>
 801482e:	fb00 4006 	mla	r0, r0, r6, r4
 8014832:	2701      	movs	r7, #1
 8014834:	f815 4b01 	ldrb.w	r4, [r5], #1
 8014838:	e7eb      	b.n	8014812 <_strtol_l.isra.0+0x62>
 801483a:	462f      	mov	r7, r5
 801483c:	e7bf      	b.n	80147be <_strtol_l.isra.0+0xe>
 801483e:	2c2b      	cmp	r4, #43	; 0x2b
 8014840:	bf04      	itt	eq
 8014842:	1cbd      	addeq	r5, r7, #2
 8014844:	787c      	ldrbeq	r4, [r7, #1]
 8014846:	461a      	mov	r2, r3
 8014848:	e7c9      	b.n	80147de <_strtol_l.isra.0+0x2e>
 801484a:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 801484e:	2b19      	cmp	r3, #25
 8014850:	d801      	bhi.n	8014856 <_strtol_l.isra.0+0xa6>
 8014852:	3c37      	subs	r4, #55	; 0x37
 8014854:	e7e2      	b.n	801481c <_strtol_l.isra.0+0x6c>
 8014856:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 801485a:	2b19      	cmp	r3, #25
 801485c:	d804      	bhi.n	8014868 <_strtol_l.isra.0+0xb8>
 801485e:	3c57      	subs	r4, #87	; 0x57
 8014860:	e7dc      	b.n	801481c <_strtol_l.isra.0+0x6c>
 8014862:	f04f 37ff 	mov.w	r7, #4294967295
 8014866:	e7e5      	b.n	8014834 <_strtol_l.isra.0+0x84>
 8014868:	1c7b      	adds	r3, r7, #1
 801486a:	d108      	bne.n	801487e <_strtol_l.isra.0+0xce>
 801486c:	2322      	movs	r3, #34	; 0x22
 801486e:	f8c8 3000 	str.w	r3, [r8]
 8014872:	4608      	mov	r0, r1
 8014874:	f1ba 0f00 	cmp.w	sl, #0
 8014878:	d107      	bne.n	801488a <_strtol_l.isra.0+0xda>
 801487a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801487e:	b102      	cbz	r2, 8014882 <_strtol_l.isra.0+0xd2>
 8014880:	4240      	negs	r0, r0
 8014882:	f1ba 0f00 	cmp.w	sl, #0
 8014886:	d0f8      	beq.n	801487a <_strtol_l.isra.0+0xca>
 8014888:	b10f      	cbz	r7, 801488e <_strtol_l.isra.0+0xde>
 801488a:	f105 39ff 	add.w	r9, r5, #4294967295
 801488e:	f8ca 9000 	str.w	r9, [sl]
 8014892:	e7f2      	b.n	801487a <_strtol_l.isra.0+0xca>
 8014894:	2430      	movs	r4, #48	; 0x30
 8014896:	2e00      	cmp	r6, #0
 8014898:	d1af      	bne.n	80147fa <_strtol_l.isra.0+0x4a>
 801489a:	2608      	movs	r6, #8
 801489c:	e7ad      	b.n	80147fa <_strtol_l.isra.0+0x4a>
 801489e:	2c30      	cmp	r4, #48	; 0x30
 80148a0:	d0a3      	beq.n	80147ea <_strtol_l.isra.0+0x3a>
 80148a2:	260a      	movs	r6, #10
 80148a4:	e7a9      	b.n	80147fa <_strtol_l.isra.0+0x4a>
	...

080148a8 <_strtol_r>:
 80148a8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80148aa:	4c06      	ldr	r4, [pc, #24]	; (80148c4 <_strtol_r+0x1c>)
 80148ac:	4d06      	ldr	r5, [pc, #24]	; (80148c8 <_strtol_r+0x20>)
 80148ae:	6824      	ldr	r4, [r4, #0]
 80148b0:	6a24      	ldr	r4, [r4, #32]
 80148b2:	2c00      	cmp	r4, #0
 80148b4:	bf08      	it	eq
 80148b6:	462c      	moveq	r4, r5
 80148b8:	9400      	str	r4, [sp, #0]
 80148ba:	f7ff ff79 	bl	80147b0 <_strtol_l.isra.0>
 80148be:	b003      	add	sp, #12
 80148c0:	bd30      	pop	{r4, r5, pc}
 80148c2:	bf00      	nop
 80148c4:	20000018 	.word	0x20000018
 80148c8:	2000007c 	.word	0x2000007c

080148cc <_strtoul_l.isra.0>:
 80148cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80148d0:	4680      	mov	r8, r0
 80148d2:	4689      	mov	r9, r1
 80148d4:	4692      	mov	sl, r2
 80148d6:	461e      	mov	r6, r3
 80148d8:	460f      	mov	r7, r1
 80148da:	463d      	mov	r5, r7
 80148dc:	9808      	ldr	r0, [sp, #32]
 80148de:	f815 4b01 	ldrb.w	r4, [r5], #1
 80148e2:	f001 fb99 	bl	8016018 <__locale_ctype_ptr_l>
 80148e6:	4420      	add	r0, r4
 80148e8:	7843      	ldrb	r3, [r0, #1]
 80148ea:	f013 0308 	ands.w	r3, r3, #8
 80148ee:	d130      	bne.n	8014952 <_strtoul_l.isra.0+0x86>
 80148f0:	2c2d      	cmp	r4, #45	; 0x2d
 80148f2:	d130      	bne.n	8014956 <_strtoul_l.isra.0+0x8a>
 80148f4:	787c      	ldrb	r4, [r7, #1]
 80148f6:	1cbd      	adds	r5, r7, #2
 80148f8:	2101      	movs	r1, #1
 80148fa:	2e00      	cmp	r6, #0
 80148fc:	d05c      	beq.n	80149b8 <_strtoul_l.isra.0+0xec>
 80148fe:	2e10      	cmp	r6, #16
 8014900:	d109      	bne.n	8014916 <_strtoul_l.isra.0+0x4a>
 8014902:	2c30      	cmp	r4, #48	; 0x30
 8014904:	d107      	bne.n	8014916 <_strtoul_l.isra.0+0x4a>
 8014906:	782b      	ldrb	r3, [r5, #0]
 8014908:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 801490c:	2b58      	cmp	r3, #88	; 0x58
 801490e:	d14e      	bne.n	80149ae <_strtoul_l.isra.0+0xe2>
 8014910:	786c      	ldrb	r4, [r5, #1]
 8014912:	2610      	movs	r6, #16
 8014914:	3502      	adds	r5, #2
 8014916:	f04f 32ff 	mov.w	r2, #4294967295
 801491a:	2300      	movs	r3, #0
 801491c:	fbb2 f2f6 	udiv	r2, r2, r6
 8014920:	fb06 fc02 	mul.w	ip, r6, r2
 8014924:	ea6f 0c0c 	mvn.w	ip, ip
 8014928:	4618      	mov	r0, r3
 801492a:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 801492e:	2f09      	cmp	r7, #9
 8014930:	d817      	bhi.n	8014962 <_strtoul_l.isra.0+0x96>
 8014932:	463c      	mov	r4, r7
 8014934:	42a6      	cmp	r6, r4
 8014936:	dd23      	ble.n	8014980 <_strtoul_l.isra.0+0xb4>
 8014938:	2b00      	cmp	r3, #0
 801493a:	db1e      	blt.n	801497a <_strtoul_l.isra.0+0xae>
 801493c:	4282      	cmp	r2, r0
 801493e:	d31c      	bcc.n	801497a <_strtoul_l.isra.0+0xae>
 8014940:	d101      	bne.n	8014946 <_strtoul_l.isra.0+0x7a>
 8014942:	45a4      	cmp	ip, r4
 8014944:	db19      	blt.n	801497a <_strtoul_l.isra.0+0xae>
 8014946:	fb00 4006 	mla	r0, r0, r6, r4
 801494a:	2301      	movs	r3, #1
 801494c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8014950:	e7eb      	b.n	801492a <_strtoul_l.isra.0+0x5e>
 8014952:	462f      	mov	r7, r5
 8014954:	e7c1      	b.n	80148da <_strtoul_l.isra.0+0xe>
 8014956:	2c2b      	cmp	r4, #43	; 0x2b
 8014958:	bf04      	itt	eq
 801495a:	1cbd      	addeq	r5, r7, #2
 801495c:	787c      	ldrbeq	r4, [r7, #1]
 801495e:	4619      	mov	r1, r3
 8014960:	e7cb      	b.n	80148fa <_strtoul_l.isra.0+0x2e>
 8014962:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 8014966:	2f19      	cmp	r7, #25
 8014968:	d801      	bhi.n	801496e <_strtoul_l.isra.0+0xa2>
 801496a:	3c37      	subs	r4, #55	; 0x37
 801496c:	e7e2      	b.n	8014934 <_strtoul_l.isra.0+0x68>
 801496e:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 8014972:	2f19      	cmp	r7, #25
 8014974:	d804      	bhi.n	8014980 <_strtoul_l.isra.0+0xb4>
 8014976:	3c57      	subs	r4, #87	; 0x57
 8014978:	e7dc      	b.n	8014934 <_strtoul_l.isra.0+0x68>
 801497a:	f04f 33ff 	mov.w	r3, #4294967295
 801497e:	e7e5      	b.n	801494c <_strtoul_l.isra.0+0x80>
 8014980:	2b00      	cmp	r3, #0
 8014982:	da09      	bge.n	8014998 <_strtoul_l.isra.0+0xcc>
 8014984:	2322      	movs	r3, #34	; 0x22
 8014986:	f8c8 3000 	str.w	r3, [r8]
 801498a:	f04f 30ff 	mov.w	r0, #4294967295
 801498e:	f1ba 0f00 	cmp.w	sl, #0
 8014992:	d107      	bne.n	80149a4 <_strtoul_l.isra.0+0xd8>
 8014994:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014998:	b101      	cbz	r1, 801499c <_strtoul_l.isra.0+0xd0>
 801499a:	4240      	negs	r0, r0
 801499c:	f1ba 0f00 	cmp.w	sl, #0
 80149a0:	d0f8      	beq.n	8014994 <_strtoul_l.isra.0+0xc8>
 80149a2:	b10b      	cbz	r3, 80149a8 <_strtoul_l.isra.0+0xdc>
 80149a4:	f105 39ff 	add.w	r9, r5, #4294967295
 80149a8:	f8ca 9000 	str.w	r9, [sl]
 80149ac:	e7f2      	b.n	8014994 <_strtoul_l.isra.0+0xc8>
 80149ae:	2430      	movs	r4, #48	; 0x30
 80149b0:	2e00      	cmp	r6, #0
 80149b2:	d1b0      	bne.n	8014916 <_strtoul_l.isra.0+0x4a>
 80149b4:	2608      	movs	r6, #8
 80149b6:	e7ae      	b.n	8014916 <_strtoul_l.isra.0+0x4a>
 80149b8:	2c30      	cmp	r4, #48	; 0x30
 80149ba:	d0a4      	beq.n	8014906 <_strtoul_l.isra.0+0x3a>
 80149bc:	260a      	movs	r6, #10
 80149be:	e7aa      	b.n	8014916 <_strtoul_l.isra.0+0x4a>

080149c0 <_strtoul_r>:
 80149c0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80149c2:	4c06      	ldr	r4, [pc, #24]	; (80149dc <_strtoul_r+0x1c>)
 80149c4:	4d06      	ldr	r5, [pc, #24]	; (80149e0 <_strtoul_r+0x20>)
 80149c6:	6824      	ldr	r4, [r4, #0]
 80149c8:	6a24      	ldr	r4, [r4, #32]
 80149ca:	2c00      	cmp	r4, #0
 80149cc:	bf08      	it	eq
 80149ce:	462c      	moveq	r4, r5
 80149d0:	9400      	str	r4, [sp, #0]
 80149d2:	f7ff ff7b 	bl	80148cc <_strtoul_l.isra.0>
 80149d6:	b003      	add	sp, #12
 80149d8:	bd30      	pop	{r4, r5, pc}
 80149da:	bf00      	nop
 80149dc:	20000018 	.word	0x20000018
 80149e0:	2000007c 	.word	0x2000007c

080149e4 <__submore>:
 80149e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80149e8:	460c      	mov	r4, r1
 80149ea:	6b49      	ldr	r1, [r1, #52]	; 0x34
 80149ec:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80149f0:	4299      	cmp	r1, r3
 80149f2:	d11d      	bne.n	8014a30 <__submore+0x4c>
 80149f4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80149f8:	f7fd fa12 	bl	8011e20 <_malloc_r>
 80149fc:	b918      	cbnz	r0, 8014a06 <__submore+0x22>
 80149fe:	f04f 30ff 	mov.w	r0, #4294967295
 8014a02:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014a06:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8014a0a:	63a3      	str	r3, [r4, #56]	; 0x38
 8014a0c:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 8014a10:	6360      	str	r0, [r4, #52]	; 0x34
 8014a12:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 8014a16:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8014a1a:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 8014a1e:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8014a22:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 8014a26:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 8014a2a:	6020      	str	r0, [r4, #0]
 8014a2c:	2000      	movs	r0, #0
 8014a2e:	e7e8      	b.n	8014a02 <__submore+0x1e>
 8014a30:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 8014a32:	0077      	lsls	r7, r6, #1
 8014a34:	463a      	mov	r2, r7
 8014a36:	f001 ff64 	bl	8016902 <_realloc_r>
 8014a3a:	4605      	mov	r5, r0
 8014a3c:	2800      	cmp	r0, #0
 8014a3e:	d0de      	beq.n	80149fe <__submore+0x1a>
 8014a40:	eb00 0806 	add.w	r8, r0, r6
 8014a44:	4601      	mov	r1, r0
 8014a46:	4632      	mov	r2, r6
 8014a48:	4640      	mov	r0, r8
 8014a4a:	f7fd f987 	bl	8011d5c <memcpy>
 8014a4e:	f8c4 8000 	str.w	r8, [r4]
 8014a52:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 8014a56:	e7e9      	b.n	8014a2c <__submore+0x48>

08014a58 <_ungetc_r>:
 8014a58:	1c4b      	adds	r3, r1, #1
 8014a5a:	b570      	push	{r4, r5, r6, lr}
 8014a5c:	4606      	mov	r6, r0
 8014a5e:	460d      	mov	r5, r1
 8014a60:	4614      	mov	r4, r2
 8014a62:	d103      	bne.n	8014a6c <_ungetc_r+0x14>
 8014a64:	f04f 35ff 	mov.w	r5, #4294967295
 8014a68:	4628      	mov	r0, r5
 8014a6a:	bd70      	pop	{r4, r5, r6, pc}
 8014a6c:	b118      	cbz	r0, 8014a76 <_ungetc_r+0x1e>
 8014a6e:	6983      	ldr	r3, [r0, #24]
 8014a70:	b90b      	cbnz	r3, 8014a76 <_ungetc_r+0x1e>
 8014a72:	f7fd f845 	bl	8011b00 <__sinit>
 8014a76:	4b2e      	ldr	r3, [pc, #184]	; (8014b30 <_ungetc_r+0xd8>)
 8014a78:	429c      	cmp	r4, r3
 8014a7a:	d12c      	bne.n	8014ad6 <_ungetc_r+0x7e>
 8014a7c:	6874      	ldr	r4, [r6, #4]
 8014a7e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8014a82:	f023 0320 	bic.w	r3, r3, #32
 8014a86:	81a3      	strh	r3, [r4, #12]
 8014a88:	b29b      	uxth	r3, r3
 8014a8a:	0759      	lsls	r1, r3, #29
 8014a8c:	d413      	bmi.n	8014ab6 <_ungetc_r+0x5e>
 8014a8e:	06da      	lsls	r2, r3, #27
 8014a90:	d5e8      	bpl.n	8014a64 <_ungetc_r+0xc>
 8014a92:	071b      	lsls	r3, r3, #28
 8014a94:	d50b      	bpl.n	8014aae <_ungetc_r+0x56>
 8014a96:	4621      	mov	r1, r4
 8014a98:	4630      	mov	r0, r6
 8014a9a:	f7fc ffb5 	bl	8011a08 <_fflush_r>
 8014a9e:	2800      	cmp	r0, #0
 8014aa0:	d1e0      	bne.n	8014a64 <_ungetc_r+0xc>
 8014aa2:	89a3      	ldrh	r3, [r4, #12]
 8014aa4:	60a0      	str	r0, [r4, #8]
 8014aa6:	f023 0308 	bic.w	r3, r3, #8
 8014aaa:	81a3      	strh	r3, [r4, #12]
 8014aac:	61a0      	str	r0, [r4, #24]
 8014aae:	89a3      	ldrh	r3, [r4, #12]
 8014ab0:	f043 0304 	orr.w	r3, r3, #4
 8014ab4:	81a3      	strh	r3, [r4, #12]
 8014ab6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8014ab8:	6862      	ldr	r2, [r4, #4]
 8014aba:	b2ed      	uxtb	r5, r5
 8014abc:	b1e3      	cbz	r3, 8014af8 <_ungetc_r+0xa0>
 8014abe:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8014ac0:	4293      	cmp	r3, r2
 8014ac2:	dd12      	ble.n	8014aea <_ungetc_r+0x92>
 8014ac4:	6823      	ldr	r3, [r4, #0]
 8014ac6:	1e5a      	subs	r2, r3, #1
 8014ac8:	6022      	str	r2, [r4, #0]
 8014aca:	f803 5c01 	strb.w	r5, [r3, #-1]
 8014ace:	6863      	ldr	r3, [r4, #4]
 8014ad0:	3301      	adds	r3, #1
 8014ad2:	6063      	str	r3, [r4, #4]
 8014ad4:	e7c8      	b.n	8014a68 <_ungetc_r+0x10>
 8014ad6:	4b17      	ldr	r3, [pc, #92]	; (8014b34 <_ungetc_r+0xdc>)
 8014ad8:	429c      	cmp	r4, r3
 8014ada:	d101      	bne.n	8014ae0 <_ungetc_r+0x88>
 8014adc:	68b4      	ldr	r4, [r6, #8]
 8014ade:	e7ce      	b.n	8014a7e <_ungetc_r+0x26>
 8014ae0:	4b15      	ldr	r3, [pc, #84]	; (8014b38 <_ungetc_r+0xe0>)
 8014ae2:	429c      	cmp	r4, r3
 8014ae4:	bf08      	it	eq
 8014ae6:	68f4      	ldreq	r4, [r6, #12]
 8014ae8:	e7c9      	b.n	8014a7e <_ungetc_r+0x26>
 8014aea:	4621      	mov	r1, r4
 8014aec:	4630      	mov	r0, r6
 8014aee:	f7ff ff79 	bl	80149e4 <__submore>
 8014af2:	2800      	cmp	r0, #0
 8014af4:	d0e6      	beq.n	8014ac4 <_ungetc_r+0x6c>
 8014af6:	e7b5      	b.n	8014a64 <_ungetc_r+0xc>
 8014af8:	6921      	ldr	r1, [r4, #16]
 8014afa:	6823      	ldr	r3, [r4, #0]
 8014afc:	b151      	cbz	r1, 8014b14 <_ungetc_r+0xbc>
 8014afe:	4299      	cmp	r1, r3
 8014b00:	d208      	bcs.n	8014b14 <_ungetc_r+0xbc>
 8014b02:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 8014b06:	42a9      	cmp	r1, r5
 8014b08:	d104      	bne.n	8014b14 <_ungetc_r+0xbc>
 8014b0a:	3b01      	subs	r3, #1
 8014b0c:	3201      	adds	r2, #1
 8014b0e:	6023      	str	r3, [r4, #0]
 8014b10:	6062      	str	r2, [r4, #4]
 8014b12:	e7a9      	b.n	8014a68 <_ungetc_r+0x10>
 8014b14:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 8014b18:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8014b1c:	6363      	str	r3, [r4, #52]	; 0x34
 8014b1e:	2303      	movs	r3, #3
 8014b20:	63a3      	str	r3, [r4, #56]	; 0x38
 8014b22:	4623      	mov	r3, r4
 8014b24:	f803 5f46 	strb.w	r5, [r3, #70]!
 8014b28:	6023      	str	r3, [r4, #0]
 8014b2a:	2301      	movs	r3, #1
 8014b2c:	e7d1      	b.n	8014ad2 <_ungetc_r+0x7a>
 8014b2e:	bf00      	nop
 8014b30:	0801709c 	.word	0x0801709c
 8014b34:	080170bc 	.word	0x080170bc
 8014b38:	0801707c 	.word	0x0801707c

08014b3c <__swbuf_r>:
 8014b3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014b3e:	460e      	mov	r6, r1
 8014b40:	4614      	mov	r4, r2
 8014b42:	4605      	mov	r5, r0
 8014b44:	b118      	cbz	r0, 8014b4e <__swbuf_r+0x12>
 8014b46:	6983      	ldr	r3, [r0, #24]
 8014b48:	b90b      	cbnz	r3, 8014b4e <__swbuf_r+0x12>
 8014b4a:	f7fc ffd9 	bl	8011b00 <__sinit>
 8014b4e:	4b21      	ldr	r3, [pc, #132]	; (8014bd4 <__swbuf_r+0x98>)
 8014b50:	429c      	cmp	r4, r3
 8014b52:	d12a      	bne.n	8014baa <__swbuf_r+0x6e>
 8014b54:	686c      	ldr	r4, [r5, #4]
 8014b56:	69a3      	ldr	r3, [r4, #24]
 8014b58:	60a3      	str	r3, [r4, #8]
 8014b5a:	89a3      	ldrh	r3, [r4, #12]
 8014b5c:	071a      	lsls	r2, r3, #28
 8014b5e:	d52e      	bpl.n	8014bbe <__swbuf_r+0x82>
 8014b60:	6923      	ldr	r3, [r4, #16]
 8014b62:	b363      	cbz	r3, 8014bbe <__swbuf_r+0x82>
 8014b64:	6923      	ldr	r3, [r4, #16]
 8014b66:	6820      	ldr	r0, [r4, #0]
 8014b68:	1ac0      	subs	r0, r0, r3
 8014b6a:	6963      	ldr	r3, [r4, #20]
 8014b6c:	b2f6      	uxtb	r6, r6
 8014b6e:	4283      	cmp	r3, r0
 8014b70:	4637      	mov	r7, r6
 8014b72:	dc04      	bgt.n	8014b7e <__swbuf_r+0x42>
 8014b74:	4621      	mov	r1, r4
 8014b76:	4628      	mov	r0, r5
 8014b78:	f7fc ff46 	bl	8011a08 <_fflush_r>
 8014b7c:	bb28      	cbnz	r0, 8014bca <__swbuf_r+0x8e>
 8014b7e:	68a3      	ldr	r3, [r4, #8]
 8014b80:	3b01      	subs	r3, #1
 8014b82:	60a3      	str	r3, [r4, #8]
 8014b84:	6823      	ldr	r3, [r4, #0]
 8014b86:	1c5a      	adds	r2, r3, #1
 8014b88:	6022      	str	r2, [r4, #0]
 8014b8a:	701e      	strb	r6, [r3, #0]
 8014b8c:	6963      	ldr	r3, [r4, #20]
 8014b8e:	3001      	adds	r0, #1
 8014b90:	4283      	cmp	r3, r0
 8014b92:	d004      	beq.n	8014b9e <__swbuf_r+0x62>
 8014b94:	89a3      	ldrh	r3, [r4, #12]
 8014b96:	07db      	lsls	r3, r3, #31
 8014b98:	d519      	bpl.n	8014bce <__swbuf_r+0x92>
 8014b9a:	2e0a      	cmp	r6, #10
 8014b9c:	d117      	bne.n	8014bce <__swbuf_r+0x92>
 8014b9e:	4621      	mov	r1, r4
 8014ba0:	4628      	mov	r0, r5
 8014ba2:	f7fc ff31 	bl	8011a08 <_fflush_r>
 8014ba6:	b190      	cbz	r0, 8014bce <__swbuf_r+0x92>
 8014ba8:	e00f      	b.n	8014bca <__swbuf_r+0x8e>
 8014baa:	4b0b      	ldr	r3, [pc, #44]	; (8014bd8 <__swbuf_r+0x9c>)
 8014bac:	429c      	cmp	r4, r3
 8014bae:	d101      	bne.n	8014bb4 <__swbuf_r+0x78>
 8014bb0:	68ac      	ldr	r4, [r5, #8]
 8014bb2:	e7d0      	b.n	8014b56 <__swbuf_r+0x1a>
 8014bb4:	4b09      	ldr	r3, [pc, #36]	; (8014bdc <__swbuf_r+0xa0>)
 8014bb6:	429c      	cmp	r4, r3
 8014bb8:	bf08      	it	eq
 8014bba:	68ec      	ldreq	r4, [r5, #12]
 8014bbc:	e7cb      	b.n	8014b56 <__swbuf_r+0x1a>
 8014bbe:	4621      	mov	r1, r4
 8014bc0:	4628      	mov	r0, r5
 8014bc2:	f000 f81f 	bl	8014c04 <__swsetup_r>
 8014bc6:	2800      	cmp	r0, #0
 8014bc8:	d0cc      	beq.n	8014b64 <__swbuf_r+0x28>
 8014bca:	f04f 37ff 	mov.w	r7, #4294967295
 8014bce:	4638      	mov	r0, r7
 8014bd0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014bd2:	bf00      	nop
 8014bd4:	0801709c 	.word	0x0801709c
 8014bd8:	080170bc 	.word	0x080170bc
 8014bdc:	0801707c 	.word	0x0801707c

08014be0 <_write_r>:
 8014be0:	b538      	push	{r3, r4, r5, lr}
 8014be2:	4c07      	ldr	r4, [pc, #28]	; (8014c00 <_write_r+0x20>)
 8014be4:	4605      	mov	r5, r0
 8014be6:	4608      	mov	r0, r1
 8014be8:	4611      	mov	r1, r2
 8014bea:	2200      	movs	r2, #0
 8014bec:	6022      	str	r2, [r4, #0]
 8014bee:	461a      	mov	r2, r3
 8014bf0:	f7f9 f828 	bl	800dc44 <_write>
 8014bf4:	1c43      	adds	r3, r0, #1
 8014bf6:	d102      	bne.n	8014bfe <_write_r+0x1e>
 8014bf8:	6823      	ldr	r3, [r4, #0]
 8014bfa:	b103      	cbz	r3, 8014bfe <_write_r+0x1e>
 8014bfc:	602b      	str	r3, [r5, #0]
 8014bfe:	bd38      	pop	{r3, r4, r5, pc}
 8014c00:	20002044 	.word	0x20002044

08014c04 <__swsetup_r>:
 8014c04:	4b32      	ldr	r3, [pc, #200]	; (8014cd0 <__swsetup_r+0xcc>)
 8014c06:	b570      	push	{r4, r5, r6, lr}
 8014c08:	681d      	ldr	r5, [r3, #0]
 8014c0a:	4606      	mov	r6, r0
 8014c0c:	460c      	mov	r4, r1
 8014c0e:	b125      	cbz	r5, 8014c1a <__swsetup_r+0x16>
 8014c10:	69ab      	ldr	r3, [r5, #24]
 8014c12:	b913      	cbnz	r3, 8014c1a <__swsetup_r+0x16>
 8014c14:	4628      	mov	r0, r5
 8014c16:	f7fc ff73 	bl	8011b00 <__sinit>
 8014c1a:	4b2e      	ldr	r3, [pc, #184]	; (8014cd4 <__swsetup_r+0xd0>)
 8014c1c:	429c      	cmp	r4, r3
 8014c1e:	d10f      	bne.n	8014c40 <__swsetup_r+0x3c>
 8014c20:	686c      	ldr	r4, [r5, #4]
 8014c22:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8014c26:	b29a      	uxth	r2, r3
 8014c28:	0715      	lsls	r5, r2, #28
 8014c2a:	d42c      	bmi.n	8014c86 <__swsetup_r+0x82>
 8014c2c:	06d0      	lsls	r0, r2, #27
 8014c2e:	d411      	bmi.n	8014c54 <__swsetup_r+0x50>
 8014c30:	2209      	movs	r2, #9
 8014c32:	6032      	str	r2, [r6, #0]
 8014c34:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8014c38:	81a3      	strh	r3, [r4, #12]
 8014c3a:	f04f 30ff 	mov.w	r0, #4294967295
 8014c3e:	e03e      	b.n	8014cbe <__swsetup_r+0xba>
 8014c40:	4b25      	ldr	r3, [pc, #148]	; (8014cd8 <__swsetup_r+0xd4>)
 8014c42:	429c      	cmp	r4, r3
 8014c44:	d101      	bne.n	8014c4a <__swsetup_r+0x46>
 8014c46:	68ac      	ldr	r4, [r5, #8]
 8014c48:	e7eb      	b.n	8014c22 <__swsetup_r+0x1e>
 8014c4a:	4b24      	ldr	r3, [pc, #144]	; (8014cdc <__swsetup_r+0xd8>)
 8014c4c:	429c      	cmp	r4, r3
 8014c4e:	bf08      	it	eq
 8014c50:	68ec      	ldreq	r4, [r5, #12]
 8014c52:	e7e6      	b.n	8014c22 <__swsetup_r+0x1e>
 8014c54:	0751      	lsls	r1, r2, #29
 8014c56:	d512      	bpl.n	8014c7e <__swsetup_r+0x7a>
 8014c58:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8014c5a:	b141      	cbz	r1, 8014c6e <__swsetup_r+0x6a>
 8014c5c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8014c60:	4299      	cmp	r1, r3
 8014c62:	d002      	beq.n	8014c6a <__swsetup_r+0x66>
 8014c64:	4630      	mov	r0, r6
 8014c66:	f7fd f88d 	bl	8011d84 <_free_r>
 8014c6a:	2300      	movs	r3, #0
 8014c6c:	6363      	str	r3, [r4, #52]	; 0x34
 8014c6e:	89a3      	ldrh	r3, [r4, #12]
 8014c70:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8014c74:	81a3      	strh	r3, [r4, #12]
 8014c76:	2300      	movs	r3, #0
 8014c78:	6063      	str	r3, [r4, #4]
 8014c7a:	6923      	ldr	r3, [r4, #16]
 8014c7c:	6023      	str	r3, [r4, #0]
 8014c7e:	89a3      	ldrh	r3, [r4, #12]
 8014c80:	f043 0308 	orr.w	r3, r3, #8
 8014c84:	81a3      	strh	r3, [r4, #12]
 8014c86:	6923      	ldr	r3, [r4, #16]
 8014c88:	b94b      	cbnz	r3, 8014c9e <__swsetup_r+0x9a>
 8014c8a:	89a3      	ldrh	r3, [r4, #12]
 8014c8c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8014c90:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8014c94:	d003      	beq.n	8014c9e <__swsetup_r+0x9a>
 8014c96:	4621      	mov	r1, r4
 8014c98:	4630      	mov	r0, r6
 8014c9a:	f7fd f81f 	bl	8011cdc <__smakebuf_r>
 8014c9e:	89a2      	ldrh	r2, [r4, #12]
 8014ca0:	f012 0301 	ands.w	r3, r2, #1
 8014ca4:	d00c      	beq.n	8014cc0 <__swsetup_r+0xbc>
 8014ca6:	2300      	movs	r3, #0
 8014ca8:	60a3      	str	r3, [r4, #8]
 8014caa:	6963      	ldr	r3, [r4, #20]
 8014cac:	425b      	negs	r3, r3
 8014cae:	61a3      	str	r3, [r4, #24]
 8014cb0:	6923      	ldr	r3, [r4, #16]
 8014cb2:	b953      	cbnz	r3, 8014cca <__swsetup_r+0xc6>
 8014cb4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8014cb8:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8014cbc:	d1ba      	bne.n	8014c34 <__swsetup_r+0x30>
 8014cbe:	bd70      	pop	{r4, r5, r6, pc}
 8014cc0:	0792      	lsls	r2, r2, #30
 8014cc2:	bf58      	it	pl
 8014cc4:	6963      	ldrpl	r3, [r4, #20]
 8014cc6:	60a3      	str	r3, [r4, #8]
 8014cc8:	e7f2      	b.n	8014cb0 <__swsetup_r+0xac>
 8014cca:	2000      	movs	r0, #0
 8014ccc:	e7f7      	b.n	8014cbe <__swsetup_r+0xba>
 8014cce:	bf00      	nop
 8014cd0:	20000018 	.word	0x20000018
 8014cd4:	0801709c 	.word	0x0801709c
 8014cd8:	080170bc 	.word	0x080170bc
 8014cdc:	0801707c 	.word	0x0801707c

08014ce0 <_close_r>:
 8014ce0:	b538      	push	{r3, r4, r5, lr}
 8014ce2:	4c06      	ldr	r4, [pc, #24]	; (8014cfc <_close_r+0x1c>)
 8014ce4:	2300      	movs	r3, #0
 8014ce6:	4605      	mov	r5, r0
 8014ce8:	4608      	mov	r0, r1
 8014cea:	6023      	str	r3, [r4, #0]
 8014cec:	f7f8 ffb8 	bl	800dc60 <_close>
 8014cf0:	1c43      	adds	r3, r0, #1
 8014cf2:	d102      	bne.n	8014cfa <_close_r+0x1a>
 8014cf4:	6823      	ldr	r3, [r4, #0]
 8014cf6:	b103      	cbz	r3, 8014cfa <_close_r+0x1a>
 8014cf8:	602b      	str	r3, [r5, #0]
 8014cfa:	bd38      	pop	{r3, r4, r5, pc}
 8014cfc:	20002044 	.word	0x20002044

08014d00 <quorem>:
 8014d00:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014d04:	6903      	ldr	r3, [r0, #16]
 8014d06:	690c      	ldr	r4, [r1, #16]
 8014d08:	42a3      	cmp	r3, r4
 8014d0a:	4680      	mov	r8, r0
 8014d0c:	f2c0 8082 	blt.w	8014e14 <quorem+0x114>
 8014d10:	3c01      	subs	r4, #1
 8014d12:	f101 0714 	add.w	r7, r1, #20
 8014d16:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 8014d1a:	f100 0614 	add.w	r6, r0, #20
 8014d1e:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 8014d22:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8014d26:	eb06 030c 	add.w	r3, r6, ip
 8014d2a:	3501      	adds	r5, #1
 8014d2c:	eb07 090c 	add.w	r9, r7, ip
 8014d30:	9301      	str	r3, [sp, #4]
 8014d32:	fbb0 f5f5 	udiv	r5, r0, r5
 8014d36:	b395      	cbz	r5, 8014d9e <quorem+0x9e>
 8014d38:	f04f 0a00 	mov.w	sl, #0
 8014d3c:	4638      	mov	r0, r7
 8014d3e:	46b6      	mov	lr, r6
 8014d40:	46d3      	mov	fp, sl
 8014d42:	f850 2b04 	ldr.w	r2, [r0], #4
 8014d46:	b293      	uxth	r3, r2
 8014d48:	fb05 a303 	mla	r3, r5, r3, sl
 8014d4c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8014d50:	b29b      	uxth	r3, r3
 8014d52:	ebab 0303 	sub.w	r3, fp, r3
 8014d56:	0c12      	lsrs	r2, r2, #16
 8014d58:	f8de b000 	ldr.w	fp, [lr]
 8014d5c:	fb05 a202 	mla	r2, r5, r2, sl
 8014d60:	fa13 f38b 	uxtah	r3, r3, fp
 8014d64:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8014d68:	fa1f fb82 	uxth.w	fp, r2
 8014d6c:	f8de 2000 	ldr.w	r2, [lr]
 8014d70:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8014d74:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8014d78:	b29b      	uxth	r3, r3
 8014d7a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8014d7e:	4581      	cmp	r9, r0
 8014d80:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8014d84:	f84e 3b04 	str.w	r3, [lr], #4
 8014d88:	d2db      	bcs.n	8014d42 <quorem+0x42>
 8014d8a:	f856 300c 	ldr.w	r3, [r6, ip]
 8014d8e:	b933      	cbnz	r3, 8014d9e <quorem+0x9e>
 8014d90:	9b01      	ldr	r3, [sp, #4]
 8014d92:	3b04      	subs	r3, #4
 8014d94:	429e      	cmp	r6, r3
 8014d96:	461a      	mov	r2, r3
 8014d98:	d330      	bcc.n	8014dfc <quorem+0xfc>
 8014d9a:	f8c8 4010 	str.w	r4, [r8, #16]
 8014d9e:	4640      	mov	r0, r8
 8014da0:	f001 fbf6 	bl	8016590 <__mcmp>
 8014da4:	2800      	cmp	r0, #0
 8014da6:	db25      	blt.n	8014df4 <quorem+0xf4>
 8014da8:	3501      	adds	r5, #1
 8014daa:	4630      	mov	r0, r6
 8014dac:	f04f 0c00 	mov.w	ip, #0
 8014db0:	f857 2b04 	ldr.w	r2, [r7], #4
 8014db4:	f8d0 e000 	ldr.w	lr, [r0]
 8014db8:	b293      	uxth	r3, r2
 8014dba:	ebac 0303 	sub.w	r3, ip, r3
 8014dbe:	0c12      	lsrs	r2, r2, #16
 8014dc0:	fa13 f38e 	uxtah	r3, r3, lr
 8014dc4:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8014dc8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8014dcc:	b29b      	uxth	r3, r3
 8014dce:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8014dd2:	45b9      	cmp	r9, r7
 8014dd4:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8014dd8:	f840 3b04 	str.w	r3, [r0], #4
 8014ddc:	d2e8      	bcs.n	8014db0 <quorem+0xb0>
 8014dde:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 8014de2:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8014de6:	b92a      	cbnz	r2, 8014df4 <quorem+0xf4>
 8014de8:	3b04      	subs	r3, #4
 8014dea:	429e      	cmp	r6, r3
 8014dec:	461a      	mov	r2, r3
 8014dee:	d30b      	bcc.n	8014e08 <quorem+0x108>
 8014df0:	f8c8 4010 	str.w	r4, [r8, #16]
 8014df4:	4628      	mov	r0, r5
 8014df6:	b003      	add	sp, #12
 8014df8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014dfc:	6812      	ldr	r2, [r2, #0]
 8014dfe:	3b04      	subs	r3, #4
 8014e00:	2a00      	cmp	r2, #0
 8014e02:	d1ca      	bne.n	8014d9a <quorem+0x9a>
 8014e04:	3c01      	subs	r4, #1
 8014e06:	e7c5      	b.n	8014d94 <quorem+0x94>
 8014e08:	6812      	ldr	r2, [r2, #0]
 8014e0a:	3b04      	subs	r3, #4
 8014e0c:	2a00      	cmp	r2, #0
 8014e0e:	d1ef      	bne.n	8014df0 <quorem+0xf0>
 8014e10:	3c01      	subs	r4, #1
 8014e12:	e7ea      	b.n	8014dea <quorem+0xea>
 8014e14:	2000      	movs	r0, #0
 8014e16:	e7ee      	b.n	8014df6 <quorem+0xf6>

08014e18 <_dtoa_r>:
 8014e18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014e1c:	ec57 6b10 	vmov	r6, r7, d0
 8014e20:	b097      	sub	sp, #92	; 0x5c
 8014e22:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8014e24:	9106      	str	r1, [sp, #24]
 8014e26:	4604      	mov	r4, r0
 8014e28:	920b      	str	r2, [sp, #44]	; 0x2c
 8014e2a:	9312      	str	r3, [sp, #72]	; 0x48
 8014e2c:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8014e30:	e9cd 6700 	strd	r6, r7, [sp]
 8014e34:	b93d      	cbnz	r5, 8014e46 <_dtoa_r+0x2e>
 8014e36:	2010      	movs	r0, #16
 8014e38:	f001 f922 	bl	8016080 <malloc>
 8014e3c:	6260      	str	r0, [r4, #36]	; 0x24
 8014e3e:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8014e42:	6005      	str	r5, [r0, #0]
 8014e44:	60c5      	str	r5, [r0, #12]
 8014e46:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8014e48:	6819      	ldr	r1, [r3, #0]
 8014e4a:	b151      	cbz	r1, 8014e62 <_dtoa_r+0x4a>
 8014e4c:	685a      	ldr	r2, [r3, #4]
 8014e4e:	604a      	str	r2, [r1, #4]
 8014e50:	2301      	movs	r3, #1
 8014e52:	4093      	lsls	r3, r2
 8014e54:	608b      	str	r3, [r1, #8]
 8014e56:	4620      	mov	r0, r4
 8014e58:	f001 f97b 	bl	8016152 <_Bfree>
 8014e5c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8014e5e:	2200      	movs	r2, #0
 8014e60:	601a      	str	r2, [r3, #0]
 8014e62:	1e3b      	subs	r3, r7, #0
 8014e64:	bfbb      	ittet	lt
 8014e66:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8014e6a:	9301      	strlt	r3, [sp, #4]
 8014e6c:	2300      	movge	r3, #0
 8014e6e:	2201      	movlt	r2, #1
 8014e70:	bfac      	ite	ge
 8014e72:	f8c8 3000 	strge.w	r3, [r8]
 8014e76:	f8c8 2000 	strlt.w	r2, [r8]
 8014e7a:	4baf      	ldr	r3, [pc, #700]	; (8015138 <_dtoa_r+0x320>)
 8014e7c:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8014e80:	ea33 0308 	bics.w	r3, r3, r8
 8014e84:	d114      	bne.n	8014eb0 <_dtoa_r+0x98>
 8014e86:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8014e88:	f242 730f 	movw	r3, #9999	; 0x270f
 8014e8c:	6013      	str	r3, [r2, #0]
 8014e8e:	9b00      	ldr	r3, [sp, #0]
 8014e90:	b923      	cbnz	r3, 8014e9c <_dtoa_r+0x84>
 8014e92:	f3c8 0013 	ubfx	r0, r8, #0, #20
 8014e96:	2800      	cmp	r0, #0
 8014e98:	f000 8542 	beq.w	8015920 <_dtoa_r+0xb08>
 8014e9c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8014e9e:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 801514c <_dtoa_r+0x334>
 8014ea2:	2b00      	cmp	r3, #0
 8014ea4:	f000 8544 	beq.w	8015930 <_dtoa_r+0xb18>
 8014ea8:	f10b 0303 	add.w	r3, fp, #3
 8014eac:	f000 bd3e 	b.w	801592c <_dtoa_r+0xb14>
 8014eb0:	e9dd 6700 	ldrd	r6, r7, [sp]
 8014eb4:	2200      	movs	r2, #0
 8014eb6:	2300      	movs	r3, #0
 8014eb8:	4630      	mov	r0, r6
 8014eba:	4639      	mov	r1, r7
 8014ebc:	f7f3 fd3c 	bl	8008938 <__aeabi_dcmpeq>
 8014ec0:	4681      	mov	r9, r0
 8014ec2:	b168      	cbz	r0, 8014ee0 <_dtoa_r+0xc8>
 8014ec4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8014ec6:	2301      	movs	r3, #1
 8014ec8:	6013      	str	r3, [r2, #0]
 8014eca:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8014ecc:	2b00      	cmp	r3, #0
 8014ece:	f000 8524 	beq.w	801591a <_dtoa_r+0xb02>
 8014ed2:	4b9a      	ldr	r3, [pc, #616]	; (801513c <_dtoa_r+0x324>)
 8014ed4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8014ed6:	f103 3bff 	add.w	fp, r3, #4294967295
 8014eda:	6013      	str	r3, [r2, #0]
 8014edc:	f000 bd28 	b.w	8015930 <_dtoa_r+0xb18>
 8014ee0:	aa14      	add	r2, sp, #80	; 0x50
 8014ee2:	a915      	add	r1, sp, #84	; 0x54
 8014ee4:	ec47 6b10 	vmov	d0, r6, r7
 8014ee8:	4620      	mov	r0, r4
 8014eea:	f001 fc3f 	bl	801676c <__d2b>
 8014eee:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8014ef2:	9004      	str	r0, [sp, #16]
 8014ef4:	2d00      	cmp	r5, #0
 8014ef6:	d07c      	beq.n	8014ff2 <_dtoa_r+0x1da>
 8014ef8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8014efc:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 8014f00:	46b2      	mov	sl, r6
 8014f02:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 8014f06:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8014f0a:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 8014f0e:	2200      	movs	r2, #0
 8014f10:	4b8b      	ldr	r3, [pc, #556]	; (8015140 <_dtoa_r+0x328>)
 8014f12:	4650      	mov	r0, sl
 8014f14:	4659      	mov	r1, fp
 8014f16:	f7f3 f8ef 	bl	80080f8 <__aeabi_dsub>
 8014f1a:	a381      	add	r3, pc, #516	; (adr r3, 8015120 <_dtoa_r+0x308>)
 8014f1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014f20:	f7f3 faa2 	bl	8008468 <__aeabi_dmul>
 8014f24:	a380      	add	r3, pc, #512	; (adr r3, 8015128 <_dtoa_r+0x310>)
 8014f26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014f2a:	f7f3 f8e7 	bl	80080fc <__adddf3>
 8014f2e:	4606      	mov	r6, r0
 8014f30:	4628      	mov	r0, r5
 8014f32:	460f      	mov	r7, r1
 8014f34:	f7f3 fa2e 	bl	8008394 <__aeabi_i2d>
 8014f38:	a37d      	add	r3, pc, #500	; (adr r3, 8015130 <_dtoa_r+0x318>)
 8014f3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014f3e:	f7f3 fa93 	bl	8008468 <__aeabi_dmul>
 8014f42:	4602      	mov	r2, r0
 8014f44:	460b      	mov	r3, r1
 8014f46:	4630      	mov	r0, r6
 8014f48:	4639      	mov	r1, r7
 8014f4a:	f7f3 f8d7 	bl	80080fc <__adddf3>
 8014f4e:	4606      	mov	r6, r0
 8014f50:	460f      	mov	r7, r1
 8014f52:	f7f3 fd39 	bl	80089c8 <__aeabi_d2iz>
 8014f56:	2200      	movs	r2, #0
 8014f58:	4682      	mov	sl, r0
 8014f5a:	2300      	movs	r3, #0
 8014f5c:	4630      	mov	r0, r6
 8014f5e:	4639      	mov	r1, r7
 8014f60:	f7f3 fcf4 	bl	800894c <__aeabi_dcmplt>
 8014f64:	b148      	cbz	r0, 8014f7a <_dtoa_r+0x162>
 8014f66:	4650      	mov	r0, sl
 8014f68:	f7f3 fa14 	bl	8008394 <__aeabi_i2d>
 8014f6c:	4632      	mov	r2, r6
 8014f6e:	463b      	mov	r3, r7
 8014f70:	f7f3 fce2 	bl	8008938 <__aeabi_dcmpeq>
 8014f74:	b908      	cbnz	r0, 8014f7a <_dtoa_r+0x162>
 8014f76:	f10a 3aff 	add.w	sl, sl, #4294967295
 8014f7a:	f1ba 0f16 	cmp.w	sl, #22
 8014f7e:	d859      	bhi.n	8015034 <_dtoa_r+0x21c>
 8014f80:	4970      	ldr	r1, [pc, #448]	; (8015144 <_dtoa_r+0x32c>)
 8014f82:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8014f86:	e9dd 2300 	ldrd	r2, r3, [sp]
 8014f8a:	e9d1 0100 	ldrd	r0, r1, [r1]
 8014f8e:	f7f3 fcfb 	bl	8008988 <__aeabi_dcmpgt>
 8014f92:	2800      	cmp	r0, #0
 8014f94:	d050      	beq.n	8015038 <_dtoa_r+0x220>
 8014f96:	f10a 3aff 	add.w	sl, sl, #4294967295
 8014f9a:	2300      	movs	r3, #0
 8014f9c:	930f      	str	r3, [sp, #60]	; 0x3c
 8014f9e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8014fa0:	1b5d      	subs	r5, r3, r5
 8014fa2:	f1b5 0801 	subs.w	r8, r5, #1
 8014fa6:	bf49      	itett	mi
 8014fa8:	f1c5 0301 	rsbmi	r3, r5, #1
 8014fac:	2300      	movpl	r3, #0
 8014fae:	9305      	strmi	r3, [sp, #20]
 8014fb0:	f04f 0800 	movmi.w	r8, #0
 8014fb4:	bf58      	it	pl
 8014fb6:	9305      	strpl	r3, [sp, #20]
 8014fb8:	f1ba 0f00 	cmp.w	sl, #0
 8014fbc:	db3e      	blt.n	801503c <_dtoa_r+0x224>
 8014fbe:	2300      	movs	r3, #0
 8014fc0:	44d0      	add	r8, sl
 8014fc2:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 8014fc6:	9307      	str	r3, [sp, #28]
 8014fc8:	9b06      	ldr	r3, [sp, #24]
 8014fca:	2b09      	cmp	r3, #9
 8014fcc:	f200 8090 	bhi.w	80150f0 <_dtoa_r+0x2d8>
 8014fd0:	2b05      	cmp	r3, #5
 8014fd2:	bfc4      	itt	gt
 8014fd4:	3b04      	subgt	r3, #4
 8014fd6:	9306      	strgt	r3, [sp, #24]
 8014fd8:	9b06      	ldr	r3, [sp, #24]
 8014fda:	f1a3 0302 	sub.w	r3, r3, #2
 8014fde:	bfcc      	ite	gt
 8014fe0:	2500      	movgt	r5, #0
 8014fe2:	2501      	movle	r5, #1
 8014fe4:	2b03      	cmp	r3, #3
 8014fe6:	f200 808f 	bhi.w	8015108 <_dtoa_r+0x2f0>
 8014fea:	e8df f003 	tbb	[pc, r3]
 8014fee:	7f7d      	.short	0x7f7d
 8014ff0:	7131      	.short	0x7131
 8014ff2:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 8014ff6:	441d      	add	r5, r3
 8014ff8:	f205 4032 	addw	r0, r5, #1074	; 0x432
 8014ffc:	2820      	cmp	r0, #32
 8014ffe:	dd13      	ble.n	8015028 <_dtoa_r+0x210>
 8015000:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 8015004:	9b00      	ldr	r3, [sp, #0]
 8015006:	fa08 f800 	lsl.w	r8, r8, r0
 801500a:	f205 4012 	addw	r0, r5, #1042	; 0x412
 801500e:	fa23 f000 	lsr.w	r0, r3, r0
 8015012:	ea48 0000 	orr.w	r0, r8, r0
 8015016:	f7f3 f9ad 	bl	8008374 <__aeabi_ui2d>
 801501a:	2301      	movs	r3, #1
 801501c:	4682      	mov	sl, r0
 801501e:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 8015022:	3d01      	subs	r5, #1
 8015024:	9313      	str	r3, [sp, #76]	; 0x4c
 8015026:	e772      	b.n	8014f0e <_dtoa_r+0xf6>
 8015028:	9b00      	ldr	r3, [sp, #0]
 801502a:	f1c0 0020 	rsb	r0, r0, #32
 801502e:	fa03 f000 	lsl.w	r0, r3, r0
 8015032:	e7f0      	b.n	8015016 <_dtoa_r+0x1fe>
 8015034:	2301      	movs	r3, #1
 8015036:	e7b1      	b.n	8014f9c <_dtoa_r+0x184>
 8015038:	900f      	str	r0, [sp, #60]	; 0x3c
 801503a:	e7b0      	b.n	8014f9e <_dtoa_r+0x186>
 801503c:	9b05      	ldr	r3, [sp, #20]
 801503e:	eba3 030a 	sub.w	r3, r3, sl
 8015042:	9305      	str	r3, [sp, #20]
 8015044:	f1ca 0300 	rsb	r3, sl, #0
 8015048:	9307      	str	r3, [sp, #28]
 801504a:	2300      	movs	r3, #0
 801504c:	930e      	str	r3, [sp, #56]	; 0x38
 801504e:	e7bb      	b.n	8014fc8 <_dtoa_r+0x1b0>
 8015050:	2301      	movs	r3, #1
 8015052:	930a      	str	r3, [sp, #40]	; 0x28
 8015054:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8015056:	2b00      	cmp	r3, #0
 8015058:	dd59      	ble.n	801510e <_dtoa_r+0x2f6>
 801505a:	9302      	str	r3, [sp, #8]
 801505c:	4699      	mov	r9, r3
 801505e:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8015060:	2200      	movs	r2, #0
 8015062:	6072      	str	r2, [r6, #4]
 8015064:	2204      	movs	r2, #4
 8015066:	f102 0014 	add.w	r0, r2, #20
 801506a:	4298      	cmp	r0, r3
 801506c:	6871      	ldr	r1, [r6, #4]
 801506e:	d953      	bls.n	8015118 <_dtoa_r+0x300>
 8015070:	4620      	mov	r0, r4
 8015072:	f001 f83a 	bl	80160ea <_Balloc>
 8015076:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8015078:	6030      	str	r0, [r6, #0]
 801507a:	f1b9 0f0e 	cmp.w	r9, #14
 801507e:	f8d3 b000 	ldr.w	fp, [r3]
 8015082:	f200 80e6 	bhi.w	8015252 <_dtoa_r+0x43a>
 8015086:	2d00      	cmp	r5, #0
 8015088:	f000 80e3 	beq.w	8015252 <_dtoa_r+0x43a>
 801508c:	ed9d 7b00 	vldr	d7, [sp]
 8015090:	f1ba 0f00 	cmp.w	sl, #0
 8015094:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 8015098:	dd74      	ble.n	8015184 <_dtoa_r+0x36c>
 801509a:	4a2a      	ldr	r2, [pc, #168]	; (8015144 <_dtoa_r+0x32c>)
 801509c:	f00a 030f 	and.w	r3, sl, #15
 80150a0:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80150a4:	ed93 7b00 	vldr	d7, [r3]
 80150a8:	ea4f 162a 	mov.w	r6, sl, asr #4
 80150ac:	06f0      	lsls	r0, r6, #27
 80150ae:	ed8d 7b08 	vstr	d7, [sp, #32]
 80150b2:	d565      	bpl.n	8015180 <_dtoa_r+0x368>
 80150b4:	4b24      	ldr	r3, [pc, #144]	; (8015148 <_dtoa_r+0x330>)
 80150b6:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80150ba:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80150be:	f7f3 fafd 	bl	80086bc <__aeabi_ddiv>
 80150c2:	e9cd 0100 	strd	r0, r1, [sp]
 80150c6:	f006 060f 	and.w	r6, r6, #15
 80150ca:	2503      	movs	r5, #3
 80150cc:	4f1e      	ldr	r7, [pc, #120]	; (8015148 <_dtoa_r+0x330>)
 80150ce:	e04c      	b.n	801516a <_dtoa_r+0x352>
 80150d0:	2301      	movs	r3, #1
 80150d2:	930a      	str	r3, [sp, #40]	; 0x28
 80150d4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80150d6:	4453      	add	r3, sl
 80150d8:	f103 0901 	add.w	r9, r3, #1
 80150dc:	9302      	str	r3, [sp, #8]
 80150de:	464b      	mov	r3, r9
 80150e0:	2b01      	cmp	r3, #1
 80150e2:	bfb8      	it	lt
 80150e4:	2301      	movlt	r3, #1
 80150e6:	e7ba      	b.n	801505e <_dtoa_r+0x246>
 80150e8:	2300      	movs	r3, #0
 80150ea:	e7b2      	b.n	8015052 <_dtoa_r+0x23a>
 80150ec:	2300      	movs	r3, #0
 80150ee:	e7f0      	b.n	80150d2 <_dtoa_r+0x2ba>
 80150f0:	2501      	movs	r5, #1
 80150f2:	2300      	movs	r3, #0
 80150f4:	9306      	str	r3, [sp, #24]
 80150f6:	950a      	str	r5, [sp, #40]	; 0x28
 80150f8:	f04f 33ff 	mov.w	r3, #4294967295
 80150fc:	9302      	str	r3, [sp, #8]
 80150fe:	4699      	mov	r9, r3
 8015100:	2200      	movs	r2, #0
 8015102:	2312      	movs	r3, #18
 8015104:	920b      	str	r2, [sp, #44]	; 0x2c
 8015106:	e7aa      	b.n	801505e <_dtoa_r+0x246>
 8015108:	2301      	movs	r3, #1
 801510a:	930a      	str	r3, [sp, #40]	; 0x28
 801510c:	e7f4      	b.n	80150f8 <_dtoa_r+0x2e0>
 801510e:	2301      	movs	r3, #1
 8015110:	9302      	str	r3, [sp, #8]
 8015112:	4699      	mov	r9, r3
 8015114:	461a      	mov	r2, r3
 8015116:	e7f5      	b.n	8015104 <_dtoa_r+0x2ec>
 8015118:	3101      	adds	r1, #1
 801511a:	6071      	str	r1, [r6, #4]
 801511c:	0052      	lsls	r2, r2, #1
 801511e:	e7a2      	b.n	8015066 <_dtoa_r+0x24e>
 8015120:	636f4361 	.word	0x636f4361
 8015124:	3fd287a7 	.word	0x3fd287a7
 8015128:	8b60c8b3 	.word	0x8b60c8b3
 801512c:	3fc68a28 	.word	0x3fc68a28
 8015130:	509f79fb 	.word	0x509f79fb
 8015134:	3fd34413 	.word	0x3fd34413
 8015138:	7ff00000 	.word	0x7ff00000
 801513c:	0801713f 	.word	0x0801713f
 8015140:	3ff80000 	.word	0x3ff80000
 8015144:	080171d8 	.word	0x080171d8
 8015148:	080171b0 	.word	0x080171b0
 801514c:	080171a1 	.word	0x080171a1
 8015150:	07f1      	lsls	r1, r6, #31
 8015152:	d508      	bpl.n	8015166 <_dtoa_r+0x34e>
 8015154:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8015158:	e9d7 2300 	ldrd	r2, r3, [r7]
 801515c:	f7f3 f984 	bl	8008468 <__aeabi_dmul>
 8015160:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8015164:	3501      	adds	r5, #1
 8015166:	1076      	asrs	r6, r6, #1
 8015168:	3708      	adds	r7, #8
 801516a:	2e00      	cmp	r6, #0
 801516c:	d1f0      	bne.n	8015150 <_dtoa_r+0x338>
 801516e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8015172:	e9dd 0100 	ldrd	r0, r1, [sp]
 8015176:	f7f3 faa1 	bl	80086bc <__aeabi_ddiv>
 801517a:	e9cd 0100 	strd	r0, r1, [sp]
 801517e:	e01a      	b.n	80151b6 <_dtoa_r+0x39e>
 8015180:	2502      	movs	r5, #2
 8015182:	e7a3      	b.n	80150cc <_dtoa_r+0x2b4>
 8015184:	f000 80a0 	beq.w	80152c8 <_dtoa_r+0x4b0>
 8015188:	f1ca 0600 	rsb	r6, sl, #0
 801518c:	4b9f      	ldr	r3, [pc, #636]	; (801540c <_dtoa_r+0x5f4>)
 801518e:	4fa0      	ldr	r7, [pc, #640]	; (8015410 <_dtoa_r+0x5f8>)
 8015190:	f006 020f 	and.w	r2, r6, #15
 8015194:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8015198:	e9d3 2300 	ldrd	r2, r3, [r3]
 801519c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80151a0:	f7f3 f962 	bl	8008468 <__aeabi_dmul>
 80151a4:	e9cd 0100 	strd	r0, r1, [sp]
 80151a8:	1136      	asrs	r6, r6, #4
 80151aa:	2300      	movs	r3, #0
 80151ac:	2502      	movs	r5, #2
 80151ae:	2e00      	cmp	r6, #0
 80151b0:	d17f      	bne.n	80152b2 <_dtoa_r+0x49a>
 80151b2:	2b00      	cmp	r3, #0
 80151b4:	d1e1      	bne.n	801517a <_dtoa_r+0x362>
 80151b6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80151b8:	2b00      	cmp	r3, #0
 80151ba:	f000 8087 	beq.w	80152cc <_dtoa_r+0x4b4>
 80151be:	e9dd 6700 	ldrd	r6, r7, [sp]
 80151c2:	2200      	movs	r2, #0
 80151c4:	4b93      	ldr	r3, [pc, #588]	; (8015414 <_dtoa_r+0x5fc>)
 80151c6:	4630      	mov	r0, r6
 80151c8:	4639      	mov	r1, r7
 80151ca:	f7f3 fbbf 	bl	800894c <__aeabi_dcmplt>
 80151ce:	2800      	cmp	r0, #0
 80151d0:	d07c      	beq.n	80152cc <_dtoa_r+0x4b4>
 80151d2:	f1b9 0f00 	cmp.w	r9, #0
 80151d6:	d079      	beq.n	80152cc <_dtoa_r+0x4b4>
 80151d8:	9b02      	ldr	r3, [sp, #8]
 80151da:	2b00      	cmp	r3, #0
 80151dc:	dd35      	ble.n	801524a <_dtoa_r+0x432>
 80151de:	f10a 33ff 	add.w	r3, sl, #4294967295
 80151e2:	9308      	str	r3, [sp, #32]
 80151e4:	4639      	mov	r1, r7
 80151e6:	2200      	movs	r2, #0
 80151e8:	4b8b      	ldr	r3, [pc, #556]	; (8015418 <_dtoa_r+0x600>)
 80151ea:	4630      	mov	r0, r6
 80151ec:	f7f3 f93c 	bl	8008468 <__aeabi_dmul>
 80151f0:	e9cd 0100 	strd	r0, r1, [sp]
 80151f4:	9f02      	ldr	r7, [sp, #8]
 80151f6:	3501      	adds	r5, #1
 80151f8:	4628      	mov	r0, r5
 80151fa:	f7f3 f8cb 	bl	8008394 <__aeabi_i2d>
 80151fe:	e9dd 2300 	ldrd	r2, r3, [sp]
 8015202:	f7f3 f931 	bl	8008468 <__aeabi_dmul>
 8015206:	2200      	movs	r2, #0
 8015208:	4b84      	ldr	r3, [pc, #528]	; (801541c <_dtoa_r+0x604>)
 801520a:	f7f2 ff77 	bl	80080fc <__adddf3>
 801520e:	4605      	mov	r5, r0
 8015210:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8015214:	2f00      	cmp	r7, #0
 8015216:	d15d      	bne.n	80152d4 <_dtoa_r+0x4bc>
 8015218:	2200      	movs	r2, #0
 801521a:	4b81      	ldr	r3, [pc, #516]	; (8015420 <_dtoa_r+0x608>)
 801521c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8015220:	f7f2 ff6a 	bl	80080f8 <__aeabi_dsub>
 8015224:	462a      	mov	r2, r5
 8015226:	4633      	mov	r3, r6
 8015228:	e9cd 0100 	strd	r0, r1, [sp]
 801522c:	f7f3 fbac 	bl	8008988 <__aeabi_dcmpgt>
 8015230:	2800      	cmp	r0, #0
 8015232:	f040 8288 	bne.w	8015746 <_dtoa_r+0x92e>
 8015236:	462a      	mov	r2, r5
 8015238:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 801523c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8015240:	f7f3 fb84 	bl	800894c <__aeabi_dcmplt>
 8015244:	2800      	cmp	r0, #0
 8015246:	f040 827c 	bne.w	8015742 <_dtoa_r+0x92a>
 801524a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 801524e:	e9cd 2300 	strd	r2, r3, [sp]
 8015252:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8015254:	2b00      	cmp	r3, #0
 8015256:	f2c0 8150 	blt.w	80154fa <_dtoa_r+0x6e2>
 801525a:	f1ba 0f0e 	cmp.w	sl, #14
 801525e:	f300 814c 	bgt.w	80154fa <_dtoa_r+0x6e2>
 8015262:	4b6a      	ldr	r3, [pc, #424]	; (801540c <_dtoa_r+0x5f4>)
 8015264:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8015268:	ed93 7b00 	vldr	d7, [r3]
 801526c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801526e:	2b00      	cmp	r3, #0
 8015270:	ed8d 7b02 	vstr	d7, [sp, #8]
 8015274:	f280 80d8 	bge.w	8015428 <_dtoa_r+0x610>
 8015278:	f1b9 0f00 	cmp.w	r9, #0
 801527c:	f300 80d4 	bgt.w	8015428 <_dtoa_r+0x610>
 8015280:	f040 825e 	bne.w	8015740 <_dtoa_r+0x928>
 8015284:	2200      	movs	r2, #0
 8015286:	4b66      	ldr	r3, [pc, #408]	; (8015420 <_dtoa_r+0x608>)
 8015288:	ec51 0b17 	vmov	r0, r1, d7
 801528c:	f7f3 f8ec 	bl	8008468 <__aeabi_dmul>
 8015290:	e9dd 2300 	ldrd	r2, r3, [sp]
 8015294:	f7f3 fb6e 	bl	8008974 <__aeabi_dcmpge>
 8015298:	464f      	mov	r7, r9
 801529a:	464e      	mov	r6, r9
 801529c:	2800      	cmp	r0, #0
 801529e:	f040 8234 	bne.w	801570a <_dtoa_r+0x8f2>
 80152a2:	2331      	movs	r3, #49	; 0x31
 80152a4:	f10b 0501 	add.w	r5, fp, #1
 80152a8:	f88b 3000 	strb.w	r3, [fp]
 80152ac:	f10a 0a01 	add.w	sl, sl, #1
 80152b0:	e22f      	b.n	8015712 <_dtoa_r+0x8fa>
 80152b2:	07f2      	lsls	r2, r6, #31
 80152b4:	d505      	bpl.n	80152c2 <_dtoa_r+0x4aa>
 80152b6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80152ba:	f7f3 f8d5 	bl	8008468 <__aeabi_dmul>
 80152be:	3501      	adds	r5, #1
 80152c0:	2301      	movs	r3, #1
 80152c2:	1076      	asrs	r6, r6, #1
 80152c4:	3708      	adds	r7, #8
 80152c6:	e772      	b.n	80151ae <_dtoa_r+0x396>
 80152c8:	2502      	movs	r5, #2
 80152ca:	e774      	b.n	80151b6 <_dtoa_r+0x39e>
 80152cc:	f8cd a020 	str.w	sl, [sp, #32]
 80152d0:	464f      	mov	r7, r9
 80152d2:	e791      	b.n	80151f8 <_dtoa_r+0x3e0>
 80152d4:	4b4d      	ldr	r3, [pc, #308]	; (801540c <_dtoa_r+0x5f4>)
 80152d6:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80152da:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 80152de:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80152e0:	2b00      	cmp	r3, #0
 80152e2:	d047      	beq.n	8015374 <_dtoa_r+0x55c>
 80152e4:	4602      	mov	r2, r0
 80152e6:	460b      	mov	r3, r1
 80152e8:	2000      	movs	r0, #0
 80152ea:	494e      	ldr	r1, [pc, #312]	; (8015424 <_dtoa_r+0x60c>)
 80152ec:	f7f3 f9e6 	bl	80086bc <__aeabi_ddiv>
 80152f0:	462a      	mov	r2, r5
 80152f2:	4633      	mov	r3, r6
 80152f4:	f7f2 ff00 	bl	80080f8 <__aeabi_dsub>
 80152f8:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 80152fc:	465d      	mov	r5, fp
 80152fe:	e9dd 0100 	ldrd	r0, r1, [sp]
 8015302:	f7f3 fb61 	bl	80089c8 <__aeabi_d2iz>
 8015306:	4606      	mov	r6, r0
 8015308:	f7f3 f844 	bl	8008394 <__aeabi_i2d>
 801530c:	4602      	mov	r2, r0
 801530e:	460b      	mov	r3, r1
 8015310:	e9dd 0100 	ldrd	r0, r1, [sp]
 8015314:	f7f2 fef0 	bl	80080f8 <__aeabi_dsub>
 8015318:	3630      	adds	r6, #48	; 0x30
 801531a:	f805 6b01 	strb.w	r6, [r5], #1
 801531e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8015322:	e9cd 0100 	strd	r0, r1, [sp]
 8015326:	f7f3 fb11 	bl	800894c <__aeabi_dcmplt>
 801532a:	2800      	cmp	r0, #0
 801532c:	d163      	bne.n	80153f6 <_dtoa_r+0x5de>
 801532e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8015332:	2000      	movs	r0, #0
 8015334:	4937      	ldr	r1, [pc, #220]	; (8015414 <_dtoa_r+0x5fc>)
 8015336:	f7f2 fedf 	bl	80080f8 <__aeabi_dsub>
 801533a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 801533e:	f7f3 fb05 	bl	800894c <__aeabi_dcmplt>
 8015342:	2800      	cmp	r0, #0
 8015344:	f040 80b7 	bne.w	80154b6 <_dtoa_r+0x69e>
 8015348:	eba5 030b 	sub.w	r3, r5, fp
 801534c:	429f      	cmp	r7, r3
 801534e:	f77f af7c 	ble.w	801524a <_dtoa_r+0x432>
 8015352:	2200      	movs	r2, #0
 8015354:	4b30      	ldr	r3, [pc, #192]	; (8015418 <_dtoa_r+0x600>)
 8015356:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 801535a:	f7f3 f885 	bl	8008468 <__aeabi_dmul>
 801535e:	2200      	movs	r2, #0
 8015360:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8015364:	4b2c      	ldr	r3, [pc, #176]	; (8015418 <_dtoa_r+0x600>)
 8015366:	e9dd 0100 	ldrd	r0, r1, [sp]
 801536a:	f7f3 f87d 	bl	8008468 <__aeabi_dmul>
 801536e:	e9cd 0100 	strd	r0, r1, [sp]
 8015372:	e7c4      	b.n	80152fe <_dtoa_r+0x4e6>
 8015374:	462a      	mov	r2, r5
 8015376:	4633      	mov	r3, r6
 8015378:	f7f3 f876 	bl	8008468 <__aeabi_dmul>
 801537c:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8015380:	eb0b 0507 	add.w	r5, fp, r7
 8015384:	465e      	mov	r6, fp
 8015386:	e9dd 0100 	ldrd	r0, r1, [sp]
 801538a:	f7f3 fb1d 	bl	80089c8 <__aeabi_d2iz>
 801538e:	4607      	mov	r7, r0
 8015390:	f7f3 f800 	bl	8008394 <__aeabi_i2d>
 8015394:	3730      	adds	r7, #48	; 0x30
 8015396:	4602      	mov	r2, r0
 8015398:	460b      	mov	r3, r1
 801539a:	e9dd 0100 	ldrd	r0, r1, [sp]
 801539e:	f7f2 feab 	bl	80080f8 <__aeabi_dsub>
 80153a2:	f806 7b01 	strb.w	r7, [r6], #1
 80153a6:	42ae      	cmp	r6, r5
 80153a8:	e9cd 0100 	strd	r0, r1, [sp]
 80153ac:	f04f 0200 	mov.w	r2, #0
 80153b0:	d126      	bne.n	8015400 <_dtoa_r+0x5e8>
 80153b2:	4b1c      	ldr	r3, [pc, #112]	; (8015424 <_dtoa_r+0x60c>)
 80153b4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80153b8:	f7f2 fea0 	bl	80080fc <__adddf3>
 80153bc:	4602      	mov	r2, r0
 80153be:	460b      	mov	r3, r1
 80153c0:	e9dd 0100 	ldrd	r0, r1, [sp]
 80153c4:	f7f3 fae0 	bl	8008988 <__aeabi_dcmpgt>
 80153c8:	2800      	cmp	r0, #0
 80153ca:	d174      	bne.n	80154b6 <_dtoa_r+0x69e>
 80153cc:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80153d0:	2000      	movs	r0, #0
 80153d2:	4914      	ldr	r1, [pc, #80]	; (8015424 <_dtoa_r+0x60c>)
 80153d4:	f7f2 fe90 	bl	80080f8 <__aeabi_dsub>
 80153d8:	4602      	mov	r2, r0
 80153da:	460b      	mov	r3, r1
 80153dc:	e9dd 0100 	ldrd	r0, r1, [sp]
 80153e0:	f7f3 fab4 	bl	800894c <__aeabi_dcmplt>
 80153e4:	2800      	cmp	r0, #0
 80153e6:	f43f af30 	beq.w	801524a <_dtoa_r+0x432>
 80153ea:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80153ee:	2b30      	cmp	r3, #48	; 0x30
 80153f0:	f105 32ff 	add.w	r2, r5, #4294967295
 80153f4:	d002      	beq.n	80153fc <_dtoa_r+0x5e4>
 80153f6:	f8dd a020 	ldr.w	sl, [sp, #32]
 80153fa:	e04a      	b.n	8015492 <_dtoa_r+0x67a>
 80153fc:	4615      	mov	r5, r2
 80153fe:	e7f4      	b.n	80153ea <_dtoa_r+0x5d2>
 8015400:	4b05      	ldr	r3, [pc, #20]	; (8015418 <_dtoa_r+0x600>)
 8015402:	f7f3 f831 	bl	8008468 <__aeabi_dmul>
 8015406:	e9cd 0100 	strd	r0, r1, [sp]
 801540a:	e7bc      	b.n	8015386 <_dtoa_r+0x56e>
 801540c:	080171d8 	.word	0x080171d8
 8015410:	080171b0 	.word	0x080171b0
 8015414:	3ff00000 	.word	0x3ff00000
 8015418:	40240000 	.word	0x40240000
 801541c:	401c0000 	.word	0x401c0000
 8015420:	40140000 	.word	0x40140000
 8015424:	3fe00000 	.word	0x3fe00000
 8015428:	e9dd 6700 	ldrd	r6, r7, [sp]
 801542c:	465d      	mov	r5, fp
 801542e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8015432:	4630      	mov	r0, r6
 8015434:	4639      	mov	r1, r7
 8015436:	f7f3 f941 	bl	80086bc <__aeabi_ddiv>
 801543a:	f7f3 fac5 	bl	80089c8 <__aeabi_d2iz>
 801543e:	4680      	mov	r8, r0
 8015440:	f7f2 ffa8 	bl	8008394 <__aeabi_i2d>
 8015444:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8015448:	f7f3 f80e 	bl	8008468 <__aeabi_dmul>
 801544c:	4602      	mov	r2, r0
 801544e:	460b      	mov	r3, r1
 8015450:	4630      	mov	r0, r6
 8015452:	4639      	mov	r1, r7
 8015454:	f108 0630 	add.w	r6, r8, #48	; 0x30
 8015458:	f7f2 fe4e 	bl	80080f8 <__aeabi_dsub>
 801545c:	f805 6b01 	strb.w	r6, [r5], #1
 8015460:	eba5 060b 	sub.w	r6, r5, fp
 8015464:	45b1      	cmp	r9, r6
 8015466:	4602      	mov	r2, r0
 8015468:	460b      	mov	r3, r1
 801546a:	d139      	bne.n	80154e0 <_dtoa_r+0x6c8>
 801546c:	f7f2 fe46 	bl	80080fc <__adddf3>
 8015470:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8015474:	4606      	mov	r6, r0
 8015476:	460f      	mov	r7, r1
 8015478:	f7f3 fa86 	bl	8008988 <__aeabi_dcmpgt>
 801547c:	b9c8      	cbnz	r0, 80154b2 <_dtoa_r+0x69a>
 801547e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8015482:	4630      	mov	r0, r6
 8015484:	4639      	mov	r1, r7
 8015486:	f7f3 fa57 	bl	8008938 <__aeabi_dcmpeq>
 801548a:	b110      	cbz	r0, 8015492 <_dtoa_r+0x67a>
 801548c:	f018 0f01 	tst.w	r8, #1
 8015490:	d10f      	bne.n	80154b2 <_dtoa_r+0x69a>
 8015492:	9904      	ldr	r1, [sp, #16]
 8015494:	4620      	mov	r0, r4
 8015496:	f000 fe5c 	bl	8016152 <_Bfree>
 801549a:	2300      	movs	r3, #0
 801549c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801549e:	702b      	strb	r3, [r5, #0]
 80154a0:	f10a 0301 	add.w	r3, sl, #1
 80154a4:	6013      	str	r3, [r2, #0]
 80154a6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80154a8:	2b00      	cmp	r3, #0
 80154aa:	f000 8241 	beq.w	8015930 <_dtoa_r+0xb18>
 80154ae:	601d      	str	r5, [r3, #0]
 80154b0:	e23e      	b.n	8015930 <_dtoa_r+0xb18>
 80154b2:	f8cd a020 	str.w	sl, [sp, #32]
 80154b6:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80154ba:	2a39      	cmp	r2, #57	; 0x39
 80154bc:	f105 33ff 	add.w	r3, r5, #4294967295
 80154c0:	d108      	bne.n	80154d4 <_dtoa_r+0x6bc>
 80154c2:	459b      	cmp	fp, r3
 80154c4:	d10a      	bne.n	80154dc <_dtoa_r+0x6c4>
 80154c6:	9b08      	ldr	r3, [sp, #32]
 80154c8:	3301      	adds	r3, #1
 80154ca:	9308      	str	r3, [sp, #32]
 80154cc:	2330      	movs	r3, #48	; 0x30
 80154ce:	f88b 3000 	strb.w	r3, [fp]
 80154d2:	465b      	mov	r3, fp
 80154d4:	781a      	ldrb	r2, [r3, #0]
 80154d6:	3201      	adds	r2, #1
 80154d8:	701a      	strb	r2, [r3, #0]
 80154da:	e78c      	b.n	80153f6 <_dtoa_r+0x5de>
 80154dc:	461d      	mov	r5, r3
 80154de:	e7ea      	b.n	80154b6 <_dtoa_r+0x69e>
 80154e0:	2200      	movs	r2, #0
 80154e2:	4b9b      	ldr	r3, [pc, #620]	; (8015750 <_dtoa_r+0x938>)
 80154e4:	f7f2 ffc0 	bl	8008468 <__aeabi_dmul>
 80154e8:	2200      	movs	r2, #0
 80154ea:	2300      	movs	r3, #0
 80154ec:	4606      	mov	r6, r0
 80154ee:	460f      	mov	r7, r1
 80154f0:	f7f3 fa22 	bl	8008938 <__aeabi_dcmpeq>
 80154f4:	2800      	cmp	r0, #0
 80154f6:	d09a      	beq.n	801542e <_dtoa_r+0x616>
 80154f8:	e7cb      	b.n	8015492 <_dtoa_r+0x67a>
 80154fa:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80154fc:	2a00      	cmp	r2, #0
 80154fe:	f000 808b 	beq.w	8015618 <_dtoa_r+0x800>
 8015502:	9a06      	ldr	r2, [sp, #24]
 8015504:	2a01      	cmp	r2, #1
 8015506:	dc6e      	bgt.n	80155e6 <_dtoa_r+0x7ce>
 8015508:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801550a:	2a00      	cmp	r2, #0
 801550c:	d067      	beq.n	80155de <_dtoa_r+0x7c6>
 801550e:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8015512:	9f07      	ldr	r7, [sp, #28]
 8015514:	9d05      	ldr	r5, [sp, #20]
 8015516:	9a05      	ldr	r2, [sp, #20]
 8015518:	2101      	movs	r1, #1
 801551a:	441a      	add	r2, r3
 801551c:	4620      	mov	r0, r4
 801551e:	9205      	str	r2, [sp, #20]
 8015520:	4498      	add	r8, r3
 8015522:	f000 fef4 	bl	801630e <__i2b>
 8015526:	4606      	mov	r6, r0
 8015528:	2d00      	cmp	r5, #0
 801552a:	dd0c      	ble.n	8015546 <_dtoa_r+0x72e>
 801552c:	f1b8 0f00 	cmp.w	r8, #0
 8015530:	dd09      	ble.n	8015546 <_dtoa_r+0x72e>
 8015532:	4545      	cmp	r5, r8
 8015534:	9a05      	ldr	r2, [sp, #20]
 8015536:	462b      	mov	r3, r5
 8015538:	bfa8      	it	ge
 801553a:	4643      	movge	r3, r8
 801553c:	1ad2      	subs	r2, r2, r3
 801553e:	9205      	str	r2, [sp, #20]
 8015540:	1aed      	subs	r5, r5, r3
 8015542:	eba8 0803 	sub.w	r8, r8, r3
 8015546:	9b07      	ldr	r3, [sp, #28]
 8015548:	b1eb      	cbz	r3, 8015586 <_dtoa_r+0x76e>
 801554a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801554c:	2b00      	cmp	r3, #0
 801554e:	d067      	beq.n	8015620 <_dtoa_r+0x808>
 8015550:	b18f      	cbz	r7, 8015576 <_dtoa_r+0x75e>
 8015552:	4631      	mov	r1, r6
 8015554:	463a      	mov	r2, r7
 8015556:	4620      	mov	r0, r4
 8015558:	f000 ff78 	bl	801644c <__pow5mult>
 801555c:	9a04      	ldr	r2, [sp, #16]
 801555e:	4601      	mov	r1, r0
 8015560:	4606      	mov	r6, r0
 8015562:	4620      	mov	r0, r4
 8015564:	f000 fedc 	bl	8016320 <__multiply>
 8015568:	9904      	ldr	r1, [sp, #16]
 801556a:	9008      	str	r0, [sp, #32]
 801556c:	4620      	mov	r0, r4
 801556e:	f000 fdf0 	bl	8016152 <_Bfree>
 8015572:	9b08      	ldr	r3, [sp, #32]
 8015574:	9304      	str	r3, [sp, #16]
 8015576:	9b07      	ldr	r3, [sp, #28]
 8015578:	1bda      	subs	r2, r3, r7
 801557a:	d004      	beq.n	8015586 <_dtoa_r+0x76e>
 801557c:	9904      	ldr	r1, [sp, #16]
 801557e:	4620      	mov	r0, r4
 8015580:	f000 ff64 	bl	801644c <__pow5mult>
 8015584:	9004      	str	r0, [sp, #16]
 8015586:	2101      	movs	r1, #1
 8015588:	4620      	mov	r0, r4
 801558a:	f000 fec0 	bl	801630e <__i2b>
 801558e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8015590:	4607      	mov	r7, r0
 8015592:	2b00      	cmp	r3, #0
 8015594:	f000 81d0 	beq.w	8015938 <_dtoa_r+0xb20>
 8015598:	461a      	mov	r2, r3
 801559a:	4601      	mov	r1, r0
 801559c:	4620      	mov	r0, r4
 801559e:	f000 ff55 	bl	801644c <__pow5mult>
 80155a2:	9b06      	ldr	r3, [sp, #24]
 80155a4:	2b01      	cmp	r3, #1
 80155a6:	4607      	mov	r7, r0
 80155a8:	dc40      	bgt.n	801562c <_dtoa_r+0x814>
 80155aa:	9b00      	ldr	r3, [sp, #0]
 80155ac:	2b00      	cmp	r3, #0
 80155ae:	d139      	bne.n	8015624 <_dtoa_r+0x80c>
 80155b0:	9b01      	ldr	r3, [sp, #4]
 80155b2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80155b6:	2b00      	cmp	r3, #0
 80155b8:	d136      	bne.n	8015628 <_dtoa_r+0x810>
 80155ba:	9b01      	ldr	r3, [sp, #4]
 80155bc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80155c0:	0d1b      	lsrs	r3, r3, #20
 80155c2:	051b      	lsls	r3, r3, #20
 80155c4:	b12b      	cbz	r3, 80155d2 <_dtoa_r+0x7ba>
 80155c6:	9b05      	ldr	r3, [sp, #20]
 80155c8:	3301      	adds	r3, #1
 80155ca:	9305      	str	r3, [sp, #20]
 80155cc:	f108 0801 	add.w	r8, r8, #1
 80155d0:	2301      	movs	r3, #1
 80155d2:	9307      	str	r3, [sp, #28]
 80155d4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80155d6:	2b00      	cmp	r3, #0
 80155d8:	d12a      	bne.n	8015630 <_dtoa_r+0x818>
 80155da:	2001      	movs	r0, #1
 80155dc:	e030      	b.n	8015640 <_dtoa_r+0x828>
 80155de:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80155e0:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80155e4:	e795      	b.n	8015512 <_dtoa_r+0x6fa>
 80155e6:	9b07      	ldr	r3, [sp, #28]
 80155e8:	f109 37ff 	add.w	r7, r9, #4294967295
 80155ec:	42bb      	cmp	r3, r7
 80155ee:	bfbf      	itttt	lt
 80155f0:	9b07      	ldrlt	r3, [sp, #28]
 80155f2:	9707      	strlt	r7, [sp, #28]
 80155f4:	1afa      	sublt	r2, r7, r3
 80155f6:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 80155f8:	bfbb      	ittet	lt
 80155fa:	189b      	addlt	r3, r3, r2
 80155fc:	930e      	strlt	r3, [sp, #56]	; 0x38
 80155fe:	1bdf      	subge	r7, r3, r7
 8015600:	2700      	movlt	r7, #0
 8015602:	f1b9 0f00 	cmp.w	r9, #0
 8015606:	bfb5      	itete	lt
 8015608:	9b05      	ldrlt	r3, [sp, #20]
 801560a:	9d05      	ldrge	r5, [sp, #20]
 801560c:	eba3 0509 	sublt.w	r5, r3, r9
 8015610:	464b      	movge	r3, r9
 8015612:	bfb8      	it	lt
 8015614:	2300      	movlt	r3, #0
 8015616:	e77e      	b.n	8015516 <_dtoa_r+0x6fe>
 8015618:	9f07      	ldr	r7, [sp, #28]
 801561a:	9d05      	ldr	r5, [sp, #20]
 801561c:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 801561e:	e783      	b.n	8015528 <_dtoa_r+0x710>
 8015620:	9a07      	ldr	r2, [sp, #28]
 8015622:	e7ab      	b.n	801557c <_dtoa_r+0x764>
 8015624:	2300      	movs	r3, #0
 8015626:	e7d4      	b.n	80155d2 <_dtoa_r+0x7ba>
 8015628:	9b00      	ldr	r3, [sp, #0]
 801562a:	e7d2      	b.n	80155d2 <_dtoa_r+0x7ba>
 801562c:	2300      	movs	r3, #0
 801562e:	9307      	str	r3, [sp, #28]
 8015630:	693b      	ldr	r3, [r7, #16]
 8015632:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 8015636:	6918      	ldr	r0, [r3, #16]
 8015638:	f000 fe1b 	bl	8016272 <__hi0bits>
 801563c:	f1c0 0020 	rsb	r0, r0, #32
 8015640:	4440      	add	r0, r8
 8015642:	f010 001f 	ands.w	r0, r0, #31
 8015646:	d047      	beq.n	80156d8 <_dtoa_r+0x8c0>
 8015648:	f1c0 0320 	rsb	r3, r0, #32
 801564c:	2b04      	cmp	r3, #4
 801564e:	dd3b      	ble.n	80156c8 <_dtoa_r+0x8b0>
 8015650:	9b05      	ldr	r3, [sp, #20]
 8015652:	f1c0 001c 	rsb	r0, r0, #28
 8015656:	4403      	add	r3, r0
 8015658:	9305      	str	r3, [sp, #20]
 801565a:	4405      	add	r5, r0
 801565c:	4480      	add	r8, r0
 801565e:	9b05      	ldr	r3, [sp, #20]
 8015660:	2b00      	cmp	r3, #0
 8015662:	dd05      	ble.n	8015670 <_dtoa_r+0x858>
 8015664:	461a      	mov	r2, r3
 8015666:	9904      	ldr	r1, [sp, #16]
 8015668:	4620      	mov	r0, r4
 801566a:	f000 ff3d 	bl	80164e8 <__lshift>
 801566e:	9004      	str	r0, [sp, #16]
 8015670:	f1b8 0f00 	cmp.w	r8, #0
 8015674:	dd05      	ble.n	8015682 <_dtoa_r+0x86a>
 8015676:	4639      	mov	r1, r7
 8015678:	4642      	mov	r2, r8
 801567a:	4620      	mov	r0, r4
 801567c:	f000 ff34 	bl	80164e8 <__lshift>
 8015680:	4607      	mov	r7, r0
 8015682:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8015684:	b353      	cbz	r3, 80156dc <_dtoa_r+0x8c4>
 8015686:	4639      	mov	r1, r7
 8015688:	9804      	ldr	r0, [sp, #16]
 801568a:	f000 ff81 	bl	8016590 <__mcmp>
 801568e:	2800      	cmp	r0, #0
 8015690:	da24      	bge.n	80156dc <_dtoa_r+0x8c4>
 8015692:	2300      	movs	r3, #0
 8015694:	220a      	movs	r2, #10
 8015696:	9904      	ldr	r1, [sp, #16]
 8015698:	4620      	mov	r0, r4
 801569a:	f000 fd71 	bl	8016180 <__multadd>
 801569e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80156a0:	9004      	str	r0, [sp, #16]
 80156a2:	f10a 3aff 	add.w	sl, sl, #4294967295
 80156a6:	2b00      	cmp	r3, #0
 80156a8:	f000 814d 	beq.w	8015946 <_dtoa_r+0xb2e>
 80156ac:	2300      	movs	r3, #0
 80156ae:	4631      	mov	r1, r6
 80156b0:	220a      	movs	r2, #10
 80156b2:	4620      	mov	r0, r4
 80156b4:	f000 fd64 	bl	8016180 <__multadd>
 80156b8:	9b02      	ldr	r3, [sp, #8]
 80156ba:	2b00      	cmp	r3, #0
 80156bc:	4606      	mov	r6, r0
 80156be:	dc4f      	bgt.n	8015760 <_dtoa_r+0x948>
 80156c0:	9b06      	ldr	r3, [sp, #24]
 80156c2:	2b02      	cmp	r3, #2
 80156c4:	dd4c      	ble.n	8015760 <_dtoa_r+0x948>
 80156c6:	e011      	b.n	80156ec <_dtoa_r+0x8d4>
 80156c8:	d0c9      	beq.n	801565e <_dtoa_r+0x846>
 80156ca:	9a05      	ldr	r2, [sp, #20]
 80156cc:	331c      	adds	r3, #28
 80156ce:	441a      	add	r2, r3
 80156d0:	9205      	str	r2, [sp, #20]
 80156d2:	441d      	add	r5, r3
 80156d4:	4498      	add	r8, r3
 80156d6:	e7c2      	b.n	801565e <_dtoa_r+0x846>
 80156d8:	4603      	mov	r3, r0
 80156da:	e7f6      	b.n	80156ca <_dtoa_r+0x8b2>
 80156dc:	f1b9 0f00 	cmp.w	r9, #0
 80156e0:	dc38      	bgt.n	8015754 <_dtoa_r+0x93c>
 80156e2:	9b06      	ldr	r3, [sp, #24]
 80156e4:	2b02      	cmp	r3, #2
 80156e6:	dd35      	ble.n	8015754 <_dtoa_r+0x93c>
 80156e8:	f8cd 9008 	str.w	r9, [sp, #8]
 80156ec:	9b02      	ldr	r3, [sp, #8]
 80156ee:	b963      	cbnz	r3, 801570a <_dtoa_r+0x8f2>
 80156f0:	4639      	mov	r1, r7
 80156f2:	2205      	movs	r2, #5
 80156f4:	4620      	mov	r0, r4
 80156f6:	f000 fd43 	bl	8016180 <__multadd>
 80156fa:	4601      	mov	r1, r0
 80156fc:	4607      	mov	r7, r0
 80156fe:	9804      	ldr	r0, [sp, #16]
 8015700:	f000 ff46 	bl	8016590 <__mcmp>
 8015704:	2800      	cmp	r0, #0
 8015706:	f73f adcc 	bgt.w	80152a2 <_dtoa_r+0x48a>
 801570a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801570c:	465d      	mov	r5, fp
 801570e:	ea6f 0a03 	mvn.w	sl, r3
 8015712:	f04f 0900 	mov.w	r9, #0
 8015716:	4639      	mov	r1, r7
 8015718:	4620      	mov	r0, r4
 801571a:	f000 fd1a 	bl	8016152 <_Bfree>
 801571e:	2e00      	cmp	r6, #0
 8015720:	f43f aeb7 	beq.w	8015492 <_dtoa_r+0x67a>
 8015724:	f1b9 0f00 	cmp.w	r9, #0
 8015728:	d005      	beq.n	8015736 <_dtoa_r+0x91e>
 801572a:	45b1      	cmp	r9, r6
 801572c:	d003      	beq.n	8015736 <_dtoa_r+0x91e>
 801572e:	4649      	mov	r1, r9
 8015730:	4620      	mov	r0, r4
 8015732:	f000 fd0e 	bl	8016152 <_Bfree>
 8015736:	4631      	mov	r1, r6
 8015738:	4620      	mov	r0, r4
 801573a:	f000 fd0a 	bl	8016152 <_Bfree>
 801573e:	e6a8      	b.n	8015492 <_dtoa_r+0x67a>
 8015740:	2700      	movs	r7, #0
 8015742:	463e      	mov	r6, r7
 8015744:	e7e1      	b.n	801570a <_dtoa_r+0x8f2>
 8015746:	f8dd a020 	ldr.w	sl, [sp, #32]
 801574a:	463e      	mov	r6, r7
 801574c:	e5a9      	b.n	80152a2 <_dtoa_r+0x48a>
 801574e:	bf00      	nop
 8015750:	40240000 	.word	0x40240000
 8015754:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015756:	f8cd 9008 	str.w	r9, [sp, #8]
 801575a:	2b00      	cmp	r3, #0
 801575c:	f000 80fa 	beq.w	8015954 <_dtoa_r+0xb3c>
 8015760:	2d00      	cmp	r5, #0
 8015762:	dd05      	ble.n	8015770 <_dtoa_r+0x958>
 8015764:	4631      	mov	r1, r6
 8015766:	462a      	mov	r2, r5
 8015768:	4620      	mov	r0, r4
 801576a:	f000 febd 	bl	80164e8 <__lshift>
 801576e:	4606      	mov	r6, r0
 8015770:	9b07      	ldr	r3, [sp, #28]
 8015772:	2b00      	cmp	r3, #0
 8015774:	d04c      	beq.n	8015810 <_dtoa_r+0x9f8>
 8015776:	6871      	ldr	r1, [r6, #4]
 8015778:	4620      	mov	r0, r4
 801577a:	f000 fcb6 	bl	80160ea <_Balloc>
 801577e:	6932      	ldr	r2, [r6, #16]
 8015780:	3202      	adds	r2, #2
 8015782:	4605      	mov	r5, r0
 8015784:	0092      	lsls	r2, r2, #2
 8015786:	f106 010c 	add.w	r1, r6, #12
 801578a:	300c      	adds	r0, #12
 801578c:	f7fc fae6 	bl	8011d5c <memcpy>
 8015790:	2201      	movs	r2, #1
 8015792:	4629      	mov	r1, r5
 8015794:	4620      	mov	r0, r4
 8015796:	f000 fea7 	bl	80164e8 <__lshift>
 801579a:	9b00      	ldr	r3, [sp, #0]
 801579c:	f8cd b014 	str.w	fp, [sp, #20]
 80157a0:	f003 0301 	and.w	r3, r3, #1
 80157a4:	46b1      	mov	r9, r6
 80157a6:	9307      	str	r3, [sp, #28]
 80157a8:	4606      	mov	r6, r0
 80157aa:	4639      	mov	r1, r7
 80157ac:	9804      	ldr	r0, [sp, #16]
 80157ae:	f7ff faa7 	bl	8014d00 <quorem>
 80157b2:	4649      	mov	r1, r9
 80157b4:	4605      	mov	r5, r0
 80157b6:	f100 0830 	add.w	r8, r0, #48	; 0x30
 80157ba:	9804      	ldr	r0, [sp, #16]
 80157bc:	f000 fee8 	bl	8016590 <__mcmp>
 80157c0:	4632      	mov	r2, r6
 80157c2:	9000      	str	r0, [sp, #0]
 80157c4:	4639      	mov	r1, r7
 80157c6:	4620      	mov	r0, r4
 80157c8:	f000 fefc 	bl	80165c4 <__mdiff>
 80157cc:	68c3      	ldr	r3, [r0, #12]
 80157ce:	4602      	mov	r2, r0
 80157d0:	bb03      	cbnz	r3, 8015814 <_dtoa_r+0x9fc>
 80157d2:	4601      	mov	r1, r0
 80157d4:	9008      	str	r0, [sp, #32]
 80157d6:	9804      	ldr	r0, [sp, #16]
 80157d8:	f000 feda 	bl	8016590 <__mcmp>
 80157dc:	9a08      	ldr	r2, [sp, #32]
 80157de:	4603      	mov	r3, r0
 80157e0:	4611      	mov	r1, r2
 80157e2:	4620      	mov	r0, r4
 80157e4:	9308      	str	r3, [sp, #32]
 80157e6:	f000 fcb4 	bl	8016152 <_Bfree>
 80157ea:	9b08      	ldr	r3, [sp, #32]
 80157ec:	b9a3      	cbnz	r3, 8015818 <_dtoa_r+0xa00>
 80157ee:	9a06      	ldr	r2, [sp, #24]
 80157f0:	b992      	cbnz	r2, 8015818 <_dtoa_r+0xa00>
 80157f2:	9a07      	ldr	r2, [sp, #28]
 80157f4:	b982      	cbnz	r2, 8015818 <_dtoa_r+0xa00>
 80157f6:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 80157fa:	d029      	beq.n	8015850 <_dtoa_r+0xa38>
 80157fc:	9b00      	ldr	r3, [sp, #0]
 80157fe:	2b00      	cmp	r3, #0
 8015800:	dd01      	ble.n	8015806 <_dtoa_r+0x9ee>
 8015802:	f105 0831 	add.w	r8, r5, #49	; 0x31
 8015806:	9b05      	ldr	r3, [sp, #20]
 8015808:	1c5d      	adds	r5, r3, #1
 801580a:	f883 8000 	strb.w	r8, [r3]
 801580e:	e782      	b.n	8015716 <_dtoa_r+0x8fe>
 8015810:	4630      	mov	r0, r6
 8015812:	e7c2      	b.n	801579a <_dtoa_r+0x982>
 8015814:	2301      	movs	r3, #1
 8015816:	e7e3      	b.n	80157e0 <_dtoa_r+0x9c8>
 8015818:	9a00      	ldr	r2, [sp, #0]
 801581a:	2a00      	cmp	r2, #0
 801581c:	db04      	blt.n	8015828 <_dtoa_r+0xa10>
 801581e:	d125      	bne.n	801586c <_dtoa_r+0xa54>
 8015820:	9a06      	ldr	r2, [sp, #24]
 8015822:	bb1a      	cbnz	r2, 801586c <_dtoa_r+0xa54>
 8015824:	9a07      	ldr	r2, [sp, #28]
 8015826:	bb0a      	cbnz	r2, 801586c <_dtoa_r+0xa54>
 8015828:	2b00      	cmp	r3, #0
 801582a:	ddec      	ble.n	8015806 <_dtoa_r+0x9ee>
 801582c:	2201      	movs	r2, #1
 801582e:	9904      	ldr	r1, [sp, #16]
 8015830:	4620      	mov	r0, r4
 8015832:	f000 fe59 	bl	80164e8 <__lshift>
 8015836:	4639      	mov	r1, r7
 8015838:	9004      	str	r0, [sp, #16]
 801583a:	f000 fea9 	bl	8016590 <__mcmp>
 801583e:	2800      	cmp	r0, #0
 8015840:	dc03      	bgt.n	801584a <_dtoa_r+0xa32>
 8015842:	d1e0      	bne.n	8015806 <_dtoa_r+0x9ee>
 8015844:	f018 0f01 	tst.w	r8, #1
 8015848:	d0dd      	beq.n	8015806 <_dtoa_r+0x9ee>
 801584a:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 801584e:	d1d8      	bne.n	8015802 <_dtoa_r+0x9ea>
 8015850:	9b05      	ldr	r3, [sp, #20]
 8015852:	9a05      	ldr	r2, [sp, #20]
 8015854:	1c5d      	adds	r5, r3, #1
 8015856:	2339      	movs	r3, #57	; 0x39
 8015858:	7013      	strb	r3, [r2, #0]
 801585a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 801585e:	2b39      	cmp	r3, #57	; 0x39
 8015860:	f105 32ff 	add.w	r2, r5, #4294967295
 8015864:	d04f      	beq.n	8015906 <_dtoa_r+0xaee>
 8015866:	3301      	adds	r3, #1
 8015868:	7013      	strb	r3, [r2, #0]
 801586a:	e754      	b.n	8015716 <_dtoa_r+0x8fe>
 801586c:	9a05      	ldr	r2, [sp, #20]
 801586e:	2b00      	cmp	r3, #0
 8015870:	f102 0501 	add.w	r5, r2, #1
 8015874:	dd06      	ble.n	8015884 <_dtoa_r+0xa6c>
 8015876:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 801587a:	d0e9      	beq.n	8015850 <_dtoa_r+0xa38>
 801587c:	f108 0801 	add.w	r8, r8, #1
 8015880:	9b05      	ldr	r3, [sp, #20]
 8015882:	e7c2      	b.n	801580a <_dtoa_r+0x9f2>
 8015884:	9a02      	ldr	r2, [sp, #8]
 8015886:	f805 8c01 	strb.w	r8, [r5, #-1]
 801588a:	eba5 030b 	sub.w	r3, r5, fp
 801588e:	4293      	cmp	r3, r2
 8015890:	d021      	beq.n	80158d6 <_dtoa_r+0xabe>
 8015892:	2300      	movs	r3, #0
 8015894:	220a      	movs	r2, #10
 8015896:	9904      	ldr	r1, [sp, #16]
 8015898:	4620      	mov	r0, r4
 801589a:	f000 fc71 	bl	8016180 <__multadd>
 801589e:	45b1      	cmp	r9, r6
 80158a0:	9004      	str	r0, [sp, #16]
 80158a2:	f04f 0300 	mov.w	r3, #0
 80158a6:	f04f 020a 	mov.w	r2, #10
 80158aa:	4649      	mov	r1, r9
 80158ac:	4620      	mov	r0, r4
 80158ae:	d105      	bne.n	80158bc <_dtoa_r+0xaa4>
 80158b0:	f000 fc66 	bl	8016180 <__multadd>
 80158b4:	4681      	mov	r9, r0
 80158b6:	4606      	mov	r6, r0
 80158b8:	9505      	str	r5, [sp, #20]
 80158ba:	e776      	b.n	80157aa <_dtoa_r+0x992>
 80158bc:	f000 fc60 	bl	8016180 <__multadd>
 80158c0:	4631      	mov	r1, r6
 80158c2:	4681      	mov	r9, r0
 80158c4:	2300      	movs	r3, #0
 80158c6:	220a      	movs	r2, #10
 80158c8:	4620      	mov	r0, r4
 80158ca:	f000 fc59 	bl	8016180 <__multadd>
 80158ce:	4606      	mov	r6, r0
 80158d0:	e7f2      	b.n	80158b8 <_dtoa_r+0xaa0>
 80158d2:	f04f 0900 	mov.w	r9, #0
 80158d6:	2201      	movs	r2, #1
 80158d8:	9904      	ldr	r1, [sp, #16]
 80158da:	4620      	mov	r0, r4
 80158dc:	f000 fe04 	bl	80164e8 <__lshift>
 80158e0:	4639      	mov	r1, r7
 80158e2:	9004      	str	r0, [sp, #16]
 80158e4:	f000 fe54 	bl	8016590 <__mcmp>
 80158e8:	2800      	cmp	r0, #0
 80158ea:	dcb6      	bgt.n	801585a <_dtoa_r+0xa42>
 80158ec:	d102      	bne.n	80158f4 <_dtoa_r+0xadc>
 80158ee:	f018 0f01 	tst.w	r8, #1
 80158f2:	d1b2      	bne.n	801585a <_dtoa_r+0xa42>
 80158f4:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80158f8:	2b30      	cmp	r3, #48	; 0x30
 80158fa:	f105 32ff 	add.w	r2, r5, #4294967295
 80158fe:	f47f af0a 	bne.w	8015716 <_dtoa_r+0x8fe>
 8015902:	4615      	mov	r5, r2
 8015904:	e7f6      	b.n	80158f4 <_dtoa_r+0xadc>
 8015906:	4593      	cmp	fp, r2
 8015908:	d105      	bne.n	8015916 <_dtoa_r+0xafe>
 801590a:	2331      	movs	r3, #49	; 0x31
 801590c:	f10a 0a01 	add.w	sl, sl, #1
 8015910:	f88b 3000 	strb.w	r3, [fp]
 8015914:	e6ff      	b.n	8015716 <_dtoa_r+0x8fe>
 8015916:	4615      	mov	r5, r2
 8015918:	e79f      	b.n	801585a <_dtoa_r+0xa42>
 801591a:	f8df b064 	ldr.w	fp, [pc, #100]	; 8015980 <_dtoa_r+0xb68>
 801591e:	e007      	b.n	8015930 <_dtoa_r+0xb18>
 8015920:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8015922:	f8df b060 	ldr.w	fp, [pc, #96]	; 8015984 <_dtoa_r+0xb6c>
 8015926:	b11b      	cbz	r3, 8015930 <_dtoa_r+0xb18>
 8015928:	f10b 0308 	add.w	r3, fp, #8
 801592c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 801592e:	6013      	str	r3, [r2, #0]
 8015930:	4658      	mov	r0, fp
 8015932:	b017      	add	sp, #92	; 0x5c
 8015934:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015938:	9b06      	ldr	r3, [sp, #24]
 801593a:	2b01      	cmp	r3, #1
 801593c:	f77f ae35 	ble.w	80155aa <_dtoa_r+0x792>
 8015940:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8015942:	9307      	str	r3, [sp, #28]
 8015944:	e649      	b.n	80155da <_dtoa_r+0x7c2>
 8015946:	9b02      	ldr	r3, [sp, #8]
 8015948:	2b00      	cmp	r3, #0
 801594a:	dc03      	bgt.n	8015954 <_dtoa_r+0xb3c>
 801594c:	9b06      	ldr	r3, [sp, #24]
 801594e:	2b02      	cmp	r3, #2
 8015950:	f73f aecc 	bgt.w	80156ec <_dtoa_r+0x8d4>
 8015954:	465d      	mov	r5, fp
 8015956:	4639      	mov	r1, r7
 8015958:	9804      	ldr	r0, [sp, #16]
 801595a:	f7ff f9d1 	bl	8014d00 <quorem>
 801595e:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8015962:	f805 8b01 	strb.w	r8, [r5], #1
 8015966:	9a02      	ldr	r2, [sp, #8]
 8015968:	eba5 030b 	sub.w	r3, r5, fp
 801596c:	429a      	cmp	r2, r3
 801596e:	ddb0      	ble.n	80158d2 <_dtoa_r+0xaba>
 8015970:	2300      	movs	r3, #0
 8015972:	220a      	movs	r2, #10
 8015974:	9904      	ldr	r1, [sp, #16]
 8015976:	4620      	mov	r0, r4
 8015978:	f000 fc02 	bl	8016180 <__multadd>
 801597c:	9004      	str	r0, [sp, #16]
 801597e:	e7ea      	b.n	8015956 <_dtoa_r+0xb3e>
 8015980:	0801713e 	.word	0x0801713e
 8015984:	08017198 	.word	0x08017198

08015988 <_fstat_r>:
 8015988:	b538      	push	{r3, r4, r5, lr}
 801598a:	4c07      	ldr	r4, [pc, #28]	; (80159a8 <_fstat_r+0x20>)
 801598c:	2300      	movs	r3, #0
 801598e:	4605      	mov	r5, r0
 8015990:	4608      	mov	r0, r1
 8015992:	4611      	mov	r1, r2
 8015994:	6023      	str	r3, [r4, #0]
 8015996:	f7f8 f967 	bl	800dc68 <_fstat>
 801599a:	1c43      	adds	r3, r0, #1
 801599c:	d102      	bne.n	80159a4 <_fstat_r+0x1c>
 801599e:	6823      	ldr	r3, [r4, #0]
 80159a0:	b103      	cbz	r3, 80159a4 <_fstat_r+0x1c>
 80159a2:	602b      	str	r3, [r5, #0]
 80159a4:	bd38      	pop	{r3, r4, r5, pc}
 80159a6:	bf00      	nop
 80159a8:	20002044 	.word	0x20002044

080159ac <rshift>:
 80159ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 80159ae:	6906      	ldr	r6, [r0, #16]
 80159b0:	114b      	asrs	r3, r1, #5
 80159b2:	429e      	cmp	r6, r3
 80159b4:	f100 0414 	add.w	r4, r0, #20
 80159b8:	dd30      	ble.n	8015a1c <rshift+0x70>
 80159ba:	f011 011f 	ands.w	r1, r1, #31
 80159be:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 80159c2:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 80159c6:	d108      	bne.n	80159da <rshift+0x2e>
 80159c8:	4621      	mov	r1, r4
 80159ca:	42b2      	cmp	r2, r6
 80159cc:	460b      	mov	r3, r1
 80159ce:	d211      	bcs.n	80159f4 <rshift+0x48>
 80159d0:	f852 3b04 	ldr.w	r3, [r2], #4
 80159d4:	f841 3b04 	str.w	r3, [r1], #4
 80159d8:	e7f7      	b.n	80159ca <rshift+0x1e>
 80159da:	f854 5023 	ldr.w	r5, [r4, r3, lsl #2]
 80159de:	f1c1 0c20 	rsb	ip, r1, #32
 80159e2:	40cd      	lsrs	r5, r1
 80159e4:	3204      	adds	r2, #4
 80159e6:	4623      	mov	r3, r4
 80159e8:	42b2      	cmp	r2, r6
 80159ea:	4617      	mov	r7, r2
 80159ec:	d30c      	bcc.n	8015a08 <rshift+0x5c>
 80159ee:	601d      	str	r5, [r3, #0]
 80159f0:	b105      	cbz	r5, 80159f4 <rshift+0x48>
 80159f2:	3304      	adds	r3, #4
 80159f4:	1b1a      	subs	r2, r3, r4
 80159f6:	42a3      	cmp	r3, r4
 80159f8:	ea4f 02a2 	mov.w	r2, r2, asr #2
 80159fc:	bf08      	it	eq
 80159fe:	2300      	moveq	r3, #0
 8015a00:	6102      	str	r2, [r0, #16]
 8015a02:	bf08      	it	eq
 8015a04:	6143      	streq	r3, [r0, #20]
 8015a06:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015a08:	683f      	ldr	r7, [r7, #0]
 8015a0a:	fa07 f70c 	lsl.w	r7, r7, ip
 8015a0e:	433d      	orrs	r5, r7
 8015a10:	f843 5b04 	str.w	r5, [r3], #4
 8015a14:	f852 5b04 	ldr.w	r5, [r2], #4
 8015a18:	40cd      	lsrs	r5, r1
 8015a1a:	e7e5      	b.n	80159e8 <rshift+0x3c>
 8015a1c:	4623      	mov	r3, r4
 8015a1e:	e7e9      	b.n	80159f4 <rshift+0x48>

08015a20 <__hexdig_fun>:
 8015a20:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8015a24:	2b09      	cmp	r3, #9
 8015a26:	d802      	bhi.n	8015a2e <__hexdig_fun+0xe>
 8015a28:	3820      	subs	r0, #32
 8015a2a:	b2c0      	uxtb	r0, r0
 8015a2c:	4770      	bx	lr
 8015a2e:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8015a32:	2b05      	cmp	r3, #5
 8015a34:	d801      	bhi.n	8015a3a <__hexdig_fun+0x1a>
 8015a36:	3847      	subs	r0, #71	; 0x47
 8015a38:	e7f7      	b.n	8015a2a <__hexdig_fun+0xa>
 8015a3a:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8015a3e:	2b05      	cmp	r3, #5
 8015a40:	d801      	bhi.n	8015a46 <__hexdig_fun+0x26>
 8015a42:	3827      	subs	r0, #39	; 0x27
 8015a44:	e7f1      	b.n	8015a2a <__hexdig_fun+0xa>
 8015a46:	2000      	movs	r0, #0
 8015a48:	4770      	bx	lr

08015a4a <__gethex>:
 8015a4a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015a4e:	b08b      	sub	sp, #44	; 0x2c
 8015a50:	468a      	mov	sl, r1
 8015a52:	9002      	str	r0, [sp, #8]
 8015a54:	9816      	ldr	r0, [sp, #88]	; 0x58
 8015a56:	9306      	str	r3, [sp, #24]
 8015a58:	4690      	mov	r8, r2
 8015a5a:	f000 faef 	bl	801603c <__localeconv_l>
 8015a5e:	6803      	ldr	r3, [r0, #0]
 8015a60:	9303      	str	r3, [sp, #12]
 8015a62:	4618      	mov	r0, r3
 8015a64:	f7f2 faec 	bl	8008040 <strlen>
 8015a68:	9b03      	ldr	r3, [sp, #12]
 8015a6a:	9001      	str	r0, [sp, #4]
 8015a6c:	4403      	add	r3, r0
 8015a6e:	f04f 0b00 	mov.w	fp, #0
 8015a72:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8015a76:	9307      	str	r3, [sp, #28]
 8015a78:	f8da 3000 	ldr.w	r3, [sl]
 8015a7c:	3302      	adds	r3, #2
 8015a7e:	461f      	mov	r7, r3
 8015a80:	f813 0b01 	ldrb.w	r0, [r3], #1
 8015a84:	2830      	cmp	r0, #48	; 0x30
 8015a86:	d06c      	beq.n	8015b62 <__gethex+0x118>
 8015a88:	f7ff ffca 	bl	8015a20 <__hexdig_fun>
 8015a8c:	4604      	mov	r4, r0
 8015a8e:	2800      	cmp	r0, #0
 8015a90:	d16a      	bne.n	8015b68 <__gethex+0x11e>
 8015a92:	9a01      	ldr	r2, [sp, #4]
 8015a94:	9903      	ldr	r1, [sp, #12]
 8015a96:	4638      	mov	r0, r7
 8015a98:	f001 f8f4 	bl	8016c84 <strncmp>
 8015a9c:	2800      	cmp	r0, #0
 8015a9e:	d166      	bne.n	8015b6e <__gethex+0x124>
 8015aa0:	9b01      	ldr	r3, [sp, #4]
 8015aa2:	5cf8      	ldrb	r0, [r7, r3]
 8015aa4:	18fe      	adds	r6, r7, r3
 8015aa6:	f7ff ffbb 	bl	8015a20 <__hexdig_fun>
 8015aaa:	2800      	cmp	r0, #0
 8015aac:	d062      	beq.n	8015b74 <__gethex+0x12a>
 8015aae:	4633      	mov	r3, r6
 8015ab0:	7818      	ldrb	r0, [r3, #0]
 8015ab2:	2830      	cmp	r0, #48	; 0x30
 8015ab4:	461f      	mov	r7, r3
 8015ab6:	f103 0301 	add.w	r3, r3, #1
 8015aba:	d0f9      	beq.n	8015ab0 <__gethex+0x66>
 8015abc:	f7ff ffb0 	bl	8015a20 <__hexdig_fun>
 8015ac0:	fab0 f580 	clz	r5, r0
 8015ac4:	096d      	lsrs	r5, r5, #5
 8015ac6:	4634      	mov	r4, r6
 8015ac8:	f04f 0b01 	mov.w	fp, #1
 8015acc:	463a      	mov	r2, r7
 8015ace:	4616      	mov	r6, r2
 8015ad0:	3201      	adds	r2, #1
 8015ad2:	7830      	ldrb	r0, [r6, #0]
 8015ad4:	f7ff ffa4 	bl	8015a20 <__hexdig_fun>
 8015ad8:	2800      	cmp	r0, #0
 8015ada:	d1f8      	bne.n	8015ace <__gethex+0x84>
 8015adc:	9a01      	ldr	r2, [sp, #4]
 8015ade:	9903      	ldr	r1, [sp, #12]
 8015ae0:	4630      	mov	r0, r6
 8015ae2:	f001 f8cf 	bl	8016c84 <strncmp>
 8015ae6:	b950      	cbnz	r0, 8015afe <__gethex+0xb4>
 8015ae8:	b954      	cbnz	r4, 8015b00 <__gethex+0xb6>
 8015aea:	9b01      	ldr	r3, [sp, #4]
 8015aec:	18f4      	adds	r4, r6, r3
 8015aee:	4622      	mov	r2, r4
 8015af0:	4616      	mov	r6, r2
 8015af2:	3201      	adds	r2, #1
 8015af4:	7830      	ldrb	r0, [r6, #0]
 8015af6:	f7ff ff93 	bl	8015a20 <__hexdig_fun>
 8015afa:	2800      	cmp	r0, #0
 8015afc:	d1f8      	bne.n	8015af0 <__gethex+0xa6>
 8015afe:	b10c      	cbz	r4, 8015b04 <__gethex+0xba>
 8015b00:	1ba4      	subs	r4, r4, r6
 8015b02:	00a4      	lsls	r4, r4, #2
 8015b04:	7833      	ldrb	r3, [r6, #0]
 8015b06:	2b50      	cmp	r3, #80	; 0x50
 8015b08:	d001      	beq.n	8015b0e <__gethex+0xc4>
 8015b0a:	2b70      	cmp	r3, #112	; 0x70
 8015b0c:	d140      	bne.n	8015b90 <__gethex+0x146>
 8015b0e:	7873      	ldrb	r3, [r6, #1]
 8015b10:	2b2b      	cmp	r3, #43	; 0x2b
 8015b12:	d031      	beq.n	8015b78 <__gethex+0x12e>
 8015b14:	2b2d      	cmp	r3, #45	; 0x2d
 8015b16:	d033      	beq.n	8015b80 <__gethex+0x136>
 8015b18:	1c71      	adds	r1, r6, #1
 8015b1a:	f04f 0900 	mov.w	r9, #0
 8015b1e:	7808      	ldrb	r0, [r1, #0]
 8015b20:	f7ff ff7e 	bl	8015a20 <__hexdig_fun>
 8015b24:	1e43      	subs	r3, r0, #1
 8015b26:	b2db      	uxtb	r3, r3
 8015b28:	2b18      	cmp	r3, #24
 8015b2a:	d831      	bhi.n	8015b90 <__gethex+0x146>
 8015b2c:	f1a0 0210 	sub.w	r2, r0, #16
 8015b30:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8015b34:	f7ff ff74 	bl	8015a20 <__hexdig_fun>
 8015b38:	1e43      	subs	r3, r0, #1
 8015b3a:	b2db      	uxtb	r3, r3
 8015b3c:	2b18      	cmp	r3, #24
 8015b3e:	d922      	bls.n	8015b86 <__gethex+0x13c>
 8015b40:	f1b9 0f00 	cmp.w	r9, #0
 8015b44:	d000      	beq.n	8015b48 <__gethex+0xfe>
 8015b46:	4252      	negs	r2, r2
 8015b48:	4414      	add	r4, r2
 8015b4a:	f8ca 1000 	str.w	r1, [sl]
 8015b4e:	b30d      	cbz	r5, 8015b94 <__gethex+0x14a>
 8015b50:	f1bb 0f00 	cmp.w	fp, #0
 8015b54:	bf0c      	ite	eq
 8015b56:	2706      	moveq	r7, #6
 8015b58:	2700      	movne	r7, #0
 8015b5a:	4638      	mov	r0, r7
 8015b5c:	b00b      	add	sp, #44	; 0x2c
 8015b5e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015b62:	f10b 0b01 	add.w	fp, fp, #1
 8015b66:	e78a      	b.n	8015a7e <__gethex+0x34>
 8015b68:	2500      	movs	r5, #0
 8015b6a:	462c      	mov	r4, r5
 8015b6c:	e7ae      	b.n	8015acc <__gethex+0x82>
 8015b6e:	463e      	mov	r6, r7
 8015b70:	2501      	movs	r5, #1
 8015b72:	e7c7      	b.n	8015b04 <__gethex+0xba>
 8015b74:	4604      	mov	r4, r0
 8015b76:	e7fb      	b.n	8015b70 <__gethex+0x126>
 8015b78:	f04f 0900 	mov.w	r9, #0
 8015b7c:	1cb1      	adds	r1, r6, #2
 8015b7e:	e7ce      	b.n	8015b1e <__gethex+0xd4>
 8015b80:	f04f 0901 	mov.w	r9, #1
 8015b84:	e7fa      	b.n	8015b7c <__gethex+0x132>
 8015b86:	230a      	movs	r3, #10
 8015b88:	fb03 0202 	mla	r2, r3, r2, r0
 8015b8c:	3a10      	subs	r2, #16
 8015b8e:	e7cf      	b.n	8015b30 <__gethex+0xe6>
 8015b90:	4631      	mov	r1, r6
 8015b92:	e7da      	b.n	8015b4a <__gethex+0x100>
 8015b94:	1bf3      	subs	r3, r6, r7
 8015b96:	3b01      	subs	r3, #1
 8015b98:	4629      	mov	r1, r5
 8015b9a:	2b07      	cmp	r3, #7
 8015b9c:	dc49      	bgt.n	8015c32 <__gethex+0x1e8>
 8015b9e:	9802      	ldr	r0, [sp, #8]
 8015ba0:	f000 faa3 	bl	80160ea <_Balloc>
 8015ba4:	9b01      	ldr	r3, [sp, #4]
 8015ba6:	f100 0914 	add.w	r9, r0, #20
 8015baa:	f04f 0b00 	mov.w	fp, #0
 8015bae:	f1c3 0301 	rsb	r3, r3, #1
 8015bb2:	4605      	mov	r5, r0
 8015bb4:	f8cd 9010 	str.w	r9, [sp, #16]
 8015bb8:	46da      	mov	sl, fp
 8015bba:	9308      	str	r3, [sp, #32]
 8015bbc:	42b7      	cmp	r7, r6
 8015bbe:	d33b      	bcc.n	8015c38 <__gethex+0x1ee>
 8015bc0:	9804      	ldr	r0, [sp, #16]
 8015bc2:	f840 ab04 	str.w	sl, [r0], #4
 8015bc6:	eba0 0009 	sub.w	r0, r0, r9
 8015bca:	1080      	asrs	r0, r0, #2
 8015bcc:	6128      	str	r0, [r5, #16]
 8015bce:	0147      	lsls	r7, r0, #5
 8015bd0:	4650      	mov	r0, sl
 8015bd2:	f000 fb4e 	bl	8016272 <__hi0bits>
 8015bd6:	f8d8 6000 	ldr.w	r6, [r8]
 8015bda:	1a3f      	subs	r7, r7, r0
 8015bdc:	42b7      	cmp	r7, r6
 8015bde:	dd64      	ble.n	8015caa <__gethex+0x260>
 8015be0:	1bbf      	subs	r7, r7, r6
 8015be2:	4639      	mov	r1, r7
 8015be4:	4628      	mov	r0, r5
 8015be6:	f000 fe5d 	bl	80168a4 <__any_on>
 8015bea:	4682      	mov	sl, r0
 8015bec:	b178      	cbz	r0, 8015c0e <__gethex+0x1c4>
 8015bee:	1e7b      	subs	r3, r7, #1
 8015bf0:	1159      	asrs	r1, r3, #5
 8015bf2:	f003 021f 	and.w	r2, r3, #31
 8015bf6:	f04f 0a01 	mov.w	sl, #1
 8015bfa:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8015bfe:	fa0a f202 	lsl.w	r2, sl, r2
 8015c02:	420a      	tst	r2, r1
 8015c04:	d003      	beq.n	8015c0e <__gethex+0x1c4>
 8015c06:	4553      	cmp	r3, sl
 8015c08:	dc46      	bgt.n	8015c98 <__gethex+0x24e>
 8015c0a:	f04f 0a02 	mov.w	sl, #2
 8015c0e:	4639      	mov	r1, r7
 8015c10:	4628      	mov	r0, r5
 8015c12:	f7ff fecb 	bl	80159ac <rshift>
 8015c16:	443c      	add	r4, r7
 8015c18:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8015c1c:	42a3      	cmp	r3, r4
 8015c1e:	da52      	bge.n	8015cc6 <__gethex+0x27c>
 8015c20:	4629      	mov	r1, r5
 8015c22:	9802      	ldr	r0, [sp, #8]
 8015c24:	f000 fa95 	bl	8016152 <_Bfree>
 8015c28:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8015c2a:	2300      	movs	r3, #0
 8015c2c:	6013      	str	r3, [r2, #0]
 8015c2e:	27a3      	movs	r7, #163	; 0xa3
 8015c30:	e793      	b.n	8015b5a <__gethex+0x110>
 8015c32:	3101      	adds	r1, #1
 8015c34:	105b      	asrs	r3, r3, #1
 8015c36:	e7b0      	b.n	8015b9a <__gethex+0x150>
 8015c38:	1e73      	subs	r3, r6, #1
 8015c3a:	9305      	str	r3, [sp, #20]
 8015c3c:	9a07      	ldr	r2, [sp, #28]
 8015c3e:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8015c42:	4293      	cmp	r3, r2
 8015c44:	d018      	beq.n	8015c78 <__gethex+0x22e>
 8015c46:	f1bb 0f20 	cmp.w	fp, #32
 8015c4a:	d107      	bne.n	8015c5c <__gethex+0x212>
 8015c4c:	9b04      	ldr	r3, [sp, #16]
 8015c4e:	f8c3 a000 	str.w	sl, [r3]
 8015c52:	3304      	adds	r3, #4
 8015c54:	f04f 0a00 	mov.w	sl, #0
 8015c58:	9304      	str	r3, [sp, #16]
 8015c5a:	46d3      	mov	fp, sl
 8015c5c:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8015c60:	f7ff fede 	bl	8015a20 <__hexdig_fun>
 8015c64:	f000 000f 	and.w	r0, r0, #15
 8015c68:	fa00 f00b 	lsl.w	r0, r0, fp
 8015c6c:	ea4a 0a00 	orr.w	sl, sl, r0
 8015c70:	f10b 0b04 	add.w	fp, fp, #4
 8015c74:	9b05      	ldr	r3, [sp, #20]
 8015c76:	e00d      	b.n	8015c94 <__gethex+0x24a>
 8015c78:	9b05      	ldr	r3, [sp, #20]
 8015c7a:	9a08      	ldr	r2, [sp, #32]
 8015c7c:	4413      	add	r3, r2
 8015c7e:	42bb      	cmp	r3, r7
 8015c80:	d3e1      	bcc.n	8015c46 <__gethex+0x1fc>
 8015c82:	4618      	mov	r0, r3
 8015c84:	9a01      	ldr	r2, [sp, #4]
 8015c86:	9903      	ldr	r1, [sp, #12]
 8015c88:	9309      	str	r3, [sp, #36]	; 0x24
 8015c8a:	f000 fffb 	bl	8016c84 <strncmp>
 8015c8e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015c90:	2800      	cmp	r0, #0
 8015c92:	d1d8      	bne.n	8015c46 <__gethex+0x1fc>
 8015c94:	461e      	mov	r6, r3
 8015c96:	e791      	b.n	8015bbc <__gethex+0x172>
 8015c98:	1eb9      	subs	r1, r7, #2
 8015c9a:	4628      	mov	r0, r5
 8015c9c:	f000 fe02 	bl	80168a4 <__any_on>
 8015ca0:	2800      	cmp	r0, #0
 8015ca2:	d0b2      	beq.n	8015c0a <__gethex+0x1c0>
 8015ca4:	f04f 0a03 	mov.w	sl, #3
 8015ca8:	e7b1      	b.n	8015c0e <__gethex+0x1c4>
 8015caa:	da09      	bge.n	8015cc0 <__gethex+0x276>
 8015cac:	1bf7      	subs	r7, r6, r7
 8015cae:	4629      	mov	r1, r5
 8015cb0:	463a      	mov	r2, r7
 8015cb2:	9802      	ldr	r0, [sp, #8]
 8015cb4:	f000 fc18 	bl	80164e8 <__lshift>
 8015cb8:	1be4      	subs	r4, r4, r7
 8015cba:	4605      	mov	r5, r0
 8015cbc:	f100 0914 	add.w	r9, r0, #20
 8015cc0:	f04f 0a00 	mov.w	sl, #0
 8015cc4:	e7a8      	b.n	8015c18 <__gethex+0x1ce>
 8015cc6:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8015cca:	42a0      	cmp	r0, r4
 8015ccc:	dd6a      	ble.n	8015da4 <__gethex+0x35a>
 8015cce:	1b04      	subs	r4, r0, r4
 8015cd0:	42a6      	cmp	r6, r4
 8015cd2:	dc2e      	bgt.n	8015d32 <__gethex+0x2e8>
 8015cd4:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8015cd8:	2b02      	cmp	r3, #2
 8015cda:	d022      	beq.n	8015d22 <__gethex+0x2d8>
 8015cdc:	2b03      	cmp	r3, #3
 8015cde:	d024      	beq.n	8015d2a <__gethex+0x2e0>
 8015ce0:	2b01      	cmp	r3, #1
 8015ce2:	d115      	bne.n	8015d10 <__gethex+0x2c6>
 8015ce4:	42a6      	cmp	r6, r4
 8015ce6:	d113      	bne.n	8015d10 <__gethex+0x2c6>
 8015ce8:	2e01      	cmp	r6, #1
 8015cea:	dc0b      	bgt.n	8015d04 <__gethex+0x2ba>
 8015cec:	9a06      	ldr	r2, [sp, #24]
 8015cee:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8015cf2:	6013      	str	r3, [r2, #0]
 8015cf4:	2301      	movs	r3, #1
 8015cf6:	612b      	str	r3, [r5, #16]
 8015cf8:	f8c9 3000 	str.w	r3, [r9]
 8015cfc:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8015cfe:	2762      	movs	r7, #98	; 0x62
 8015d00:	601d      	str	r5, [r3, #0]
 8015d02:	e72a      	b.n	8015b5a <__gethex+0x110>
 8015d04:	1e71      	subs	r1, r6, #1
 8015d06:	4628      	mov	r0, r5
 8015d08:	f000 fdcc 	bl	80168a4 <__any_on>
 8015d0c:	2800      	cmp	r0, #0
 8015d0e:	d1ed      	bne.n	8015cec <__gethex+0x2a2>
 8015d10:	4629      	mov	r1, r5
 8015d12:	9802      	ldr	r0, [sp, #8]
 8015d14:	f000 fa1d 	bl	8016152 <_Bfree>
 8015d18:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8015d1a:	2300      	movs	r3, #0
 8015d1c:	6013      	str	r3, [r2, #0]
 8015d1e:	2750      	movs	r7, #80	; 0x50
 8015d20:	e71b      	b.n	8015b5a <__gethex+0x110>
 8015d22:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8015d24:	2b00      	cmp	r3, #0
 8015d26:	d0e1      	beq.n	8015cec <__gethex+0x2a2>
 8015d28:	e7f2      	b.n	8015d10 <__gethex+0x2c6>
 8015d2a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8015d2c:	2b00      	cmp	r3, #0
 8015d2e:	d1dd      	bne.n	8015cec <__gethex+0x2a2>
 8015d30:	e7ee      	b.n	8015d10 <__gethex+0x2c6>
 8015d32:	1e67      	subs	r7, r4, #1
 8015d34:	f1ba 0f00 	cmp.w	sl, #0
 8015d38:	d131      	bne.n	8015d9e <__gethex+0x354>
 8015d3a:	b127      	cbz	r7, 8015d46 <__gethex+0x2fc>
 8015d3c:	4639      	mov	r1, r7
 8015d3e:	4628      	mov	r0, r5
 8015d40:	f000 fdb0 	bl	80168a4 <__any_on>
 8015d44:	4682      	mov	sl, r0
 8015d46:	117a      	asrs	r2, r7, #5
 8015d48:	2301      	movs	r3, #1
 8015d4a:	f007 071f 	and.w	r7, r7, #31
 8015d4e:	fa03 f707 	lsl.w	r7, r3, r7
 8015d52:	f859 3022 	ldr.w	r3, [r9, r2, lsl #2]
 8015d56:	4621      	mov	r1, r4
 8015d58:	421f      	tst	r7, r3
 8015d5a:	4628      	mov	r0, r5
 8015d5c:	bf18      	it	ne
 8015d5e:	f04a 0a02 	orrne.w	sl, sl, #2
 8015d62:	1b36      	subs	r6, r6, r4
 8015d64:	f7ff fe22 	bl	80159ac <rshift>
 8015d68:	f8d8 4004 	ldr.w	r4, [r8, #4]
 8015d6c:	2702      	movs	r7, #2
 8015d6e:	f1ba 0f00 	cmp.w	sl, #0
 8015d72:	d048      	beq.n	8015e06 <__gethex+0x3bc>
 8015d74:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8015d78:	2b02      	cmp	r3, #2
 8015d7a:	d015      	beq.n	8015da8 <__gethex+0x35e>
 8015d7c:	2b03      	cmp	r3, #3
 8015d7e:	d017      	beq.n	8015db0 <__gethex+0x366>
 8015d80:	2b01      	cmp	r3, #1
 8015d82:	d109      	bne.n	8015d98 <__gethex+0x34e>
 8015d84:	f01a 0f02 	tst.w	sl, #2
 8015d88:	d006      	beq.n	8015d98 <__gethex+0x34e>
 8015d8a:	f8d9 3000 	ldr.w	r3, [r9]
 8015d8e:	ea4a 0a03 	orr.w	sl, sl, r3
 8015d92:	f01a 0f01 	tst.w	sl, #1
 8015d96:	d10e      	bne.n	8015db6 <__gethex+0x36c>
 8015d98:	f047 0710 	orr.w	r7, r7, #16
 8015d9c:	e033      	b.n	8015e06 <__gethex+0x3bc>
 8015d9e:	f04f 0a01 	mov.w	sl, #1
 8015da2:	e7d0      	b.n	8015d46 <__gethex+0x2fc>
 8015da4:	2701      	movs	r7, #1
 8015da6:	e7e2      	b.n	8015d6e <__gethex+0x324>
 8015da8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8015daa:	f1c3 0301 	rsb	r3, r3, #1
 8015dae:	9315      	str	r3, [sp, #84]	; 0x54
 8015db0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8015db2:	2b00      	cmp	r3, #0
 8015db4:	d0f0      	beq.n	8015d98 <__gethex+0x34e>
 8015db6:	f8d5 9010 	ldr.w	r9, [r5, #16]
 8015dba:	f105 0314 	add.w	r3, r5, #20
 8015dbe:	ea4f 0a89 	mov.w	sl, r9, lsl #2
 8015dc2:	eb03 010a 	add.w	r1, r3, sl
 8015dc6:	f04f 0c00 	mov.w	ip, #0
 8015dca:	4618      	mov	r0, r3
 8015dcc:	f853 2b04 	ldr.w	r2, [r3], #4
 8015dd0:	f1b2 3fff 	cmp.w	r2, #4294967295
 8015dd4:	d01c      	beq.n	8015e10 <__gethex+0x3c6>
 8015dd6:	3201      	adds	r2, #1
 8015dd8:	6002      	str	r2, [r0, #0]
 8015dda:	2f02      	cmp	r7, #2
 8015ddc:	f105 0314 	add.w	r3, r5, #20
 8015de0:	d138      	bne.n	8015e54 <__gethex+0x40a>
 8015de2:	f8d8 2000 	ldr.w	r2, [r8]
 8015de6:	3a01      	subs	r2, #1
 8015de8:	42b2      	cmp	r2, r6
 8015dea:	d10a      	bne.n	8015e02 <__gethex+0x3b8>
 8015dec:	1171      	asrs	r1, r6, #5
 8015dee:	2201      	movs	r2, #1
 8015df0:	f006 061f 	and.w	r6, r6, #31
 8015df4:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8015df8:	fa02 f606 	lsl.w	r6, r2, r6
 8015dfc:	421e      	tst	r6, r3
 8015dfe:	bf18      	it	ne
 8015e00:	4617      	movne	r7, r2
 8015e02:	f047 0720 	orr.w	r7, r7, #32
 8015e06:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8015e08:	601d      	str	r5, [r3, #0]
 8015e0a:	9b06      	ldr	r3, [sp, #24]
 8015e0c:	601c      	str	r4, [r3, #0]
 8015e0e:	e6a4      	b.n	8015b5a <__gethex+0x110>
 8015e10:	4299      	cmp	r1, r3
 8015e12:	f843 cc04 	str.w	ip, [r3, #-4]
 8015e16:	d8d8      	bhi.n	8015dca <__gethex+0x380>
 8015e18:	68ab      	ldr	r3, [r5, #8]
 8015e1a:	4599      	cmp	r9, r3
 8015e1c:	db12      	blt.n	8015e44 <__gethex+0x3fa>
 8015e1e:	6869      	ldr	r1, [r5, #4]
 8015e20:	9802      	ldr	r0, [sp, #8]
 8015e22:	3101      	adds	r1, #1
 8015e24:	f000 f961 	bl	80160ea <_Balloc>
 8015e28:	692a      	ldr	r2, [r5, #16]
 8015e2a:	3202      	adds	r2, #2
 8015e2c:	f105 010c 	add.w	r1, r5, #12
 8015e30:	4683      	mov	fp, r0
 8015e32:	0092      	lsls	r2, r2, #2
 8015e34:	300c      	adds	r0, #12
 8015e36:	f7fb ff91 	bl	8011d5c <memcpy>
 8015e3a:	4629      	mov	r1, r5
 8015e3c:	9802      	ldr	r0, [sp, #8]
 8015e3e:	f000 f988 	bl	8016152 <_Bfree>
 8015e42:	465d      	mov	r5, fp
 8015e44:	692b      	ldr	r3, [r5, #16]
 8015e46:	1c5a      	adds	r2, r3, #1
 8015e48:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8015e4c:	612a      	str	r2, [r5, #16]
 8015e4e:	2201      	movs	r2, #1
 8015e50:	615a      	str	r2, [r3, #20]
 8015e52:	e7c2      	b.n	8015dda <__gethex+0x390>
 8015e54:	692a      	ldr	r2, [r5, #16]
 8015e56:	454a      	cmp	r2, r9
 8015e58:	dd0b      	ble.n	8015e72 <__gethex+0x428>
 8015e5a:	2101      	movs	r1, #1
 8015e5c:	4628      	mov	r0, r5
 8015e5e:	f7ff fda5 	bl	80159ac <rshift>
 8015e62:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8015e66:	3401      	adds	r4, #1
 8015e68:	42a3      	cmp	r3, r4
 8015e6a:	f6ff aed9 	blt.w	8015c20 <__gethex+0x1d6>
 8015e6e:	2701      	movs	r7, #1
 8015e70:	e7c7      	b.n	8015e02 <__gethex+0x3b8>
 8015e72:	f016 061f 	ands.w	r6, r6, #31
 8015e76:	d0fa      	beq.n	8015e6e <__gethex+0x424>
 8015e78:	449a      	add	sl, r3
 8015e7a:	f1c6 0620 	rsb	r6, r6, #32
 8015e7e:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 8015e82:	f000 f9f6 	bl	8016272 <__hi0bits>
 8015e86:	42b0      	cmp	r0, r6
 8015e88:	dbe7      	blt.n	8015e5a <__gethex+0x410>
 8015e8a:	e7f0      	b.n	8015e6e <__gethex+0x424>

08015e8c <L_shift>:
 8015e8c:	f1c2 0208 	rsb	r2, r2, #8
 8015e90:	0092      	lsls	r2, r2, #2
 8015e92:	b570      	push	{r4, r5, r6, lr}
 8015e94:	f1c2 0620 	rsb	r6, r2, #32
 8015e98:	6843      	ldr	r3, [r0, #4]
 8015e9a:	6804      	ldr	r4, [r0, #0]
 8015e9c:	fa03 f506 	lsl.w	r5, r3, r6
 8015ea0:	432c      	orrs	r4, r5
 8015ea2:	40d3      	lsrs	r3, r2
 8015ea4:	6004      	str	r4, [r0, #0]
 8015ea6:	f840 3f04 	str.w	r3, [r0, #4]!
 8015eaa:	4288      	cmp	r0, r1
 8015eac:	d3f4      	bcc.n	8015e98 <L_shift+0xc>
 8015eae:	bd70      	pop	{r4, r5, r6, pc}

08015eb0 <__match>:
 8015eb0:	b530      	push	{r4, r5, lr}
 8015eb2:	6803      	ldr	r3, [r0, #0]
 8015eb4:	3301      	adds	r3, #1
 8015eb6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8015eba:	b914      	cbnz	r4, 8015ec2 <__match+0x12>
 8015ebc:	6003      	str	r3, [r0, #0]
 8015ebe:	2001      	movs	r0, #1
 8015ec0:	bd30      	pop	{r4, r5, pc}
 8015ec2:	f813 2b01 	ldrb.w	r2, [r3], #1
 8015ec6:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8015eca:	2d19      	cmp	r5, #25
 8015ecc:	bf98      	it	ls
 8015ece:	3220      	addls	r2, #32
 8015ed0:	42a2      	cmp	r2, r4
 8015ed2:	d0f0      	beq.n	8015eb6 <__match+0x6>
 8015ed4:	2000      	movs	r0, #0
 8015ed6:	e7f3      	b.n	8015ec0 <__match+0x10>

08015ed8 <__hexnan>:
 8015ed8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015edc:	680b      	ldr	r3, [r1, #0]
 8015ede:	6801      	ldr	r1, [r0, #0]
 8015ee0:	115f      	asrs	r7, r3, #5
 8015ee2:	eb02 0787 	add.w	r7, r2, r7, lsl #2
 8015ee6:	f013 031f 	ands.w	r3, r3, #31
 8015eea:	b087      	sub	sp, #28
 8015eec:	bf18      	it	ne
 8015eee:	3704      	addne	r7, #4
 8015ef0:	2500      	movs	r5, #0
 8015ef2:	1f3e      	subs	r6, r7, #4
 8015ef4:	4682      	mov	sl, r0
 8015ef6:	4690      	mov	r8, r2
 8015ef8:	9301      	str	r3, [sp, #4]
 8015efa:	f847 5c04 	str.w	r5, [r7, #-4]
 8015efe:	46b1      	mov	r9, r6
 8015f00:	4634      	mov	r4, r6
 8015f02:	9502      	str	r5, [sp, #8]
 8015f04:	46ab      	mov	fp, r5
 8015f06:	784a      	ldrb	r2, [r1, #1]
 8015f08:	1c4b      	adds	r3, r1, #1
 8015f0a:	9303      	str	r3, [sp, #12]
 8015f0c:	b342      	cbz	r2, 8015f60 <__hexnan+0x88>
 8015f0e:	4610      	mov	r0, r2
 8015f10:	9105      	str	r1, [sp, #20]
 8015f12:	9204      	str	r2, [sp, #16]
 8015f14:	f7ff fd84 	bl	8015a20 <__hexdig_fun>
 8015f18:	2800      	cmp	r0, #0
 8015f1a:	d143      	bne.n	8015fa4 <__hexnan+0xcc>
 8015f1c:	9a04      	ldr	r2, [sp, #16]
 8015f1e:	9905      	ldr	r1, [sp, #20]
 8015f20:	2a20      	cmp	r2, #32
 8015f22:	d818      	bhi.n	8015f56 <__hexnan+0x7e>
 8015f24:	9b02      	ldr	r3, [sp, #8]
 8015f26:	459b      	cmp	fp, r3
 8015f28:	dd13      	ble.n	8015f52 <__hexnan+0x7a>
 8015f2a:	454c      	cmp	r4, r9
 8015f2c:	d206      	bcs.n	8015f3c <__hexnan+0x64>
 8015f2e:	2d07      	cmp	r5, #7
 8015f30:	dc04      	bgt.n	8015f3c <__hexnan+0x64>
 8015f32:	462a      	mov	r2, r5
 8015f34:	4649      	mov	r1, r9
 8015f36:	4620      	mov	r0, r4
 8015f38:	f7ff ffa8 	bl	8015e8c <L_shift>
 8015f3c:	4544      	cmp	r4, r8
 8015f3e:	d944      	bls.n	8015fca <__hexnan+0xf2>
 8015f40:	2300      	movs	r3, #0
 8015f42:	f1a4 0904 	sub.w	r9, r4, #4
 8015f46:	f844 3c04 	str.w	r3, [r4, #-4]
 8015f4a:	f8cd b008 	str.w	fp, [sp, #8]
 8015f4e:	464c      	mov	r4, r9
 8015f50:	461d      	mov	r5, r3
 8015f52:	9903      	ldr	r1, [sp, #12]
 8015f54:	e7d7      	b.n	8015f06 <__hexnan+0x2e>
 8015f56:	2a29      	cmp	r2, #41	; 0x29
 8015f58:	d14a      	bne.n	8015ff0 <__hexnan+0x118>
 8015f5a:	3102      	adds	r1, #2
 8015f5c:	f8ca 1000 	str.w	r1, [sl]
 8015f60:	f1bb 0f00 	cmp.w	fp, #0
 8015f64:	d044      	beq.n	8015ff0 <__hexnan+0x118>
 8015f66:	454c      	cmp	r4, r9
 8015f68:	d206      	bcs.n	8015f78 <__hexnan+0xa0>
 8015f6a:	2d07      	cmp	r5, #7
 8015f6c:	dc04      	bgt.n	8015f78 <__hexnan+0xa0>
 8015f6e:	462a      	mov	r2, r5
 8015f70:	4649      	mov	r1, r9
 8015f72:	4620      	mov	r0, r4
 8015f74:	f7ff ff8a 	bl	8015e8c <L_shift>
 8015f78:	4544      	cmp	r4, r8
 8015f7a:	d928      	bls.n	8015fce <__hexnan+0xf6>
 8015f7c:	4643      	mov	r3, r8
 8015f7e:	f854 2b04 	ldr.w	r2, [r4], #4
 8015f82:	f843 2b04 	str.w	r2, [r3], #4
 8015f86:	42a6      	cmp	r6, r4
 8015f88:	d2f9      	bcs.n	8015f7e <__hexnan+0xa6>
 8015f8a:	2200      	movs	r2, #0
 8015f8c:	f843 2b04 	str.w	r2, [r3], #4
 8015f90:	429e      	cmp	r6, r3
 8015f92:	d2fb      	bcs.n	8015f8c <__hexnan+0xb4>
 8015f94:	6833      	ldr	r3, [r6, #0]
 8015f96:	b91b      	cbnz	r3, 8015fa0 <__hexnan+0xc8>
 8015f98:	4546      	cmp	r6, r8
 8015f9a:	d127      	bne.n	8015fec <__hexnan+0x114>
 8015f9c:	2301      	movs	r3, #1
 8015f9e:	6033      	str	r3, [r6, #0]
 8015fa0:	2005      	movs	r0, #5
 8015fa2:	e026      	b.n	8015ff2 <__hexnan+0x11a>
 8015fa4:	3501      	adds	r5, #1
 8015fa6:	2d08      	cmp	r5, #8
 8015fa8:	f10b 0b01 	add.w	fp, fp, #1
 8015fac:	dd06      	ble.n	8015fbc <__hexnan+0xe4>
 8015fae:	4544      	cmp	r4, r8
 8015fb0:	d9cf      	bls.n	8015f52 <__hexnan+0x7a>
 8015fb2:	2300      	movs	r3, #0
 8015fb4:	f844 3c04 	str.w	r3, [r4, #-4]
 8015fb8:	2501      	movs	r5, #1
 8015fba:	3c04      	subs	r4, #4
 8015fbc:	6822      	ldr	r2, [r4, #0]
 8015fbe:	f000 000f 	and.w	r0, r0, #15
 8015fc2:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8015fc6:	6020      	str	r0, [r4, #0]
 8015fc8:	e7c3      	b.n	8015f52 <__hexnan+0x7a>
 8015fca:	2508      	movs	r5, #8
 8015fcc:	e7c1      	b.n	8015f52 <__hexnan+0x7a>
 8015fce:	9b01      	ldr	r3, [sp, #4]
 8015fd0:	2b00      	cmp	r3, #0
 8015fd2:	d0df      	beq.n	8015f94 <__hexnan+0xbc>
 8015fd4:	f04f 32ff 	mov.w	r2, #4294967295
 8015fd8:	f1c3 0320 	rsb	r3, r3, #32
 8015fdc:	fa22 f303 	lsr.w	r3, r2, r3
 8015fe0:	f857 2c04 	ldr.w	r2, [r7, #-4]
 8015fe4:	401a      	ands	r2, r3
 8015fe6:	f847 2c04 	str.w	r2, [r7, #-4]
 8015fea:	e7d3      	b.n	8015f94 <__hexnan+0xbc>
 8015fec:	3e04      	subs	r6, #4
 8015fee:	e7d1      	b.n	8015f94 <__hexnan+0xbc>
 8015ff0:	2004      	movs	r0, #4
 8015ff2:	b007      	add	sp, #28
 8015ff4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08015ff8 <_isatty_r>:
 8015ff8:	b538      	push	{r3, r4, r5, lr}
 8015ffa:	4c06      	ldr	r4, [pc, #24]	; (8016014 <_isatty_r+0x1c>)
 8015ffc:	2300      	movs	r3, #0
 8015ffe:	4605      	mov	r5, r0
 8016000:	4608      	mov	r0, r1
 8016002:	6023      	str	r3, [r4, #0]
 8016004:	f7f7 fe36 	bl	800dc74 <_isatty>
 8016008:	1c43      	adds	r3, r0, #1
 801600a:	d102      	bne.n	8016012 <_isatty_r+0x1a>
 801600c:	6823      	ldr	r3, [r4, #0]
 801600e:	b103      	cbz	r3, 8016012 <_isatty_r+0x1a>
 8016010:	602b      	str	r3, [r5, #0]
 8016012:	bd38      	pop	{r3, r4, r5, pc}
 8016014:	20002044 	.word	0x20002044

08016018 <__locale_ctype_ptr_l>:
 8016018:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 801601c:	4770      	bx	lr
	...

08016020 <__locale_ctype_ptr>:
 8016020:	4b04      	ldr	r3, [pc, #16]	; (8016034 <__locale_ctype_ptr+0x14>)
 8016022:	4a05      	ldr	r2, [pc, #20]	; (8016038 <__locale_ctype_ptr+0x18>)
 8016024:	681b      	ldr	r3, [r3, #0]
 8016026:	6a1b      	ldr	r3, [r3, #32]
 8016028:	2b00      	cmp	r3, #0
 801602a:	bf08      	it	eq
 801602c:	4613      	moveq	r3, r2
 801602e:	f8d3 00ec 	ldr.w	r0, [r3, #236]	; 0xec
 8016032:	4770      	bx	lr
 8016034:	20000018 	.word	0x20000018
 8016038:	2000007c 	.word	0x2000007c

0801603c <__localeconv_l>:
 801603c:	30f0      	adds	r0, #240	; 0xf0
 801603e:	4770      	bx	lr

08016040 <_localeconv_r>:
 8016040:	4b04      	ldr	r3, [pc, #16]	; (8016054 <_localeconv_r+0x14>)
 8016042:	681b      	ldr	r3, [r3, #0]
 8016044:	6a18      	ldr	r0, [r3, #32]
 8016046:	4b04      	ldr	r3, [pc, #16]	; (8016058 <_localeconv_r+0x18>)
 8016048:	2800      	cmp	r0, #0
 801604a:	bf08      	it	eq
 801604c:	4618      	moveq	r0, r3
 801604e:	30f0      	adds	r0, #240	; 0xf0
 8016050:	4770      	bx	lr
 8016052:	bf00      	nop
 8016054:	20000018 	.word	0x20000018
 8016058:	2000007c 	.word	0x2000007c

0801605c <_lseek_r>:
 801605c:	b538      	push	{r3, r4, r5, lr}
 801605e:	4c07      	ldr	r4, [pc, #28]	; (801607c <_lseek_r+0x20>)
 8016060:	4605      	mov	r5, r0
 8016062:	4608      	mov	r0, r1
 8016064:	4611      	mov	r1, r2
 8016066:	2200      	movs	r2, #0
 8016068:	6022      	str	r2, [r4, #0]
 801606a:	461a      	mov	r2, r3
 801606c:	f7f7 fe04 	bl	800dc78 <_lseek>
 8016070:	1c43      	adds	r3, r0, #1
 8016072:	d102      	bne.n	801607a <_lseek_r+0x1e>
 8016074:	6823      	ldr	r3, [r4, #0]
 8016076:	b103      	cbz	r3, 801607a <_lseek_r+0x1e>
 8016078:	602b      	str	r3, [r5, #0]
 801607a:	bd38      	pop	{r3, r4, r5, pc}
 801607c:	20002044 	.word	0x20002044

08016080 <malloc>:
 8016080:	4b02      	ldr	r3, [pc, #8]	; (801608c <malloc+0xc>)
 8016082:	4601      	mov	r1, r0
 8016084:	6818      	ldr	r0, [r3, #0]
 8016086:	f7fb becb 	b.w	8011e20 <_malloc_r>
 801608a:	bf00      	nop
 801608c:	20000018 	.word	0x20000018

08016090 <__ascii_mbtowc>:
 8016090:	b082      	sub	sp, #8
 8016092:	b901      	cbnz	r1, 8016096 <__ascii_mbtowc+0x6>
 8016094:	a901      	add	r1, sp, #4
 8016096:	b142      	cbz	r2, 80160aa <__ascii_mbtowc+0x1a>
 8016098:	b14b      	cbz	r3, 80160ae <__ascii_mbtowc+0x1e>
 801609a:	7813      	ldrb	r3, [r2, #0]
 801609c:	600b      	str	r3, [r1, #0]
 801609e:	7812      	ldrb	r2, [r2, #0]
 80160a0:	1c10      	adds	r0, r2, #0
 80160a2:	bf18      	it	ne
 80160a4:	2001      	movne	r0, #1
 80160a6:	b002      	add	sp, #8
 80160a8:	4770      	bx	lr
 80160aa:	4610      	mov	r0, r2
 80160ac:	e7fb      	b.n	80160a6 <__ascii_mbtowc+0x16>
 80160ae:	f06f 0001 	mvn.w	r0, #1
 80160b2:	e7f8      	b.n	80160a6 <__ascii_mbtowc+0x16>

080160b4 <memmove>:
 80160b4:	4288      	cmp	r0, r1
 80160b6:	b510      	push	{r4, lr}
 80160b8:	eb01 0302 	add.w	r3, r1, r2
 80160bc:	d807      	bhi.n	80160ce <memmove+0x1a>
 80160be:	1e42      	subs	r2, r0, #1
 80160c0:	4299      	cmp	r1, r3
 80160c2:	d00a      	beq.n	80160da <memmove+0x26>
 80160c4:	f811 4b01 	ldrb.w	r4, [r1], #1
 80160c8:	f802 4f01 	strb.w	r4, [r2, #1]!
 80160cc:	e7f8      	b.n	80160c0 <memmove+0xc>
 80160ce:	4283      	cmp	r3, r0
 80160d0:	d9f5      	bls.n	80160be <memmove+0xa>
 80160d2:	1881      	adds	r1, r0, r2
 80160d4:	1ad2      	subs	r2, r2, r3
 80160d6:	42d3      	cmn	r3, r2
 80160d8:	d100      	bne.n	80160dc <memmove+0x28>
 80160da:	bd10      	pop	{r4, pc}
 80160dc:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80160e0:	f801 4d01 	strb.w	r4, [r1, #-1]!
 80160e4:	e7f7      	b.n	80160d6 <memmove+0x22>

080160e6 <__malloc_lock>:
 80160e6:	4770      	bx	lr

080160e8 <__malloc_unlock>:
 80160e8:	4770      	bx	lr

080160ea <_Balloc>:
 80160ea:	b570      	push	{r4, r5, r6, lr}
 80160ec:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80160ee:	4604      	mov	r4, r0
 80160f0:	460e      	mov	r6, r1
 80160f2:	b93d      	cbnz	r5, 8016104 <_Balloc+0x1a>
 80160f4:	2010      	movs	r0, #16
 80160f6:	f7ff ffc3 	bl	8016080 <malloc>
 80160fa:	6260      	str	r0, [r4, #36]	; 0x24
 80160fc:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8016100:	6005      	str	r5, [r0, #0]
 8016102:	60c5      	str	r5, [r0, #12]
 8016104:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8016106:	68eb      	ldr	r3, [r5, #12]
 8016108:	b183      	cbz	r3, 801612c <_Balloc+0x42>
 801610a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801610c:	68db      	ldr	r3, [r3, #12]
 801610e:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8016112:	b9b8      	cbnz	r0, 8016144 <_Balloc+0x5a>
 8016114:	2101      	movs	r1, #1
 8016116:	fa01 f506 	lsl.w	r5, r1, r6
 801611a:	1d6a      	adds	r2, r5, #5
 801611c:	0092      	lsls	r2, r2, #2
 801611e:	4620      	mov	r0, r4
 8016120:	f000 fbe1 	bl	80168e6 <_calloc_r>
 8016124:	b160      	cbz	r0, 8016140 <_Balloc+0x56>
 8016126:	e9c0 6501 	strd	r6, r5, [r0, #4]
 801612a:	e00e      	b.n	801614a <_Balloc+0x60>
 801612c:	2221      	movs	r2, #33	; 0x21
 801612e:	2104      	movs	r1, #4
 8016130:	4620      	mov	r0, r4
 8016132:	f000 fbd8 	bl	80168e6 <_calloc_r>
 8016136:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8016138:	60e8      	str	r0, [r5, #12]
 801613a:	68db      	ldr	r3, [r3, #12]
 801613c:	2b00      	cmp	r3, #0
 801613e:	d1e4      	bne.n	801610a <_Balloc+0x20>
 8016140:	2000      	movs	r0, #0
 8016142:	bd70      	pop	{r4, r5, r6, pc}
 8016144:	6802      	ldr	r2, [r0, #0]
 8016146:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 801614a:	2300      	movs	r3, #0
 801614c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8016150:	e7f7      	b.n	8016142 <_Balloc+0x58>

08016152 <_Bfree>:
 8016152:	b570      	push	{r4, r5, r6, lr}
 8016154:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8016156:	4606      	mov	r6, r0
 8016158:	460d      	mov	r5, r1
 801615a:	b93c      	cbnz	r4, 801616c <_Bfree+0x1a>
 801615c:	2010      	movs	r0, #16
 801615e:	f7ff ff8f 	bl	8016080 <malloc>
 8016162:	6270      	str	r0, [r6, #36]	; 0x24
 8016164:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8016168:	6004      	str	r4, [r0, #0]
 801616a:	60c4      	str	r4, [r0, #12]
 801616c:	b13d      	cbz	r5, 801617e <_Bfree+0x2c>
 801616e:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8016170:	686a      	ldr	r2, [r5, #4]
 8016172:	68db      	ldr	r3, [r3, #12]
 8016174:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8016178:	6029      	str	r1, [r5, #0]
 801617a:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 801617e:	bd70      	pop	{r4, r5, r6, pc}

08016180 <__multadd>:
 8016180:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016184:	690d      	ldr	r5, [r1, #16]
 8016186:	461f      	mov	r7, r3
 8016188:	4606      	mov	r6, r0
 801618a:	460c      	mov	r4, r1
 801618c:	f101 0c14 	add.w	ip, r1, #20
 8016190:	2300      	movs	r3, #0
 8016192:	f8dc 0000 	ldr.w	r0, [ip]
 8016196:	b281      	uxth	r1, r0
 8016198:	fb02 7101 	mla	r1, r2, r1, r7
 801619c:	0c0f      	lsrs	r7, r1, #16
 801619e:	0c00      	lsrs	r0, r0, #16
 80161a0:	fb02 7000 	mla	r0, r2, r0, r7
 80161a4:	b289      	uxth	r1, r1
 80161a6:	3301      	adds	r3, #1
 80161a8:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 80161ac:	429d      	cmp	r5, r3
 80161ae:	ea4f 4710 	mov.w	r7, r0, lsr #16
 80161b2:	f84c 1b04 	str.w	r1, [ip], #4
 80161b6:	dcec      	bgt.n	8016192 <__multadd+0x12>
 80161b8:	b1d7      	cbz	r7, 80161f0 <__multadd+0x70>
 80161ba:	68a3      	ldr	r3, [r4, #8]
 80161bc:	42ab      	cmp	r3, r5
 80161be:	dc12      	bgt.n	80161e6 <__multadd+0x66>
 80161c0:	6861      	ldr	r1, [r4, #4]
 80161c2:	4630      	mov	r0, r6
 80161c4:	3101      	adds	r1, #1
 80161c6:	f7ff ff90 	bl	80160ea <_Balloc>
 80161ca:	6922      	ldr	r2, [r4, #16]
 80161cc:	3202      	adds	r2, #2
 80161ce:	f104 010c 	add.w	r1, r4, #12
 80161d2:	4680      	mov	r8, r0
 80161d4:	0092      	lsls	r2, r2, #2
 80161d6:	300c      	adds	r0, #12
 80161d8:	f7fb fdc0 	bl	8011d5c <memcpy>
 80161dc:	4621      	mov	r1, r4
 80161de:	4630      	mov	r0, r6
 80161e0:	f7ff ffb7 	bl	8016152 <_Bfree>
 80161e4:	4644      	mov	r4, r8
 80161e6:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80161ea:	3501      	adds	r5, #1
 80161ec:	615f      	str	r7, [r3, #20]
 80161ee:	6125      	str	r5, [r4, #16]
 80161f0:	4620      	mov	r0, r4
 80161f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080161f6 <__s2b>:
 80161f6:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80161fa:	460c      	mov	r4, r1
 80161fc:	4615      	mov	r5, r2
 80161fe:	461f      	mov	r7, r3
 8016200:	2209      	movs	r2, #9
 8016202:	3308      	adds	r3, #8
 8016204:	4606      	mov	r6, r0
 8016206:	fb93 f3f2 	sdiv	r3, r3, r2
 801620a:	2100      	movs	r1, #0
 801620c:	2201      	movs	r2, #1
 801620e:	429a      	cmp	r2, r3
 8016210:	db20      	blt.n	8016254 <__s2b+0x5e>
 8016212:	4630      	mov	r0, r6
 8016214:	f7ff ff69 	bl	80160ea <_Balloc>
 8016218:	9b08      	ldr	r3, [sp, #32]
 801621a:	6143      	str	r3, [r0, #20]
 801621c:	2d09      	cmp	r5, #9
 801621e:	f04f 0301 	mov.w	r3, #1
 8016222:	6103      	str	r3, [r0, #16]
 8016224:	dd19      	ble.n	801625a <__s2b+0x64>
 8016226:	f104 0809 	add.w	r8, r4, #9
 801622a:	46c1      	mov	r9, r8
 801622c:	442c      	add	r4, r5
 801622e:	f819 3b01 	ldrb.w	r3, [r9], #1
 8016232:	4601      	mov	r1, r0
 8016234:	3b30      	subs	r3, #48	; 0x30
 8016236:	220a      	movs	r2, #10
 8016238:	4630      	mov	r0, r6
 801623a:	f7ff ffa1 	bl	8016180 <__multadd>
 801623e:	45a1      	cmp	r9, r4
 8016240:	d1f5      	bne.n	801622e <__s2b+0x38>
 8016242:	eb08 0405 	add.w	r4, r8, r5
 8016246:	3c08      	subs	r4, #8
 8016248:	1b2d      	subs	r5, r5, r4
 801624a:	1963      	adds	r3, r4, r5
 801624c:	42bb      	cmp	r3, r7
 801624e:	db07      	blt.n	8016260 <__s2b+0x6a>
 8016250:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8016254:	0052      	lsls	r2, r2, #1
 8016256:	3101      	adds	r1, #1
 8016258:	e7d9      	b.n	801620e <__s2b+0x18>
 801625a:	340a      	adds	r4, #10
 801625c:	2509      	movs	r5, #9
 801625e:	e7f3      	b.n	8016248 <__s2b+0x52>
 8016260:	f814 3b01 	ldrb.w	r3, [r4], #1
 8016264:	4601      	mov	r1, r0
 8016266:	3b30      	subs	r3, #48	; 0x30
 8016268:	220a      	movs	r2, #10
 801626a:	4630      	mov	r0, r6
 801626c:	f7ff ff88 	bl	8016180 <__multadd>
 8016270:	e7eb      	b.n	801624a <__s2b+0x54>

08016272 <__hi0bits>:
 8016272:	0c02      	lsrs	r2, r0, #16
 8016274:	0412      	lsls	r2, r2, #16
 8016276:	4603      	mov	r3, r0
 8016278:	b9b2      	cbnz	r2, 80162a8 <__hi0bits+0x36>
 801627a:	0403      	lsls	r3, r0, #16
 801627c:	2010      	movs	r0, #16
 801627e:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8016282:	bf04      	itt	eq
 8016284:	021b      	lsleq	r3, r3, #8
 8016286:	3008      	addeq	r0, #8
 8016288:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 801628c:	bf04      	itt	eq
 801628e:	011b      	lsleq	r3, r3, #4
 8016290:	3004      	addeq	r0, #4
 8016292:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8016296:	bf04      	itt	eq
 8016298:	009b      	lsleq	r3, r3, #2
 801629a:	3002      	addeq	r0, #2
 801629c:	2b00      	cmp	r3, #0
 801629e:	db06      	blt.n	80162ae <__hi0bits+0x3c>
 80162a0:	005b      	lsls	r3, r3, #1
 80162a2:	d503      	bpl.n	80162ac <__hi0bits+0x3a>
 80162a4:	3001      	adds	r0, #1
 80162a6:	4770      	bx	lr
 80162a8:	2000      	movs	r0, #0
 80162aa:	e7e8      	b.n	801627e <__hi0bits+0xc>
 80162ac:	2020      	movs	r0, #32
 80162ae:	4770      	bx	lr

080162b0 <__lo0bits>:
 80162b0:	6803      	ldr	r3, [r0, #0]
 80162b2:	f013 0207 	ands.w	r2, r3, #7
 80162b6:	4601      	mov	r1, r0
 80162b8:	d00b      	beq.n	80162d2 <__lo0bits+0x22>
 80162ba:	07da      	lsls	r2, r3, #31
 80162bc:	d423      	bmi.n	8016306 <__lo0bits+0x56>
 80162be:	0798      	lsls	r0, r3, #30
 80162c0:	bf49      	itett	mi
 80162c2:	085b      	lsrmi	r3, r3, #1
 80162c4:	089b      	lsrpl	r3, r3, #2
 80162c6:	2001      	movmi	r0, #1
 80162c8:	600b      	strmi	r3, [r1, #0]
 80162ca:	bf5c      	itt	pl
 80162cc:	600b      	strpl	r3, [r1, #0]
 80162ce:	2002      	movpl	r0, #2
 80162d0:	4770      	bx	lr
 80162d2:	b298      	uxth	r0, r3
 80162d4:	b9a8      	cbnz	r0, 8016302 <__lo0bits+0x52>
 80162d6:	0c1b      	lsrs	r3, r3, #16
 80162d8:	2010      	movs	r0, #16
 80162da:	f013 0fff 	tst.w	r3, #255	; 0xff
 80162de:	bf04      	itt	eq
 80162e0:	0a1b      	lsreq	r3, r3, #8
 80162e2:	3008      	addeq	r0, #8
 80162e4:	071a      	lsls	r2, r3, #28
 80162e6:	bf04      	itt	eq
 80162e8:	091b      	lsreq	r3, r3, #4
 80162ea:	3004      	addeq	r0, #4
 80162ec:	079a      	lsls	r2, r3, #30
 80162ee:	bf04      	itt	eq
 80162f0:	089b      	lsreq	r3, r3, #2
 80162f2:	3002      	addeq	r0, #2
 80162f4:	07da      	lsls	r2, r3, #31
 80162f6:	d402      	bmi.n	80162fe <__lo0bits+0x4e>
 80162f8:	085b      	lsrs	r3, r3, #1
 80162fa:	d006      	beq.n	801630a <__lo0bits+0x5a>
 80162fc:	3001      	adds	r0, #1
 80162fe:	600b      	str	r3, [r1, #0]
 8016300:	4770      	bx	lr
 8016302:	4610      	mov	r0, r2
 8016304:	e7e9      	b.n	80162da <__lo0bits+0x2a>
 8016306:	2000      	movs	r0, #0
 8016308:	4770      	bx	lr
 801630a:	2020      	movs	r0, #32
 801630c:	4770      	bx	lr

0801630e <__i2b>:
 801630e:	b510      	push	{r4, lr}
 8016310:	460c      	mov	r4, r1
 8016312:	2101      	movs	r1, #1
 8016314:	f7ff fee9 	bl	80160ea <_Balloc>
 8016318:	2201      	movs	r2, #1
 801631a:	6144      	str	r4, [r0, #20]
 801631c:	6102      	str	r2, [r0, #16]
 801631e:	bd10      	pop	{r4, pc}

08016320 <__multiply>:
 8016320:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016324:	4614      	mov	r4, r2
 8016326:	690a      	ldr	r2, [r1, #16]
 8016328:	6923      	ldr	r3, [r4, #16]
 801632a:	429a      	cmp	r2, r3
 801632c:	bfb8      	it	lt
 801632e:	460b      	movlt	r3, r1
 8016330:	4688      	mov	r8, r1
 8016332:	bfbc      	itt	lt
 8016334:	46a0      	movlt	r8, r4
 8016336:	461c      	movlt	r4, r3
 8016338:	f8d8 7010 	ldr.w	r7, [r8, #16]
 801633c:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8016340:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8016344:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8016348:	eb07 0609 	add.w	r6, r7, r9
 801634c:	42b3      	cmp	r3, r6
 801634e:	bfb8      	it	lt
 8016350:	3101      	addlt	r1, #1
 8016352:	f7ff feca 	bl	80160ea <_Balloc>
 8016356:	f100 0514 	add.w	r5, r0, #20
 801635a:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 801635e:	462b      	mov	r3, r5
 8016360:	2200      	movs	r2, #0
 8016362:	4573      	cmp	r3, lr
 8016364:	d316      	bcc.n	8016394 <__multiply+0x74>
 8016366:	f104 0214 	add.w	r2, r4, #20
 801636a:	f108 0114 	add.w	r1, r8, #20
 801636e:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 8016372:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 8016376:	9300      	str	r3, [sp, #0]
 8016378:	9b00      	ldr	r3, [sp, #0]
 801637a:	9201      	str	r2, [sp, #4]
 801637c:	4293      	cmp	r3, r2
 801637e:	d80c      	bhi.n	801639a <__multiply+0x7a>
 8016380:	2e00      	cmp	r6, #0
 8016382:	dd03      	ble.n	801638c <__multiply+0x6c>
 8016384:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8016388:	2b00      	cmp	r3, #0
 801638a:	d05d      	beq.n	8016448 <__multiply+0x128>
 801638c:	6106      	str	r6, [r0, #16]
 801638e:	b003      	add	sp, #12
 8016390:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016394:	f843 2b04 	str.w	r2, [r3], #4
 8016398:	e7e3      	b.n	8016362 <__multiply+0x42>
 801639a:	f8b2 b000 	ldrh.w	fp, [r2]
 801639e:	f1bb 0f00 	cmp.w	fp, #0
 80163a2:	d023      	beq.n	80163ec <__multiply+0xcc>
 80163a4:	4689      	mov	r9, r1
 80163a6:	46ac      	mov	ip, r5
 80163a8:	f04f 0800 	mov.w	r8, #0
 80163ac:	f859 4b04 	ldr.w	r4, [r9], #4
 80163b0:	f8dc a000 	ldr.w	sl, [ip]
 80163b4:	b2a3      	uxth	r3, r4
 80163b6:	fa1f fa8a 	uxth.w	sl, sl
 80163ba:	fb0b a303 	mla	r3, fp, r3, sl
 80163be:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 80163c2:	f8dc 4000 	ldr.w	r4, [ip]
 80163c6:	4443      	add	r3, r8
 80163c8:	ea4f 4814 	mov.w	r8, r4, lsr #16
 80163cc:	fb0b 840a 	mla	r4, fp, sl, r8
 80163d0:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 80163d4:	46e2      	mov	sl, ip
 80163d6:	b29b      	uxth	r3, r3
 80163d8:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80163dc:	454f      	cmp	r7, r9
 80163de:	ea4f 4814 	mov.w	r8, r4, lsr #16
 80163e2:	f84a 3b04 	str.w	r3, [sl], #4
 80163e6:	d82b      	bhi.n	8016440 <__multiply+0x120>
 80163e8:	f8cc 8004 	str.w	r8, [ip, #4]
 80163ec:	9b01      	ldr	r3, [sp, #4]
 80163ee:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 80163f2:	3204      	adds	r2, #4
 80163f4:	f1ba 0f00 	cmp.w	sl, #0
 80163f8:	d020      	beq.n	801643c <__multiply+0x11c>
 80163fa:	682b      	ldr	r3, [r5, #0]
 80163fc:	4689      	mov	r9, r1
 80163fe:	46a8      	mov	r8, r5
 8016400:	f04f 0b00 	mov.w	fp, #0
 8016404:	f8b9 c000 	ldrh.w	ip, [r9]
 8016408:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 801640c:	fb0a 440c 	mla	r4, sl, ip, r4
 8016410:	445c      	add	r4, fp
 8016412:	46c4      	mov	ip, r8
 8016414:	b29b      	uxth	r3, r3
 8016416:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 801641a:	f84c 3b04 	str.w	r3, [ip], #4
 801641e:	f859 3b04 	ldr.w	r3, [r9], #4
 8016422:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 8016426:	0c1b      	lsrs	r3, r3, #16
 8016428:	fb0a b303 	mla	r3, sl, r3, fp
 801642c:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8016430:	454f      	cmp	r7, r9
 8016432:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 8016436:	d805      	bhi.n	8016444 <__multiply+0x124>
 8016438:	f8c8 3004 	str.w	r3, [r8, #4]
 801643c:	3504      	adds	r5, #4
 801643e:	e79b      	b.n	8016378 <__multiply+0x58>
 8016440:	46d4      	mov	ip, sl
 8016442:	e7b3      	b.n	80163ac <__multiply+0x8c>
 8016444:	46e0      	mov	r8, ip
 8016446:	e7dd      	b.n	8016404 <__multiply+0xe4>
 8016448:	3e01      	subs	r6, #1
 801644a:	e799      	b.n	8016380 <__multiply+0x60>

0801644c <__pow5mult>:
 801644c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8016450:	4615      	mov	r5, r2
 8016452:	f012 0203 	ands.w	r2, r2, #3
 8016456:	4606      	mov	r6, r0
 8016458:	460f      	mov	r7, r1
 801645a:	d007      	beq.n	801646c <__pow5mult+0x20>
 801645c:	3a01      	subs	r2, #1
 801645e:	4c21      	ldr	r4, [pc, #132]	; (80164e4 <__pow5mult+0x98>)
 8016460:	2300      	movs	r3, #0
 8016462:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8016466:	f7ff fe8b 	bl	8016180 <__multadd>
 801646a:	4607      	mov	r7, r0
 801646c:	10ad      	asrs	r5, r5, #2
 801646e:	d035      	beq.n	80164dc <__pow5mult+0x90>
 8016470:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8016472:	b93c      	cbnz	r4, 8016484 <__pow5mult+0x38>
 8016474:	2010      	movs	r0, #16
 8016476:	f7ff fe03 	bl	8016080 <malloc>
 801647a:	6270      	str	r0, [r6, #36]	; 0x24
 801647c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8016480:	6004      	str	r4, [r0, #0]
 8016482:	60c4      	str	r4, [r0, #12]
 8016484:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8016488:	f8d8 4008 	ldr.w	r4, [r8, #8]
 801648c:	b94c      	cbnz	r4, 80164a2 <__pow5mult+0x56>
 801648e:	f240 2171 	movw	r1, #625	; 0x271
 8016492:	4630      	mov	r0, r6
 8016494:	f7ff ff3b 	bl	801630e <__i2b>
 8016498:	2300      	movs	r3, #0
 801649a:	f8c8 0008 	str.w	r0, [r8, #8]
 801649e:	4604      	mov	r4, r0
 80164a0:	6003      	str	r3, [r0, #0]
 80164a2:	f04f 0800 	mov.w	r8, #0
 80164a6:	07eb      	lsls	r3, r5, #31
 80164a8:	d50a      	bpl.n	80164c0 <__pow5mult+0x74>
 80164aa:	4639      	mov	r1, r7
 80164ac:	4622      	mov	r2, r4
 80164ae:	4630      	mov	r0, r6
 80164b0:	f7ff ff36 	bl	8016320 <__multiply>
 80164b4:	4639      	mov	r1, r7
 80164b6:	4681      	mov	r9, r0
 80164b8:	4630      	mov	r0, r6
 80164ba:	f7ff fe4a 	bl	8016152 <_Bfree>
 80164be:	464f      	mov	r7, r9
 80164c0:	106d      	asrs	r5, r5, #1
 80164c2:	d00b      	beq.n	80164dc <__pow5mult+0x90>
 80164c4:	6820      	ldr	r0, [r4, #0]
 80164c6:	b938      	cbnz	r0, 80164d8 <__pow5mult+0x8c>
 80164c8:	4622      	mov	r2, r4
 80164ca:	4621      	mov	r1, r4
 80164cc:	4630      	mov	r0, r6
 80164ce:	f7ff ff27 	bl	8016320 <__multiply>
 80164d2:	6020      	str	r0, [r4, #0]
 80164d4:	f8c0 8000 	str.w	r8, [r0]
 80164d8:	4604      	mov	r4, r0
 80164da:	e7e4      	b.n	80164a6 <__pow5mult+0x5a>
 80164dc:	4638      	mov	r0, r7
 80164de:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80164e2:	bf00      	nop
 80164e4:	080172a0 	.word	0x080172a0

080164e8 <__lshift>:
 80164e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80164ec:	460c      	mov	r4, r1
 80164ee:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80164f2:	6923      	ldr	r3, [r4, #16]
 80164f4:	6849      	ldr	r1, [r1, #4]
 80164f6:	eb0a 0903 	add.w	r9, sl, r3
 80164fa:	68a3      	ldr	r3, [r4, #8]
 80164fc:	4607      	mov	r7, r0
 80164fe:	4616      	mov	r6, r2
 8016500:	f109 0501 	add.w	r5, r9, #1
 8016504:	42ab      	cmp	r3, r5
 8016506:	db32      	blt.n	801656e <__lshift+0x86>
 8016508:	4638      	mov	r0, r7
 801650a:	f7ff fdee 	bl	80160ea <_Balloc>
 801650e:	2300      	movs	r3, #0
 8016510:	4680      	mov	r8, r0
 8016512:	f100 0114 	add.w	r1, r0, #20
 8016516:	461a      	mov	r2, r3
 8016518:	4553      	cmp	r3, sl
 801651a:	db2b      	blt.n	8016574 <__lshift+0x8c>
 801651c:	6920      	ldr	r0, [r4, #16]
 801651e:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8016522:	f104 0314 	add.w	r3, r4, #20
 8016526:	f016 021f 	ands.w	r2, r6, #31
 801652a:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 801652e:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8016532:	d025      	beq.n	8016580 <__lshift+0x98>
 8016534:	f1c2 0e20 	rsb	lr, r2, #32
 8016538:	2000      	movs	r0, #0
 801653a:	681e      	ldr	r6, [r3, #0]
 801653c:	468a      	mov	sl, r1
 801653e:	4096      	lsls	r6, r2
 8016540:	4330      	orrs	r0, r6
 8016542:	f84a 0b04 	str.w	r0, [sl], #4
 8016546:	f853 0b04 	ldr.w	r0, [r3], #4
 801654a:	459c      	cmp	ip, r3
 801654c:	fa20 f00e 	lsr.w	r0, r0, lr
 8016550:	d814      	bhi.n	801657c <__lshift+0x94>
 8016552:	6048      	str	r0, [r1, #4]
 8016554:	b108      	cbz	r0, 801655a <__lshift+0x72>
 8016556:	f109 0502 	add.w	r5, r9, #2
 801655a:	3d01      	subs	r5, #1
 801655c:	4638      	mov	r0, r7
 801655e:	f8c8 5010 	str.w	r5, [r8, #16]
 8016562:	4621      	mov	r1, r4
 8016564:	f7ff fdf5 	bl	8016152 <_Bfree>
 8016568:	4640      	mov	r0, r8
 801656a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801656e:	3101      	adds	r1, #1
 8016570:	005b      	lsls	r3, r3, #1
 8016572:	e7c7      	b.n	8016504 <__lshift+0x1c>
 8016574:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8016578:	3301      	adds	r3, #1
 801657a:	e7cd      	b.n	8016518 <__lshift+0x30>
 801657c:	4651      	mov	r1, sl
 801657e:	e7dc      	b.n	801653a <__lshift+0x52>
 8016580:	3904      	subs	r1, #4
 8016582:	f853 2b04 	ldr.w	r2, [r3], #4
 8016586:	f841 2f04 	str.w	r2, [r1, #4]!
 801658a:	459c      	cmp	ip, r3
 801658c:	d8f9      	bhi.n	8016582 <__lshift+0x9a>
 801658e:	e7e4      	b.n	801655a <__lshift+0x72>

08016590 <__mcmp>:
 8016590:	6903      	ldr	r3, [r0, #16]
 8016592:	690a      	ldr	r2, [r1, #16]
 8016594:	1a9b      	subs	r3, r3, r2
 8016596:	b530      	push	{r4, r5, lr}
 8016598:	d10c      	bne.n	80165b4 <__mcmp+0x24>
 801659a:	0092      	lsls	r2, r2, #2
 801659c:	3014      	adds	r0, #20
 801659e:	3114      	adds	r1, #20
 80165a0:	1884      	adds	r4, r0, r2
 80165a2:	4411      	add	r1, r2
 80165a4:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80165a8:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80165ac:	4295      	cmp	r5, r2
 80165ae:	d003      	beq.n	80165b8 <__mcmp+0x28>
 80165b0:	d305      	bcc.n	80165be <__mcmp+0x2e>
 80165b2:	2301      	movs	r3, #1
 80165b4:	4618      	mov	r0, r3
 80165b6:	bd30      	pop	{r4, r5, pc}
 80165b8:	42a0      	cmp	r0, r4
 80165ba:	d3f3      	bcc.n	80165a4 <__mcmp+0x14>
 80165bc:	e7fa      	b.n	80165b4 <__mcmp+0x24>
 80165be:	f04f 33ff 	mov.w	r3, #4294967295
 80165c2:	e7f7      	b.n	80165b4 <__mcmp+0x24>

080165c4 <__mdiff>:
 80165c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80165c8:	460d      	mov	r5, r1
 80165ca:	4607      	mov	r7, r0
 80165cc:	4611      	mov	r1, r2
 80165ce:	4628      	mov	r0, r5
 80165d0:	4614      	mov	r4, r2
 80165d2:	f7ff ffdd 	bl	8016590 <__mcmp>
 80165d6:	1e06      	subs	r6, r0, #0
 80165d8:	d108      	bne.n	80165ec <__mdiff+0x28>
 80165da:	4631      	mov	r1, r6
 80165dc:	4638      	mov	r0, r7
 80165de:	f7ff fd84 	bl	80160ea <_Balloc>
 80165e2:	2301      	movs	r3, #1
 80165e4:	e9c0 3604 	strd	r3, r6, [r0, #16]
 80165e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80165ec:	bfa4      	itt	ge
 80165ee:	4623      	movge	r3, r4
 80165f0:	462c      	movge	r4, r5
 80165f2:	4638      	mov	r0, r7
 80165f4:	6861      	ldr	r1, [r4, #4]
 80165f6:	bfa6      	itte	ge
 80165f8:	461d      	movge	r5, r3
 80165fa:	2600      	movge	r6, #0
 80165fc:	2601      	movlt	r6, #1
 80165fe:	f7ff fd74 	bl	80160ea <_Balloc>
 8016602:	692b      	ldr	r3, [r5, #16]
 8016604:	60c6      	str	r6, [r0, #12]
 8016606:	6926      	ldr	r6, [r4, #16]
 8016608:	f105 0914 	add.w	r9, r5, #20
 801660c:	f104 0214 	add.w	r2, r4, #20
 8016610:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 8016614:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8016618:	f100 0514 	add.w	r5, r0, #20
 801661c:	f04f 0e00 	mov.w	lr, #0
 8016620:	f852 ab04 	ldr.w	sl, [r2], #4
 8016624:	f859 4b04 	ldr.w	r4, [r9], #4
 8016628:	fa1e f18a 	uxtah	r1, lr, sl
 801662c:	b2a3      	uxth	r3, r4
 801662e:	1ac9      	subs	r1, r1, r3
 8016630:	0c23      	lsrs	r3, r4, #16
 8016632:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 8016636:	eb03 4321 	add.w	r3, r3, r1, asr #16
 801663a:	b289      	uxth	r1, r1
 801663c:	ea4f 4e23 	mov.w	lr, r3, asr #16
 8016640:	45c8      	cmp	r8, r9
 8016642:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8016646:	4694      	mov	ip, r2
 8016648:	f845 3b04 	str.w	r3, [r5], #4
 801664c:	d8e8      	bhi.n	8016620 <__mdiff+0x5c>
 801664e:	45bc      	cmp	ip, r7
 8016650:	d304      	bcc.n	801665c <__mdiff+0x98>
 8016652:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 8016656:	b183      	cbz	r3, 801667a <__mdiff+0xb6>
 8016658:	6106      	str	r6, [r0, #16]
 801665a:	e7c5      	b.n	80165e8 <__mdiff+0x24>
 801665c:	f85c 1b04 	ldr.w	r1, [ip], #4
 8016660:	fa1e f381 	uxtah	r3, lr, r1
 8016664:	141a      	asrs	r2, r3, #16
 8016666:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 801666a:	b29b      	uxth	r3, r3
 801666c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8016670:	ea4f 4e22 	mov.w	lr, r2, asr #16
 8016674:	f845 3b04 	str.w	r3, [r5], #4
 8016678:	e7e9      	b.n	801664e <__mdiff+0x8a>
 801667a:	3e01      	subs	r6, #1
 801667c:	e7e9      	b.n	8016652 <__mdiff+0x8e>
	...

08016680 <__ulp>:
 8016680:	4b12      	ldr	r3, [pc, #72]	; (80166cc <__ulp+0x4c>)
 8016682:	ee10 2a90 	vmov	r2, s1
 8016686:	401a      	ands	r2, r3
 8016688:	f1a2 7350 	sub.w	r3, r2, #54525952	; 0x3400000
 801668c:	2b00      	cmp	r3, #0
 801668e:	dd04      	ble.n	801669a <__ulp+0x1a>
 8016690:	2000      	movs	r0, #0
 8016692:	4619      	mov	r1, r3
 8016694:	ec41 0b10 	vmov	d0, r0, r1
 8016698:	4770      	bx	lr
 801669a:	425b      	negs	r3, r3
 801669c:	151b      	asrs	r3, r3, #20
 801669e:	2b13      	cmp	r3, #19
 80166a0:	f04f 0000 	mov.w	r0, #0
 80166a4:	f04f 0100 	mov.w	r1, #0
 80166a8:	dc04      	bgt.n	80166b4 <__ulp+0x34>
 80166aa:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80166ae:	fa42 f103 	asr.w	r1, r2, r3
 80166b2:	e7ef      	b.n	8016694 <__ulp+0x14>
 80166b4:	3b14      	subs	r3, #20
 80166b6:	2b1e      	cmp	r3, #30
 80166b8:	f04f 0201 	mov.w	r2, #1
 80166bc:	bfda      	itte	le
 80166be:	f1c3 031f 	rsble	r3, r3, #31
 80166c2:	fa02 f303 	lslle.w	r3, r2, r3
 80166c6:	4613      	movgt	r3, r2
 80166c8:	4618      	mov	r0, r3
 80166ca:	e7e3      	b.n	8016694 <__ulp+0x14>
 80166cc:	7ff00000 	.word	0x7ff00000

080166d0 <__b2d>:
 80166d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80166d2:	6905      	ldr	r5, [r0, #16]
 80166d4:	f100 0714 	add.w	r7, r0, #20
 80166d8:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 80166dc:	1f2e      	subs	r6, r5, #4
 80166de:	f855 4c04 	ldr.w	r4, [r5, #-4]
 80166e2:	4620      	mov	r0, r4
 80166e4:	f7ff fdc5 	bl	8016272 <__hi0bits>
 80166e8:	f1c0 0320 	rsb	r3, r0, #32
 80166ec:	280a      	cmp	r0, #10
 80166ee:	600b      	str	r3, [r1, #0]
 80166f0:	f8df c074 	ldr.w	ip, [pc, #116]	; 8016768 <__b2d+0x98>
 80166f4:	dc14      	bgt.n	8016720 <__b2d+0x50>
 80166f6:	f1c0 0e0b 	rsb	lr, r0, #11
 80166fa:	fa24 f10e 	lsr.w	r1, r4, lr
 80166fe:	42b7      	cmp	r7, r6
 8016700:	ea41 030c 	orr.w	r3, r1, ip
 8016704:	bf34      	ite	cc
 8016706:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 801670a:	2100      	movcs	r1, #0
 801670c:	3015      	adds	r0, #21
 801670e:	fa04 f000 	lsl.w	r0, r4, r0
 8016712:	fa21 f10e 	lsr.w	r1, r1, lr
 8016716:	ea40 0201 	orr.w	r2, r0, r1
 801671a:	ec43 2b10 	vmov	d0, r2, r3
 801671e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016720:	42b7      	cmp	r7, r6
 8016722:	bf3a      	itte	cc
 8016724:	f1a5 0608 	subcc.w	r6, r5, #8
 8016728:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 801672c:	2100      	movcs	r1, #0
 801672e:	380b      	subs	r0, #11
 8016730:	d015      	beq.n	801675e <__b2d+0x8e>
 8016732:	4084      	lsls	r4, r0
 8016734:	f1c0 0520 	rsb	r5, r0, #32
 8016738:	f044 547f 	orr.w	r4, r4, #1069547520	; 0x3fc00000
 801673c:	f444 1440 	orr.w	r4, r4, #3145728	; 0x300000
 8016740:	42be      	cmp	r6, r7
 8016742:	fa21 fc05 	lsr.w	ip, r1, r5
 8016746:	ea44 030c 	orr.w	r3, r4, ip
 801674a:	bf8c      	ite	hi
 801674c:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 8016750:	2400      	movls	r4, #0
 8016752:	fa01 f000 	lsl.w	r0, r1, r0
 8016756:	40ec      	lsrs	r4, r5
 8016758:	ea40 0204 	orr.w	r2, r0, r4
 801675c:	e7dd      	b.n	801671a <__b2d+0x4a>
 801675e:	ea44 030c 	orr.w	r3, r4, ip
 8016762:	460a      	mov	r2, r1
 8016764:	e7d9      	b.n	801671a <__b2d+0x4a>
 8016766:	bf00      	nop
 8016768:	3ff00000 	.word	0x3ff00000

0801676c <__d2b>:
 801676c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8016770:	460e      	mov	r6, r1
 8016772:	2101      	movs	r1, #1
 8016774:	ec59 8b10 	vmov	r8, r9, d0
 8016778:	4615      	mov	r5, r2
 801677a:	f7ff fcb6 	bl	80160ea <_Balloc>
 801677e:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8016782:	4607      	mov	r7, r0
 8016784:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8016788:	bb34      	cbnz	r4, 80167d8 <__d2b+0x6c>
 801678a:	9301      	str	r3, [sp, #4]
 801678c:	f1b8 0300 	subs.w	r3, r8, #0
 8016790:	d027      	beq.n	80167e2 <__d2b+0x76>
 8016792:	a802      	add	r0, sp, #8
 8016794:	f840 3d08 	str.w	r3, [r0, #-8]!
 8016798:	f7ff fd8a 	bl	80162b0 <__lo0bits>
 801679c:	9900      	ldr	r1, [sp, #0]
 801679e:	b1f0      	cbz	r0, 80167de <__d2b+0x72>
 80167a0:	9a01      	ldr	r2, [sp, #4]
 80167a2:	f1c0 0320 	rsb	r3, r0, #32
 80167a6:	fa02 f303 	lsl.w	r3, r2, r3
 80167aa:	430b      	orrs	r3, r1
 80167ac:	40c2      	lsrs	r2, r0
 80167ae:	617b      	str	r3, [r7, #20]
 80167b0:	9201      	str	r2, [sp, #4]
 80167b2:	9b01      	ldr	r3, [sp, #4]
 80167b4:	61bb      	str	r3, [r7, #24]
 80167b6:	2b00      	cmp	r3, #0
 80167b8:	bf14      	ite	ne
 80167ba:	2102      	movne	r1, #2
 80167bc:	2101      	moveq	r1, #1
 80167be:	6139      	str	r1, [r7, #16]
 80167c0:	b1c4      	cbz	r4, 80167f4 <__d2b+0x88>
 80167c2:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 80167c6:	4404      	add	r4, r0
 80167c8:	6034      	str	r4, [r6, #0]
 80167ca:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80167ce:	6028      	str	r0, [r5, #0]
 80167d0:	4638      	mov	r0, r7
 80167d2:	b003      	add	sp, #12
 80167d4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80167d8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80167dc:	e7d5      	b.n	801678a <__d2b+0x1e>
 80167de:	6179      	str	r1, [r7, #20]
 80167e0:	e7e7      	b.n	80167b2 <__d2b+0x46>
 80167e2:	a801      	add	r0, sp, #4
 80167e4:	f7ff fd64 	bl	80162b0 <__lo0bits>
 80167e8:	9b01      	ldr	r3, [sp, #4]
 80167ea:	617b      	str	r3, [r7, #20]
 80167ec:	2101      	movs	r1, #1
 80167ee:	6139      	str	r1, [r7, #16]
 80167f0:	3020      	adds	r0, #32
 80167f2:	e7e5      	b.n	80167c0 <__d2b+0x54>
 80167f4:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 80167f8:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80167fc:	6030      	str	r0, [r6, #0]
 80167fe:	6918      	ldr	r0, [r3, #16]
 8016800:	f7ff fd37 	bl	8016272 <__hi0bits>
 8016804:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8016808:	e7e1      	b.n	80167ce <__d2b+0x62>

0801680a <__ratio>:
 801680a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801680e:	4688      	mov	r8, r1
 8016810:	4669      	mov	r1, sp
 8016812:	4681      	mov	r9, r0
 8016814:	f7ff ff5c 	bl	80166d0 <__b2d>
 8016818:	a901      	add	r1, sp, #4
 801681a:	4640      	mov	r0, r8
 801681c:	ec57 6b10 	vmov	r6, r7, d0
 8016820:	f7ff ff56 	bl	80166d0 <__b2d>
 8016824:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8016828:	f8d8 2010 	ldr.w	r2, [r8, #16]
 801682c:	eba3 0c02 	sub.w	ip, r3, r2
 8016830:	e9dd 3200 	ldrd	r3, r2, [sp]
 8016834:	1a9b      	subs	r3, r3, r2
 8016836:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 801683a:	ec5b ab10 	vmov	sl, fp, d0
 801683e:	2b00      	cmp	r3, #0
 8016840:	bfce      	itee	gt
 8016842:	463a      	movgt	r2, r7
 8016844:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8016848:	465a      	movle	r2, fp
 801684a:	4659      	mov	r1, fp
 801684c:	463d      	mov	r5, r7
 801684e:	bfd4      	ite	le
 8016850:	eb02 5103 	addle.w	r1, r2, r3, lsl #20
 8016854:	eb02 5503 	addgt.w	r5, r2, r3, lsl #20
 8016858:	4630      	mov	r0, r6
 801685a:	ee10 2a10 	vmov	r2, s0
 801685e:	460b      	mov	r3, r1
 8016860:	4629      	mov	r1, r5
 8016862:	f7f1 ff2b 	bl	80086bc <__aeabi_ddiv>
 8016866:	ec41 0b10 	vmov	d0, r0, r1
 801686a:	b003      	add	sp, #12
 801686c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08016870 <__copybits>:
 8016870:	3901      	subs	r1, #1
 8016872:	b510      	push	{r4, lr}
 8016874:	1149      	asrs	r1, r1, #5
 8016876:	6914      	ldr	r4, [r2, #16]
 8016878:	3101      	adds	r1, #1
 801687a:	f102 0314 	add.w	r3, r2, #20
 801687e:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8016882:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8016886:	42a3      	cmp	r3, r4
 8016888:	4602      	mov	r2, r0
 801688a:	d303      	bcc.n	8016894 <__copybits+0x24>
 801688c:	2300      	movs	r3, #0
 801688e:	428a      	cmp	r2, r1
 8016890:	d305      	bcc.n	801689e <__copybits+0x2e>
 8016892:	bd10      	pop	{r4, pc}
 8016894:	f853 2b04 	ldr.w	r2, [r3], #4
 8016898:	f840 2b04 	str.w	r2, [r0], #4
 801689c:	e7f3      	b.n	8016886 <__copybits+0x16>
 801689e:	f842 3b04 	str.w	r3, [r2], #4
 80168a2:	e7f4      	b.n	801688e <__copybits+0x1e>

080168a4 <__any_on>:
 80168a4:	f100 0214 	add.w	r2, r0, #20
 80168a8:	6900      	ldr	r0, [r0, #16]
 80168aa:	114b      	asrs	r3, r1, #5
 80168ac:	4298      	cmp	r0, r3
 80168ae:	b510      	push	{r4, lr}
 80168b0:	db11      	blt.n	80168d6 <__any_on+0x32>
 80168b2:	dd0a      	ble.n	80168ca <__any_on+0x26>
 80168b4:	f011 011f 	ands.w	r1, r1, #31
 80168b8:	d007      	beq.n	80168ca <__any_on+0x26>
 80168ba:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 80168be:	fa24 f001 	lsr.w	r0, r4, r1
 80168c2:	fa00 f101 	lsl.w	r1, r0, r1
 80168c6:	428c      	cmp	r4, r1
 80168c8:	d10b      	bne.n	80168e2 <__any_on+0x3e>
 80168ca:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80168ce:	4293      	cmp	r3, r2
 80168d0:	d803      	bhi.n	80168da <__any_on+0x36>
 80168d2:	2000      	movs	r0, #0
 80168d4:	bd10      	pop	{r4, pc}
 80168d6:	4603      	mov	r3, r0
 80168d8:	e7f7      	b.n	80168ca <__any_on+0x26>
 80168da:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80168de:	2900      	cmp	r1, #0
 80168e0:	d0f5      	beq.n	80168ce <__any_on+0x2a>
 80168e2:	2001      	movs	r0, #1
 80168e4:	e7f6      	b.n	80168d4 <__any_on+0x30>

080168e6 <_calloc_r>:
 80168e6:	b538      	push	{r3, r4, r5, lr}
 80168e8:	fb02 f401 	mul.w	r4, r2, r1
 80168ec:	4621      	mov	r1, r4
 80168ee:	f7fb fa97 	bl	8011e20 <_malloc_r>
 80168f2:	4605      	mov	r5, r0
 80168f4:	b118      	cbz	r0, 80168fe <_calloc_r+0x18>
 80168f6:	4622      	mov	r2, r4
 80168f8:	2100      	movs	r1, #0
 80168fa:	f7fb fa3a 	bl	8011d72 <memset>
 80168fe:	4628      	mov	r0, r5
 8016900:	bd38      	pop	{r3, r4, r5, pc}

08016902 <_realloc_r>:
 8016902:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016904:	4607      	mov	r7, r0
 8016906:	4614      	mov	r4, r2
 8016908:	460e      	mov	r6, r1
 801690a:	b921      	cbnz	r1, 8016916 <_realloc_r+0x14>
 801690c:	4611      	mov	r1, r2
 801690e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8016912:	f7fb ba85 	b.w	8011e20 <_malloc_r>
 8016916:	b922      	cbnz	r2, 8016922 <_realloc_r+0x20>
 8016918:	f7fb fa34 	bl	8011d84 <_free_r>
 801691c:	4625      	mov	r5, r4
 801691e:	4628      	mov	r0, r5
 8016920:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016922:	f000 f9ce 	bl	8016cc2 <_malloc_usable_size_r>
 8016926:	42a0      	cmp	r0, r4
 8016928:	d20f      	bcs.n	801694a <_realloc_r+0x48>
 801692a:	4621      	mov	r1, r4
 801692c:	4638      	mov	r0, r7
 801692e:	f7fb fa77 	bl	8011e20 <_malloc_r>
 8016932:	4605      	mov	r5, r0
 8016934:	2800      	cmp	r0, #0
 8016936:	d0f2      	beq.n	801691e <_realloc_r+0x1c>
 8016938:	4631      	mov	r1, r6
 801693a:	4622      	mov	r2, r4
 801693c:	f7fb fa0e 	bl	8011d5c <memcpy>
 8016940:	4631      	mov	r1, r6
 8016942:	4638      	mov	r0, r7
 8016944:	f7fb fa1e 	bl	8011d84 <_free_r>
 8016948:	e7e9      	b.n	801691e <_realloc_r+0x1c>
 801694a:	4635      	mov	r5, r6
 801694c:	e7e7      	b.n	801691e <_realloc_r+0x1c>

0801694e <__ssputs_r>:
 801694e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8016952:	688e      	ldr	r6, [r1, #8]
 8016954:	429e      	cmp	r6, r3
 8016956:	4682      	mov	sl, r0
 8016958:	460c      	mov	r4, r1
 801695a:	4690      	mov	r8, r2
 801695c:	4699      	mov	r9, r3
 801695e:	d837      	bhi.n	80169d0 <__ssputs_r+0x82>
 8016960:	898a      	ldrh	r2, [r1, #12]
 8016962:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8016966:	d031      	beq.n	80169cc <__ssputs_r+0x7e>
 8016968:	6825      	ldr	r5, [r4, #0]
 801696a:	6909      	ldr	r1, [r1, #16]
 801696c:	1a6f      	subs	r7, r5, r1
 801696e:	6965      	ldr	r5, [r4, #20]
 8016970:	2302      	movs	r3, #2
 8016972:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8016976:	fb95 f5f3 	sdiv	r5, r5, r3
 801697a:	f109 0301 	add.w	r3, r9, #1
 801697e:	443b      	add	r3, r7
 8016980:	429d      	cmp	r5, r3
 8016982:	bf38      	it	cc
 8016984:	461d      	movcc	r5, r3
 8016986:	0553      	lsls	r3, r2, #21
 8016988:	d530      	bpl.n	80169ec <__ssputs_r+0x9e>
 801698a:	4629      	mov	r1, r5
 801698c:	f7fb fa48 	bl	8011e20 <_malloc_r>
 8016990:	4606      	mov	r6, r0
 8016992:	b950      	cbnz	r0, 80169aa <__ssputs_r+0x5c>
 8016994:	230c      	movs	r3, #12
 8016996:	f8ca 3000 	str.w	r3, [sl]
 801699a:	89a3      	ldrh	r3, [r4, #12]
 801699c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80169a0:	81a3      	strh	r3, [r4, #12]
 80169a2:	f04f 30ff 	mov.w	r0, #4294967295
 80169a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80169aa:	463a      	mov	r2, r7
 80169ac:	6921      	ldr	r1, [r4, #16]
 80169ae:	f7fb f9d5 	bl	8011d5c <memcpy>
 80169b2:	89a3      	ldrh	r3, [r4, #12]
 80169b4:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80169b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80169bc:	81a3      	strh	r3, [r4, #12]
 80169be:	6126      	str	r6, [r4, #16]
 80169c0:	6165      	str	r5, [r4, #20]
 80169c2:	443e      	add	r6, r7
 80169c4:	1bed      	subs	r5, r5, r7
 80169c6:	6026      	str	r6, [r4, #0]
 80169c8:	60a5      	str	r5, [r4, #8]
 80169ca:	464e      	mov	r6, r9
 80169cc:	454e      	cmp	r6, r9
 80169ce:	d900      	bls.n	80169d2 <__ssputs_r+0x84>
 80169d0:	464e      	mov	r6, r9
 80169d2:	4632      	mov	r2, r6
 80169d4:	4641      	mov	r1, r8
 80169d6:	6820      	ldr	r0, [r4, #0]
 80169d8:	f7ff fb6c 	bl	80160b4 <memmove>
 80169dc:	68a3      	ldr	r3, [r4, #8]
 80169de:	1b9b      	subs	r3, r3, r6
 80169e0:	60a3      	str	r3, [r4, #8]
 80169e2:	6823      	ldr	r3, [r4, #0]
 80169e4:	441e      	add	r6, r3
 80169e6:	6026      	str	r6, [r4, #0]
 80169e8:	2000      	movs	r0, #0
 80169ea:	e7dc      	b.n	80169a6 <__ssputs_r+0x58>
 80169ec:	462a      	mov	r2, r5
 80169ee:	f7ff ff88 	bl	8016902 <_realloc_r>
 80169f2:	4606      	mov	r6, r0
 80169f4:	2800      	cmp	r0, #0
 80169f6:	d1e2      	bne.n	80169be <__ssputs_r+0x70>
 80169f8:	6921      	ldr	r1, [r4, #16]
 80169fa:	4650      	mov	r0, sl
 80169fc:	f7fb f9c2 	bl	8011d84 <_free_r>
 8016a00:	e7c8      	b.n	8016994 <__ssputs_r+0x46>
	...

08016a04 <_svfiprintf_r>:
 8016a04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016a08:	461d      	mov	r5, r3
 8016a0a:	898b      	ldrh	r3, [r1, #12]
 8016a0c:	061f      	lsls	r7, r3, #24
 8016a0e:	b09d      	sub	sp, #116	; 0x74
 8016a10:	4680      	mov	r8, r0
 8016a12:	460c      	mov	r4, r1
 8016a14:	4616      	mov	r6, r2
 8016a16:	d50f      	bpl.n	8016a38 <_svfiprintf_r+0x34>
 8016a18:	690b      	ldr	r3, [r1, #16]
 8016a1a:	b96b      	cbnz	r3, 8016a38 <_svfiprintf_r+0x34>
 8016a1c:	2140      	movs	r1, #64	; 0x40
 8016a1e:	f7fb f9ff 	bl	8011e20 <_malloc_r>
 8016a22:	6020      	str	r0, [r4, #0]
 8016a24:	6120      	str	r0, [r4, #16]
 8016a26:	b928      	cbnz	r0, 8016a34 <_svfiprintf_r+0x30>
 8016a28:	230c      	movs	r3, #12
 8016a2a:	f8c8 3000 	str.w	r3, [r8]
 8016a2e:	f04f 30ff 	mov.w	r0, #4294967295
 8016a32:	e0c8      	b.n	8016bc6 <_svfiprintf_r+0x1c2>
 8016a34:	2340      	movs	r3, #64	; 0x40
 8016a36:	6163      	str	r3, [r4, #20]
 8016a38:	2300      	movs	r3, #0
 8016a3a:	9309      	str	r3, [sp, #36]	; 0x24
 8016a3c:	2320      	movs	r3, #32
 8016a3e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8016a42:	2330      	movs	r3, #48	; 0x30
 8016a44:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8016a48:	9503      	str	r5, [sp, #12]
 8016a4a:	f04f 0b01 	mov.w	fp, #1
 8016a4e:	4637      	mov	r7, r6
 8016a50:	463d      	mov	r5, r7
 8016a52:	f815 3b01 	ldrb.w	r3, [r5], #1
 8016a56:	b10b      	cbz	r3, 8016a5c <_svfiprintf_r+0x58>
 8016a58:	2b25      	cmp	r3, #37	; 0x25
 8016a5a:	d13e      	bne.n	8016ada <_svfiprintf_r+0xd6>
 8016a5c:	ebb7 0a06 	subs.w	sl, r7, r6
 8016a60:	d00b      	beq.n	8016a7a <_svfiprintf_r+0x76>
 8016a62:	4653      	mov	r3, sl
 8016a64:	4632      	mov	r2, r6
 8016a66:	4621      	mov	r1, r4
 8016a68:	4640      	mov	r0, r8
 8016a6a:	f7ff ff70 	bl	801694e <__ssputs_r>
 8016a6e:	3001      	adds	r0, #1
 8016a70:	f000 80a4 	beq.w	8016bbc <_svfiprintf_r+0x1b8>
 8016a74:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016a76:	4453      	add	r3, sl
 8016a78:	9309      	str	r3, [sp, #36]	; 0x24
 8016a7a:	783b      	ldrb	r3, [r7, #0]
 8016a7c:	2b00      	cmp	r3, #0
 8016a7e:	f000 809d 	beq.w	8016bbc <_svfiprintf_r+0x1b8>
 8016a82:	2300      	movs	r3, #0
 8016a84:	f04f 32ff 	mov.w	r2, #4294967295
 8016a88:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8016a8c:	9304      	str	r3, [sp, #16]
 8016a8e:	9307      	str	r3, [sp, #28]
 8016a90:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8016a94:	931a      	str	r3, [sp, #104]	; 0x68
 8016a96:	462f      	mov	r7, r5
 8016a98:	2205      	movs	r2, #5
 8016a9a:	f817 1b01 	ldrb.w	r1, [r7], #1
 8016a9e:	4850      	ldr	r0, [pc, #320]	; (8016be0 <_svfiprintf_r+0x1dc>)
 8016aa0:	f7f1 fad6 	bl	8008050 <memchr>
 8016aa4:	9b04      	ldr	r3, [sp, #16]
 8016aa6:	b9d0      	cbnz	r0, 8016ade <_svfiprintf_r+0xda>
 8016aa8:	06d9      	lsls	r1, r3, #27
 8016aaa:	bf44      	itt	mi
 8016aac:	2220      	movmi	r2, #32
 8016aae:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8016ab2:	071a      	lsls	r2, r3, #28
 8016ab4:	bf44      	itt	mi
 8016ab6:	222b      	movmi	r2, #43	; 0x2b
 8016ab8:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8016abc:	782a      	ldrb	r2, [r5, #0]
 8016abe:	2a2a      	cmp	r2, #42	; 0x2a
 8016ac0:	d015      	beq.n	8016aee <_svfiprintf_r+0xea>
 8016ac2:	9a07      	ldr	r2, [sp, #28]
 8016ac4:	462f      	mov	r7, r5
 8016ac6:	2000      	movs	r0, #0
 8016ac8:	250a      	movs	r5, #10
 8016aca:	4639      	mov	r1, r7
 8016acc:	f811 3b01 	ldrb.w	r3, [r1], #1
 8016ad0:	3b30      	subs	r3, #48	; 0x30
 8016ad2:	2b09      	cmp	r3, #9
 8016ad4:	d94d      	bls.n	8016b72 <_svfiprintf_r+0x16e>
 8016ad6:	b1b8      	cbz	r0, 8016b08 <_svfiprintf_r+0x104>
 8016ad8:	e00f      	b.n	8016afa <_svfiprintf_r+0xf6>
 8016ada:	462f      	mov	r7, r5
 8016adc:	e7b8      	b.n	8016a50 <_svfiprintf_r+0x4c>
 8016ade:	4a40      	ldr	r2, [pc, #256]	; (8016be0 <_svfiprintf_r+0x1dc>)
 8016ae0:	1a80      	subs	r0, r0, r2
 8016ae2:	fa0b f000 	lsl.w	r0, fp, r0
 8016ae6:	4318      	orrs	r0, r3
 8016ae8:	9004      	str	r0, [sp, #16]
 8016aea:	463d      	mov	r5, r7
 8016aec:	e7d3      	b.n	8016a96 <_svfiprintf_r+0x92>
 8016aee:	9a03      	ldr	r2, [sp, #12]
 8016af0:	1d11      	adds	r1, r2, #4
 8016af2:	6812      	ldr	r2, [r2, #0]
 8016af4:	9103      	str	r1, [sp, #12]
 8016af6:	2a00      	cmp	r2, #0
 8016af8:	db01      	blt.n	8016afe <_svfiprintf_r+0xfa>
 8016afa:	9207      	str	r2, [sp, #28]
 8016afc:	e004      	b.n	8016b08 <_svfiprintf_r+0x104>
 8016afe:	4252      	negs	r2, r2
 8016b00:	f043 0302 	orr.w	r3, r3, #2
 8016b04:	9207      	str	r2, [sp, #28]
 8016b06:	9304      	str	r3, [sp, #16]
 8016b08:	783b      	ldrb	r3, [r7, #0]
 8016b0a:	2b2e      	cmp	r3, #46	; 0x2e
 8016b0c:	d10c      	bne.n	8016b28 <_svfiprintf_r+0x124>
 8016b0e:	787b      	ldrb	r3, [r7, #1]
 8016b10:	2b2a      	cmp	r3, #42	; 0x2a
 8016b12:	d133      	bne.n	8016b7c <_svfiprintf_r+0x178>
 8016b14:	9b03      	ldr	r3, [sp, #12]
 8016b16:	1d1a      	adds	r2, r3, #4
 8016b18:	681b      	ldr	r3, [r3, #0]
 8016b1a:	9203      	str	r2, [sp, #12]
 8016b1c:	2b00      	cmp	r3, #0
 8016b1e:	bfb8      	it	lt
 8016b20:	f04f 33ff 	movlt.w	r3, #4294967295
 8016b24:	3702      	adds	r7, #2
 8016b26:	9305      	str	r3, [sp, #20]
 8016b28:	4d2e      	ldr	r5, [pc, #184]	; (8016be4 <_svfiprintf_r+0x1e0>)
 8016b2a:	7839      	ldrb	r1, [r7, #0]
 8016b2c:	2203      	movs	r2, #3
 8016b2e:	4628      	mov	r0, r5
 8016b30:	f7f1 fa8e 	bl	8008050 <memchr>
 8016b34:	b138      	cbz	r0, 8016b46 <_svfiprintf_r+0x142>
 8016b36:	2340      	movs	r3, #64	; 0x40
 8016b38:	1b40      	subs	r0, r0, r5
 8016b3a:	fa03 f000 	lsl.w	r0, r3, r0
 8016b3e:	9b04      	ldr	r3, [sp, #16]
 8016b40:	4303      	orrs	r3, r0
 8016b42:	3701      	adds	r7, #1
 8016b44:	9304      	str	r3, [sp, #16]
 8016b46:	7839      	ldrb	r1, [r7, #0]
 8016b48:	4827      	ldr	r0, [pc, #156]	; (8016be8 <_svfiprintf_r+0x1e4>)
 8016b4a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8016b4e:	2206      	movs	r2, #6
 8016b50:	1c7e      	adds	r6, r7, #1
 8016b52:	f7f1 fa7d 	bl	8008050 <memchr>
 8016b56:	2800      	cmp	r0, #0
 8016b58:	d038      	beq.n	8016bcc <_svfiprintf_r+0x1c8>
 8016b5a:	4b24      	ldr	r3, [pc, #144]	; (8016bec <_svfiprintf_r+0x1e8>)
 8016b5c:	bb13      	cbnz	r3, 8016ba4 <_svfiprintf_r+0x1a0>
 8016b5e:	9b03      	ldr	r3, [sp, #12]
 8016b60:	3307      	adds	r3, #7
 8016b62:	f023 0307 	bic.w	r3, r3, #7
 8016b66:	3308      	adds	r3, #8
 8016b68:	9303      	str	r3, [sp, #12]
 8016b6a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016b6c:	444b      	add	r3, r9
 8016b6e:	9309      	str	r3, [sp, #36]	; 0x24
 8016b70:	e76d      	b.n	8016a4e <_svfiprintf_r+0x4a>
 8016b72:	fb05 3202 	mla	r2, r5, r2, r3
 8016b76:	2001      	movs	r0, #1
 8016b78:	460f      	mov	r7, r1
 8016b7a:	e7a6      	b.n	8016aca <_svfiprintf_r+0xc6>
 8016b7c:	2300      	movs	r3, #0
 8016b7e:	3701      	adds	r7, #1
 8016b80:	9305      	str	r3, [sp, #20]
 8016b82:	4619      	mov	r1, r3
 8016b84:	250a      	movs	r5, #10
 8016b86:	4638      	mov	r0, r7
 8016b88:	f810 2b01 	ldrb.w	r2, [r0], #1
 8016b8c:	3a30      	subs	r2, #48	; 0x30
 8016b8e:	2a09      	cmp	r2, #9
 8016b90:	d903      	bls.n	8016b9a <_svfiprintf_r+0x196>
 8016b92:	2b00      	cmp	r3, #0
 8016b94:	d0c8      	beq.n	8016b28 <_svfiprintf_r+0x124>
 8016b96:	9105      	str	r1, [sp, #20]
 8016b98:	e7c6      	b.n	8016b28 <_svfiprintf_r+0x124>
 8016b9a:	fb05 2101 	mla	r1, r5, r1, r2
 8016b9e:	2301      	movs	r3, #1
 8016ba0:	4607      	mov	r7, r0
 8016ba2:	e7f0      	b.n	8016b86 <_svfiprintf_r+0x182>
 8016ba4:	ab03      	add	r3, sp, #12
 8016ba6:	9300      	str	r3, [sp, #0]
 8016ba8:	4622      	mov	r2, r4
 8016baa:	4b11      	ldr	r3, [pc, #68]	; (8016bf0 <_svfiprintf_r+0x1ec>)
 8016bac:	a904      	add	r1, sp, #16
 8016bae:	4640      	mov	r0, r8
 8016bb0:	f7fb fb64 	bl	801227c <_printf_float>
 8016bb4:	f1b0 3fff 	cmp.w	r0, #4294967295
 8016bb8:	4681      	mov	r9, r0
 8016bba:	d1d6      	bne.n	8016b6a <_svfiprintf_r+0x166>
 8016bbc:	89a3      	ldrh	r3, [r4, #12]
 8016bbe:	065b      	lsls	r3, r3, #25
 8016bc0:	f53f af35 	bmi.w	8016a2e <_svfiprintf_r+0x2a>
 8016bc4:	9809      	ldr	r0, [sp, #36]	; 0x24
 8016bc6:	b01d      	add	sp, #116	; 0x74
 8016bc8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016bcc:	ab03      	add	r3, sp, #12
 8016bce:	9300      	str	r3, [sp, #0]
 8016bd0:	4622      	mov	r2, r4
 8016bd2:	4b07      	ldr	r3, [pc, #28]	; (8016bf0 <_svfiprintf_r+0x1ec>)
 8016bd4:	a904      	add	r1, sp, #16
 8016bd6:	4640      	mov	r0, r8
 8016bd8:	f7fb fe06 	bl	80127e8 <_printf_i>
 8016bdc:	e7ea      	b.n	8016bb4 <_svfiprintf_r+0x1b0>
 8016bde:	bf00      	nop
 8016be0:	080170e0 	.word	0x080170e0
 8016be4:	080170e6 	.word	0x080170e6
 8016be8:	080170ea 	.word	0x080170ea
 8016bec:	0801227d 	.word	0x0801227d
 8016bf0:	0801694f 	.word	0x0801694f

08016bf4 <_putc_r>:
 8016bf4:	b570      	push	{r4, r5, r6, lr}
 8016bf6:	460d      	mov	r5, r1
 8016bf8:	4614      	mov	r4, r2
 8016bfa:	4606      	mov	r6, r0
 8016bfc:	b118      	cbz	r0, 8016c06 <_putc_r+0x12>
 8016bfe:	6983      	ldr	r3, [r0, #24]
 8016c00:	b90b      	cbnz	r3, 8016c06 <_putc_r+0x12>
 8016c02:	f7fa ff7d 	bl	8011b00 <__sinit>
 8016c06:	4b13      	ldr	r3, [pc, #76]	; (8016c54 <_putc_r+0x60>)
 8016c08:	429c      	cmp	r4, r3
 8016c0a:	d112      	bne.n	8016c32 <_putc_r+0x3e>
 8016c0c:	6874      	ldr	r4, [r6, #4]
 8016c0e:	68a3      	ldr	r3, [r4, #8]
 8016c10:	3b01      	subs	r3, #1
 8016c12:	2b00      	cmp	r3, #0
 8016c14:	60a3      	str	r3, [r4, #8]
 8016c16:	da16      	bge.n	8016c46 <_putc_r+0x52>
 8016c18:	69a2      	ldr	r2, [r4, #24]
 8016c1a:	4293      	cmp	r3, r2
 8016c1c:	db02      	blt.n	8016c24 <_putc_r+0x30>
 8016c1e:	b2eb      	uxtb	r3, r5
 8016c20:	2b0a      	cmp	r3, #10
 8016c22:	d110      	bne.n	8016c46 <_putc_r+0x52>
 8016c24:	4622      	mov	r2, r4
 8016c26:	4629      	mov	r1, r5
 8016c28:	4630      	mov	r0, r6
 8016c2a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8016c2e:	f7fd bf85 	b.w	8014b3c <__swbuf_r>
 8016c32:	4b09      	ldr	r3, [pc, #36]	; (8016c58 <_putc_r+0x64>)
 8016c34:	429c      	cmp	r4, r3
 8016c36:	d101      	bne.n	8016c3c <_putc_r+0x48>
 8016c38:	68b4      	ldr	r4, [r6, #8]
 8016c3a:	e7e8      	b.n	8016c0e <_putc_r+0x1a>
 8016c3c:	4b07      	ldr	r3, [pc, #28]	; (8016c5c <_putc_r+0x68>)
 8016c3e:	429c      	cmp	r4, r3
 8016c40:	bf08      	it	eq
 8016c42:	68f4      	ldreq	r4, [r6, #12]
 8016c44:	e7e3      	b.n	8016c0e <_putc_r+0x1a>
 8016c46:	6823      	ldr	r3, [r4, #0]
 8016c48:	1c5a      	adds	r2, r3, #1
 8016c4a:	6022      	str	r2, [r4, #0]
 8016c4c:	701d      	strb	r5, [r3, #0]
 8016c4e:	b2e8      	uxtb	r0, r5
 8016c50:	bd70      	pop	{r4, r5, r6, pc}
 8016c52:	bf00      	nop
 8016c54:	0801709c 	.word	0x0801709c
 8016c58:	080170bc 	.word	0x080170bc
 8016c5c:	0801707c 	.word	0x0801707c

08016c60 <_read_r>:
 8016c60:	b538      	push	{r3, r4, r5, lr}
 8016c62:	4c07      	ldr	r4, [pc, #28]	; (8016c80 <_read_r+0x20>)
 8016c64:	4605      	mov	r5, r0
 8016c66:	4608      	mov	r0, r1
 8016c68:	4611      	mov	r1, r2
 8016c6a:	2200      	movs	r2, #0
 8016c6c:	6022      	str	r2, [r4, #0]
 8016c6e:	461a      	mov	r2, r3
 8016c70:	f7f6 ffda 	bl	800dc28 <_read>
 8016c74:	1c43      	adds	r3, r0, #1
 8016c76:	d102      	bne.n	8016c7e <_read_r+0x1e>
 8016c78:	6823      	ldr	r3, [r4, #0]
 8016c7a:	b103      	cbz	r3, 8016c7e <_read_r+0x1e>
 8016c7c:	602b      	str	r3, [r5, #0]
 8016c7e:	bd38      	pop	{r3, r4, r5, pc}
 8016c80:	20002044 	.word	0x20002044

08016c84 <strncmp>:
 8016c84:	b510      	push	{r4, lr}
 8016c86:	b16a      	cbz	r2, 8016ca4 <strncmp+0x20>
 8016c88:	3901      	subs	r1, #1
 8016c8a:	1884      	adds	r4, r0, r2
 8016c8c:	f810 3b01 	ldrb.w	r3, [r0], #1
 8016c90:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8016c94:	4293      	cmp	r3, r2
 8016c96:	d103      	bne.n	8016ca0 <strncmp+0x1c>
 8016c98:	42a0      	cmp	r0, r4
 8016c9a:	d001      	beq.n	8016ca0 <strncmp+0x1c>
 8016c9c:	2b00      	cmp	r3, #0
 8016c9e:	d1f5      	bne.n	8016c8c <strncmp+0x8>
 8016ca0:	1a98      	subs	r0, r3, r2
 8016ca2:	bd10      	pop	{r4, pc}
 8016ca4:	4610      	mov	r0, r2
 8016ca6:	e7fc      	b.n	8016ca2 <strncmp+0x1e>

08016ca8 <__ascii_wctomb>:
 8016ca8:	b149      	cbz	r1, 8016cbe <__ascii_wctomb+0x16>
 8016caa:	2aff      	cmp	r2, #255	; 0xff
 8016cac:	bf85      	ittet	hi
 8016cae:	238a      	movhi	r3, #138	; 0x8a
 8016cb0:	6003      	strhi	r3, [r0, #0]
 8016cb2:	700a      	strbls	r2, [r1, #0]
 8016cb4:	f04f 30ff 	movhi.w	r0, #4294967295
 8016cb8:	bf98      	it	ls
 8016cba:	2001      	movls	r0, #1
 8016cbc:	4770      	bx	lr
 8016cbe:	4608      	mov	r0, r1
 8016cc0:	4770      	bx	lr

08016cc2 <_malloc_usable_size_r>:
 8016cc2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8016cc6:	1f18      	subs	r0, r3, #4
 8016cc8:	2b00      	cmp	r3, #0
 8016cca:	bfbc      	itt	lt
 8016ccc:	580b      	ldrlt	r3, [r1, r0]
 8016cce:	18c0      	addlt	r0, r0, r3
 8016cd0:	4770      	bx	lr
	...

08016cd4 <_init>:
 8016cd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016cd6:	bf00      	nop
 8016cd8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8016cda:	bc08      	pop	{r3}
 8016cdc:	469e      	mov	lr, r3
 8016cde:	4770      	bx	lr

08016ce0 <_fini>:
 8016ce0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016ce2:	bf00      	nop
 8016ce4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8016ce6:	bc08      	pop	{r3}
 8016ce8:	469e      	mov	lr, r3
 8016cea:	4770      	bx	lr
